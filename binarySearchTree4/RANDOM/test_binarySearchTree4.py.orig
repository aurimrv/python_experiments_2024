# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import binarySearchTree4 as module_0
import builtins as module_1


def test_case_0():
    bst_0 = module_0.Bst()


def test_case_1():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)


def test_case_2():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()


def test_case_3():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None


def test_case_4():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(node_0)


def test_case_5():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()


def test_case_6():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None


def test_case_7():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)


def test_case_8():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()


def test_case_9():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()


def test_case_10():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)


def test_case_11():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_0 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_0.__repr__()
    bst_9 = module_0.Bst()
    node_1 = module_0.Node(bst_9)
    var_8 = bst_9.insert(node_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst()
    node_2 = module_0.Node(bst_11)
    var_11 = bst_11.insert(node_2)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    node_3 = module_0.Node(bst_15)
    bst_16 = module_0.Bst()
    var_14 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_17 = module_0.Bst()
    bst_18 = module_0.Bst()
    var_15 = bst_18.insert(bst_18)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_4 = module_0.Node(var_15)
    var_17 = var_10.__repr__()


def test_case_12():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst(var_1)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_1 = module_0.Node(var_6)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst()
    node_2 = module_0.Node(bst_10)
    var_10 = bst_10.insert(node_2)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_3 = module_0.Node(bst_14)
    var_13 = bst_14.insert(node_3)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()


def test_case_13():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_1 = module_0.Node(var_7)
    bst_8 = module_0.Bst()
    node_2 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_2.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_14 = module_0.Bst(var_12)
    var_15 = var_4.__repr__()


def test_case_14():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_2 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_2.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_13 = module_0.Bst(var_9)
    bst_14 = module_0.Bst()
    var_12 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_15 = module_0.Bst()
    node_3 = module_0.Node(bst_15)
    bst_16 = module_0.Bst()
    var_14 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_17 = module_0.Bst()
    bst_18 = module_0.Bst()
    node_4 = module_0.Node(bst_18)
    var_16 = bst_18.insert(node_4)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_0 = True
    var_17 = bst_11.insert(bool_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_15():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    var_5 = bst_6.insert(node_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_3 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_9 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_4 = module_0.Node(var_9)
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_14 = module_0.Bst()


def test_case_16():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_0 = module_0.Node(bst_0)


def test_case_17():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_0.__repr__()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_2 = module_0.Node(var_8)
    bst_9 = module_0.Bst()
    node_3 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_12 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_14 = module_0.Bst(var_11)
    bst_15 = module_0.Bst()
    node_4 = module_0.Node(bst_15)
    var_14 = bst_15.insert(node_4)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_16 = module_0.Bst()
    var_15 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_17 = module_0.Bst()
    bst_18 = module_0.Bst()
    var_17 = var_2.__repr__()


def test_case_18():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_14 = module_0.Bst(var_10)
    bst_15 = module_0.Bst()
    var_13 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    var_15 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_18 = module_0.Bst()
    node_5 = module_0.Node(bst_14)


def test_case_19():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst(var_6)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_12 = module_0.Bst()
    node_2 = module_0.Node(bst_12)
    var_12 = bst_12.insert(node_2)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    node_3 = module_0.Node(bst_8)


def test_case_20():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst(var_3)
    bst_7 = module_0.Bst()
    node_0 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    node_1 = module_0.Node(bst_8)
    var_6 = bst_8.insert(node_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_2 = module_0.Node(bst_12)
    var_9 = bst_12.insert(node_2)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_10 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_3 = module_0.Node(var_10)
    var_12 = var_5.__repr__()


def test_case_21():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    node_0 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_0.__repr__()
    bst_7 = module_0.Bst()
    node_1 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_2 = module_0.Node(var_9)
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_15 = module_0.Bst()
    node_3 = module_0.Node(bst_15)
    var_14 = bst_15.insert(node_3)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_16 = module_0.Bst()
    node_4 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_15 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_18 = module_0.Bst()


def test_case_22():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst(var_3)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_1 = module_0.Node(bst_9)
    var_8 = bst_9.insert(node_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_2 = module_0.Node(var_10)
    bst_12 = module_0.Bst()
    node_3 = module_0.Node(bst_12)
    var_12 = bst_12.insert(node_3)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    var_15 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_17 = module_0.Bst()
    bst_18 = module_0.Bst()
    node_4 = module_0.Node(bst_18)
    node_5 = module_0.Node(bst_9)


def test_case_23():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_12 = module_0.Bst(var_8)
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_3 = module_0.Node(var_11)
    bst_14 = module_0.Bst()


def test_case_24():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None


def test_case_25():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)


def test_case_26():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst(var_3)
    var_6 = var_4.__repr__()


def test_case_27():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_2.__repr__()


def test_case_28():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    node_0 = module_0.Node(bst_5)
    var_4 = bst_5.insert(node_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst(node_0)


def test_case_29():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    bst_10 = module_0.Bst()
    node_5 = module_0.Node(bst_10)
    int_0 = -1464
    var_10 = bst_10.insert(int_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    node_6 = module_0.Node(bst_13)
    bst_14 = module_0.Bst(bst_5)


def test_case_30():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()


def test_case_31():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    var_5 = node_1.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    int_0 = -1464
    var_8 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    var_9 = bst_9.insert(node_4)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_12 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_5 = module_0.Node(var_12)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_14 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    var_16 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_18 = module_0.Bst(var_15)
    bst_19 = module_0.Bst(var_3)


def test_case_32():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_2 = module_0.Node(bst_8)
    var_7 = bst_8.insert(node_2)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_3 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_3.__repr__()
    var_10 = node_3.__repr__()
    bst_11 = module_0.Bst()
    node_4 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_4.__repr__()
    bst_13 = module_0.Bst()
    node_5 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    var_15 = var_14.__repr__()


def test_case_33():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_0 = module_0.Node(bst_3)
    int_0 = -1464
    var_2 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_1 = module_0.Node(bst_5)
    var_4 = bst_5.insert(node_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_2 = module_0.Node(var_7)
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_3.__repr__()
    var_11 = node_3.__repr__()
    bst_10 = module_0.Bst()


def test_case_34():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst(var_3)
    bst_6 = module_0.Bst()
    node_0 = module_0.Node(bst_6)
    int_0 = -1464
    var_6 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_1 = module_0.Node(bst_10)
    node_2 = module_0.Node(node_0)


def test_case_35():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst(var_3)
    bst_7 = module_0.Bst()
    node_2 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_12 = module_0.Bst()
    node_3 = module_0.Node(bst_12)
    var_11 = bst_12.insert(node_3)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    node_4 = module_0.Node(bst_13)
    int_0 = -1464
    var_12 = bst_13.insert(int_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()


def test_case_36():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst(var_3)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    node_3 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_3.__repr__()
    var_11 = node_3.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    node_4 = module_0.Node(bst_13)
    var_12 = bst_13.insert(node_4)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    node_5 = module_0.Node(bst_17)
    var_15 = bst_17.insert(node_5)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_1.__repr__()


def test_case_37():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_2 = module_0.Node(bst_7)
    int_0 = -1464
    var_6 = bst_7.insert(int_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    var_7 = bst_8.insert(node_3)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_4.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    var_12 = node_6.__repr__()
    node_7 = module_0.Node(int_0)


def test_case_38():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    var_4 = node_1.__repr__()
    bst_3 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    var_5 = bst_3.insert(node_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_39():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_0 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    var_2 = node_2.__repr__()
    node_3 = module_0.Node(var_2)


def test_case_40():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()


def test_case_41():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_2 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst(var_4)
    bst_7 = module_0.Bst()
    node_1 = module_0.Node(bst_7)
    var_7 = bst_7.insert(node_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    var_13 = node_2.__repr__()


def test_case_42():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_0 = module_0.Node(var_5)
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    int_0 = -1464
    var_7 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_0.__repr__()


def test_case_43():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_0 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_0.__repr__()
    var_7 = node_0.__repr__()
    node_1 = module_0.Node(var_6)


def test_case_44():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_4)


def test_case_45():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst(var_3)
    bst_7 = module_0.Bst()
    node_1 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_1.__repr__()
    var_8 = node_1.__repr__()
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_2 = module_0.Node(bst_11)
    var_11 = bst_11.insert(node_2)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()


def test_case_46():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()


def test_case_47():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    var_5 = node_1.__repr__()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_2 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    var_10 = bst_7.insert(node_3)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_13 = bst_3.insert(var_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_48():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    node_0 = module_0.Node(bst_5)
    var_4 = bst_5.insert(node_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()


def test_case_49():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)


def test_case_50():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()


def test_case_51():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = node_2.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_11 = module_0.Bst(var_7)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_15 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_16 = module_0.Bst()
    var_16 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    node_4 = module_0.Node(var_16)
    var_18 = var_17.__repr__()
    bst_17 = module_0.Bst()
    node_5 = module_0.Node(bst_17)
    int_0 = -1464
    var_19 = bst_17.insert(int_0)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_18 = module_0.Bst()


def test_case_52():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()


def test_case_53():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_2 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst(var_4)
    node_1 = module_0.Node(var_6)


def test_case_54():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_0 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_0.__repr__()
    var_8 = node_0.__repr__()
    bst_9 = module_0.Bst()
    node_1 = module_0.Node(bst_9)
    int_0 = -1464
    var_9 = bst_9.insert(int_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(node_1)


def test_case_55():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_1.__repr__()
    var_9 = node_1.__repr__()
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_2 = module_0.Node(var_10)
    node_3 = module_0.Node(var_0)
    var_12 = node_3.__repr__()


def test_case_56():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_4 = module_0.Node(var_7)
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    var_9 = node_3.__repr__()


def test_case_57():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    int_0 = -1464
    var_4 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    var_8 = node_3.__repr__()
    node_4 = module_0.Node(var_7)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    var_9 = bst_7.insert(node_5)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_6.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_0)
    bst_13 = module_0.Bst()


def test_case_58():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    var_4 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    int_0 = -1464
    var_9 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    var_10 = bst_9.insert(node_5)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    var_13 = bst_11.insert(node_6)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_13 = module_0.Bst()
    var_16 = var_14.__repr__()
    node_7 = module_0.Node(bst_6)


def test_case_59():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    var_6 = node_1.__repr__()
    node_2 = module_0.Node(var_5)
    var_7 = var_2.__repr__()


def test_case_60():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_2 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()


def test_case_61():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()


def test_case_62():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_0 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()


def test_case_63():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    var_5 = node_1.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst(var_7)
    bst_11 = module_0.Bst()
    node_2 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()


def test_case_64():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)


def test_case_65():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    var_4 = var_1.__repr__()


def test_case_66():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    var_6 = node_1.__repr__()
    node_2 = module_0.Node(var_5)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_7 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(var_7)


def test_case_67():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_2.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_3.__repr__()
    var_10 = node_3.__repr__()
    node_4 = module_0.Node(var_9)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_5 = module_0.Node(bst_10)
    var_11 = bst_10.insert(node_5)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_5.__repr__()


def test_case_68():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    var_5 = bst_6.insert(node_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    var_8 = node_3.__repr__()
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    var_12 = node_1.__repr__()


def test_case_69():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    var_3 = node_1.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    node_4 = module_0.Node(node_1)


def test_case_70():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst(var_7)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = bst_11.insert(bst_8)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_71():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    node_0 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_0.__repr__()
    var_6 = node_0.__repr__()
    bst_7 = module_0.Bst()
    node_1 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_1.__repr__()
    var_9 = node_1.__repr__()
    node_2 = module_0.Node(var_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_3 = module_0.Node(var_10)
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()
    bst_11 = module_0.Bst()
    node_4 = module_0.Node(bst_11)
    int_0 = -1464
    var_15 = bst_11.insert(int_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_16 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_13 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    node_6 = module_0.Node(bst_10)


def test_case_72():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()


def test_case_73():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_4.__repr__()
    var_11 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_12 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_5.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(var_9)


def test_case_74():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    var_4 = node_3.__repr__()
    node_4 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_5 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst(node_1)


def test_case_75():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()


def test_case_76():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    var_8 = node_3.__repr__()
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_4.__repr__()
    var_14 = node_4.__repr__()
    node_5 = module_0.Node(var_13)
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    var_15 = bst_10.insert(node_6)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_16 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_18 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_15 = module_0.Bst()
    node_7 = module_0.Node(bst_15)
    var_19 = bst_15.insert(node_7)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_16 = module_0.Bst()


def test_case_77():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)


def test_case_78():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    int_0 = -1464
    var_4 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    var_10 = bst_7.insert(node_4)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_5.__repr__()
    var_13 = node_5.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_14 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_12 = module_0.Bst(bst_8)


def test_case_79():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    int_0 = -1464
    var_2 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_3)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_4 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_4.__repr__()
    var_15 = node_4.__repr__()
    bst_12 = module_0.Bst()
    var_16 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_18 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    var_20 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_21 = var_20.__repr__()
    bst_18 = module_0.Bst(var_19)
    bst_19 = module_0.Bst()


def test_case_80():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    int_0 = -1464
    var_2 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_9 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    var_8 = bst_11.insert(node_6)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_9 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_10 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_7 = module_0.Node(var_10)
    var_12 = var_11.__repr__()
    var_13 = bst_9.insert(var_7)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_81():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    node_0 = module_0.Node(bst_5)
    int_0 = -1464
    var_4 = bst_5.insert(int_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_2.__repr__()


def test_case_82():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_3 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    int_0 = -1464
    var_8 = bst_9.insert(int_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_5 = module_0.Node(var_11)
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_15 = module_0.Bst()
    var_14 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_6 = module_0.Node(var_14)
    var_16 = var_15.__repr__()
    bst_16 = module_0.Bst(var_1)


def test_case_83():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_0 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_0.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()


def test_case_84():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()


def test_case_85():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    int_0 = -1464
    var_3 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(bst_4)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst(var_7)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_5 = module_0.Node(var_10)
    bst_12 = module_0.Bst()
    node_6 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_12 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_6.__repr__()
    var_14 = node_6.__repr__()
    node_7 = module_0.Node(var_13)
    var_15 = var_10.__repr__()


def test_case_86():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_2.__repr__()
    var_8 = node_2.__repr__()
    bst_8 = module_0.Bst()


def test_case_87():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)


def test_case_88():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    int_0 = -1464
    var_3 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    var_6 = node_3.__repr__()
    node_4 = module_0.Node(var_5)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_6 = module_0.Node(var_8)
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_7.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_8 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_15 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_8.__repr__()
    bst_14 = module_0.Bst()
    node_9 = module_0.Node(bst_14)
    var_17 = bst_14.insert(node_9)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(none_type_0)


def test_case_89():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    node_0 = module_0.Node(bst_3)
    int_0 = -1464
    var_5 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_2)
    var_6 = var_1.__repr__()


def test_case_90():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_3 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_1 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_1.__repr__()
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    bst_9 = module_0.Bst()
    node_2 = module_0.Node(bst_9)
    int_0 = -1464
    var_12 = bst_9.insert(int_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_9)
    bst_10 = module_0.Bst()
    node_4 = module_0.Node(bst_10)
    var_13 = bst_10.insert(node_4)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_14 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_12 = module_0.Bst()
    var_16 = var_14.__repr__()
    bst_13 = module_0.Bst()
    node_5 = module_0.Node(bst_13)
    node_6 = module_0.Node(bst_7)


def test_case_91():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_5 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    var_8 = var_6.__repr__()
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_7.__repr__()


def test_case_92():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst(var_4)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_0 = module_0.Node(var_7)
    bst_7 = module_0.Bst()
    node_1 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_1.__repr__()
    var_11 = node_1.__repr__()
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_2 = module_0.Node(bst_11)
    var_14 = bst_11.insert(node_2)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    node_3 = module_0.Node(bst_12)
    var_15 = bst_12.insert(node_3)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_16 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    node_4 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_18 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = node_4.__repr__()
    bst_18 = module_0.Bst()
    bst_19 = module_0.Bst()
    var_20 = bst_19.insert(bst_19)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_20 = module_0.Bst()
    var_21 = bst_20.insert(bst_20)
    assert (
        f"{type(bst_20.root).__module__}.{type(bst_20.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_22 = var_21.__repr__()
    node_5 = module_0.Node(var_21)
    var_23 = var_22.__repr__()
    bst_21 = module_0.Bst()
    node_6 = module_0.Node(bst_21)
    bst_22 = module_0.Bst()
    var_24 = bst_22.insert(bst_22)
    assert (
        f"{type(bst_22.root).__module__}.{type(bst_22.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_25 = node_6.__repr__()
    var_26 = node_6.__repr__()
    node_7 = module_0.Node(var_25)
    var_27 = var_6.__repr__()


def test_case_93():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    int_0 = -1464
    var_8 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    var_9 = bst_7.insert(node_4)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_9 = module_0.Bst()
    var_12 = var_10.__repr__()
    bst_10 = module_0.Bst()
    node_5 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_5.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_15 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_16 = module_0.Bst(var_16)
    bst_17 = module_0.Bst()
    node_6 = module_0.Node(bst_17)
    int_1 = -1464
    var_19 = bst_17.insert(int_1)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_18 = module_0.Bst()
    var_20 = bst_18.insert(bst_18)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_19 = module_0.Bst()


def test_case_94():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_0.__repr__()
    var_4 = node_0.__repr__()
    node_1 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_2.__repr__()
    var_7 = node_2.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_3.__repr__()
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_5 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    var_15 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    node_6 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_17 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = node_6.__repr__()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    var_19 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = var_19.__repr__()
    node_7 = module_0.Node(var_19)
    node_8 = module_0.Node(var_5)


def test_case_95():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    var_8 = node_4.__repr__()
    node_5 = module_0.Node(var_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    int_1 = -1464
    var_12 = bst_9.insert(int_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_9)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_15 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_14 = module_0.Bst(var_14)
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    node_8 = module_0.Node(bst_17)
    var_19 = bst_17.insert(node_8)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_18 = module_0.Bst()
    var_20 = bst_18.insert(bst_18)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_21 = var_20.__repr__()
    bst_19 = module_0.Bst()
    var_22 = var_20.__repr__()
    var_23 = var_13.__repr__()


def test_case_96():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_0 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst(var_1)


def test_case_97():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    var_5 = node_4.__repr__()
    node_5 = module_0.Node(var_4)
    bst_6 = module_0.Bst(bst_2)


def test_case_98():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = var_3.__repr__()
    node_1 = module_0.Node(var_3)


def test_case_99():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    var_4 = node_0.__repr__()


def test_case_100():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_2.__repr__()
    var_9 = node_2.__repr__()
    node_3 = module_0.Node(var_8)
    bst_5 = module_0.Bst()
    var_10 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_11 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_4 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_14 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    int_1 = -1464
    var_16 = bst_9.insert(int_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_8)
    var_17 = node_8.__repr__()


def test_case_101():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None


def test_case_102():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()


def test_case_103():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)


def test_case_104():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None


def test_case_105():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst(var_5)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_1 = module_0.Node(var_9)
    var_11 = var_10.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_3 = module_0.Node(var_13)
    var_15 = var_14.__repr__()
    bst_14 = module_0.Bst()
    node_4 = module_0.Node(bst_11)


def test_case_106():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    int_0 = -1464
    var_7 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    var_8 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_9 = module_0.Bst(var_10)
    bst_10 = module_0.Bst()
    node_4 = module_0.Node(bst_10)
    int_1 = -1464
    var_13 = bst_10.insert(int_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_5 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_5.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_16 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_15 = module_0.Bst()
    var_18 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    var_20 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_21 = var_20.__repr__()
    node_6 = module_0.Node(var_20)
    var_22 = var_11.__repr__()


def test_case_107():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    int_0 = -1464
    var_4 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    var_6 = node_4.__repr__()


def test_case_108():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    node_2 = module_0.Node(bst_8)
    int_0 = -1464
    var_11 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_8)
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    var_12 = bst_9.insert(node_4)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_15 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    var_17 = var_16.__repr__()
    bst_14 = module_0.Bst()
    node_5 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    node_6 = module_0.Node(bst_16)
    int_1 = -1464
    var_18 = bst_16.insert(int_1)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(bst_13)


def test_case_109():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    int_0 = -1464
    var_11 = bst_10.insert(int_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_8.__repr__()
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(bst_5)


def test_case_110():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    int_0 = -1464
    var_9 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_6)
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_4 = module_0.Node(var_10)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_13 = module_0.Bst(var_13)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    bst_14 = module_0.Bst(bst_13)


def test_case_111():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst(var_1)
    bst_6 = module_0.Bst()
    node_1 = module_0.Node(bst_6)
    var_4 = bst_6.insert(node_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_9 = module_0.Bst()
    node_2 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_2.__repr__()
    var_10 = node_2.__repr__()
    node_3 = module_0.Node(var_9)
    bst_11 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_5 = module_0.Node(bst_12)
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    var_15 = var_14.__repr__()
    bst_15 = module_0.Bst()
    var_16 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_16 = module_0.Bst()


def test_case_112():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()


def test_case_113():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_4 = node_2.__repr__()


def test_case_114():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    int_0 = -1464
    var_8 = bst_5.insert(int_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_5.__repr__()
    bst_9 = module_0.Bst()


def test_case_115():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    var_8 = var_6.__repr__()
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_3 = module_0.Node(var_9)
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    int_0 = -1464
    var_11 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_12 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    var_15 = var_14.__repr__()
    bst_13 = module_0.Bst()
    node_7 = module_0.Node(bst_13)
    int_1 = -1464
    var_16 = bst_13.insert(int_1)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_13)
    var_17 = var_16.__repr__()


def test_case_116():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()


def test_case_117():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    int_0 = -1464
    var_6 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_3 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_5 = module_0.Node(var_10)
    var_12 = var_11.__repr__()
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    int_1 = -1464
    var_13 = bst_10.insert(int_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_14 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_15 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_7.__repr__()
    var_17 = node_7.__repr__()
    node_8 = module_0.Node(var_16)
    bst_14 = module_0.Bst()
    node_9 = module_0.Node(bst_14)
    var_18 = bst_14.insert(node_9)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_15 = module_0.Bst()
    var_19 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = var_19.__repr__()
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    bst_18 = module_0.Bst()


def test_case_118():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_0.__repr__()


def test_case_119():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_0 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_7 = var_5.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    var_8 = bst_6.insert(node_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_11 = module_0.Bst()
    node_4 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_4.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_5 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_13 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_5.__repr__()
    var_15 = node_5.__repr__()
    bst_16 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_16 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_17 = module_0.Bst()
    node_7 = module_0.Node(bst_17)
    int_0 = -1464
    var_17 = bst_17.insert(int_0)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = node_6.__repr__()


def test_case_120():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    int_0 = -1464
    var_5 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_5 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    str_1 = "7"
    node_6 = module_0.Node(str_1)
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_7.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_9 = module_0.Node(bst_11)
    bst_13 = module_0.Bst()
    node_10 = module_0.Node(bst_13)
    var_15 = bst_13.insert(node_10)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_6.__repr__()


def test_case_121():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    int_0 = -1464
    var_1 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_4 = module_0.Node(var_9)
    var_11 = var_10.__repr__()
    str_1 = "7"
    node_5 = module_0.Node(str_1)
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_14 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    var_16 = var_15.__repr__()
    bst_14 = module_0.Bst()
    node_7 = module_0.Node(bst_14)
    int_1 = -1464
    var_17 = bst_14.insert(int_1)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_14)
    var_18 = node_5.__repr__()


def test_case_122():
    str_0 = ""
    bst_0 = module_0.Bst(str_0)


def test_case_123():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_5 = module_0.Node(var_6)
    bst_9 = module_0.Bst()


def test_case_124():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)


def test_case_125():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    int_0 = -1464
    var_5 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_6 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_5)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = var_1.__repr__()


def test_case_126():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_3)
    var_5 = node_0.__repr__()


def test_case_127():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)


def test_case_128():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    node_2 = module_0.Node(bst_0)


def test_case_129():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_0 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    int_0 = -1464
    var_5 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    var_6 = bst_5.insert(node_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_3.__repr__()
    var_9 = node_3.__repr__()
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    int_1 = -1464
    var_13 = bst_9.insert(int_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_10)
    str_0 = ""
    bst_10 = module_0.Bst(str_0)
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_6.__repr__()
    bst_13 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    bst_14 = module_0.Bst(bst_13)


def test_case_130():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)


def test_case_131():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_1)


def test_case_132():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    node_3 = module_0.Node(var_3)


def test_case_133():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    var_10 = node_0.__repr__()


def test_case_134():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    int_0 = -1464
    var_1 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_4 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    node_5 = module_0.Node(var_4)


def test_case_135():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_0 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_1 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_3 = module_0.Node(bst_4)
    var_3 = node_1.__repr__()


def test_case_136():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)


def test_case_137():
    str_0 = ""
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_0 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_2 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_3 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    var_5 = node_5.__repr__()
    node_6 = module_0.Node(var_4)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_6 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(bst_5)


def test_case_138():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_2 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(var_2)


def test_case_139():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    var_4 = var_2.__repr__()
    var_5 = var_2.__repr__()


def test_case_140():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    int_0 = -1464
    var_3 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    var_6 = node_3.__repr__()
    var_7 = bst_3.insert(bst_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()


def test_case_141():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)


def test_case_142():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()


def test_case_143():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    var_8 = node_3.__repr__()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_6.__repr__()
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    var_16 = var_15.__repr__()
    bst_13 = module_0.Bst()
    node_7 = module_0.Node(bst_13)
    int_0 = -1464
    var_17 = bst_13.insert(int_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_14)
    bst_14 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_10 = module_0.Node(set_0)
    var_18 = node_1.__repr__()


def test_case_144():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    var_6 = node_2.__repr__()
    node_3 = module_0.Node(var_5)
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_4 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_5 = module_0.Node(var_10)
    var_12 = var_11.__repr__()
    str_1 = "7"
    node_6 = module_0.Node(str_1)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_8.__repr__()
    bst_13 = module_0.Bst()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_2)
    var_15 = var_12.__repr__()


def test_case_145():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)


def test_case_146():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_2 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_6 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(var_7)
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    var_9 = node_8.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_0 = []
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(list_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_11)
    node_11 = module_0.Node(bst_9)


def test_case_147():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(bst_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(bst_6)
    str_1 = ""
    bst_7 = module_0.Bst(str_1)
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()


def test_case_148():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)


def test_case_149():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)


def test_case_150():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()


def test_case_151():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()


def test_case_152():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_2 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()


def test_case_153():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst(node_0)


def test_case_154():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = False
    var_5 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_11 = module_0.Bst(var_7)
    bst_12 = module_0.Bst()
    node_5 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_10 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_5.__repr__()
    bst_14 = module_0.Bst()
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    bst_15 = module_0.Bst()
    node_7 = module_0.Node(bst_15)
    bst_16 = module_0.Bst()
    var_12 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_7.__repr__()
    bst_17 = module_0.Bst()
    node_8 = module_0.Node(var_12)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_0)
    var_14 = var_13.__repr__()


def test_case_155():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    bst_6 = module_0.Bst()


def test_case_156():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(var_2)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_7 = module_0.Node(var_9)
    var_11 = var_10.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_15 = module_0.Bst(var_13)
    bst_16 = module_0.Bst()
    var_16 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    var_18 = var_17.__repr__()
    var_19 = bst_7.insert(var_10)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_157():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_2 = module_0.Node(var_5)
    var_7 = var_6.__repr__()
    str_0 = "7"
    node_3 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_8 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(bst_6)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    var_9 = bst_7.insert(node_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    var_12 = bst_11.insert(node_8)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_9.__repr__()
    bst_15 = module_0.Bst()
    node_10 = module_0.Node(var_14)
    bst_16 = module_0.Bst()


def test_case_158():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_4 = module_0.Node(var_4)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_5 = module_0.Node(bst_7)
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    var_8 = bst_9.insert(node_6)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_7)
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(bst_12)
    var_11 = bst_12.insert(node_9)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_12 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    node_10 = module_0.Node(bst_16)
    var_14 = bst_16.insert(node_10)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_17 = module_0.Bst()
    node_11 = module_0.Node(node_3)


def test_case_159():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    str_0 = ""
    bst_3 = module_0.Bst(str_0)
    node_2 = module_0.Node(bst_2)


def test_case_160():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    list_0 = []
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_5.__repr__()
    var_11 = node_5.__repr__()
    node_6 = module_0.Node(var_10)
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_7.__repr__()
    bst_12 = module_0.Bst()
    node_8 = module_0.Node(var_12)
    var_14 = node_3.__repr__()


def test_case_161():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_1 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_2 = module_0.Node(bst_8)
    var_7 = bst_8.insert(node_2)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_6)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_4 = module_0.Node(var_8)
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = node_5.__repr__()


def test_case_162():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_5 = module_0.Node(var_9)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_12 = module_0.Bst(var_12)
    bst_13 = module_0.Bst()
    var_15 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_6 = module_0.Node(var_16)
    bst_14 = module_0.Bst()
    var_17 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_15 = module_0.Bst()
    var_18 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    node_7 = module_0.Node(var_18)
    var_20 = var_19.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_8 = module_0.Node(set_0)
    bst_16 = module_0.Bst()
    node_9 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_21 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_22 = node_9.__repr__()
    bst_18 = module_0.Bst()
    node_10 = module_0.Node(var_21)
    var_23 = var_22.__repr__()


def test_case_163():
    int_0 = 3317
    node_0 = module_0.Node(int_0)


def test_case_164():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    int_0 = -1464
    var_2 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(bst_4)
    list_0 = []
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_4 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    str_0 = "7"
    node_5 = module_0.Node(str_0)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_7 = module_0.Node(var_12)
    var_14 = var_13.__repr__()
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_8 = module_0.Node(var_16)
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst(var_0)


def test_case_165():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()


def test_case_166():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    var_3 = bst_5.insert(node_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    var_7 = bst_8.insert(node_3)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_4 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    node_5 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_5.__repr__()
    var_12 = node_5.__repr__()
    var_13 = var_7.__repr__()


def test_case_167():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_2 = node_0.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_1 = module_0.Node(set_1)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_5 = node_3.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_6 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    var_9 = bst_8.insert(node_7)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_12 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_8 = module_0.Node(bst_12)
    bst_14 = module_0.Bst()
    node_9 = module_0.Node(bst_14)
    var_14 = bst_14.insert(node_9)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_13)
    bst_15 = module_0.Bst()
    var_15 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_16 = module_0.Bst()
    var_16 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    node_11 = module_0.Node(var_16)
    var_18 = var_17.__repr__()
    var_19 = node_11.__repr__()


def test_case_168():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_1)
    node_4 = module_0.Node(node_3)


def test_case_169():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    int_0 = -1464
    var_5 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    var_12 = bst_11.insert(node_7)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_13 = module_0.Bst()
    var_15 = var_13.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_8 = module_0.Node(set_0)
    var_16 = node_8.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_16 = module_0.Bst()
    node_9 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_19 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = node_9.__repr__()
    var_21 = node_9.__repr__()
    node_10 = module_0.Node(var_20)
    var_22 = var_8.__repr__()


def test_case_170():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(var_2)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    var_6 = bst_8.insert(node_4)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_7 = node_6.__repr__()
    str_1 = ""
    bst_9 = module_0.Bst(str_1)
    node_7 = module_0.Node(var_0)


def test_case_171():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_0 = []
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    node_3 = module_0.Node(list_0)
    var_4 = node_3.__repr__()


def test_case_172():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(var_2)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()


def test_case_173():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_4 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    var_7 = bst_8.insert(node_6)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_12 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    var_14 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_17 = module_0.Bst(var_13)
    node_7 = module_0.Node(var_11)


def test_case_174():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = node_2.__repr__()
    node_3 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_4 = module_0.Node(var_6)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(var_10)
    bst_11 = module_0.Bst()
    none_type_0 = None
    node_9 = module_0.Node(none_type_0)
    bool_0 = False
    var_12 = bst_11.insert(bool_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()


def test_case_175():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_6 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_7 = module_0.Node(var_11)
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(set_0)


def test_case_176():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(var_3)
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(var_2)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_177():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(var_3)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    int_0 = -1464
    var_5 = bst_7.insert(int_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_7 = module_0.Node(var_10)
    var_12 = var_11.__repr__()
    str_1 = "7"
    node_8 = module_0.Node(str_1)
    var_13 = node_1.__repr__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__repr__()


def test_case_178():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)


def test_case_179():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_4 = node_3.__repr__()
    bst_5 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_4 = module_0.Node(set_1)
    var_5 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(var_6)
    bst_9 = module_0.Bst()


def test_case_180():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(var_5)
    var_7 = var_6.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_8 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_5.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    var_11 = bst_8.insert(node_6)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_10 = module_0.Bst()
    var_14 = var_12.__repr__()
    var_15 = var_11.__repr__()


def test_case_181():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()


def test_case_182():
    bool_0 = False
    node_0 = module_0.Node(bool_0)


def test_case_183():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    str_1 = ""
    bst_3 = module_0.Bst(str_1)
    node_2 = module_0.Node(bst_3)


def test_case_184():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_4 = node_5.__repr__()
    bst_7 = module_0.Bst(var_4)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_7 = module_0.Node(set_1)
    var_5 = node_7.__repr__()
    bst_8 = module_0.Bst()


def test_case_185():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    int_0 = -1464
    var_3 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    var_4 = bst_7.insert(node_3)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_9 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_10 = module_0.Bst(node_2)


def test_case_186():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    str_1 = ""
    bst_3 = module_0.Bst(str_1)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    int_1 = -1464
    var_8 = bst_5.insert(int_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    var_9 = node_0.__repr__()


def test_case_187():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)


def test_case_188():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    int_0 = -1464
    var_6 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_7 = module_0.Node(var_7)
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(var_9)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_10 = module_0.Node(var_12)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_11 = module_0.Node(set_0)
    var_13 = node_11.__repr__()
    bst_13 = module_0.Bst(var_13)
    var_14 = var_6.__repr__()


def test_case_189():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()


def test_case_190():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_5 = node_3.__repr__()
    str_1 = ""
    bst_6 = module_0.Bst(str_1)
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_4)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    var_9 = var_7.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_5 = module_0.Node(set_1)
    var_10 = node_5.__repr__()
    bst_10 = module_0.Bst(var_10)
    bst_11 = module_0.Bst()


def test_case_191():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_6 = module_0.Bst()
    var_4 = var_2.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_5 = node_4.__repr__()
    bst_7 = module_0.Bst(var_5)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    var_9 = node_5.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_6 = module_0.Node(bst_11)
    bst_13 = module_0.Bst()
    node_7 = module_0.Node(bst_13)
    var_12 = bst_13.insert(node_7)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_11)
    bst_14 = module_0.Bst()


def test_case_192():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    var_6 = node_4.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    bst_7 = module_0.Bst()
    var_9 = node_0.__repr__()


def test_case_193():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_3 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    str_0 = "7"
    node_4 = module_0.Node(str_0)
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    int_0 = -1464
    var_13 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_10)
    bst_9 = module_0.Bst(var_1)


def test_case_194():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst(var_2)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_1 = module_0.Node(set_1)
    var_6 = node_1.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()


def test_case_195():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_8 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    str_0 = ""
    bst_10 = module_0.Bst(str_0)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_4 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    str_1 = "7"
    node_5 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_6 = module_0.Node(set_0)
    var_14 = node_6.__repr__()
    bst_13 = module_0.Bst()
    node_7 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_15 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_7.__repr__()
    bst_15 = module_0.Bst()
    node_8 = module_0.Node(var_15)
    bst_16 = module_0.Bst()
    node_9 = module_0.Node(bst_16)
    int_0 = -1464
    var_17 = bst_16.insert(int_0)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(set_0)
    node_11 = module_0.Node(node_10)


def test_case_196():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_0.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_5 = var_0.__repr__()


def test_case_197():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_0 = module_0.Node(var_3)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_2 = module_0.Node(var_5)
    var_7 = var_6.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_8 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    int_0 = -1464
    var_9 = bst_5.insert(int_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_10 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_7 = module_0.Node(bst_7)
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    var_13 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_7.__repr__()


def test_case_198():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    int_0 = -1464
    var_6 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()


def test_case_199():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()


def test_case_200():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_2 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    int_0 = -1464
    var_1 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    var_2 = node_4.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    int_1 = -1464
    var_6 = bst_4.insert(int_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_6)


def test_case_201():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_1 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    var_4 = var_2.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_5 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_6 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(var_7)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_7 = module_0.Node(bst_10)
    bst_12 = module_0.Bst()
    node_8 = module_0.Node(bst_12)
    var_11 = bst_12.insert(node_8)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_10)
    bst_13 = module_0.Bst()
    node_10 = module_0.Node(bst_13)
    int_0 = -1464
    var_12 = bst_13.insert(int_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_11 = module_0.Node(set_1)
    var_13 = node_11.__repr__()
    bst_14 = module_0.Bst(var_13)
    node_12 = module_0.Node(var_7)


def test_case_202():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    var_4 = node_1.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_4 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    var_7 = bst_7.insert(node_5)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_6)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_7.__repr__()
    bst_11 = module_0.Bst()
    var_12 = var_10.__repr__()
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_13)
    bst_13 = module_0.Bst()
    node_10 = module_0.Node(bst_13)
    var_14 = bst_13.insert(node_10)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    var_15 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_15 = module_0.Bst()
    var_17 = var_15.__repr__()
    list_0 = []
    bst_16 = module_0.Bst()
    var_18 = bst_16.insert(list_0)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_18)
    node_12 = module_0.Node(bst_2)


def test_case_203():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()


def test_case_204():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_2 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst(var_8)
    bst_9 = module_0.Bst()
    node_3 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_3.__repr__()
    bst_11 = module_0.Bst()
    node_4 = module_0.Node(var_11)
    bst_12 = module_0.Bst()
    node_5 = module_0.Node(bst_12)
    var_13 = bst_12.insert(node_5)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_14 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_14 = module_0.Bst()
    var_16 = var_14.__repr__()
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    var_19 = var_18.__repr__()
    bst_16 = module_0.Bst()
    node_6 = module_0.Node(bst_16)
    int_0 = -1464
    var_20 = bst_16.insert(int_0)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_17)
    node_8 = module_0.Node(var_3)


def test_case_205():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    var_2 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_6.__repr__()
    bst_7 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_12 = module_0.Bst(var_8)
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_2)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_206():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    int_0 = -1464
    var_0 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_4 = module_0.Node(bst_2)
    node_5 = module_0.Node(var_1)


def test_case_207():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    int_0 = -1464
    var_4 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    node_3 = module_0.Node(var_4)


def test_case_208():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_3 = node_2.__repr__()
    node_3 = module_0.Node(node_2)


def test_case_209():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(bst_0)


def test_case_210():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    bst_7 = module_0.Bst()
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    bool_1 = False
    var_5 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    var_10 = node_2.__repr__()


def test_case_211():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_2 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    var_9 = bst_6.insert(node_3)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_8)
    str_0 = ""
    bst_7 = module_0.Bst(str_0)
    bst_8 = module_0.Bst()


def test_case_212():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_5 = module_0.Bst()


def test_case_213():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_3 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_4 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    str_1 = "7"
    node_5 = module_0.Node(str_1)
    node_6 = module_0.Node(str_1)


def test_case_214():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()


def test_case_215():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    list_0 = []
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    bst_9 = module_0.Bst()
    var_8 = var_6.__repr__()
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_6 = module_0.Node(var_12)
    bst_12 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_0)
    node_9 = module_0.Node(node_3)


def test_case_216():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst(var_2)
    node_2 = module_0.Node(bst_0)


def test_case_217():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(var_2)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)


def test_case_218():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    str_0 = ""
    bst_2 = module_0.Bst(str_0)
    list_0 = [node_1, str_0, int_0, node_0]
    tuple_0 = (list_0,)
    node_2 = module_0.Node(tuple_0)


def test_case_219():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    var_5 = node_3.__repr__()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_4 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    str_0 = "7"
    node_5 = module_0.Node(str_0)
    str_1 = ""
    bst_8 = module_0.Bst(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_6 = module_0.Node(set_0)
    var_10 = node_6.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    var_11 = bst_9.insert(node_7)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_11 = module_0.Bst()
    var_14 = var_12.__repr__()
    var_15 = bst_11.insert(var_12)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_220():
    str_0 = ""
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_1)
    list_0 = []
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    var_6 = node_3.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(var_7)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    int_0 = -1464
    var_12 = bst_11.insert(int_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_9)
    node_8 = module_0.Node(none_type_0)


def test_case_221():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_1 = "7"
    node_2 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_4)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_5)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    var_9 = var_7.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_6 = module_0.Node(bst_7)
    bst_9 = module_0.Bst()


def test_case_222():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    var_1 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_5 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    var_6 = bst_8.insert(node_6)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_5)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bst_11 = module_0.Bst()


def test_case_223():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_5 = node_3.__repr__()
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    list_0 = []
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(list_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_6)
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    var_9 = node_6.__repr__()
    var_10 = bst_6.insert(var_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_224():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_5 = node_3.__repr__()
    bst_6 = module_0.Bst()
    var_6 = var_0.__repr__()


def test_case_225():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)


def test_case_226():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    int_0 = -1464
    var_8 = bst_5.insert(int_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_4 = module_0.Node(var_10)
    var_12 = var_11.__repr__()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_13 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_13)
    bst_9 = module_0.Bst()


def test_case_227():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == []
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_3 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_4 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    var_6 = node_5.__repr__()
    node_6 = module_0.Node(var_5)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_7 = module_0.Node(set_1)
    var_7 = node_7.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_8 = module_0.Node(set_2)
    var_8 = node_8.__repr__()
    bst_5 = module_0.Bst()
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_3 = {str_3}
    node_9 = module_0.Node(set_3)
    bst_6 = module_0.Bst()
    node_10 = module_0.Node(bst_6)
    int_0 = -1464
    var_9 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_11 = module_0.Bst(var_11)
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_14)
    node_13 = module_0.Node(var_2)


def test_case_228():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_6)
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    var_7 = node_4.__repr__()


def test_case_229():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_6 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_3.__repr__()
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_4 = module_0.Node(var_13)
    var_15 = var_14.__repr__()
    bst_14 = module_0.Bst()
    var_16 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    var_18 = var_17.__repr__()
    bst_15 = module_0.Bst()
    node_5 = module_0.Node(bst_15)
    int_0 = -1464
    var_19 = bst_15.insert(int_0)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_16)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_7 = module_0.Node(set_0)
    var_20 = node_7.__repr__()
    bst_16 = module_0.Bst(var_20)
    bst_17 = module_0.Bst()


def test_case_230():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    node_2 = module_0.Node(var_1)


def test_case_231():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_5 = node_4.__repr__()
    bst_5 = module_0.Bst(var_5)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    bst_9 = module_0.Bst()
    var_9 = var_7.__repr__()
    list_0 = []
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(list_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_10)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_1)
    node_10 = module_0.Node(none_type_0)


def test_case_232():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_1 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_2 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    var_4 = node_1.__repr__()
    node_2 = module_0.Node(var_3)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_9 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_13 = module_0.Bst(var_8)
    var_11 = var_7.__repr__()


def test_case_233():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bytes_0 = b"5\xa1\x7f\xb8T\x80j!j\xfc\xfe"
    node_1 = module_0.Node(bytes_0)


def test_case_234():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_3 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    str_1 = "7"
    node_4 = module_0.Node(str_1)
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_13 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_3}
    node_8 = module_0.Node(set_1)
    node_9 = module_0.Node(bst_3)


def test_case_235():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    list_0 = []
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_4)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_2.__repr__()
    var_7 = node_2.__repr__()
    node_3 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    int_0 = -1464
    var_8 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_9 = node_5.__repr__()
    bst_7 = module_0.Bst(var_9)
    bst_8 = module_0.Bst()


def test_case_236():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()


def test_case_237():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    bst_5 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_2 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_9 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_11 = node_4.__repr__()
    bst_9 = module_0.Bst(var_11)
    bst_10 = module_0.Bst()
    node_5 = module_0.Node(bst_10)
    int_0 = -1464
    var_12 = bst_10.insert(int_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    node_7 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_7.__repr__()
    var_15 = node_7.__repr__()
    node_8 = module_0.Node(var_14)
    bst_15 = module_0.Bst(var_9)


def test_case_238():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_5 = node_2.__repr__()
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_5 = module_0.Bst()
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()


def test_case_239():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(node_2)
    list_0 = []
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    var_4 = node_0.__repr__()


def test_case_240():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_2 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_3)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_5 = module_0.Node(var_8)
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    var_11 = node_6.__repr__()
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_7 = module_0.Node(var_12)
    bst_12 = module_0.Bst(var_2)


def test_case_241():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_4 = node_1.__repr__()
    bst_2 = module_0.Bst(var_4)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_2 = module_0.Node(var_6)
    var_8 = var_7.__repr__()
    str_1 = "7"
    node_3 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_4 = module_0.Node(set_1)
    var_9 = node_4.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(var_10)
    bst_8 = module_0.Bst()
    var_12 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_14 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_7.__repr__()
    var_16 = node_7.__repr__()
    node_8 = module_0.Node(bst_11)


def test_case_242():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_6 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_9 = node_5.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_6 = module_0.Node(bst_10)
    bst_12 = module_0.Bst(var_1)


def test_case_243():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_7 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    str_1 = ""
    bst_10 = module_0.Bst(str_1)
    bst_11 = module_0.Bst()
    node_4 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_4.__repr__()
    var_14 = node_4.__repr__()
    node_5 = module_0.Node(var_10)


def test_case_244():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_2)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    int_0 = -1464
    var_7 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_4)
    var_8 = bst_2.insert(var_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_245():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_6 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_7 = module_0.Bst()
    node_2 = module_0.Node(var_4)


def test_case_246():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    list_0 = []
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_2)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_3 = node_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_7 = node_6.__repr__()
    str_1 = ""
    bst_10 = module_0.Bst(str_1)
    node_7 = module_0.Node(bst_6)


def test_case_247():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_4 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst(var_7)
    str_1 = ""
    bst_10 = module_0.Bst(str_1)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_2 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_10 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_2.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_4 = module_0.Node(set_1)
    node_5 = module_0.Node(var_10)


def test_case_248():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    node_3 = module_0.Node(var_2)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_4 = module_0.Node(set_1)
    var_3 = node_4.__repr__()
    bst_2 = module_0.Bst(var_3)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_5 = module_0.Node(bst_3)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_8 = module_0.Node(set_2)
    var_6 = node_8.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    var_7 = bst_7.insert(node_9)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()
    var_10 = var_8.__repr__()
    bst_10 = module_0.Bst()


def test_case_249():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    int_0 = -1464
    var_6 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_9 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(bst_5)
    var_10 = var_5.__repr__()


def test_case_250():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    list_0 = []
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst(list_0)


def test_case_251():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    int_0 = -1464
    var_4 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_5 = node_2.__repr__()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst(bst_1)


def test_case_252():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_5 = module_0.Bst()
    var_4 = var_2.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    var_5 = bst_6.insert(node_3)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_4 = module_0.Node(bst_10)
    int_0 = -1464
    var_8 = bst_10.insert(int_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_9)
    str_0 = ""
    bst_12 = module_0.Bst(str_0)
    int_1 = 3317
    node_7 = module_0.Node(int_1)
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_10 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    var_12 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_17 = module_0.Bst(var_11)
    bst_18 = module_0.Bst()
    node_8 = module_0.Node(bst_18)
    bst_19 = module_0.Bst()
    var_14 = bst_19.insert(bst_19)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_8.__repr__()
    bst_20 = module_0.Bst()
    node_9 = module_0.Node(bst_19)
    bst_21 = module_0.Bst()
    var_16 = bst_21.insert(bst_21)
    assert (
        f"{type(bst_21.root).__module__}.{type(bst_21.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    var_18 = var_17.__repr__()
    bst_22 = module_0.Bst()
    node_10 = module_0.Node(bst_22)
    int_2 = -1464
    var_19 = bst_22.insert(int_2)
    assert (
        f"{type(bst_22.root).__module__}.{type(bst_22.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_16)
    bst_23 = module_0.Bst(bst_7)


def test_case_253():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_0 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_1 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_1.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_2 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_3 = module_0.Node(bst_12)
    var_8 = bst_12.insert(node_3)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_9 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_11 = bst_16.insert(bool_0)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_12 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_12)
    bst_18 = module_0.Bst()
    var_13 = bst_18.insert(bst_18)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_19 = module_0.Bst()
    var_14 = bst_19.insert(bst_19)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_8 = module_0.Node(var_14)
    var_16 = var_15.__repr__()
    bst_20 = module_0.Bst()
    node_9 = module_0.Node(bst_20)
    var_17 = bst_20.insert(node_9)
    assert (
        f"{type(bst_20.root).__module__}.{type(bst_20.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_21 = module_0.Bst()
    var_18 = bst_21.insert(bst_21)
    assert (
        f"{type(bst_21.root).__module__}.{type(bst_21.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    bst_22 = module_0.Bst()
    var_20 = var_18.__repr__()
    bst_23 = module_0.Bst()


def test_case_254():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst(var_2)
    bst_6 = module_0.Bst()
    node_0 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_0.__repr__()
    var_7 = node_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_8 = node_1.__repr__()
    bst_8 = module_0.Bst(var_8)
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_9 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_2.__repr__()
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_11)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_5 = module_0.Node(bst_11)
    bst_13 = module_0.Bst()
    node_6 = module_0.Node(bst_13)
    var_14 = bst_13.insert(node_6)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_13)
    var_15 = var_1.__repr__()


def test_case_255():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst(var_5)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    var_8 = bst_8.insert(node_4)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_0 = False
    var_11 = bst_12.insert(bool_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(bst_12)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_7 = module_0.Node(set_0)
    var_12 = node_7.__repr__()
    str_1 = ""
    bst_13 = module_0.Bst(str_1)
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_8 = module_0.Node(var_14)
    bst_15 = module_0.Bst()
    node_9 = module_0.Node(bst_15)
    bst_16 = module_0.Bst()
    var_15 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_9.__repr__()
    bst_17 = module_0.Bst()
    node_10 = module_0.Node(bst_16)
    bst_18 = module_0.Bst()


def test_case_256():
    str_0 = ""
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst(var_3)
    bst_8 = module_0.Bst()
    node_1 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_1.__repr__()
    bst_10 = module_0.Bst()
    var_8 = var_6.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    list_0 = []
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(list_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_9)
    bst_12 = module_0.Bst()
    var_10 = var_7.__repr__()


def test_case_257():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    str_0 = ""
    bst_2 = module_0.Bst(str_0)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_10 = module_0.Bst(var_8)
    bst_11 = module_0.Bst()


def test_case_258():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(bst_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    int_0 = -1464
    var_3 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    var_6 = node_5.__repr__()
    node_6 = module_0.Node(var_5)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_7 = module_0.Node(set_0)
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_8)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_9 = module_0.Node(set_1)
    var_10 = node_9.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_10 = module_0.Node(var_12)
    bst_12 = module_0.Bst()


def test_case_259():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(bst_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_2.__repr__()


def test_case_260():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = node_2.__repr__()
    var_3 = node_1.__repr__()


def test_case_261():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(bst_2)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_5 = node_4.__repr__()
    bst_3 = module_0.Bst()
    var_6 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_9 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(var_10)
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_8.__repr__()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_1)


def test_case_262():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    int_0 = -1464
    var_5 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_6 = node_0.__repr__()


def test_case_263():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    list_0 = []
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_8 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_6 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    var_14 = bst_11.insert(node_7)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_13)
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_13 = module_0.Bst()
    var_17 = var_15.__repr__()


def test_case_264():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    int_0 = -1464
    var_8 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_6.__repr__()
    var_13 = node_6.__repr__()
    node_7 = module_0.Node(var_12)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    var_14 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_9 = module_0.Node(set_0)
    var_15 = node_9.__repr__()
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    node_11 = module_0.Node(node_9)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_16 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    node_12 = module_0.Node(bst_11)
    bst_13 = module_0.Bst()
    node_13 = module_0.Node(bst_13)
    var_18 = bst_13.insert(node_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_14 = module_0.Node(var_17)
    node_15 = module_0.Node(node_14)


def test_case_265():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(var_2)


def test_case_266():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_4)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_9 = node_6.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_7.__repr__()
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bool_1 = False
    node_9 = module_0.Node(bool_1)
    var_12 = var_1.__repr__()
    var_13 = var_12.__repr__()


def test_case_267():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_4 = node_3.__repr__()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(node_3)
    bool_0 = False
    tuple_0 = (var_2, bool_0)
    var_5 = bst_6.insert(tuple_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_268():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()


def test_case_269():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    int_0 = -1464
    var_6 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    var_7 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_270():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    int_1 = -1464
    var_3 = bst_1.insert(int_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_0)
    list_0 = []
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_4)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_7 = module_0.Bst()
    var_7 = var_5.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_8 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    var_10 = bst_11.insert(node_9)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_9)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_11 = module_0.Node(set_1)
    var_11 = node_11.__repr__()
    bst_12 = module_0.Bst()
    node_12 = module_0.Node(bst_12)


def test_case_271():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    str_0 = ""
    bst_3 = module_0.Bst(str_0)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    var_4 = node_2.__repr__()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_5 = node_3.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_0 = False
    var_8 = bst_10.insert(bool_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_7 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_8 = module_0.Node(set_0)
    var_14 = node_8.__repr__()
    bst_13 = module_0.Bst(var_14)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_15 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    var_17 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_18 = module_0.Bst(var_16)
    node_9 = module_0.Node(var_4)


def test_case_272():
    str_0 = ""
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_5 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_6)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_7 = module_0.Node(set_1)
    var_11 = node_7.__repr__()
    bst_12 = module_0.Bst()
    var_12 = node_2.__repr__()


def test_case_273():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(var_3)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_8 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_8)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_7 = module_0.Node(bst_12)
    bst_14 = module_0.Bst()
    node_8 = module_0.Node(bst_14)
    var_13 = bst_14.insert(node_8)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_12)
    bst_15 = module_0.Bst()
    var_14 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_10 = module_0.Node(var_14)
    bst_16 = module_0.Bst()


def test_case_274():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(var_3)
    var_5 = node_2.__repr__()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    list_0 = []
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(list_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_8)
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_9 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    bst_13 = module_0.Bst()
    node_7 = module_0.Node(var_9)
    bst_14 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    var_11 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_11)
    var_12 = node_8.__repr__()


def test_case_275():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_6 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_1.__repr__()
    bst_4 = module_0.Bst()


def test_case_276():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_3 = node_3.__repr__()
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(node_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    var_8 = bst_7.insert(node_6)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(node_3)


def test_case_277():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst(bst_1)


def test_case_278():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_2 = module_0.Node(set_1)
    var_1 = node_2.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst(var_3)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_6 = node_3.__repr__()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_9 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_5 = module_0.Node(bst_11)
    bst_13 = module_0.Bst()
    node_6 = module_0.Node(bst_13)
    var_11 = bst_13.insert(node_6)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_10)
    bst_14 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    var_12 = var_3.__repr__()


def test_case_279():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    var_6 = node_2.__repr__()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_3 = module_0.Node(var_8)
    var_9 = var_4.__repr__()


def test_case_280():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_0.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    str_0 = ""
    bst_5 = module_0.Bst(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst(bst_2)


def test_case_281():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_2 = node_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_8 = module_0.Bst()
    var_7 = var_5.__repr__()
    var_8 = var_6.__repr__()


def test_case_282():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bst_1 = module_0.Bst()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_3 = node_3.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_4 = module_0.Node(set_1)
    var_4 = node_4.__repr__()
    bst_2 = module_0.Bst()
    list_0 = []
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_6)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    var_9 = var_7.__repr__()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    bst_7 = module_0.Bst()
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_10)
    node_10 = module_0.Node(bst_4)


def test_case_283():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_5)
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    var_7 = var_1.__repr__()


def test_case_284():
    bst_0 = module_0.Bst()
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst(bst_3)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    int_0 = -1464
    var_6 = bst_7.insert(int_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_7 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    bst_12 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    bst_13 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    var_9 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_9)
    bst_14 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    var_10 = node_10.__repr__()
    bst_15 = module_0.Bst()
    node_11 = module_0.Node(bst_15)
    bst_16 = module_0.Bst()
    var_11 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_11.__repr__()
    bst_17 = module_0.Bst()
    node_12 = module_0.Node(var_11)
    var_13 = node_11.__repr__()
    bst_18 = module_0.Bst()
    node_13 = module_0.Node(bst_18)
    bst_19 = module_0.Bst()
    var_14 = bst_19.insert(bst_19)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_13.__repr__()
    var_16 = node_13.__repr__()
    node_14 = module_0.Node(node_4)


def test_case_285():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_2 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_1 = "7"
    node_3 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst(var_6)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_0 = False
    var_9 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(bst_8)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_7 = module_0.Node(set_1)
    var_10 = node_7.__repr__()
    bst_9 = module_0.Bst(var_10)
    bst_10 = module_0.Bst()


def test_case_286():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == []
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)


def test_case_287():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)


def test_case_288():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_2 = module_0.Node(var_5)
    var_7 = var_6.__repr__()
    str_0 = "7"
    node_3 = module_0.Node(str_0)
    list_0 = []
    bst_4 = module_0.Bst()
    var_8 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_8)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_7 = module_0.Node(var_11)
    var_13 = var_11.__repr__()


def test_case_289():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_3 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_6 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_7)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    var_8 = var_6.__repr__()
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    int_1 = -1464
    var_9 = bst_7.insert(int_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_9 = module_0.Node(set_0)
    var_10 = node_9.__repr__()
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    node_11 = module_0.Node(node_9)
    node_12 = module_0.Node(none_type_0)


def test_case_290():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_1 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(node_2)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    bst_8 = module_0.Bst()


def test_case_291():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_3)
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_4 = node_3.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    int_0 = -1464
    var_8 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    var_9 = var_3.__repr__()


def test_case_292():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    var_5 = var_3.__repr__()
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst(node_1)


def test_case_293():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_3 = node_1.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(node_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst(var_5)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    int_0 = -1464
    var_11 = bst_9.insert(int_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_8)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_6 = module_0.Node(bst_10)
    bst_12 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    var_14 = bst_12.insert(node_7)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_13)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_9 = module_0.Node(set_1)
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_15 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_10 = module_0.Node(bst_13)
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    bool_0 = False
    var_17 = bst_16.insert(bool_0)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(bst_16)
    node_13 = module_0.Node(var_12)


def test_case_294():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_0 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_2 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_7 = module_0.Bst(var_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_4 = node_2.__repr__()
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(node_2)
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    var_5 = bst_9.insert(node_5)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_6 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_11 = module_0.Bst()
    var_8 = var_6.__repr__()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_9 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_7 = module_0.Node(bst_12)
    bst_14 = module_0.Bst()
    node_8 = module_0.Node(bst_14)
    var_11 = bst_0.insert(bst_7)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_295():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)


def test_case_296():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    int_1 = -1464
    var_4 = bst_2.insert(int_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_5 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    var_8 = var_6.__repr__()
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_4.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_5 = module_0.Node(bst_10)
    var_12 = bst_10.insert(node_5)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_15 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_6 = module_0.Node(var_16)
    bst_15 = module_0.Bst()
    node_7 = module_0.Node(bst_15)
    var_17 = bst_15.insert(node_7)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_17)
    var_18 = bst_7.insert(node_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_297():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_2 = node_1.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_4)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(var_7)
    var_9 = node_4.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    node_7 = module_0.Node(str_0)


def test_case_298():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_3 = node_1.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(node_1)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_5 = node_4.__repr__()
    bst_7 = module_0.Bst()


def test_case_299():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_0 = []
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(var_5)
    var_7 = node_4.__repr__()
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_1 = False
    var_8 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_10)
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_13 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_16 = module_0.Bst(var_12)
    str_0 = ""
    bst_17 = module_0.Bst(str_0)
    bst_18 = module_0.Bst(node_3)


def test_case_300():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    var_4 = node_3.__repr__()
    node_4 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(var_5)
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    var_9 = bst_3.insert(var_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_301():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    int_0 = -1464
    var_8 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_0 = False
    var_9 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_7.__repr__()
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    float_0 = 2733.32277
    bst_11 = module_0.Bst(float_0)


def test_case_302():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)


def test_case_303():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_6 = module_0.Bst()


def test_case_304():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)


def test_case_305():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(var_3)
    var_5 = node_1.__repr__()
    node_3 = module_0.Node(var_0)


def test_case_306():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_4 = module_0.Bst()
    int_1 = 3317
    node_4 = module_0.Node(int_1)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_6 = module_0.Node(var_7)
    bst_6 = module_0.Bst()


def test_case_307():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()


def test_case_308():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    bst_1 = module_0.Bst()
    var_4 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_1.__repr__()
    var_7 = node_1.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_8 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_4.__repr__()
    var_11 = var_9.__repr__()
    bst_7 = module_0.Bst()
    var_12 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_8 = module_0.Bst()
    var_14 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    var_16 = var_15.__repr__()
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    int_0 = -1464
    var_17 = bst_9.insert(int_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_14)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_18 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = node_7.__repr__()
    bst_13 = module_0.Bst()
    node_8 = module_0.Node(var_18)
    var_20 = node_5.__repr__()


def test_case_309():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_7 = module_0.Bst()
    var_7 = var_5.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_8 = node_4.__repr__()
    bst_8 = module_0.Bst(var_8)
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_5.__repr__()
    var_11 = var_9.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_15 = module_0.Bst(var_13)
    str_1 = ""
    bst_16 = module_0.Bst(str_1)
    bst_17 = module_0.Bst(var_5)


def test_case_310():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    var_8 = bst_9.insert(node_7)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_9)
    list_0 = []
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(list_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_10)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_11 = module_0.Node(set_0)
    var_11 = node_11.__repr__()
    bst_12 = module_0.Bst(var_11)
    node_12 = module_0.Node(bst_3)


def test_case_311():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    var_9 = node_4.__repr__()
    bst_10 = module_0.Bst()
    node_5 = module_0.Node(bst_10)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    var_10 = bst_11.insert(node_7)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_10)
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_9 = module_0.Node(var_12)
    bst_13 = module_0.Bst(bst_0)


def test_case_312():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_1)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_5 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_6 = module_0.Node(var_6)
    var_8 = var_7.__repr__()
    str_1 = "7"
    node_7 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    bool_0 = False
    var_9 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_8)
    var_11 = bst_8.insert(node_9)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_0.__repr__()


def test_case_313():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst(var_3)
    var_6 = bst_2.insert(bst_5)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_314():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    str_0 = ""
    bst_2 = module_0.Bst(str_0)
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    int_1 = -1464
    var_11 = bst_6.insert(int_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_8)
    bytes_0 = b"\xe2\xbd\x96f\x91\xa7\xad\xc3j\x98\xd9&\x1b\xbd"
    node_6 = module_0.Node(bytes_0)


def test_case_315():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    var_9 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_3 = module_0.Node(var_10)
    var_12 = var_11.__repr__()
    str_1 = "7"
    node_4 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    var_13 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_8 = module_0.Bst()
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    int_0 = 3317
    node_7 = module_0.Node(int_0)
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    bool_1 = False
    var_15 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_9 = module_0.Node(var_16)
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_11 = module_0.Node(set_1)
    var_17 = node_11.__repr__()
    bst_12 = module_0.Bst(var_17)
    var_18 = bst_8.insert(node_9)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_316():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = node_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_0 = "7"
    node_4 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(var_9)
    str_2 = ""
    bst_10 = module_0.Bst(str_2)
    var_11 = var_8.__repr__()


def test_case_317():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_2 = module_0.Node(var_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_2 = False
    var_1 = bst_1.insert(bool_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_7 = module_0.Node(var_2)
    bst_3 = module_0.Bst()


def test_case_318():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_7 = bst_0.insert(var_4)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_319():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    var_5 = var_3.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_4)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_2.__repr__()


def test_case_320():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(var_1)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_3 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(node_1)


def test_case_321():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()


def test_case_322():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    var_6 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_3 = module_0.Node(var_7)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_8 = module_0.Bst(var_9)
    var_12 = node_3.__repr__()


def test_case_323():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_5)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_6 = node_2.__repr__()


def test_case_324():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    int_0 = -1464
    var_2 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(var_1)


def test_case_325():
    str_0 = ""
    bst_0 = module_0.Bst(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_0 = module_0.Node(set_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_2 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_3 = node_5.__repr__()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_6 = module_0.Node(var_4)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_7 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()


def test_case_326():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(var_1)
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_6 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_5 = module_0.Node(var_8)
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_6.__repr__()
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bst_12 = module_0.Bst(bst_10)
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_12)


def test_case_327():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    int_0 = -1464
    var_3 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_4 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_0 = False
    var_5 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_7.__repr__()
    var_8 = var_6.__repr__()
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    int_1 = -1464
    var_12 = bst_11.insert(int_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_9)
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    node_10 = module_0.Node(var_2)


def test_case_328():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = False
    var_7 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_6 = module_0.Node(var_9)
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_7.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_8 = module_0.Node(set_0)
    var_12 = node_8.__repr__()
    bst_10 = module_0.Bst(var_12)
    bst_11 = module_0.Bst()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_13)
    var_14 = node_10.__repr__()


def test_case_329():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    list_1 = []
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(list_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_2 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    var_6 = bst_6.insert(node_3)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_4 = module_0.Node(var_8)
    var_10 = var_9.__repr__()
    str_0 = ""
    bst_9 = module_0.Bst(str_0)
    var_11 = var_10.__repr__()


def test_case_330():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(bst_3)
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_3 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_10 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    node_7 = module_0.Node(bst_9)
    var_5 = node_5.__repr__()
    var_6 = bst_0.insert(var_5)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_331():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_4 = node_5.__repr__()
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_0 = False
    var_5 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()


def test_case_332():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(var_0)
    bst_3 = module_0.Bst()


def test_case_333():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    var_5 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst(var_7)


def test_case_334():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_0.__repr__()
    str_0 = ""
    bst_2 = module_0.Bst(str_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    var_5 = bst_6.insert(node_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_4)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    var_6 = node_4.__repr__()
    bst_7 = module_0.Bst(var_6)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_5 = module_0.Node(set_1)
    var_7 = node_5.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()


def test_case_335():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    int_1 = -1464
    var_4 = bst_2.insert(int_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    var_7 = node_1.__repr__()


def test_case_336():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bst_7 = module_0.Bst(bst_5)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_4 = node_5.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_5 = node_6.__repr__()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    var_6 = bst_10.insert(node_7)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_7 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_8 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_9 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_16 = module_0.Bst()
    node_9 = module_0.Node(var_9)
    bst_17 = module_0.Bst()
    var_11 = bst_17.insert(node_8)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_337():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()


def test_case_338():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()


def test_case_339():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_4 = node_2.__repr__()
    node_3 = module_0.Node(node_2)


def test_case_340():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()


def test_case_341():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)


def test_case_342():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    var_9 = bst_5.insert(node_4)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_5 = module_0.Node(var_13)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    node_7 = module_0.Node(bst_1)


def test_case_343():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(var_2)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_4)
    node_8 = module_0.Node(bst_5)


def test_case_344():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    node_2 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_4 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    str_1 = ""
    bst_11 = module_0.Bst(str_1)
    node_7 = module_0.Node(bool_0)


def test_case_345():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_2 = module_0.Node(var_5)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_6 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    var_7 = bst_4.insert(node_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_7)
    var_8 = node_5.__repr__()
    node_6 = module_0.Node(node_1)


def test_case_346():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    int_0 = -1464
    var_9 = bst_5.insert(int_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_6)
    bst_6 = module_0.Bst()


def test_case_347():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_4)
    str_1 = ""
    bst_3 = module_0.Bst(str_1)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    node_5 = module_0.Node(bst_2)


def test_case_348():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst(var_2)
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    int_0 = -1464
    var_3 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = node_1.__repr__()


def test_case_349():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = node_2.__repr__()


def test_case_350():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(var_3)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst(var_5)


def test_case_351():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    var_4 = var_2.__repr__()
    list_0 = []
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_5)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    str_0 = ""
    bst_6 = module_0.Bst(str_0)
    bst_7 = module_0.Bst()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(none_type_0)


def test_case_352():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    list_0 = []
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    int_0 = -1464
    var_8 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_5)
    node_4 = module_0.Node(bst_6)


def test_case_353():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    var_2 = bst_1.insert(node_3)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_4)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    var_4 = node_5.__repr__()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_1 = False
    var_7 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_8 = module_0.Node(var_10)
    var_12 = var_11.__repr__()
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_2 = False
    var_13 = bst_8.insert(bool_2)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_15 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_10 = module_0.Node(bst_10)
    bst_12 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_11 = module_0.Node(set_0)
    var_17 = var_15.__repr__()


def test_case_354():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst(var_4)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_9 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_3 = module_0.Node(var_10)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_4 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_4.__repr__()
    bst_12 = module_0.Bst()
    var_13 = var_11.__repr__()
    var_14 = var_5.__repr__()


def test_case_355():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(var_3)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bst_3 = module_0.Bst()
    var_7 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_4 = module_0.Bst()
    str_0 = ""
    bst_5 = module_0.Bst(str_0)
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    node_7 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_8.__repr__()
    bst_10 = module_0.Bst()
    var_13 = var_11.__repr__()
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_9.__repr__()
    bst_13 = module_0.Bst()
    node_10 = module_0.Node(var_14)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    node_11 = module_0.Node(bst_15)
    bst_16 = module_0.Bst()
    node_12 = module_0.Node(str_1)


def test_case_356():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst(var_4)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    int_0 = -1464
    var_10 = bst_9.insert(int_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_7)
    bool_0 = False
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_8.__repr__()
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(var_11)
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    var_15 = var_14.__repr__()
    bst_14 = module_0.Bst(node_4)


def test_case_357():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_7 = node_2.__repr__()
    bst_7 = module_0.Bst(var_7)
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_3.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_4 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_4.__repr__()
    bst_13 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bst_14 = module_0.Bst(bst_12)
    bst_15 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_12 = node_6.__repr__()
    bst_16 = module_0.Bst()
    node_7 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_13 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_7.__repr__()
    bst_18 = module_0.Bst()
    var_15 = var_13.__repr__()
    bst_19 = module_0.Bst()
    var_16 = bst_19.insert(var_13)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_358():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_3 = module_0.Bst()
    var_7 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_9 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_10 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_2.__repr__()
    str_1 = ""
    bst_7 = module_0.Bst(str_1)
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(str_0)


def test_case_359():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_6 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_8 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()


def test_case_360():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(bst_5)
    var_7 = bst_0.insert(bst_5)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()


def test_case_361():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    var_6 = node_2.__repr__()
    node_3 = module_0.Node(var_5)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    bst_7 = module_0.Bst()
    str_0 = ""
    bst_8 = module_0.Bst(str_0)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_7.__repr__()
    bst_12 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    bst_13 = module_0.Bst()
    none_type_0 = None
    node_9 = module_0.Node(none_type_0)
    bool_1 = False
    var_11 = bst_13.insert(bool_1)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bool_1)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()


def test_case_362():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_1 = module_0.Node(set_1)
    var_1 = node_1.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(node_1)
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_4.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_0 = False
    var_4 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    node_6 = module_0.Node(bool_0)
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_7.__repr__()
    var_8 = var_6.__repr__()
    bool_1 = False
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_11 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    str_2 = "7"
    node_12 = module_0.Node(str_2)
    int_0 = 3317
    node_13 = module_0.Node(int_0)
    bst_10 = module_0.Bst()
    none_type_3 = None
    node_14 = module_0.Node(none_type_3)
    bool_2 = False
    var_14 = bst_10.insert(bool_2)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_15 = module_0.Node(var_15)
    var_16 = var_7.__repr__()


def test_case_363():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_0 = False
    var_3 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    node_6 = module_0.Node(bool_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_7 = module_0.Node(set_0)
    var_5 = node_7.__repr__()
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    node_9 = module_0.Node(node_7)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_10 = module_0.Node(var_6)
    list_0 = []
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(list_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_8)
    bst_8 = module_0.Bst(node_7)


def test_case_364():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_4 = node_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    var_7 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_4 = module_0.Node(var_8)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_5.__repr__()
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    var_12 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_12)
    node_8 = module_0.Node(bst_6)


def test_case_365():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()


def test_case_366():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst(bst_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(var_3)
    str_1 = ""
    bst_5 = module_0.Bst(str_1)
    node_4 = module_0.Node(bst_2)


def test_case_367():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_0 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_1 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_1)
    var_2 = node_3.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_3 = bst_4.insert(bst_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_368():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_3 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_1 = module_0.Node(var_6)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_8 = node_2.__repr__()
    bst_6 = module_0.Bst(var_8)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    list_0 = []
    bst_8 = module_0.Bst()
    var_12 = bst_8.insert(list_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_12)
    bst_9 = module_0.Bst()
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    node_6 = module_0.Node(list_0)


def test_case_369():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()


def test_case_370():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_1 = node_3.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    var_2 = node_4.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    int_0 = -1464
    var_6 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_8 = module_0.Node(set_1)
    var_8 = node_8.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_9 = module_0.Bst(var_10)
    int_1 = 3317
    node_9 = module_0.Node(int_1)
    node_10 = module_0.Node(var_9)


def test_case_371():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    node_4 = module_0.Node(bool_0)


def test_case_372():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_2 = False
    var_4 = bst_2.insert(bool_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    node_3 = module_0.Node(bool_2)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_6 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    var_7 = bst_4.insert(node_6)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    var_12 = bst_11.insert(node_9)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_12)
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = bst_7.insert(node_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_373():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_2 = module_0.Node(var_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_2 = node_3.__repr__()
    node_4 = module_0.Node(node_2)


def test_case_374():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(var_5)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    bool_0 = False
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst(var_8)
    bst_12 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    var_11 = node_8.__repr__()
    int_0 = 3317
    node_9 = module_0.Node(int_0)
    bst_13 = module_0.Bst()


def test_case_375():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    node_3 = module_0.Node(bool_0)
    list_0 = []
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_5 = node_5.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_6 = node_6.__repr__()
    bst_5 = module_0.Bst(var_6)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_10 = module_0.Bst(var_8)
    node_7 = module_0.Node(var_1)


def test_case_376():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = False
    var_3 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    node_3 = module_0.Node(bool_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst(var_6)
    var_9 = bst_1.insert(var_4)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_377():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_1 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_7 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_6)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_5 = module_0.Node(set_1)
    var_8 = node_5.__repr__()
    bst_5 = module_0.Bst(var_8)
    bst_6 = module_0.Bst(str_0)


def test_case_378():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_3 = module_0.Node(var_2)
    bst_3 = module_0.Bst()


def test_case_379():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(set_0)


def test_case_380():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)


def test_case_381():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    var_4 = node_1.__repr__()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_6)
    var_8 = node_2.__repr__()


def test_case_382():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_4 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    var_8 = bst_7.insert(node_5)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_7)
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    var_9 = bst_8.insert(node_7)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_9)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_9.__repr__()
    bst_12 = module_0.Bst()
    node_10 = module_0.Node(var_12)
    bst_13 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    bool_1 = False
    var_14 = bst_13.insert(bool_1)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_11.__repr__()
    str_1 = ""
    bst_14 = module_0.Bst(str_1)
    bst_15 = module_0.Bst()
    var_16 = bst_5.insert(bst_11)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_383():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst(var_2)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_1 = module_0.Node(var_6)
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_2 = module_0.Node(bst_8)
    bst_10 = module_0.Bst()
    node_3 = module_0.Node(bst_10)
    var_11 = bst_10.insert(node_3)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_10)
    node_5 = module_0.Node(bst_5)


def test_case_384():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)


def test_case_385():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_0 = "7"
    node_3 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    var_8 = node_5.__repr__()
    bst_4 = module_0.Bst(var_8)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_6 = module_0.Node(set_1)
    var_9 = node_6.__repr__()
    var_10 = var_0.__repr__()


def test_case_386():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst(var_3)
    bst_8 = module_0.Bst()
    node_1 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_1.__repr__()
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bst_11 = module_0.Bst(bst_9)
    bst_12 = module_0.Bst()
    var_8 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_13 = module_0.Bst()
    var_10 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    var_11 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_3 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    str_1 = "7"
    node_4 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_5 = module_0.Node(set_0)
    var_14 = node_5.__repr__()
    bst_15 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    node_7 = module_0.Node(node_5)
    bst_16 = module_0.Bst()
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    bool_1 = False
    var_15 = bst_16.insert(bool_1)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_17 = module_0.Bst()
    str_3 = ""
    bst_18 = module_0.Bst(str_3)
    bst_19 = module_0.Bst()
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    var_17 = bst_19.insert(bst_19)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_17)
    node_11 = module_0.Node(bst_8)


def test_case_387():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    node_3 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_8 = node_4.__repr__()
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_9)
    bst_7 = module_0.Bst(set_0)


def test_case_388():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_2 = module_0.Node(bst_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_1 = node_3.__repr__()
    bst_1 = module_0.Bst(var_1)
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    bst_2 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_1 = False
    var_2 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_6 = module_0.Node(var_3)
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_3 = module_0.Bst(str_1)
    node_7 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_8 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_8)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_10 = module_0.Node(var_9)
    bool_2 = False
    bst_9 = module_0.Bst(bool_2)


def test_case_389():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_2 = module_0.Node(bst_4)
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(node_1)


def test_case_390():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    var_4 = var_2.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_5 = node_2.__repr__()


def test_case_391():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    var_5 = node_1.__repr__()
    bst_4 = module_0.Bst(var_2)


def test_case_392():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(bool_1)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_5 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    var_8 = bst_7.insert(node_6)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_7)
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    var_9 = bst_8.insert(node_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_9)
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_10.__repr__()
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_12 = module_0.Bst()
    node_11 = module_0.Node(var_12)


def test_case_393():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_394():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    list_0 = []
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_4)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    str_0 = ""
    bst_7 = module_0.Bst(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_3 = module_0.Node(set_0)
    var_7 = node_3.__repr__()
    bst_8 = module_0.Bst(var_7)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_5 = module_0.Node(var_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    node_6 = module_0.Node(var_6)


def test_case_395():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_6.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bst_6 = module_0.Bst(bst_4)
    bool_1 = False
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_1)


def test_case_396():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    var_6 = node_4.__repr__()
    node_5 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_1 = False
    var_7 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    bool_2 = False
    var_9 = bst_7.insert(bool_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(bst_7)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    var_10 = node_9.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_0)
    int_0 = 3317
    node_11 = module_0.Node(int_0)
    var_11 = var_5.__repr__()
    var_12 = var_11.__repr__()


def test_case_397():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_2 = node_3.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(set_0)
    bst_4 = module_0.Bst(var_3)


def test_case_398():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_4 = module_0.Bst(bst_2)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_3 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_4 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    var_5 = node_5.__repr__()
    node_6 = module_0.Node(var_1)


def test_case_399():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    var_6 = node_1.__repr__()
    node_2 = module_0.Node(var_5)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_7 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_7)
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_7 = module_0.Node(set_1)
    var_8 = node_7.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(bst_6)
    var_9 = bst_6.insert(node_8)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_8 = module_0.Bst()
    var_12 = var_10.__repr__()
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_9.__repr__()
    bst_11 = module_0.Bst()
    var_15 = var_9.__repr__()


def test_case_400():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    node_4 = module_0.Node(bool_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst(var_5)
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    var_8 = bst_8.insert(node_5)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_8)
    node_7 = module_0.Node(node_6)


def test_case_401():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst(var_2)


def test_case_402():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    var_6 = var_4.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_7 = node_3.__repr__()
    bst_5 = module_0.Bst(var_7)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    var_8 = bst_6.insert(node_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_7.__repr__()
    bst_12 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    bst_13 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bst_14 = module_0.Bst()


def test_case_403():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_2)
    var_3 = node_4.__repr__()
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    bst_3 = module_0.Bst()
    node_7 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_7)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    list_0 = []
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(list_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_7)
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_10.__repr__()
    bst_12 = module_0.Bst()
    node_11 = module_0.Node(var_8)
    var_10 = node_10.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_12 = module_0.Node(dict_0)
    node_13 = module_0.Node(dict_0)


def test_case_404():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    int_0 = -1464
    var_4 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_5 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_7 = node_5.__repr__()
    bst_6 = module_0.Bst(var_7)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_6 = module_0.Node(set_1)
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bool_0 = False
    var_8 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_8 = module_0.Node(var_11)
    var_12 = var_11.__repr__()


def test_case_405():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_1 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = var_3.__repr__()
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_6 = module_0.Node(var_7)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_8.__repr__()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(var_8)
    var_10 = node_8.__repr__()
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    var_11 = bst_11.insert(node_10)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_11)
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_12 = module_0.Node(none_type_2)
    var_12 = bst_12.insert(node_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    node_13 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_13.__repr__()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    var_15 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    var_17 = var_16.__repr__()
    bst_17 = module_0.Bst(var_9)


def test_case_406():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)


def test_case_407():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    list_0 = []
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    var_10 = var_8.__repr__()
    var_11 = node_3.__repr__()


def test_case_408():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    var_4 = node_4.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_5 = module_0.Node(set_1)
    var_5 = node_5.__repr__()
    bst_4 = module_0.Bst(var_5)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_7 = module_0.Bst()
    var_8 = var_6.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()


def test_case_409():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    list_0 = []
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_6 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_7 = module_0.Bst()


def test_case_410():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_0 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst(var_5)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    var_8 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_3.__repr__()
    node_4 = module_0.Node(node_2)


def test_case_411():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_1 = module_0.Node(set_1)
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst(var_3)
    var_4 = var_2.__repr__()


def test_case_412():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst(var_3)
    list_0 = []
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_6)
    bst_7 = module_0.Bst()
    node_2 = module_0.Node(node_1)


def test_case_413():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(var_3)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_8 = module_0.Bst()
    var_7 = var_5.__repr__()
    list_1 = []
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(list_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_8)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_9 = node_6.__repr__()
    bst_10 = module_0.Bst(var_9)
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_1 = False
    var_10 = bst_11.insert(bool_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(bst_11)
    var_11 = node_4.__repr__()


def test_case_414():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(var_3)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_5 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    var_9 = bst_11.insert(node_6)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_8)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_8 = module_0.Node(var_10)
    none_type_0 = None
    node_9 = module_0.Node(none_type_0)
    bst_13 = module_0.Bst()
    var_12 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_10 = module_0.Node(var_13)
    var_15 = var_14.__repr__()
    str_0 = "7"
    node_11 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_12 = module_0.Node(set_0)
    var_16 = node_12.__repr__()
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_16 = module_0.Bst()
    node_13 = module_0.Node(set_0)
    bst_17 = module_0.Bst()
    none_type_1 = None
    node_14 = module_0.Node(none_type_1)
    var_19 = var_1.__repr__()


def test_case_415():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    list_0 = []
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    int_0 = -1464
    var_5 = bst_5.insert(int_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_7.__repr__()
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    var_8 = bst_8.insert(node_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_8)
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    var_9 = node_10.__repr__()
    node_11 = module_0.Node(bst_9)


def test_case_416():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_2 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst(bst_1)


def test_case_417():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bst_4 = module_0.Bst(bst_2)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    int_0 = -1464
    var_4 = bst_7.insert(int_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()


def test_case_418():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)


def test_case_419():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()


def test_case_420():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    str_0 = ""
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(var_0)
    var_2 = node_1.__repr__()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_4 = module_0.Node(set_0)
    node_5 = module_0.Node(bst_4)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_7.__repr__()
    bst_8 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    var_8 = node_8.__repr__()
    var_9 = node_1.__repr__()


def test_case_421():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_7 = var_5.__repr__()


def test_case_422():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = ""
    bst_3 = module_0.Bst(str_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    int_0 = -1464
    var_4 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_5 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    var_7 = var_5.__repr__()


def test_case_423():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_1 = False
    var_6 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_7 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    var_9 = bst_7.insert(node_8)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_8)
    int_0 = 3317
    node_10 = module_0.Node(int_0)
    bst_8 = module_0.Bst()
    none_type_3 = None
    node_11 = module_0.Node(none_type_3)
    bool_2 = False
    var_10 = bst_8.insert(bool_2)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_12 = module_0.Node(var_11)
    bst_9 = module_0.Bst()
    node_13 = module_0.Node(bst_9)
    var_12 = bst_9.insert(node_13)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_11 = module_0.Bst()
    var_15 = var_13.__repr__()
    bst_12 = module_0.Bst()
    node_14 = module_0.Node(bst_12)
    var_16 = bst_12.insert(node_14)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    node_15 = module_0.Node(bst_13)
    var_17 = bst_13.insert(node_15)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_16 = module_0.Node(var_17)
    var_18 = node_16.__repr__()
    var_19 = node_1.__repr__()


def test_case_424():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(set_0)
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_4 = module_0.Node(var_4)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_5 = module_0.Node(set_1)
    var_6 = node_5.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    node_7 = module_0.Node(node_5)
    bst_5 = module_0.Bst()
    node_8 = module_0.Node(bst_5)
    var_7 = bst_5.insert(node_8)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_10 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_9 = module_0.Node(set_2)
    node_10 = module_0.Node(bst_9)
    var_12 = var_10.__repr__()
    bst_11 = module_0.Bst()
    node_11 = module_0.Node(bst_11)
    int_1 = -1464
    var_13 = bst_11.insert(int_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_3 = {str_3}
    node_12 = module_0.Node(set_3)
    bst_12 = module_0.Bst()
    node_13 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_14 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_13.__repr__()
    var_16 = node_13.__repr__()
    bst_14 = module_0.Bst()
    node_14 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = node_14.__repr__()
    var_19 = var_17.__repr__()
    bst_16 = module_0.Bst()


def test_case_425():
    str_0 = ""
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_4 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_4 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_7 = module_0.Node(set_0)
    var_7 = node_7.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_8 = module_0.Node(set_1)
    var_8 = node_8.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_1 = False
    var_9 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_9.__repr__()
    node_10 = module_0.Node(none_type_0)


def test_case_426():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    int_1 = 3317
    node_1 = module_0.Node(int_1)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_3 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_6.__repr__()
    bst_5 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_7 = module_0.Node(var_8)
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_7 = module_0.Bst(str_0)
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_9.__repr__()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    node_11 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_11.__repr__()
    bst_13 = module_0.Bst()
    node_12 = module_0.Node(var_11)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_13 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    var_15 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_18 = module_0.Bst(var_14)
    node_13 = module_0.Node(bool_0)


def test_case_427():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_2)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_3 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_5 = module_0.Node(var_4)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_5 = node_6.__repr__()
    bst_4 = module_0.Bst(var_5)
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_7.__repr__()
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(var_6)
    var_8 = node_7.__repr__()
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_2 = False
    var_9 = bst_8.insert(bool_2)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_9.__repr__()
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_10 = module_0.Node(var_11)
    bst_10 = module_0.Bst()
    node_11 = module_0.Node(bst_10)
    var_13 = bst_7.insert(var_6)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_428():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    var_4 = node_3.__repr__()
    node_4 = module_0.Node(node_3)


def test_case_429():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    var_6 = node_2.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_3)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_10 = var_3.__repr__()
    var_11 = var_10.__repr__()


def test_case_430():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    bst_4 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_5 = node_5.__repr__()
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    node_7 = module_0.Node(node_5)
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(bst_6)
    var_6 = bst_6.insert(node_8)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_6)
    var_7 = var_4.__repr__()


def test_case_431():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst(var_4)
    bst_9 = module_0.Bst()
    node_1 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_1.__repr__()
    var_9 = node_1.__repr__()
    bst_11 = module_0.Bst()
    node_2 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_2.__repr__()
    var_12 = node_2.__repr__()
    node_3 = module_0.Node(var_11)
    bst_13 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_13 = bst_13.insert(bool_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_4.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_15 = node_5.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst(none_type_0)


def test_case_432():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_5 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    node_1 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_4 = bst_0.insert(bst_5)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_433():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    int_0 = -1464
    var_6 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_4 = module_0.Node(var_8)
    node_5 = module_0.Node(var_3)


def test_case_434():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_2 = node_1.__repr__()
    bst_1 = module_0.Bst(var_2)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    int_1 = -1464
    var_6 = bst_6.insert(int_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    node_7 = module_0.Node(bool_0)
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    var_9 = bst_9.insert(node_8)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst(var_4)


def test_case_435():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    list_0 = []
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_4 = node_2.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_5 = node_3.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_4)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    var_7 = bst_8.insert(node_5)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_7)
    var_8 = node_6.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    var_9 = bst_9.insert(node_7)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_9)
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    var_10 = bst_10.insert(node_9)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_11 = module_0.Bst(str_1)
    node_10 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    bool_0 = False
    var_11 = bst_12.insert(bool_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()


def test_case_436():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    node_6 = module_0.Node(bst_5)
    var_7 = var_5.__repr__()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_9 = module_0.Node(dict_0)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_10 = module_0.Node(str_2)
    bst_8 = module_0.Bst()


def test_case_437():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_0.__repr__()
    bst_3 = module_0.Bst()
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_1.__repr__()
    var_7 = var_5.__repr__()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    var_8 = bst_6.insert(node_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_11 = var_1.__repr__()


def test_case_438():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_5 = module_0.Node(dict_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_6 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    str_0 = ""
    bst_8 = module_0.Bst(str_0)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_8 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_8.__repr__()
    var_13 = node_8.__repr__()
    node_9 = module_0.Node(var_12)
    int_0 = 3317
    node_10 = module_0.Node(int_0)
    var_14 = node_0.__repr__()


def test_case_439():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = node_2.__repr__()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_3 = node_3.__repr__()
    var_4 = node_1.__repr__()


def test_case_440():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    var_3 = var_0.__repr__()


def test_case_441():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_1)
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_3 = module_0.Node(set_1)
    node_4 = module_0.Node(bst_1)
    var_2 = var_0.__repr__()
    list_0 = []
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    list_1 = []
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(list_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_3)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bool_0 = False
    var_5 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    var_7 = node_9.__repr__()
    var_8 = var_3.__repr__()


def test_case_442():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    var_0 = bst_0.insert(bool_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    node_3 = module_0.Node(bool_1)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_4 = module_0.Node(bst_2)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_6 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    var_6 = bst_6.insert(node_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_9 = module_0.Node(var_8)
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_2 = False
    var_11 = bst_9.insert(bool_2)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()


def test_case_443():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst(var_2)
    bst_6 = module_0.Bst()
    node_1 = module_0.Node(bst_6)
    var_5 = bst_6.insert(node_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_2 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_6)
    var_7 = node_3.__repr__()
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_4 = module_0.Node(set_1)
    node_5 = module_0.Node(bst_8)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    var_11 = bst_11.insert(node_6)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_7 = module_0.Node(var_10)


def test_case_444():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    var_6 = var_2.__repr__()


def test_case_445():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    node_3 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    var_8 = node_4.__repr__()
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_8)


def test_case_446():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_3)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_4 = node_2.__repr__()
    bst_4 = module_0.Bst()
    list_0 = []
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    str_2 = "{&:T\r/p-BHx9-lgMP"
    bst_7 = module_0.Bst(str_2)
    node_4 = module_0.Node(bst_7)
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_7 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    str_3 = "7"
    node_8 = module_0.Node(str_3)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(bst_5)


def test_case_447():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    var_6 = var_2.__repr__()


def test_case_448():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_0)
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_0 = False
    var_8 = bst_11.insert(bool_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    bst_12 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_10 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_7.__repr__()
    bst_14 = module_0.Bst()
    node_8 = module_0.Node(var_10)
    bst_15 = module_0.Bst()
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_16 = module_0.Bst(str_1)
    node_9 = module_0.Node(bst_16)
    node_10 = module_0.Node(bst_15)


def test_case_449():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_2.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_9 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = ""
    bst_10 = module_0.Bst(str_0)
    bst_11 = module_0.Bst()
    node_4 = module_0.Node(bst_11)
    list_0 = []
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(list_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_10)
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_6 = module_0.Node(bst_14)
    var_11 = bst_14.insert(node_6)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_11)
    bst_15 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    var_12 = bst_15.insert(node_8)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_16 = module_0.Bst()
    var_13 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_17 = module_0.Bst()
    bst_18 = module_0.Bst()
    var_15 = bst_18.insert(bst_18)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    var_17 = var_16.__repr__()
    bst_19 = module_0.Bst()
    node_9 = module_0.Node(bst_19)
    int_0 = -1464
    var_18 = bst_19.insert(int_0)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_15)
    bst_20 = module_0.Bst()


def test_case_450():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_3 = node_0.__repr__()


def test_case_451():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    var_4 = node_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_2.__repr__()
    node_3 = module_0.Node(bool_0)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    int_0 = -1464
    var_7 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_5 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_8)
    str_1 = ""
    bst_6 = module_0.Bst(str_1)
    node_9 = module_0.Node(none_type_0)


def test_case_452():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst(var_3)
    bst_7 = module_0.Bst()
    node_2 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_2.__repr__()
    bst_9 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_8 = bst_10.insert(bool_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_6 = module_0.Node(var_9)
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_7.__repr__()
    bst_13 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bst_14 = module_0.Bst(bst_12)
    bst_15 = module_0.Bst()
    var_12 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_9 = module_0.Node(var_12)
    node_10 = module_0.Node(bst_6)
    node_11 = module_0.Node(node_10)


def test_case_453():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_1)
    bst_3 = module_0.Bst()


def test_case_454():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_6 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_7 = bst_6.insert(node_5)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(var_8)
    bst_10 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_8 = module_0.Node(set_0)
    var_10 = node_8.__repr__()
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(set_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_10 = module_0.Node(dict_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_11 = module_0.Node(set_1)
    var_13 = node_11.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_12 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_14 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_12.__repr__()
    bst_16 = module_0.Bst()
    none_type_2 = None
    node_13 = module_0.Node(none_type_2)
    bst_17 = module_0.Bst(bst_15)
    node_14 = module_0.Node(none_type_2)
    var_16 = node_14.__repr__()


def test_case_455():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    node_2 = module_0.Node(var_3)


def test_case_456():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    var_4 = node_1.__repr__()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_8 = node_2.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_4.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    var_11 = bst_9.insert(node_6)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    var_12 = bst_10.insert(node_7)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_12)
    var_13 = node_8.__repr__()
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bool_0 = False
    var_14 = bst_11.insert(bool_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_11 = module_0.Node(var_15)
    bst_13 = module_0.Bst()
    var_17 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_14 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_12 = module_0.Node(set_0)
    node_13 = module_0.Node(bst_13)
    var_19 = var_17.__repr__()
    bool_1 = False
    node_14 = module_0.Node(bool_1)
    node_15 = module_0.Node(var_9)


def test_case_457():
    float_0 = -131.8
    bst_0 = module_0.Bst(float_0)


def test_case_458():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst(var_3)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_3.__repr__()
    var_9 = node_3.__repr__()
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_10 = bst_10.insert(bool_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_5 = module_0.Node(var_13)
    var_15 = var_14.__repr__()
    int_0 = 3317
    node_6 = module_0.Node(int_0)
    bst_14 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_1 = False
    var_16 = bst_14.insert(bool_1)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    node_8 = module_0.Node(var_17)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_9 = module_0.Node(set_1)
    var_18 = node_9.__repr__()
    bst_15 = module_0.Bst()
    var_19 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = var_19.__repr__()
    bst_16 = module_0.Bst()
    node_10 = module_0.Node(set_1)
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    bst_17 = module_0.Bst()
    var_21 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_22 = var_21.__repr__()
    var_23 = var_21.__repr__()
    bst_18 = module_0.Bst()
    var_24 = node_11.__repr__()
    bst_19 = module_0.Bst()


def test_case_459():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_1 = node_1.__repr__()
    bst_1 = module_0.Bst(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = var_3.__repr__()
    node_3 = module_0.Node(list_0)


def test_case_460():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_7 = node_1.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    int_0 = -1464
    var_11 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    var_12 = var_4.__repr__()


def test_case_461():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_4 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    var_5 = node_4.__repr__()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_6 = module_0.Node(set_1)
    var_7 = node_6.__repr__()
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(set_1)
    bool_0 = False
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(node_8)
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(bst_9)
    var_10 = bst_9.insert(node_10)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_11 = module_0.Node(var_12)
    bst_11 = module_0.Bst()
    node_12 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_12.__repr__()
    bst_13 = module_0.Bst()
    none_type_1 = None
    node_13 = module_0.Node(none_type_1)
    bst_14 = module_0.Bst(bst_12)
    var_15 = node_2.__repr__()


def test_case_462():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    var_0 = node_0.__repr__()


def test_case_463():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_3 = node_4.__repr__()
    bst_3 = module_0.Bst(var_3)
    str_1 = ""
    bst_4 = module_0.Bst(str_1)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_1.__repr__()


def test_case_464():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    node_0 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_4)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_5 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    node_4 = module_0.Node(bool_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_7 = node_5.__repr__()
    bst_9 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_6 = module_0.Node(set_1)
    var_8 = node_6.__repr__()
    bst_10 = module_0.Bst(var_8)
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    var_9 = bst_11.insert(node_7)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    node_8 = module_0.Node(bst_12)
    var_10 = bst_12.insert(node_8)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_10)
    var_11 = node_9.__repr__()
    bst_13 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_1 = False
    var_12 = bst_13.insert(bool_1)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(bst_13)
    node_12 = module_0.Node(node_0)


def test_case_465():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_3 = module_0.Node(set_1)
    var_1 = node_3.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(set_1)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_5)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_1 = False
    var_9 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_10)
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_11 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_10 = module_0.Node(set_2)
    node_11 = module_0.Node(bst_10)
    var_13 = var_11.__repr__()
    str_3 = "(-+2Yj@U8NM6[+0S0o"
    node_12 = module_0.Node(str_3)
    int_0 = 3317
    node_13 = module_0.Node(int_0)
    var_14 = node_12.__repr__()
    var_15 = node_12.__repr__()


def test_case_466():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_3 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_0 = False
    var_6 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_9 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_8 = module_0.Node(var_9)
    var_11 = var_10.__repr__()
    str_0 = "7"
    node_9 = module_0.Node(str_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_10 = module_0.Node(str_1)
    int_0 = 3317
    node_11 = module_0.Node(int_0)
    var_12 = node_10.__repr__()
    list_0 = []
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(list_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_13)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()


def test_case_467():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(var_1)
    bst_4 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_3 = node_3.__repr__()
    bst_5 = module_0.Bst(var_3)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_4 = node_4.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_5 = node_5.__repr__()
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_6 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    str_1 = "7"
    node_7 = module_0.Node(str_1)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_16 = var_1.__repr__()


def test_case_468():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_2.__repr__()
    node_3 = module_0.Node(bool_1)
    bst_4 = module_0.Bst()


def test_case_469():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_6 = module_0.Bst()
    var_4 = var_2.__repr__()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    node_4 = module_0.Node(bst_7)
    var_7 = var_5.__repr__()
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    node_5 = module_0.Node(bst_3)


def test_case_470():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_3 = module_0.Node(var_8)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_4 = module_0.Node(var_9)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_13 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_14 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_8.__repr__()
    bst_13 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bst_14 = module_0.Bst(bst_12)
    bst_15 = module_0.Bst()


def test_case_471():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(var_4)
    bst_8 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_6 = node_6.__repr__()
    bst_9 = module_0.Bst(var_6)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_1)
    int_0 = 3317
    node_9 = module_0.Node(int_0)
    var_7 = node_8.__repr__()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_10.__repr__()
    bst_12 = module_0.Bst()
    node_11 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    node_12 = module_0.Node(bst_13)
    var_10 = bst_13.insert(node_12)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    var_11 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_15 = module_0.Bst()
    var_13 = var_11.__repr__()
    list_0 = []
    bst_16 = module_0.Bst()
    var_14 = bst_16.insert(list_0)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(var_14)
    var_15 = node_9.__repr__()


def test_case_472():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = node_1.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_3 = module_0.Node(set_0)
    node_4 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_1 = False
    var_5 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    var_7 = bst_7.insert(node_6)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    var_8 = bst_8.insert(node_7)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_8)
    var_9 = node_8.__repr__()
    var_10 = var_7.__repr__()
    bst_9 = module_0.Bst()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    bool_2 = False
    var_11 = bst_9.insert(bool_2)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    node_10 = module_0.Node(bool_2)
    var_13 = node_0.__repr__()


def test_case_473():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst(bst_1)
    node_2 = module_0.Node(node_1)
    var_2 = node_2.__repr__()


def test_case_474():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_3 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_1.__repr__()
    var_8 = node_1.__repr__()
    node_2 = module_0.Node(var_7)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_3 = module_0.Node(dict_0)
    var_9 = bst_1.insert(var_7)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_475():
    float_0 = -131.8
    bst_0 = module_0.Bst(float_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(set_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_3 = module_0.Node(set_1)
    bst_4 = module_0.Bst()


def test_case_476():
    bst_0 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    int_0 = -1464
    var_4 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_6 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_7 = bst_6.insert(node_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    bst_8 = module_0.Bst()
    var_11 = node_8.__repr__()
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    var_12 = bst_9.insert(node_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    var_13 = bst_10.insert(node_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_13)
    var_14 = node_11.__repr__()
    var_15 = var_12.__repr__()
    bst_11 = module_0.Bst()
    var_16 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_12 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_12 = module_0.Node(set_1)
    node_13 = module_0.Node(bst_11)
    bst_13 = module_0.Bst()


def test_case_477():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    int_0 = -1464
    var_6 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    node_4 = module_0.Node(var_2)


def test_case_478():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    tuple_0 = (node_0, var_0, var_1, var_1)
    node_1 = module_0.Node(tuple_0)


def test_case_479():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    var_3 = node_2.__repr__()
    list_0 = []
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_4)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    int_1 = -1464
    var_8 = bst_5.insert(int_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    var_10 = node_6.__repr__()
    bst_7 = module_0.Bst(var_10)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_11)
    float_0 = -131.8
    bst_9 = module_0.Bst(float_0)
    float_1 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_1: float_1, float_1: complex_0}
    node_9 = module_0.Node(dict_0)
    var_12 = var_6.__repr__()
    node_10 = module_0.Node(var_12)


def test_case_480():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_4 = node_5.__repr__()
    bst_6 = module_0.Bst(var_4)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    bst_9 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_7 = module_0.Node(var_9)
    var_11 = var_10.__repr__()
    str_1 = "7"
    node_8 = module_0.Node(str_1)
    node_9 = module_0.Node(node_0)


def test_case_481():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(set_0)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_9 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    tuple_0 = (node_4, var_9, var_10, var_10)
    node_5 = module_0.Node(tuple_0)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    float_0 = -131.8
    bst_8 = module_0.Bst(float_0)
    int_0 = 3317
    node_7 = module_0.Node(int_0)
    bool_1 = False
    node_8 = module_0.Node(bool_1)
    list_0 = []
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(list_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_11)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_10 = module_0.Node(var_13)
    var_15 = var_14.__repr__()
    var_16 = node_2.__repr__()


def test_case_482():
    str_0 = 'WE\t"'
    tuple_0 = (str_0, str_0)
    dict_0 = {tuple_0: str_0}
    bst_0 = module_0.Bst()
    tuple_1 = (dict_0, bst_0)
    set_0 = {str_0, tuple_0, bst_0}
    bool_0 = False
    str_1 = "]*p3c_/j)FIgEjf0"
    tuple_2 = (tuple_1, set_0, bool_0, str_1)
    node_0 = module_0.Node(tuple_2)


def test_case_483():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_0 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    var_5 = bst_3.insert(node_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_4)
    var_6 = var_1.__repr__()


def test_case_484():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_2)
    bst_3 = module_0.Bst(var_0)


def test_case_485():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()


def test_case_486():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_2 = node_2.__repr__()
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(var_3)
    var_5 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_1)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_9 = module_0.Node(dict_0)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    bool_1 = False
    var_10 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    node_11 = module_0.Node(bst_10)
    var_11 = bst_10.insert(node_11)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_12 = module_0.Node(bst_11)
    var_12 = bst_11.insert(node_12)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(var_12)
    var_13 = node_13.__repr__()
    var_14 = var_11.__repr__()
    float_1 = -131.8
    bst_12 = module_0.Bst(float_1)
    bst_13 = module_0.Bst()


def test_case_487():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_2 = module_0.Node(var_1)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_4 = module_0.Node(set_1)
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_5)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_6 = module_0.Node(var_6)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    var_11 = node_8.__repr__()
    node_9 = module_0.Node(var_10)
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_11 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_10 = module_0.Node(set_2)
    node_11 = module_0.Node(bst_10)
    var_14 = var_12.__repr__()
    bst_12 = module_0.Bst()


def test_case_488():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    var_3 = node_3.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_4 = module_0.Node(set_1)
    var_4 = node_4.__repr__()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_5 = module_0.Node(var_5)
    float_0 = -131.8
    bst_4 = module_0.Bst(float_0)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(bst_6)
    var_8 = bst_6.insert(node_8)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_8)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    var_9 = bst_7.insert(node_10)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    bst_9 = module_0.Bst(var_4)


def test_case_489():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    int_0 = -1464
    var_3 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    node_4 = module_0.Node(bool_0)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_5 = module_0.Node(var_6)
    int_1 = 3317
    node_6 = module_0.Node(int_1)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_1 = False
    var_8 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_8 = module_0.Node(set_0)
    var_11 = node_8.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()


def test_case_490():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_0.__repr__()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(var_2)
    var_4 = node_0.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    int_0 = -1464
    var_5 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(var_6)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_5 = module_0.Node(var_8)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_12 = module_0.Bst()
    node_6 = module_0.Node(bst_12)
    var_12 = bst_12.insert(node_6)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    node_7 = module_0.Node(bst_13)
    var_13 = bst_13.insert(node_7)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_13)
    var_14 = node_8.__repr__()
    var_15 = var_12.__repr__()
    var_16 = var_4.__repr__()


def test_case_491():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()


def test_case_492():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_4 = module_0.Bst(bst_0)


def test_case_493():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    var_4 = var_2.__repr__()


def test_case_494():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    float_0 = -131.8
    bst_4 = module_0.Bst(float_0)
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    bst_5 = module_0.Bst()


def test_case_495():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)


def test_case_496():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_2 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(var_3)
    node_4 = module_0.Node(set_0)
    node_5 = module_0.Node(node_4)


def test_case_497():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst(var_3)
    bst_8 = module_0.Bst()


def test_case_498():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    var_7 = node_5.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_8 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    str_1 = ""
    bst_7 = module_0.Bst(str_1)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()


def test_case_499():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()


def test_case_500():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_3 = node_2.__repr__()
    node_3 = module_0.Node(var_0)


def test_case_501():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)


def test_case_502():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    var_5 = var_0.__repr__()


def test_case_503():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    node_4 = module_0.Node(bool_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_0)
    int_0 = 3317
    node_6 = module_0.Node(int_0)
    var_6 = node_5.__repr__()
    list_0 = []
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_7)
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_8.__repr__()
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_9.__repr__()
    bst_10 = module_0.Bst()
    var_12 = var_10.__repr__()
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_10.__repr__()
    bst_13 = module_0.Bst()
    node_11 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_15 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_12 = module_0.Node(bst_14)
    bst_16 = module_0.Bst()
    node_13 = module_0.Node(bst_16)
    var_17 = bst_16.insert(node_13)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_14 = module_0.Node(var_16)
    var_18 = var_13.__repr__()


def test_case_504():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_0)
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    str_1 = "7"
    node_4 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_4 = module_0.Bst()
    var_7 = var_5.__repr__()
    node_6 = module_0.Node(var_4)


def test_case_505():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_1 = module_0.Node(var_6)
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_2.__repr__()
    var_11 = node_2.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_4.__repr__()
    bst_11 = module_0.Bst()
    node_5 = module_0.Node(var_12)
    var_14 = node_4.__repr__()
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = ""
    bst_13 = module_0.Bst(str_0)
    var_16 = node_1.__repr__()


def test_case_506():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    var_4 = node_2.__repr__()
    bst_6 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_5 = node_4.__repr__()
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(set_0)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_6 = module_0.Node(set_1)
    node_7 = module_0.Node(bst_9)
    var_10 = bst_1.insert(var_3)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_507():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(set_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_3 = module_0.Node(set_1)
    var_5 = node_3.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(node_3)
    str_2 = "w8<H^+~qIrArq]1_$"
    node_6 = module_0.Node(str_2)
    var_6 = var_2.__repr__()


def test_case_508():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    var_3 = var_0.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_4)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_5 = module_0.Node(var_9)
    var_11 = var_10.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_12 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_6.__repr__()
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bst_10 = module_0.Bst(bst_8)
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_8.__repr__()
    var_16 = node_8.__repr__()
    node_9 = module_0.Node(var_15)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_10 = module_0.Node(set_0)
    var_17 = node_10.__repr__()
    bst_13 = module_0.Bst()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    node_12 = module_0.Node(node_10)
    bst_14 = module_0.Bst()
    node_13 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_18 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = node_13.__repr__()
    var_20 = node_13.__repr__()
    node_14 = module_0.Node(node_3)


def test_case_509():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_4 = module_0.Bst(bst_2)
    var_3 = node_2.__repr__()


def test_case_510():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_2 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    var_6 = node_3.__repr__()
    node_4 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(var_7)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_7 = module_0.Node(var_10)
    var_12 = var_11.__repr__()
    str_0 = "7"
    node_8 = module_0.Node(str_0)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_9 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    var_15 = bst_11.insert(node_10)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_14)
    int_0 = 3317
    node_12 = module_0.Node(int_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_13 = module_0.Node(set_0)
    var_16 = node_13.__repr__()
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_14 = module_0.Node(none_type_1)
    node_15 = module_0.Node(node_13)
    var_17 = var_6.__repr__()


def test_case_511():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    str_0 = "g`Jh^in-'\x0coH<5"
    node_2 = module_0.Node(str_0)


def test_case_512():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_2 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    bst_7 = module_0.Bst()
    var_9 = var_7.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    var_12 = bst_11.insert(node_8)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_12)
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    var_13 = bst_12.insert(node_10)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()


def test_case_513():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_6 = module_0.Node(var_6)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_8 = node_7.__repr__()
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_0 = False
    var_9 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(bst_8)
    bst_10 = module_0.Bst()
    node_11 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_11.__repr__()
    var_15 = var_13.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    none_type_3 = None
    node_12 = module_0.Node(none_type_3)
    var_16 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_1.__repr__()


def test_case_514():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)


def test_case_515():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_6 = module_0.Bst()
    var_4 = var_2.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_5 = node_4.__repr__()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    node_6 = module_0.Node(node_4)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_7 = module_0.Node(var_6)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_8 = module_0.Node(set_1)
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_9.__repr__()
    var_10 = node_9.__repr__()
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_10.__repr__()
    bst_13 = module_0.Bst()
    node_11 = module_0.Node(var_11)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    none_type_1 = None
    node_12 = module_0.Node(none_type_1)
    var_13 = node_12.__repr__()
    set_2 = {var_2, node_1}
    node_13 = module_0.Node(set_2)


def test_case_516():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(var_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst(var_5)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    var_8 = node_5.__repr__()
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(set_0)
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    var_11 = bst_10.insert(node_7)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_11)
    bst_11 = module_0.Bst()
    none_type_0 = None
    node_9 = module_0.Node(none_type_0)
    var_12 = bst_11.insert(node_9)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(node_7)


def test_case_517():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst(bst_3)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_4 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    var_5 = bst_7.insert(node_5)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_5)
    var_6 = node_6.__repr__()
    var_7 = var_4.__repr__()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_8 = node_7.__repr__()
    bst_9 = module_0.Bst()


def test_case_518():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    node_4 = module_0.Node(bool_0)
    list_0 = []
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_5)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_8 = module_0.Node(set_0)
    var_6 = node_8.__repr__()
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(set_0)
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_1 = False
    var_9 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = "w8<H^+~qIrArq]1_$"
    node_11 = module_0.Node(str_2)
    list_1 = []
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(list_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_10)
    bst_10 = module_0.Bst(list_0)


def test_case_519():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(var_3)
    bst_3 = module_0.Bst()


def test_case_520():
    float_0 = -131.8
    bst_0 = module_0.Bst(float_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    tuple_0 = (node_0, var_0, var_1, var_1)
    node_1 = module_0.Node(tuple_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    var_4 = node_2.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    int_0 = -1464
    var_8 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_9 = node_6.__repr__()
    bst_9 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_1)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bool_1 = False
    var_12 = bst_12.insert(bool_1)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_8.__repr__()
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_9.__repr__()
    bst_15 = module_0.Bst()
    node_10 = module_0.Node(var_14)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_11 = module_0.Node(set_1)
    var_16 = node_11.__repr__()
    bst_16 = module_0.Bst()
    var_17 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_17 = module_0.Bst()
    node_12 = module_0.Node(set_1)
    var_19 = var_12.__repr__()


def test_case_521():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(var_6)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_8 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    bst_14 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_8 = module_0.Node(set_0)
    bst_15 = module_0.Bst()
    node_9 = module_0.Node(bst_15)
    var_10 = bst_15.insert(node_9)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_10)
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    var_11 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_18 = module_0.Bst()
    bst_19 = module_0.Bst()
    var_13 = bst_19.insert(bst_19)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_20 = module_0.Bst(var_12)
    int_0 = 3317
    node_11 = module_0.Node(int_0)
    bst_21 = module_0.Bst()
    none_type_2 = None
    node_12 = module_0.Node(none_type_2)
    bool_2 = False
    var_15 = bst_21.insert(bool_2)
    assert (
        f"{type(bst_21.root).__module__}.{type(bst_21.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_13 = module_0.Node(var_16)
    node_14 = module_0.Node(bool_0)


def test_case_522():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    str_0 = ""
    bst_3 = module_0.Bst(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_6 = node_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = var_6.__repr__()


def test_case_523():
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_0 = module_0.Bst()
    tuple_0 = (bst_0,)
    tuple_1 = (dict_0, tuple_0)
    node_0 = module_0.Node(tuple_1)


def test_case_524():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()


def test_case_525():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_2 = module_0.Bst()
    tuple_0 = (bst_2,)
    tuple_1 = (dict_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_6)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_6 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_9 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_13 = module_0.Bst(var_8)
    bst_14 = module_0.Bst()
    var_11 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_15 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_8 = module_0.Node(set_0)
    node_9 = module_0.Node(bst_14)
    bst_16 = module_0.Bst()
    node_10 = module_0.Node(bst_16)
    var_13 = bst_16.insert(node_10)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_17 = module_0.Bst()
    var_14 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_18 = module_0.Bst()
    var_16 = var_14.__repr__()
    bst_19 = module_0.Bst()


def test_case_526():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_0.__repr__()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(var_4)
    var_6 = node_0.__repr__()
    bst_5 = module_0.Bst()
    var_7 = node_0.__repr__()


def test_case_527():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_2 = node_1.__repr__()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_3 = module_0.Bst()
    var_5 = var_1.__repr__()


def test_case_528():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)


def test_case_529():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()


def test_case_530():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst(bst_1)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_3 = node_4.__repr__()
    bst_5 = module_0.Bst(var_3)
    var_4 = node_2.__repr__()


def test_case_531():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_5 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    list_0 = []
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_0)
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_9.__repr__()
    node_10 = module_0.Node(bst_11)
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    bst_13 = module_0.Bst()
    var_15 = node_11.__repr__()
    int_1 = 3317
    node_12 = module_0.Node(int_1)
    bst_14 = module_0.Bst()
    none_type_2 = None
    node_13 = module_0.Node(none_type_2)
    var_16 = bst_10.insert(bst_8)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_532():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst(var_2)


def test_case_533():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_4)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_4 = module_0.Node(dict_0)
    var_6 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_534():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_1.__repr__()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    var_8 = bst_6.insert(node_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_8)
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_4.__repr__()
    bst_9 = module_0.Bst()
    var_11 = var_9.__repr__()
    var_12 = var_1.__repr__()


def test_case_535():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_5 = module_0.Node(var_3)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_7 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_8 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_8)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_5)
    bst_5 = module_0.Bst()
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_7)
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_12 = module_0.Node(var_9)
    var_11 = var_10.__repr__()
    str_1 = "7"
    node_13 = module_0.Node(str_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_14 = module_0.Node(str_2)
    bst_8 = module_0.Bst()
    none_type_4 = None
    node_15 = module_0.Node(none_type_4)
    bst_9 = module_0.Bst(node_2)


def test_case_536():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)


def test_case_537():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    var_5 = bst_5.insert(node_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_4)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_1 = False
    var_11 = bst_12.insert(bool_1)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_8 = module_0.Node(var_14)
    var_16 = var_15.__repr__()
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_16 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_9 = module_0.Node(set_0)
    node_10 = module_0.Node(bst_15)
    var_19 = var_17.__repr__()
    int_0 = 3317
    node_11 = module_0.Node(int_0)
    bst_17 = module_0.Bst()


def test_case_538():
    int_0 = 869
    node_0 = module_0.Node(int_0)


def test_case_539():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_3 = bst_4.insert(node_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_4 = node_5.__repr__()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(set_0)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    var_11 = node_8.__repr__()
    node_9 = module_0.Node(var_10)
    bst_10 = module_0.Bst(bst_8)


def test_case_540():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = ""
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    int_0 = -1464
    var_0 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(bst_3)
    bst_5 = module_0.Bst(bool_0)


def test_case_541():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    var_8 = var_6.__repr__()
    bst_9 = module_0.Bst()
    list_0 = []
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(list_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_9)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_10 = node_6.__repr__()
    bst_11 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    node_8 = module_0.Node(node_6)
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bool_0 = False
    var_11 = bst_12.insert(bool_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    bst_13 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_1 = False
    var_13 = bst_13.insert(bool_1)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_14 = module_0.Bst()
    var_15 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_15 = module_0.Bst()
    var_16 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    node_11 = module_0.Node(var_16)
    var_18 = var_17.__repr__()
    str_1 = "7"
    node_12 = module_0.Node(str_1)
    bst_16 = module_0.Bst()
    var_19 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = var_19.__repr__()
    bst_17 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_13 = module_0.Node(set_1)
    node_14 = module_0.Node(bst_16)
    var_21 = var_19.__repr__()
    var_22 = node_14.__repr__()


def test_case_542():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    var_3 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_5 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_6 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_8 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_8)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    bst_7 = module_0.Bst()
    var_12 = node_5.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_13 = node_6.__repr__()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    node_8 = module_0.Node(node_6)
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_1 = False
    var_14 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_9.__repr__()
    node_10 = module_0.Node(bool_1)
    var_16 = var_10.__repr__()


def test_case_543():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_2 = node_2.__repr__()
    node_3 = module_0.Node(var_2)
    list_0 = []
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_5 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_6)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_5)
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    var_7 = bst_8.insert(node_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst()
    var_10 = var_8.__repr__()
    bst_11 = module_0.Bst()
    none_type_0 = None
    node_9 = module_0.Node(none_type_0)
    bool_0 = False
    var_11 = bst_11.insert(bool_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    node_11 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_12 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_11.__repr__()
    var_14 = node_11.__repr__()
    node_12 = module_0.Node(var_4)


def test_case_544():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(var_2)
    var_4 = node_1.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_11 = module_0.Bst(var_6)
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_9 = bst_12.insert(bool_1)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_13 = module_0.Bst()


def test_case_545():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    var_3 = var_0.__repr__()
    var_4 = node_1.__repr__()


def test_case_546():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    var_4 = node_2.__repr__()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_4 = module_0.Node(var_6)
    var_8 = var_7.__repr__()
    str_1 = "7"
    node_5 = module_0.Node(str_1)
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_7 = module_0.Node(dict_0)
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    var_11 = node_8.__repr__()
    var_12 = var_11.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_9 = module_0.Node(set_0)
    var_13 = node_9.__repr__()
    var_14 = var_2.__repr__()


def test_case_547():
    float_0 = -131.8
    bst_0 = module_0.Bst(float_0)
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    bst_7 = module_0.Bst()
    var_9 = var_7.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    int_1 = -1464
    var_10 = bst_8.insert(int_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_11 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_6.__repr__()
    node_7 = module_0.Node(bool_1)
    var_13 = node_3.__repr__()


def test_case_548():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    var_6 = var_1.__repr__()


def test_case_549():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    node_2 = module_0.Node(bst_2)
    var_4 = var_2.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    var_5 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_5)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    var_7 = bst_5.insert(node_6)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_7)
    var_8 = node_7.__repr__()
    var_9 = var_6.__repr__()
    str_2 = "w8<H^+~qIrArq]1_$"
    node_8 = module_0.Node(str_2)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_10 = module_0.Node(bst_7)
    int_1 = -1464
    var_11 = bst_7.insert(int_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_11 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_13 = module_0.Bst(var_13)
    bst_14 = module_0.Bst()
    var_16 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_15 = module_0.Bst()
    var_18 = var_13.__repr__()


def test_case_550():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    node_3 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    var_5 = bst_5.insert(node_4)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    var_6 = bst_6.insert(node_5)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_6)
    var_7 = node_6.__repr__()
    var_8 = var_5.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_7.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_8.__repr__()
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    var_13 = node_10.__repr__()
    var_14 = var_13.__repr__()
    bst_14 = module_0.Bst(bst_0)


def test_case_551():
    int_0 = -1138
    node_0 = module_0.Node(int_0)


def test_case_552():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(none_type_0)


def test_case_553():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    list_1 = []
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(list_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_4 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_5 = node_5.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_6 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_0 = False
    var_10 = bst_11.insert(bool_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_9.__repr__()
    bst_12 = module_0.Bst()
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_11 = module_0.Node(str_0)
    node_12 = module_0.Node(node_11)


def test_case_554():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_0 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_1.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(var_5)
    var_7 = node_1.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()


def test_case_555():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    var_3 = node_5.__repr__()
    node_6 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_7.__repr__()
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(var_4)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(none_type_0)


def test_case_556():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    var_1 = bst_0.insert(node_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None


def test_case_557():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_6 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_7)
    var_8 = node_7.__repr__()
    var_9 = var_6.__repr__()
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_8 = module_0.Node(var_10)
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_9.__repr__()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(var_12)
    var_14 = node_9.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    bool_1 = False
    var_15 = bst_12.insert(bool_1)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_13 = module_0.Bst()
    node_12 = module_0.Node(bst_13)
    var_17 = bst_13.insert(node_12)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    var_18 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    bst_15 = module_0.Bst()
    var_20 = var_18.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_13 = module_0.Node(dict_0)
    var_21 = node_5.__repr__()


def test_case_558():
    float_0 = -131.8
    bst_0 = module_0.Bst(float_0)
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = var_1.__repr__()


def test_case_559():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(var_3)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_4)
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_7.__repr__()
    var_7 = node_7.__repr__()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_8.__repr__()
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(var_8)
    var_10 = node_8.__repr__()
    bst_12 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_10 = module_0.Node(str_1)
    bst_13 = module_0.Bst()
    node_11 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_11 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_11.__repr__()
    node_12 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    none_type_2 = None
    node_13 = module_0.Node(none_type_2)
    var_13 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_0.__repr__()


def test_case_560():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_6 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    var_8 = node_5.__repr__()
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    var_9 = bst_11.insert(node_6)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_13 = module_0.Bst()
    var_12 = var_10.__repr__()
    bst_14 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_2 = False
    var_13 = bst_14.insert(bool_2)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_15 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_8 = module_0.Node(set_0)
    var_15 = node_8.__repr__()
    node_9 = module_0.Node(var_15)
    bst_16 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bst_17 = module_0.Bst(var_6)


def test_case_561():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_1 = module_0.Node(dict_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_3 = module_0.Node(set_0)
    var_1 = node_3.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_4 = module_0.Node(set_1)
    var_2 = node_4.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    node_6 = module_0.Node(node_4)
    int_1 = -2466
    dict_1 = {int_1: int_1, int_1: int_1, int_1: int_1, int_1: int_1}
    bst_2 = module_0.Bst()
    tuple_0 = (bst_2,)
    tuple_1 = (dict_1, tuple_0)
    node_7 = module_0.Node(tuple_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_8 = module_0.Node(bst_3)
    int_2 = -1138
    node_9 = module_0.Node(int_2)
    str_3 = "(-+2Yj@U8NM6[+0S0o"
    node_10 = module_0.Node(str_3)
    bst_5 = module_0.Bst()
    node_11 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_11.__repr__()
    node_12 = module_0.Node(bst_6)
    var_7 = node_9.__repr__()


def test_case_562():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    node_2 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst(var_5)
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_8 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_11 = module_0.Bst()
    node_4 = module_0.Node(var_9)
    var_10 = var_7.__repr__()


def test_case_563():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_3.__repr__()


def test_case_564():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    var_2 = node_2.__repr__()
    int_1 = -1138
    node_4 = module_0.Node(int_1)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_3 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    var_4 = bst_6.insert(node_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_4)
    var_5 = node_7.__repr__()
    var_6 = var_3.__repr__()
    bst_7 = module_0.Bst()


def test_case_565():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    tuple_0 = (node_0, var_0, var_1, var_1)
    node_1 = module_0.Node(tuple_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    int_0 = -1464
    var_5 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()


def test_case_566():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst(var_6)
    var_9 = node_2.__repr__()


def test_case_567():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_2.__repr__()


def test_case_568():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_7 = module_0.Bst()
    tuple_0 = (bst_7,)
    tuple_1 = (dict_0, tuple_0)
    node_5 = module_0.Node(tuple_1)
    int_1 = 3317
    node_6 = module_0.Node(int_1)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_8 = module_0.Node(var_6)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_9 = module_0.Node(set_0)
    var_7 = node_9.__repr__()
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(set_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_11 = module_0.Node(str_1)
    bst_11 = module_0.Bst()
    node_12 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_12.__repr__()
    node_13 = module_0.Node(bst_12)
    var_12 = var_8.__repr__()


def test_case_569():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()


def test_case_570():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    var_4 = var_2.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_11 = module_0.Bst(var_6)
    bst_12 = module_0.Bst()
    var_9 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_10 = bst_13.insert(bool_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    node_5 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_11 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_5.__repr__()
    bst_16 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bst_17 = module_0.Bst(bst_15)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_7 = module_0.Node(set_0)
    var_13 = node_7.__repr__()
    bst_18 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_1 = False
    var_14 = bst_18.insert(bool_1)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_19 = module_0.Bst()
    tuple_0 = (node_8, var_14, var_15, var_15)
    node_9 = module_0.Node(tuple_0)
    bst_20 = module_0.Bst()
    node_10 = module_0.Node(bst_20)
    bst_21 = module_0.Bst()
    var_16 = bst_21.insert(bst_21)
    assert (
        f"{type(bst_21.root).__module__}.{type(bst_21.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_10.__repr__()
    bst_22 = module_0.Bst()
    node_11 = module_0.Node(bst_22)
    bst_23 = module_0.Bst()
    var_18 = bst_23.insert(bst_23)
    assert (
        f"{type(bst_23.root).__module__}.{type(bst_23.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    var_20 = node_6.__repr__()


def test_case_571():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst(var_2)
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_5 = node_1.__repr__()
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    tuple_0 = (node_2, var_7, var_8, var_8)
    node_3 = module_0.Node(tuple_0)
    bst_10 = module_0.Bst()
    node_4 = module_0.Node(bst_10)
    var_9 = bst_10.insert(node_4)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_5 = module_0.Node(bst_14)
    var_12 = bst_14.insert(node_5)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_12)
    var_13 = node_4.__repr__()


def test_case_572():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    var_5 = bst_5.insert(node_4)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_0 = []
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_6)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(var_9)
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_10 = module_0.Node(bst_14)
    var_11 = bst_14.insert(node_10)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_15 = module_0.Bst()
    node_11 = module_0.Node(bst_15)
    var_12 = bst_15.insert(node_11)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_12)
    var_13 = node_12.__repr__()
    var_14 = var_11.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_13 = module_0.Node(str_1)
    int_0 = 3317
    node_14 = module_0.Node(int_0)
    var_15 = node_13.__repr__()
    str_2 = "w8<H^+~qIrArq]1_$"
    node_15 = module_0.Node(str_2)
    node_16 = module_0.Node(var_6)


def test_case_573():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    var_3 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    int_0 = -1464
    var_6 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_7 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_9 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bst_7 = module_0.Bst(bst_5)
    bool_1 = False
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    var_11 = node_4.__repr__()


def test_case_574():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    int_0 = 869
    node_1 = module_0.Node(int_0)
    bst_3 = module_0.Bst()


def test_case_575():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_5 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_2)
    node_3 = module_0.Node(var_3)


def test_case_576():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_3 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(var_6)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    var_8 = bst_9.insert(node_5)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    var_9 = bst_10.insert(node_6)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_9)
    var_10 = node_7.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_8 = module_0.Node(str_0)
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    var_13 = node_9.__repr__()
    bool_0 = False
    node_10 = module_0.Node(bool_0)
    int_0 = 3317
    node_11 = module_0.Node(int_0)
    none_type_1 = None
    node_12 = module_0.Node(none_type_1)
    var_14 = node_12.__repr__()
    bst_13 = module_0.Bst()
    none_type_2 = None
    node_13 = module_0.Node(none_type_2)
    bool_1 = False
    var_15 = bst_13.insert(bool_1)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_14 = module_0.Bst()
    tuple_0 = (node_13, var_15, var_16, var_16)
    node_14 = module_0.Node(tuple_0)
    bst_15 = module_0.Bst()


def test_case_577():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)


def test_case_578():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(var_1)
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_6.__repr__()


def test_case_579():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_10 = module_0.Bst(bst_9)


def test_case_580():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_1 = module_0.Bst(str_0)
    node_1 = module_0.Node(bst_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst(var_2)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_4 = module_0.Node(set_0)
    node_5 = module_0.Node(bst_3)
    var_5 = var_4.__repr__()


def test_case_581():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_1 = node_2.__repr__()
    bst_0 = module_0.Bst(var_1)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_3 = module_0.Node(set_1)
    node_4 = module_0.Node(bst_1)
    node_5 = module_0.Node(set_0)


def test_case_582():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = node_0.__repr__()


def test_case_583():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    var_2 = var_0.__repr__()


def test_case_584():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_2 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    var_5 = var_3.__repr__()
    bst_4 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_6 = node_4.__repr__()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(set_0)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    var_9 = node_7.__repr__()
    bst_8 = module_0.Bst(var_9)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_10 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_8 = module_0.Node(set_1)
    node_9 = module_0.Node(bst_9)
    var_12 = var_10.__repr__()
    bst_11 = module_0.Bst()


def test_case_585():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    list_0 = []
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_3.data == []
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    node_2 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(var_4)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    var_6 = bst_8.insert(node_5)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    var_9 = var_7.__repr__()
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_6 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    str_0 = "7"
    node_7 = module_0.Node(str_0)
    list_1 = []
    bst_13 = module_0.Bst()
    var_14 = bst_13.insert(list_1)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_14)
    bst_14 = module_0.Bst(var_4)


def test_case_586():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    int_0 = -1464
    var_6 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_5 = module_0.Bst(str_0)
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_0 = False
    var_7 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    node_7 = module_0.Node(none_type_2)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_11 = module_0.Bst(var_10)
    str_1 = "w8<H^+~qIrArq]1_$"
    node_8 = module_0.Node(str_1)
    var_13 = node_3.__repr__()


def test_case_587():
    object_0 = module_1.object()
    node_0 = module_0.Node(object_0)


def test_case_588():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    var_3 = bst_0.insert(bool_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_3.data is False
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    node_3 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_2 = False
    var_4 = bst_1.insert(bool_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_2 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_3 = False
    var_6 = bst_2.insert(bool_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    node_6 = module_0.Node(bool_3)
    bst_3 = module_0.Bst()
    node_7 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_8 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    var_10 = var_8.__repr__()
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_5 = module_0.Bst(str_1)
    node_8 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    node_9 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    bst_8 = module_0.Bst()
    var_13 = var_11.__repr__()
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(bst_9)
    var_14 = bst_9.insert(node_10)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_13)


def test_case_589():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_3 = module_0.Node(var_1)
    none_type_1 = None
    bst_3 = module_0.Bst(none_type_1)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_4 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_0 = "7"
    node_5 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_6 = module_0.Node(var_6)
    var_8 = var_6.__repr__()
    node_7 = module_0.Node(bst_1)


def test_case_590():
    float_0 = -131.8
    bst_0 = module_0.Bst(float_0)
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_2 = module_0.Bst(str_0)
    node_2 = module_0.Node(bst_2)
    int_0 = 869
    node_3 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    node_5 = module_0.Node(int_0)


def test_case_591():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = node_1.__repr__()
    bst_2 = module_0.Bst()
    var_5 = var_3.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_6 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(node_2)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    var_12 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_11.__repr__()
    bst_9 = module_0.Bst()
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    bool_1 = False
    var_14 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_10 = module_0.Bst()
    var_16 = node_5.__repr__()


def test_case_592():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    int_0 = -1138
    node_1 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    int_1 = 3317
    node_5 = module_0.Node(int_1)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    var_5 = node_6.__repr__()
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_8 = module_0.Node(var_9)
    var_11 = var_9.__repr__()
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_9.__repr__()
    var_14 = var_12.__repr__()
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_1 = False
    var_15 = bst_11.insert(bool_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_12 = module_0.Bst()
    tuple_0 = (node_10, var_15, var_16, var_16)
    node_11 = module_0.Node(tuple_0)
    node_12 = module_0.Node(var_8)


def test_case_593():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_2 = module_0.Node(set_1)
    var_1 = node_2.__repr__()
    bst_0 = module_0.Bst(var_1)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_2)
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    var_2 = node_3.__repr__()
    int_1 = -2466
    dict_0 = {int_1: int_1, int_1: int_1, int_1: int_1, int_1: int_1}
    bst_1 = module_0.Bst()
    tuple_0 = (bst_1,)
    tuple_1 = (dict_0, tuple_0)
    node_5 = module_0.Node(tuple_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(bst_3)
    int_2 = -1464
    var_6 = bst_3.insert(int_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_8 = module_0.Node(var_8)
    var_10 = var_9.__repr__()
    bst_6 = module_0.Bst()
    node_9 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    bst_8 = module_0.Bst()
    node_10 = module_0.Node(var_11)
    var_13 = node_9.__repr__()
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_3}
    node_11 = module_0.Node(set_2)
    var_14 = node_11.__repr__()
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_12 = module_0.Node(none_type_0)
    node_13 = module_0.Node(node_11)
    bst_10 = module_0.Bst()
    node_14 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_15 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_14.__repr__()
    bst_12 = module_0.Bst()
    var_17 = var_15.__repr__()
    bst_13 = module_0.Bst()


def test_case_594():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_4 = node_2.__repr__()
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(bst_1)


def test_case_595():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    object_0 = module_1.object()
    node_3 = module_0.Node(object_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_3 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    node_6 = module_0.Node(none_type_1)
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_7.__repr__()
    var_7 = node_7.__repr__()
    node_8 = module_0.Node(var_6)
    var_8 = node_5.__repr__()


def test_case_596():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = node_1.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_7 = node_3.__repr__()
    int_0 = -1138
    node_4 = module_0.Node(int_0)
    bst_4 = module_0.Bst(node_3)


def test_case_597():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()


def test_case_598():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_0)
    var_5 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_599():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    node_3 = module_0.Node(bool_0)
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bst_5 = module_0.Bst(bst_3)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(none_type_0)


def test_case_600():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)


def test_case_601():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    int_0 = -1464
    var_4 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_0 = False
    var_5 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    str_1 = ""
    bst_5 = module_0.Bst(str_1)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(var_9)
    var_11 = node_8.__repr__()
    bst_12 = module_0.Bst()


def test_case_602():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(bst_1)
    object_0 = module_1.object()
    node_2 = module_0.Node(object_0)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(var_4)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_6 = node_5.__repr__()
    bst_6 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_6 = module_0.Node(set_1)
    var_7 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_7)


def test_case_603():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_4)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(var_6)
    int_0 = -1138
    node_6 = module_0.Node(int_0)
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    var_8 = bst_9.insert(node_7)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    var_9 = bst_10.insert(node_8)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_9)
    var_10 = node_9.__repr__()
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    var_11 = bst_11.insert(node_10)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_11)
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_12 = module_0.Node(none_type_1)
    var_12 = bst_12.insert(node_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    var_15 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_17 = module_0.Bst(var_14)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_13 = module_0.Node(str_0)
    var_17 = var_5.__repr__()


def test_case_604():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)


def test_case_605():
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_0 = module_0.Node(bytes_0)


def test_case_606():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    list_0 = []
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_2)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    var_5 = bst_6.insert(node_3)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_4)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_6)
    var_7 = node_5.__repr__()
    var_8 = var_5.__repr__()
    int_0 = -1138
    node_6 = module_0.Node(int_0)
    int_1 = 3317
    node_7 = module_0.Node(int_1)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    bool_0 = False
    var_9 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_9 = module_0.Node(var_10)
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_4.__repr__()


def test_case_607():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_5 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_6)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_5)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_0)
    var_8 = node_3.__repr__()


def test_case_608():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()


def test_case_609():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    node_5 = module_0.Node(bst_3)
    node_6 = module_0.Node(node_3)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_1 = False
    var_4 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    bool_2 = False
    var_5 = bst_5.insert(bool_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_9.__repr__()
    node_10 = module_0.Node(none_type_3)
    none_type_4 = None
    node_11 = module_0.Node(none_type_4)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    bst_7 = module_0.Bst()
    var_10 = node_11.__repr__()
    int_0 = 3317
    node_12 = module_0.Node(int_0)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_13 = module_0.Node(var_11)
    var_13 = var_11.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_14 = module_0.Node(dict_0)
    bst_9 = module_0.Bst(node_1)


def test_case_610():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    var_2 = node_0.__repr__()


def test_case_611():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    node_3 = module_0.Node(bst_1)
    node_4 = module_0.Node(node_3)


def test_case_612():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_1 = module_0.Node(dict_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    var_4 = node_2.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_5 = node_4.__repr__()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(set_0)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_6 = module_0.Node(set_1)
    node_7 = module_0.Node(bst_7)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_2)
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_9.__repr__()
    node_10 = module_0.Node(bst_10)
    none_type_1 = None
    bst_11 = module_0.Bst(none_type_1)
    str_3 = "w8<H^+~qIrArq]1_$"
    node_11 = module_0.Node(str_3)
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_12 = module_0.Node(none_type_2)
    bool_1 = False
    var_12 = bst_12.insert(bool_1)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_13 = module_0.Bst()
    tuple_0 = (node_12, var_12, var_13, var_13)
    node_13 = module_0.Node(tuple_0)
    bst_14 = module_0.Bst()
    none_type_3 = None
    node_14 = module_0.Node(none_type_3)
    var_14 = node_14.__repr__()
    var_15 = var_14.__repr__()
    node_15 = module_0.Node(var_13)


def test_case_613():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    var_4 = node_2.__repr__()


def test_case_614():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    var_2 = node_0.__repr__()
    str_1 = ""
    bst_2 = module_0.Bst(str_1)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_3 = module_0.Node(dict_0)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_2)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_3}
    node_5 = module_0.Node(set_0)
    var_3 = node_5.__repr__()
    bst_3 = module_0.Bst(var_3)
    str_4 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_4}
    node_6 = module_0.Node(set_1)
    var_4 = node_6.__repr__()
    node_7 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = 3317
    node_8 = module_0.Node(int_0)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_9 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_10 = module_0.Node(var_7)
    int_1 = -2466
    dict_1 = {int_1: int_1, int_1: int_1, int_1: int_1, int_1: int_1}
    bst_6 = module_0.Bst()
    tuple_0 = (bst_6,)
    tuple_1 = (dict_1, tuple_0)
    node_11 = module_0.Node(tuple_1)
    var_8 = var_0.__repr__()


def test_case_615():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    tuple_0 = (node_3, var_5, var_6, var_6)
    node_4 = module_0.Node(tuple_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_7 = node_5.__repr__()
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(set_0)
    var_10 = var_7.__repr__()


def test_case_616():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    str_1 = ""
    bst_4 = module_0.Bst(str_1)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    bst_8 = module_0.Bst()
    int_0 = 869
    node_5 = module_0.Node(int_0)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()


def test_case_617():
    str_0 = ""
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_4 = module_0.Node(var_5)
    node_5 = module_0.Node(bool_0)


def test_case_618():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_1 = module_0.Bst(str_0)
    node_2 = module_0.Node(bst_1)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_5 = module_0.Node(var_3)
    none_type_2 = None
    bst_3 = module_0.Bst(none_type_2)
    bst_4 = module_0.Bst(bst_3)


def test_case_619():
    str_0 = " \x0c^"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()


def test_case_620():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bst_1)


def test_case_621():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(none_type_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()


def test_case_622():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_3 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    bst_6 = module_0.Bst()
    var_8 = node_6.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_7.__repr__()
    bst_9 = module_0.Bst()
    int_0 = 869
    node_8 = module_0.Node(int_0)
    bst_10 = module_0.Bst()
    none_type_3 = None
    bst_11 = module_0.Bst(none_type_3)
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(bst_12)
    int_1 = -1464
    var_11 = bst_12.insert(int_1)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_0 = []
    bst_13 = module_0.Bst()
    var_12 = bst_13.insert(list_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_12)
    bst_14 = module_0.Bst()
    node_11 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_13 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_11.__repr__()
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()


def test_case_623():
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_0 = module_0.Bst(str_0)


def test_case_624():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    node_4 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    var_8 = bst_7.insert(node_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    var_9 = bst_8.insert(node_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_9)
    var_10 = node_9.__repr__()
    var_11 = var_8.__repr__()
    bst_9 = module_0.Bst()
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    var_12 = node_10.__repr__()
    var_13 = var_12.__repr__()
    none_type_4 = None
    node_11 = module_0.Node(none_type_4)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_12 = module_0.Node(dict_0)
    bst_10 = module_0.Bst()


def test_case_625():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_3 = module_0.Node(bytes_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst(var_3)
    bst_7 = module_0.Bst(var_1)


def test_case_626():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_2.__repr__()
    node_1 = module_0.Node(var_4)


def test_case_627():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    var_4 = var_2.__repr__()


def test_case_628():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(var_4)
    node_4 = module_0.Node(bst_3)
    int_0 = -1138
    node_5 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_7 = module_0.Node(var_6)
    var_8 = var_6.__repr__()
    var_9 = var_4.__repr__()


def test_case_629():
    str_0 = " 4'"
    node_0 = module_0.Node(str_0)


def test_case_630():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    str_0 = " 4'"
    node_2 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_0 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_3.__repr__()
    var_2 = node_3.__repr__()
    node_4 = module_0.Node(var_1)
    var_3 = bst_1.insert(str_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_631():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    node_5 = module_0.Node(bst_3)
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    var_7 = var_5.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    var_8 = bst_7.insert(node_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_8)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    var_9 = bst_8.insert(node_9)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_10.__repr__()
    bst_11 = module_0.Bst()
    none_type_2 = None
    bst_12 = module_0.Bst(none_type_2)
    bst_13 = module_0.Bst()
    var_12 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_11 = module_0.Node(var_13)
    node_12 = module_0.Node(var_9)


def test_case_632():
    int_0 = 869
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_7.__repr__()
    node_8 = module_0.Node(bool_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_9 = module_0.Node(set_0)
    var_8 = node_9.__repr__()
    bst_7 = module_0.Bst(var_8)
    int_1 = 3317
    node_10 = module_0.Node(int_1)
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    bool_2 = False
    var_9 = bst_8.insert(bool_2)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_12 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_12.__repr__()
    bst_11 = module_0.Bst()
    node_13 = module_0.Node(bst_11)
    var_12 = bst_11.insert(node_13)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    node_14 = module_0.Node(bst_12)
    var_13 = bst_12.insert(node_14)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_15 = module_0.Node(var_13)
    var_14 = node_15.__repr__()
    var_15 = var_12.__repr__()
    var_16 = node_3.__repr__()


def test_case_633():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(var_2)
    node_3 = module_0.Node(var_2)


def test_case_634():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_5 = module_0.Bst()
    var_4 = var_2.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(var_5)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_7 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_6 = module_0.Node(bst_10)
    object_0 = module_1.object()
    node_7 = module_0.Node(object_0)
    bst_12 = module_0.Bst()
    node_8 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_9 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_14 = module_0.Bst()
    node_9 = module_0.Node(bst_13)
    bst_15 = module_0.Bst()
    node_10 = module_0.Node(bst_15)
    bst_16 = module_0.Bst()
    var_11 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_10.__repr__()
    var_13 = var_11.__repr__()
    bst_17 = module_0.Bst()
    node_11 = module_0.Node(var_2)


def test_case_635():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    node_4 = module_0.Node(var_3)


def test_case_636():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    var_1 = bst_0.insert(str_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == "(-+2Yj@U8NM6[+0S0o"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None


def test_case_637():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(var_5)
    node_5 = module_0.Node(bst_4)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    var_6 = node_1.__repr__()


def test_case_638():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_2 = module_0.Node(var_1)
    var_3 = node_2.__repr__()


def test_case_639():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()


def test_case_640():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = node_2.__repr__()
    node_3 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()


def test_case_641():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == []
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = node_2.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_0)
    var_3 = bst_0.insert(var_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_642():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_5.__repr__()
    var_3 = var_1.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_6)
    bst_8 = module_0.Bst(bst_0)


def test_case_643():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    var_1 = bst_0.insert(str_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == "(-+2Yj@U8NM6[+0S0o"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    var_4 = bst_5.insert(node_4)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    var_8 = node_3.__repr__()


def test_case_644():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(var_0)
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()


def test_case_645():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(node_1)


def test_case_646():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_4 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(var_5)
    var_7 = node_5.__repr__()
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_7 = module_0.Node(var_9)
    var_11 = var_10.__repr__()
    str_0 = "7"
    node_8 = module_0.Node(str_0)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    var_12 = node_9.__repr__()
    var_13 = var_12.__repr__()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_14 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_10.__repr__()
    bst_12 = module_0.Bst()
    node_11 = module_0.Node(bst_12)
    dict_0 = {bst_7: bst_9, var_8: var_14, node_6: node_9}
    var_16 = bst_0.insert(dict_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_647():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = node_2.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_4 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_4 = module_0.Node(bst_7)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_6 = node_5.__repr__()
    node_6 = module_0.Node(var_6)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_7 = module_0.Node(var_7)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_8 = module_0.Node(var_9)
    var_11 = var_9.__repr__()
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_9.__repr__()
    bst_13 = module_0.Bst()
    node_10 = module_0.Node(var_12)
    var_14 = node_9.__repr__()
    bst_14 = module_0.Bst()
    var_15 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_15 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_11 = module_0.Node(set_1)
    node_12 = module_0.Node(bst_14)
    var_17 = var_15.__repr__()
    bst_16 = module_0.Bst()


def test_case_648():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_5 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_6 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_6)
    var_7 = node_3.__repr__()
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_4 = module_0.Bst(str_0)
    node_4 = module_0.Node(bst_4)
    var_8 = var_0.__repr__()


def test_case_649():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_6 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_7 = module_0.Node(set_0)
    node_8 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_9 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_9.__repr__()
    bst_8 = module_0.Bst()
    node_10 = module_0.Node(var_6)
    none_type_0 = None
    node_11 = module_0.Node(none_type_0)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_12 = module_0.Node(var_8)
    bst_10 = module_0.Bst()
    node_13 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_13.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()


def test_case_650():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_0 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_1 = module_0.Node(var_5)
    var_7 = var_6.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    var_8 = bst_5.insert(node_4)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    var_9 = bst_6.insert(node_5)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_9)
    var_10 = node_6.__repr__()
    var_11 = var_8.__repr__()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_12 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_13 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_8 = module_0.Node(bst_8)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_9 = module_0.Node(set_0)
    var_15 = node_9.__repr__()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_10 = module_0.Node(str_2)
    bst_10 = module_0.Bst()
    node_11 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_16 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_11.__repr__()
    node_12 = module_0.Node(bst_11)
    var_18 = node_10.__repr__()
    str_3 = "w8<H^+~qIrArq]1_$"
    node_13 = module_0.Node(str_3)
    var_19 = node_4.__repr__()


def test_case_651():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(var_4)
    int_1 = -2466
    dict_0 = {int_1: int_1, int_1: int_1, int_1: int_1, int_1: int_1}
    bst_3 = module_0.Bst()
    tuple_0 = (bst_3,)
    tuple_1 = (dict_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_5 = module_0.Node(var_5)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_7 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    var_9 = var_7.__repr__()


def test_case_652():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    var_5 = var_3.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_2 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    int_0 = 869
    node_3 = module_0.Node(int_0)
    int_1 = -2466
    dict_0 = {int_1: int_1, int_1: int_1, int_1: int_1, int_1: int_1}
    bst_9 = module_0.Bst()
    tuple_0 = (bst_9,)
    tuple_1 = (dict_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_0)
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_6 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    node_7 = module_0.Node(bst_11)
    node_8 = module_0.Node(node_5)
    bst_12 = module_0.Bst()
    none_type_0 = None
    node_9 = module_0.Node(none_type_0)
    var_8 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_8)
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_13 = module_0.Bst(str_1)
    node_11 = module_0.Node(bst_12)


def test_case_653():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    var_4 = node_5.__repr__()
    var_5 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    var_8 = var_6.__repr__()
    bst_6 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_7 = module_0.Node(set_0)
    var_9 = node_7.__repr__()
    bst_7 = module_0.Bst(var_9)
    bst_8 = module_0.Bst()


def test_case_654():
    float_0 = -131.8
    bst_0 = module_0.Bst(float_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    int_0 = -1464
    var_3 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_2 = module_0.Node(var_4)
    var_6 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_3 = module_0.Node(var_8)
    bst_5 = module_0.Bst()
    var_9 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_6 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    node_5 = module_0.Node(bst_5)
    var_11 = var_9.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_6 = module_0.Node(set_1)
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_12 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_7.__repr__()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(var_12)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    none_type_0 = None
    node_9 = module_0.Node(none_type_0)
    bool_0 = False
    var_14 = bst_11.insert(bool_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst(bst_12)


def test_case_655():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_3 = module_0.Node(set_1)
    var_5 = node_3.__repr__()
    bst_4 = module_0.Bst()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_6 = module_0.Bst()
    tuple_0 = (bst_6,)
    tuple_1 = (dict_0, tuple_0)
    node_6 = module_0.Node(tuple_1)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    int_1 = -1464
    var_11 = bst_8.insert(int_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_8)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_3}
    node_9 = module_0.Node(set_2)
    var_12 = node_9.__repr__()
    bst_9 = module_0.Bst()
    var_13 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(set_2)
    node_11 = module_0.Node(var_3)


def test_case_656():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    int_0 = -1138
    node_3 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_4 = module_0.Node(var_2)
    node_5 = module_0.Node(node_3)


def test_case_657():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = node_2.__repr__()
    node_3 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_7 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_7)
    var_8 = node_6.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_0)
    node_8 = module_0.Node(str_0)


def test_case_658():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_2 = node_1.__repr__()
    bst_1 = module_0.Bst(var_2)
    node_2 = module_0.Node(node_0)


def test_case_659():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    str_0 = " \x0c^"
    node_2 = module_0.Node(str_0)
    var_2 = node_2.__repr__()
    list_0 = []
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_6.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_1)
    int_0 = 3317
    node_6 = module_0.Node(int_0)
    var_9 = node_5.__repr__()
    bst_6 = module_0.Bst(var_7)


def test_case_660():
    bool_0 = True
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None


def test_case_661():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    node_2 = module_0.Node(bst_1)
    var_4 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    var_9 = var_8.__repr__()


def test_case_662():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(set_0)
    none_type_0 = None
    bst_2 = module_0.Bst(none_type_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_2 = module_0.Node(set_1)
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_5 = module_0.Bst()
    var_6 = var_4.__repr__()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_6 = module_0.Bst()
    tuple_0 = (bst_6,)
    tuple_1 = (dict_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    node_5 = module_0.Node(var_0)


def test_case_663():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(var_4)
    var_6 = var_4.__repr__()
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_4.__repr__()
    var_11 = node_4.__repr__()
    node_5 = module_0.Node(var_10)
    int_1 = 3317
    node_6 = module_0.Node(int_1)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_1 = False
    var_12 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_8 = module_0.Node(var_13)
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_8)
    var_14 = bst_8.insert(node_9)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_15 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_10 = module_0.Node(dict_0)
    bst_12 = module_0.Bst()


def test_case_664():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    node_5 = module_0.Node(float_0)


def test_case_665():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    var_1 = node_0.__repr__()


def test_case_666():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    var_3 = node_1.__repr__()


def test_case_667():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    node_2 = module_0.Node(bool_0)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    var_7 = node_3.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    str_1 = " 4'"
    node_5 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    bst_9 = module_0.Bst()
    int_0 = 3317
    node_7 = module_0.Node(int_0)
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_8.__repr__()
    var_12 = var_10.__repr__()
    bst_12 = module_0.Bst()
    none_type_1 = None
    bst_13 = module_0.Bst(none_type_1)
    bst_14 = module_0.Bst()
    node_9 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_13 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_9.__repr__()
    bst_16 = module_0.Bst()
    node_10 = module_0.Node(var_13)
    var_15 = node_9.__repr__()
    bst_17 = module_0.Bst(bst_3)


def test_case_668():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(var_3)
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    var_6 = var_4.__repr__()
    bst_5 = module_0.Bst()
    float_0 = -131.8
    bst_6 = module_0.Bst(float_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_7 = node_5.__repr__()
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(set_0)
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_7.__repr__()
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(var_10)
    bst_12 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_9 = module_0.Node(str_1)
    bst_13 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    var_12 = node_10.__repr__()
    var_13 = bst_13.insert(str_1)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_15 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_11 = module_0.Node(set_1)
    node_12 = module_0.Node(bst_14)
    bst_16 = module_0.Bst()
    var_16 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_3 = "(-+2Yj@U8NM6[+0S0o"
    node_13 = module_0.Node(str_3)
    bst_17 = module_0.Bst()
    node_14 = module_0.Node(bst_17)
    bst_18 = module_0.Bst()
    var_17 = bst_18.insert(bst_18)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = node_14.__repr__()
    node_15 = module_0.Node(bst_18)
    bst_19 = module_0.Bst()


def test_case_669():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_4 = node_2.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    node_5 = module_0.Node(bst_4)
    node_6 = module_0.Node(node_3)
    node_7 = module_0.Node(var_4)


def test_case_670():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bool_0 = True
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_2 = module_0.Node(bst_8)
    bst_10 = module_0.Bst()


def test_case_671():
    int_0 = 869
    node_0 = module_0.Node(int_0)
    int_1 = 3317
    node_1 = module_0.Node(int_1)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_3 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_4 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    bst_4 = module_0.Bst()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_6 = module_0.Node(dict_0)
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    var_6 = bst_5.insert(node_7)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_10 = module_0.Bst(var_8)
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    var_11 = bst_11.insert(node_8)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_13 = module_0.Bst()
    var_14 = var_12.__repr__()
    str_0 = "Tq\x0b<->u0)c9<_|Cw+6qa"
    node_9 = module_0.Node(str_0)


def test_case_672():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    var_2 = node_0.__repr__()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_2 = module_0.Bst()
    tuple_0 = (bst_2,)
    tuple_1 = (dict_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst(var_2)


def test_case_673():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()


def test_case_674():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    var_3 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    node_4 = module_0.Node(bst_2)
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    var_6 = node_5.__repr__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    int_0 = 869
    node_6 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    var_9 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_7 = module_0.Node(var_10)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_8 = module_0.Node(set_1)
    var_11 = node_8.__repr__()
    bst_5 = module_0.Bst(var_11)
    bst_6 = module_0.Bst()
    var_12 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_9 = module_0.Node(set_2)
    bst_7 = module_0.Bst()
    var_14 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    var_16 = var_15.__repr__()
    bst_8 = module_0.Bst()
    node_10 = module_0.Node(bst_8)
    int_1 = -1464
    var_17 = bst_8.insert(int_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_14)
    float_0 = 1967.51019
    node_12 = module_0.Node(float_0)


def test_case_675():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_4 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_3.__repr__()
    var_6 = var_2.__repr__()


def test_case_676():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_5 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_6 = bst_4.insert(node_5)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    var_7 = node_6.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_6)
    str_2 = " 4'"
    node_9 = module_0.Node(str_2)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    bool_0 = False
    var_10 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_9 = module_0.Bst()
    node_11 = module_0.Node(var_11)
    node_12 = module_0.Node(bst_9)
    node_13 = module_0.Node(var_4)


def test_case_677():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    str_0 = " 4'"
    node_3 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_4)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_3 = bst_3.insert(node_6)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_7)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    str_1 = ""
    bst_8 = module_0.Bst(str_1)
    int_0 = 3317
    node_8 = module_0.Node(int_0)
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_0 = False
    var_7 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_10 = module_0.Node(var_8)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_11 = module_0.Node(str_2)
    int_1 = 3317
    node_12 = module_0.Node(int_1)
    var_9 = node_11.__repr__()
    node_13 = module_0.Node(node_7)


def test_case_678():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    var_7 = var_5.__repr__()
    float_0 = -131.8
    bst_5 = module_0.Bst(float_0)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_3.__repr__()
    var_10 = node_3.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_1)
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    var_11 = node_4.__repr__()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_2)
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_7.__repr__()
    node_8 = module_0.Node(bst_9)
    node_9 = module_0.Node(node_6)
    bst_10 = module_0.Bst()
    var_14 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    var_16 = var_14.__repr__()
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    var_17 = bst_11.insert(node_10)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_17)
    int_1 = 3317
    node_12 = module_0.Node(int_1)
    node_13 = module_0.Node(var_2)


def test_case_679():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    var_3 = node_3.__repr__()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_4 = node_5.__repr__()
    bst_2 = module_0.Bst(var_4)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_6 = module_0.Node(var_6)
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    var_9 = bst_5.insert(node_7)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_9)
    list_0 = []
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_10)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    bool_0 = False
    var_11 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_10.__repr__()
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    var_13 = node_11.__repr__()
    node_12 = module_0.Node(var_6)


def test_case_680():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_1 = node_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(node_2)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_4.__repr__()
    bst_5 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_9 = module_0.Node(dict_0)
    bool_0 = False
    node_10 = module_0.Node(bool_0)
    node_11 = module_0.Node(node_10)
    bst_6 = module_0.Bst()


def test_case_681():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    list_0 = []
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_7)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    var_10 = node_5.__repr__()
    node_6 = module_0.Node(var_9)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_11 = node_7.__repr__()
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    node_8 = module_0.Node(var_8)


def test_case_682():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_4 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    node_2 = module_0.Node(bool_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = False
    var_6 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_1)
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_6 = module_0.Node(set_1)
    node_7 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_8.__repr__()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(var_10)
    var_12 = node_8.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_10 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_10.__repr__()
    var_15 = node_10.__repr__()
    bst_14 = module_0.Bst()
    node_11 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_16 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_11.__repr__()
    bst_16 = module_0.Bst()
    node_12 = module_0.Node(bst_15)
    var_18 = var_2.__repr__()


def test_case_683():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_3 = module_0.Bst()
    var_4 = var_2.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    node_6 = module_0.Node(bst_5)
    var_7 = bst_3.insert(str_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_684():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(var_2)


def test_case_685():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_4 = module_0.Bst()
    int_0 = 869
    node_3 = module_0.Node(int_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_4 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(var_7)
    var_9 = node_5.__repr__()
    int_1 = -1138
    node_7 = module_0.Node(int_1)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_8 = module_0.Node(var_10)
    var_12 = var_10.__repr__()
    bst_11 = module_0.Bst()
    none_type_0 = None
    node_9 = module_0.Node(none_type_0)
    bool_0 = False
    var_13 = bst_11.insert(bool_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()


def test_case_686():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()


def test_case_687():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()


def test_case_688():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_3 = module_0.Node(var_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_3 = module_0.Bst()
    tuple_0 = (bst_3,)
    tuple_1 = (dict_0, tuple_0)
    node_5 = module_0.Node(tuple_1)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_0 = False
    var_2 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_6.__repr__()
    node_7 = module_0.Node(bool_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    node_9 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_9.__repr__()
    node_10 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    node_11 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_11.__repr__()
    bst_9 = module_0.Bst()
    node_12 = module_0.Node(var_6)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    none_type_3 = None
    node_13 = module_0.Node(none_type_3)
    var_11 = node_13.__repr__()
    bst_12 = module_0.Bst(var_11)
    node_14 = module_0.Node(bst_11)


def test_case_689():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    str_0 = ""
    bst_6 = module_0.Bst(str_0)
    bst_7 = module_0.Bst()
    node_2 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_2 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    var_4 = node_2.__repr__()
    node_3 = module_0.Node(var_3)
    float_0 = -131.8
    bst_9 = module_0.Bst(float_0)
    bst_10 = module_0.Bst()
    node_4 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_5 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    var_7 = var_5.__repr__()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_8 = node_5.__repr__()
    var_9 = node_5.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    var_10 = node_6.__repr__()
    node_7 = module_0.Node(var_10)
    var_11 = bst_10.insert(var_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_690():
    str_0 = " \x0c^"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    tuple_0 = (node_1, var_1, var_2, var_2)
    node_2 = module_0.Node(tuple_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst(tuple_0)


def test_case_691():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    str_1 = " 4'"
    node_4 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    tuple_0 = (node_5, var_5, var_6, var_6)
    node_6 = module_0.Node(tuple_0)
    var_7 = var_3.__repr__()


def test_case_692():
    str_0 = " 4'"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_2 = node_2.__repr__()
    bst_3 = module_0.Bst(var_2)
    var_3 = node_2.__repr__()
    object_0 = module_1.object()
    node_3 = module_0.Node(object_0)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(var_4)
    var_6 = node_4.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    str_2 = ""
    bst_10 = module_0.Bst(str_2)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_9 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_11 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_16 = module_0.Bst(var_10)
    bst_17 = module_0.Bst()
    node_8 = module_0.Node(bst_17)
    var_13 = bst_17.insert(node_8)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_18 = module_0.Bst()
    var_14 = bst_18.insert(bst_18)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_19 = module_0.Bst()
    bst_20 = module_0.Bst()
    var_16 = node_7.__repr__()


def test_case_693():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    bst_0 = module_0.Bst()
    node_4 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_4.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bst_3 = module_0.Bst(bst_1)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_6.__repr__()
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_4 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_8 = module_0.Node(bst_7)
    float_0 = -131.8
    bst_9 = module_0.Bst(float_0)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    var_6 = node_9.__repr__()
    var_7 = var_6.__repr__()
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_11 = module_0.Bst(str_1)
    node_10 = module_0.Node(var_1)


def test_case_694():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    str_1 = " 4'"
    node_2 = module_0.Node(str_1)
    bst_1 = module_0.Bst()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_2)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_0 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_4.__repr__()
    node_5 = module_0.Node(bst_3)
    node_6 = module_0.Node(node_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_7.__repr__()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    bst_8 = module_0.Bst(bst_6)
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_10 = module_0.Bst()
    var_8 = bst_1.insert(node_7)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_695():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    int_1 = 3317
    node_3 = module_0.Node(int_1)
    bst_2 = module_0.Bst()


def test_case_696():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()


def test_case_697():
    int_0 = 869
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_2 = module_0.Node(var_0)
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_3 = module_0.Node(bst_2)
    var_3 = node_0.__repr__()


def test_case_698():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    node_2 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_3 = module_0.Bst(node_3)


def test_case_699():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_3.__repr__()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    node_5 = module_0.Node(var_5)


def test_case_700():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_0 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_1 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_3 = module_0.Node(var_11)
    var_13 = var_11.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_14 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_16 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_12 = module_0.Bst(var_15)
    var_18 = var_14.__repr__()


def test_case_701():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    var_5 = var_3.__repr__()
    bst_3 = module_0.Bst()
    var_6 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    int_0 = -1464
    var_9 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_6)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    var_10 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    bst_6 = module_0.Bst()
    var_13 = node_4.__repr__()
    var_14 = var_7.__repr__()


def test_case_702():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    tuple_0 = (node_0, var_0, var_1, var_1)
    node_1 = module_0.Node(tuple_0)
    var_2 = var_0.__repr__()


def test_case_703():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()


def test_case_704():
    object_0 = module_1.object()
    node_0 = module_0.Node(object_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_3 = node_3.__repr__()
    bst_2 = module_0.Bst(var_3)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    node_6 = module_0.Node(bst_4)
    node_7 = module_0.Node(node_4)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_8 = module_0.Node(set_0)
    var_6 = node_8.__repr__()
    bst_5 = module_0.Bst(node_4)


def test_case_705():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    str_1 = " 4'"
    node_2 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bst_7 = module_0.Bst(bst_5)
    bool_0 = True
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    var_6 = bst_9.insert(node_7)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    var_7 = bst_10.insert(node_8)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_7)
    var_8 = node_9.__repr__()
    node_10 = module_0.Node(var_2)


def test_case_706():
    bool_0 = True
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_0.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    node_3 = module_0.Node(bst_4)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    var_7 = node_5.__repr__()
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(set_0)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_7 = module_0.Node(set_1)
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_8.__repr__()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(var_10)
    var_12 = node_8.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_10 = module_0.Node(bst_12)
    var_13 = bst_12.insert(node_10)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_13)
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_12 = module_0.Node(bst_13)
    bst_15 = module_0.Bst()
    node_13 = module_0.Node(bst_15)
    var_16 = bst_15.insert(node_13)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_14 = module_0.Node(var_15)
    bst_16 = module_0.Bst()


def test_case_707():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    bool_0 = True
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_4 = node_1.__repr__()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(set_0)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_3.__repr__()
    var_9 = var_7.__repr__()
    list_0 = []
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(list_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_10)
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_11 = bst_11.insert(bool_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_2 = False
    var_13 = bst_12.insert(bool_2)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(bst_10)


def test_case_708():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = node_1.__repr__()
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(var_4)
    bst_5 = module_0.Bst()


def test_case_709():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    var_5 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(bst_4)
    list_0 = []
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_5 = module_0.Node(var_8)
    bool_2 = False
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_8 = module_0.Node(var_9)
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    var_11 = bst_9.insert(node_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_0)
    bst_13 = module_0.Bst()
    var_14 = node_9.__repr__()


def test_case_710():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    var_1 = bst_0.insert(str_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == "(-+2Yj@U8NM6[+0S0o"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_4.__repr__()
    bst_3 = module_0.Bst()
    var_7 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_8 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_3 = module_0.Node(var_8)
    var_10 = var_9.__repr__()
    str_1 = "7"
    node_4 = module_0.Node(str_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_11 = node_5.__repr__()
    bst_5 = module_0.Bst(var_11)
    bst_6 = module_0.Bst()
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    bool_0 = False
    var_12 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_7 = module_0.Bst()
    tuple_0 = (node_6, var_12, var_13, var_13)
    node_7 = module_0.Node(tuple_0)
    bst_8 = module_0.Bst()


def test_case_711():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = var_5.__repr__()


def test_case_712():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    var_4 = node_1.__repr__()
    node_2 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    var_7 = var_5.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()


def test_case_713():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_4 = node_1.__repr__()
    bst_2 = module_0.Bst(var_4)
    int_0 = -1138
    node_2 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_3.__repr__()
    str_0 = ""
    bst_6 = module_0.Bst(str_0)
    bst_7 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    var_9 = node_4.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_10 = node_5.__repr__()
    int_1 = 1924
    tuple_0 = (int_1, var_3)
    node_6 = module_0.Node(tuple_0)


def test_case_714():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_2 = node_3.__repr__()
    var_3 = bst_3.insert(str_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    var_4 = node_4.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_6 = module_0.Bst()
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    bst_7 = module_0.Bst()
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    bool_1 = False
    var_7 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    node_8 = module_0.Node(none_type_5)
    node_9 = module_0.Node(none_type_4)


def test_case_715():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    node_3 = module_0.Node(bst_2)
    node_4 = module_0.Node(node_1)
    float_0 = -131.8
    bst_3 = module_0.Bst(float_0)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst(bst_3)


def test_case_716():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    node_3 = module_0.Node(bst_1)
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()


def test_case_717():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_1)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_6 = module_0.Node(set_1)
    node_7 = module_0.Node(bst_6)
    var_7 = var_5.__repr__()
    str_3 = ""
    bst_8 = module_0.Bst(str_3)
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_8.__repr__()
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(var_8)
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    var_10 = node_10.__repr__()
    var_11 = node_10.__repr__()
    var_12 = bst_5.insert(bst_11)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_718():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    list_0 = []
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_2)
    float_0 = -131.8
    bst_5 = module_0.Bst(float_0)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_3 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_10.insert(bool_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_11 = module_0.Bst()
    node_5 = module_0.Node(var_6)
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_7 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_7 = module_0.Node(var_8)
    list_1 = []
    bst_13 = module_0.Bst()
    var_9 = bst_13.insert(list_1)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_9)
    bst_14 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    node_10 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_10 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_10.__repr__()
    var_12 = var_10.__repr__()
    bst_18 = module_0.Bst()
    var_13 = node_3.__repr__()


def test_case_719():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_2 = module_0.Node(set_1)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(var_4)
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    var_5 = bst_5.insert(node_6)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_8 = node_1.__repr__()


def test_case_720():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst(var_2)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    str_1 = ""
    bst_6 = module_0.Bst(str_1)
    str_2 = " 4'"
    node_2 = module_0.Node(str_2)
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_5 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    var_7 = var_5.__repr__()
    bst_10 = module_0.Bst()
    str_3 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_3)
    int_0 = 3317
    node_6 = module_0.Node(int_0)
    var_8 = node_5.__repr__()
    node_7 = module_0.Node(bst_4)


def test_case_721():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = False
    var_3 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(bst_3)
    list_0 = []
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    bst_6 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_0)
    bst_7 = module_0.Bst()
    var_5 = node_4.__repr__()


def test_case_722():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst(var_3)
    var_4 = node_1.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_3 = module_0.Node(set_1)
    var_5 = node_3.__repr__()
    node_4 = module_0.Node(var_5)
    str_3 = " 4'"
    node_5 = module_0.Node(str_3)
    str_4 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_4)
    int_0 = 3317
    node_7 = module_0.Node(int_0)
    var_6 = node_6.__repr__()
    str_5 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_5}
    node_8 = module_0.Node(set_2)
    bool_0 = False
    node_9 = module_0.Node(bool_0)
    node_10 = module_0.Node(node_9)
    str_6 = "(-+2Yj@U8NM6[+0S0o"
    node_11 = module_0.Node(str_6)
    bst_4 = module_0.Bst()
    node_12 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_12.__repr__()
    node_13 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_14 = module_0.Node(none_type_0)
    var_12 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_11.__repr__()
    var_14 = node_7.__repr__()


def test_case_723():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_3 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    int_0 = -1464
    var_7 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    var_8 = node_8.__repr__()
    var_9 = bst_6.insert(str_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_2.__repr__()


def test_case_724():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is False
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_1.__repr__()
    str_0 = ""
    bst_2 = module_0.Bst(str_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_4)
    str_1 = " 4'"
    node_4 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_5 = module_0.Node(var_5)
    var_7 = var_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    bst_8 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    bst_9 = module_0.Bst(bst_7)
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_8.__repr__()
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_12 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_10 = module_0.Node(bst_13)
    bst_15 = module_0.Bst()


def test_case_725():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_0.__repr__()


def test_case_726():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_3 = node_2.__repr__()
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    var_7 = node_3.__repr__()
    node_4 = module_0.Node(var_6)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    bst_9 = module_0.Bst()
    var_10 = var_8.__repr__()
    bst_10 = module_0.Bst()
    bool_0 = False
    node_6 = module_0.Node(bool_0)
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    var_13 = var_12.__repr__()
    bst_12 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_14 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_7.__repr__()
    var_16 = node_7.__repr__()
    bst_14 = module_0.Bst()
    var_17 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    node_8 = module_0.Node(var_18)
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_15 = module_0.Bst()
    tuple_0 = (bst_15,)
    tuple_1 = (dict_0, tuple_0)
    node_9 = module_0.Node(tuple_1)
    var_19 = var_18.__repr__()


def test_case_727():
    float_0 = -131.8
    bst_0 = module_0.Bst(float_0)
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    var_2 = bst_4.insert(node_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    var_5 = node_3.__repr__()
    node_4 = module_0.Node(var_4)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    int_0 = -1464
    var_6 = bst_7.insert(int_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_0 = True
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_1 = False
    var_8 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    str_1 = ""
    bst_10 = module_0.Bst(str_1)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_2 = False
    var_10 = bst_12.insert(bool_2)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_7.__repr__()
    node_8 = module_0.Node(bool_2)
    bst_13 = module_0.Bst()


def test_case_728():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst(var_1)


def test_case_729():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_1)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_3.__repr__()
    node_4 = module_0.Node(bst_2)
    node_5 = module_0.Node(node_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_6 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_2)
    bst_5 = module_0.Bst()
    node_8 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_8.__repr__()
    node_9 = module_0.Node(bst_6)
    var_9 = var_6.__repr__()


def test_case_730():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    var_0 = node_2.__repr__()
    bst_0 = module_0.Bst()
    node_4 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_4.__repr__()
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    var_3 = var_1.__repr__()


def test_case_731():
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()


def test_case_732():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_3)
    var_5 = var_3.__repr__()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    var_6 = node_3.__repr__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_9 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_4.__repr__()
    bst_5 = module_0.Bst()
    var_11 = var_9.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_12 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_5.__repr__()
    var_14 = var_12.__repr__()
    bst_8 = module_0.Bst()
    var_15 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_9 = module_0.Bst()
    var_17 = var_14.__repr__()


def test_case_733():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()


def test_case_734():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    node_2 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    node_4 = module_0.Node(bst_3)
    var_7 = var_5.__repr__()
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    var_8 = node_5.__repr__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    var_11 = node_4.__repr__()


def test_case_735():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_1 = module_0.Node(dict_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    var_6 = bst_6.insert(node_3)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    var_9 = var_7.__repr__()
    list_0 = []
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(list_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_10)
    bst_10 = module_0.Bst()
    var_11 = node_4.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_12 = node_5.__repr__()
    bst_11 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    node_7 = module_0.Node(node_5)
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bool_0 = False
    var_13 = bst_12.insert(bool_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_8.__repr__()
    str_1 = ""
    bst_13 = module_0.Bst(str_1)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    var_15 = node_9.__repr__()
    list_1 = []
    bst_16 = module_0.Bst()
    var_16 = bst_16.insert(list_1)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_16)
    bst_17 = module_0.Bst()
    node_11 = module_0.Node(none_type_0)


def test_case_736():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    int_0 = -1464
    var_0 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_1 = ""
    bst_2 = module_0.Bst(str_1)
    bool_0 = True
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_8 = module_0.Bst(var_3)
    str_2 = " 4'"
    node_2 = module_0.Node(str_2)
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    var_6 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_10 = module_0.Bst()
    tuple_0 = (node_3, var_6, var_7, var_7)
    node_4 = module_0.Node(tuple_0)
    str_3 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_3)
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_8 = node_6.__repr__()
    var_9 = bst_11.insert(str_3)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()


def test_case_737():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(none_type_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_2 = node_2.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_4 = bst_3.insert(node_5)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(var_5)
    var_7 = node_6.__repr__()
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_8.__repr__()
    var_10 = var_8.__repr__()
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_1 = False
    var_11 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(var_12)
    node_11 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    node_12 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_12.__repr__()
    bst_13 = module_0.Bst()
    int_0 = 869
    node_13 = module_0.Node(int_0)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    var_15 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_14 = module_0.Node(bst_15)
    bst_17 = module_0.Bst()
    node_15 = module_0.Node(bst_17)
    var_17 = bst_17.insert(node_15)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_16 = module_0.Node(var_16)
    bst_18 = module_0.Bst()
    int_1 = 3317
    node_17 = module_0.Node(int_1)
    var_18 = var_12.__repr__()


def test_case_738():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_0 = node_2.__repr__()
    var_1 = var_0.__repr__()
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_3 = module_0.Bst(str_0)
    node_3 = module_0.Node(bst_3)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    var_2 = node_4.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(var_3)
    var_5 = node_5.__repr__()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    int_0 = 3317
    node_8 = module_0.Node(int_0)
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_9.__repr__()
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(var_6)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_8)
    bst_11 = module_0.Bst()


def test_case_739():
    int_0 = -1138
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_3 = module_0.Node(dict_0)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst(var_3)
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    bst_10 = module_0.Bst()
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_11 = module_0.Bst(str_0)
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()


def test_case_740():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_0 = module_0.Bst(str_1)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(var_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_3 = module_0.Node(set_0)
    var_3 = node_3.__repr__()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(node_3)
    none_type_1 = None
    bst_7 = module_0.Bst(none_type_1)
    str_3 = " \x0c^"
    node_6 = module_0.Node(str_3)
    var_4 = node_6.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_5 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(var_5)
    str_4 = "(-+2Yj@U8NM6[+0S0o"
    node_9 = module_0.Node(str_4)
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_7 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_10.__repr__()
    node_11 = module_0.Node(bst_12)
    var_9 = node_9.__repr__()
    str_5 = "(-+2Yj@U8NM6[+0S0o"
    node_12 = module_0.Node(str_5)
    bst_13 = module_0.Bst()
    none_type_2 = None
    node_13 = module_0.Node(none_type_2)
    var_10 = node_13.__repr__()
    var_11 = bst_13.insert(str_5)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_0 = []
    bst_14 = module_0.Bst()
    var_12 = bst_14.insert(list_0)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_14 = module_0.Node(var_12)
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()


def test_case_741():
    int_0 = 869
    node_0 = module_0.Node(int_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    var_0 = bst_0.insert(bool_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    tuple_0 = (node_2, var_0, var_1, var_1)
    node_3 = module_0.Node(tuple_0)
    var_2 = var_1.__repr__()


def test_case_742():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    var_1 = node_0.__repr__()


def test_case_743():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    str_0 = " 4'"
    node_5 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_5 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_7.__repr__()
    bst_10 = module_0.Bst()
    int_0 = 869
    node_8 = module_0.Node(int_0)
    bst_11 = module_0.Bst()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_9 = module_0.Node(bytes_0)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_10 = module_0.Node(set_0)
    bst_12 = module_0.Bst()
    node_11 = module_0.Node(bst_12)
    var_7 = bst_12.insert(node_11)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    node_12 = module_0.Node(bst_13)
    var_8 = bst_13.insert(node_12)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(var_8)
    var_9 = node_13.__repr__()
    var_10 = var_7.__repr__()
    bst_14 = module_0.Bst()
    node_14 = module_0.Node(bst_14)
    var_11 = bst_14.insert(node_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_15 = module_0.Bst()
    var_12 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_16 = module_0.Bst()
    var_14 = var_12.__repr__()
    var_15 = bst_10.insert(bst_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_744():
    int_0 = 869
    node_0 = module_0.Node(int_0)
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_1)
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_3 = module_0.Bst(str_1)
    int_1 = 3317
    node_5 = module_0.Node(int_1)
    node_6 = module_0.Node(int_1)


def test_case_745():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_2 = module_0.Bst()
    tuple_0 = (bst_2,)
    tuple_1 = (dict_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    bool_0 = True
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_746():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_1 = module_0.Node(dict_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_0 = node_2.__repr__()
    var_1 = var_0.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_4.__repr__()
    node_5 = module_0.Node(bst_2)
    var_4 = node_3.__repr__()
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    var_7 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()


def test_case_747():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_1 = node_1.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_1)
    bst_2 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is False
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_4.__repr__()
    str_1 = ""
    bst_3 = module_0.Bst(str_1)
    bst_4 = module_0.Bst()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_2)
    int_0 = 3317
    node_6 = module_0.Node(int_0)
    var_4 = node_5.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_7.__repr__()
    var_7 = node_7.__repr__()
    node_8 = module_0.Node(var_6)
    var_8 = var_1.__repr__()


def test_case_748():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    var_3 = node_1.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_4 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4.data).__module__}.{type(var_4.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_4.left is None
    assert var_4.right is None
    assert var_4.parent is None
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    var_6 = bst_2.insert(node_4)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_1 = False
    var_7 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    node_7 = module_0.Node(bool_1)
    str_1 = " \x0c^"
    node_8 = module_0.Node(str_1)
    var_9 = node_8.__repr__()
    bst_4 = module_0.Bst()
    node_9 = module_0.Node(bst_4)
    var_10 = bst_4.insert(node_9)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_11 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    var_14 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_13.__repr__()
    str_2 = ""
    bst_7 = module_0.Bst(str_2)
    bst_8 = module_0.Bst(var_9)


def test_case_749():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_1 = node_2.__repr__()
    node_3 = module_0.Node(var_1)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_5.__repr__()
    node_6 = module_0.Node(bst_4)
    var_4 = node_4.__repr__()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_5 = node_7.__repr__()
    bst_5 = module_0.Bst(var_5)
    str_2 = "{&:T\r/p-BHx9-lgMP"
    bst_6 = module_0.Bst(str_2)
    node_8 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    int_0 = -1464
    var_6 = bst_7.insert(int_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_10 = module_0.Node(dict_0)
    none_type_2 = None
    bst_8 = module_0.Bst(none_type_2)
    list_1 = []
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(list_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_7)
    var_8 = node_11.__repr__()
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    bst_11 = module_0.Bst()
    node_12 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_12.__repr__()
    bst_13 = module_0.Bst()
    none_type_3 = None
    node_13 = module_0.Node(none_type_3)
    bst_14 = module_0.Bst(bst_12)
    node_14 = module_0.Node(bst_1)


def test_case_750():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    var_5 = node_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_5 = module_0.Node(bst_5)
    var_8 = node_0.__repr__()


def test_case_751():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_5 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_5.__repr__()
    bst_10 = module_0.Bst()
    var_11 = var_9.__repr__()
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_6.__repr__()
    var_14 = var_12.__repr__()
    bool_1 = False
    node_7 = module_0.Node(bool_1)
    var_15 = node_7.__repr__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_0)
    var_18 = node_8.__repr__()
    node_9 = module_0.Node(bst_4)


def test_case_752():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_3 = module_0.Bst()
    tuple_0 = (bst_3,)
    tuple_1 = (dict_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_1 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_0 = False
    var_3 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_1 = False
    var_4 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_9 = module_0.Bst()
    tuple_2 = (node_6, var_4, var_5, var_5)
    node_7 = module_0.Node(tuple_2)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_6 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_8 = module_0.Node(bst_10)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_9 = module_0.Node(bytes_0)
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    var_8 = node_10.__repr__()
    bst_12 = module_0.Bst()


def test_case_753():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_4)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    var_9 = var_7.__repr__()
    none_type_1 = None
    bst_10 = module_0.Bst(none_type_1)
    list_0 = []
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(list_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_10)
    var_11 = node_5.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_12 = node_6.__repr__()
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    node_8 = module_0.Node(node_6)
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_13 = module_0.Bst(str_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_2)
    var_13 = node_9.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_14 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_10 = module_0.Node(bst_14)
    bst_16 = module_0.Bst()
    node_11 = module_0.Node(bst_16)
    var_16 = bst_16.insert(node_11)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_15)
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_17 = module_0.Bst()
    tuple_0 = (bst_17,)
    tuple_1 = (dict_0, tuple_0)
    node_13 = module_0.Node(tuple_1)
    var_17 = var_13.__repr__()


def test_case_754():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(var_3)
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_4 = node_5.__repr__()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_5 = node_6.__repr__()
    var_6 = node_6.__repr__()
    int_0 = -1138
    node_7 = module_0.Node(int_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_8 = module_0.Node(set_0)
    var_7 = node_8.__repr__()
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(set_0)
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_10.__repr__()
    var_12 = var_10.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_11 = module_0.Node(bst_12)
    var_13 = bst_12.insert(node_11)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_14 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_14 = module_0.Bst()
    var_16 = var_14.__repr__()
    node_12 = module_0.Node(var_5)


def test_case_755():
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    bst_0 = module_0.Bst()
    var_2 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    var_6 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    bst_3 = module_0.Bst()
    var_9 = node_3.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_4 = module_0.Node(dict_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    var_10 = node_5.__repr__()
    bst_4 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_6 = module_0.Node(set_1)
    var_11 = node_6.__repr__()
    node_7 = module_0.Node(var_11)
    node_8 = module_0.Node(var_1)


def test_case_756():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_1 = node_1.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(set_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_3 = module_0.Node(bytes_0)
    var_4 = node_3.__repr__()
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_0 = False
    var_9 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    node_7 = module_0.Node(bool_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    node_10 = module_0.Node(bst_8)
    var_13 = node_8.__repr__()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_9 = module_0.Bst()
    tuple_0 = (bst_9,)
    tuple_1 = (dict_0, tuple_0)
    node_11 = module_0.Node(tuple_1)
    bool_1 = False
    node_12 = module_0.Node(bool_1)
    node_13 = module_0.Node(node_12)
    int_1 = 3317
    node_14 = module_0.Node(int_1)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_15 = module_0.Node(none_type_2)
    bool_2 = False
    var_14 = bst_10.insert(bool_2)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_16 = module_0.Node(var_15)
    var_16 = var_4.__repr__()


def test_case_757():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    bst_4 = module_0.Bst(none_type_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(node_2)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_5 = module_0.Node(set_1)
    var_7 = node_5.__repr__()
    node_6 = module_0.Node(node_3)


def test_case_758():
    int_0 = 869
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_4 = node_4.__repr__()


def test_case_759():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    int_0 = -1138
    node_1 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    var_4 = node_2.__repr__()
    node_3 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_4.__repr__()
    bst_6 = module_0.Bst()
    int_1 = 869
    node_5 = module_0.Node(int_1)
    bst_7 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_0)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_10 = node_7.__repr__()
    var_11 = bst_8.insert(str_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_2 = -2466
    dict_0 = {int_2: int_2, int_2: int_2, int_2: int_2, int_2: int_2}
    bst_9 = module_0.Bst()
    tuple_0 = (bst_9,)
    tuple_1 = (dict_0, tuple_0)
    node_8 = module_0.Node(tuple_1)
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_11 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_9 = module_0.Node(set_0)
    node_10 = module_0.Node(bst_10)
    var_14 = var_12.__repr__()
    var_15 = var_12.__repr__()


def test_case_760():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_5 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    var_6 = node_4.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    node_7 = module_0.Node(bst_6)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()


def test_case_761():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_0.__repr__()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    var_2 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_4 = node_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(var_5)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_6 = module_0.Node(bst_8)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_0)
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    var_11 = node_8.__repr__()
    node_9 = module_0.Node(var_10)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_10 = module_0.Node(set_0)
    var_12 = node_10.__repr__()
    node_11 = module_0.Node(var_12)
    bst_12 = module_0.Bst(var_3)


def test_case_762():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_4)
    node_3 = module_0.Node(var_3)


def test_case_763():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    int_0 = -1464
    var_7 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_0 = False
    node_7 = module_0.Node(bool_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_0)
    int_1 = 3317
    node_9 = module_0.Node(int_1)
    var_8 = node_8.__repr__()
    list_0 = []
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(list_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_9)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()


def test_case_764():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    node_4 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    var_7 = var_5.__repr__()
    bst_7 = module_0.Bst()
    list_0 = []
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(list_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_8)
    node_7 = module_0.Node(bst_8)


def test_case_765():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    list_0 = []
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_0 = module_0.Node(var_3)
    var_4 = var_2.__repr__()
    var_5 = var_4.__repr__()


def test_case_766():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    node_2 = module_0.Node(var_1)


def test_case_767():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    var_7 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    var_10 = var_8.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    int_0 = -1464
    var_11 = bst_10.insert(int_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_11 = module_0.Bst(str_0)
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_7 = module_0.Node(var_13)
    var_15 = var_14.__repr__()
    str_1 = "7"
    node_8 = module_0.Node(str_1)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_9 = module_0.Node(str_2)
    bst_14 = module_0.Bst()
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    var_16 = node_10.__repr__()
    var_17 = bst_14.insert(str_2)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_0 = False
    node_11 = module_0.Node(bool_0)
    node_12 = module_0.Node(node_11)
    bst_15 = module_0.Bst()


def test_case_768():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_1 = False
    var_2 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_3 = node_6.__repr__()
    bool_2 = False
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    bst_3 = module_0.Bst()
    node_9 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_9.__repr__()
    var_6 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_3 = False
    var_7 = bst_6.insert(bool_3)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(bst_6)
    node_12 = module_0.Node(str_0)


def test_case_769():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()


def test_case_770():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_2 = module_0.Node(bytes_0)
    var_2 = node_2.__repr__()
    var_3 = var_2.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_4 = node_4.__repr__()
    var_5 = bst_5.insert(str_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = 869
    node_5 = module_0.Node(int_0)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(var_6)
    bytes_1 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_8 = module_0.Node(bytes_1)
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_9.__repr__()
    bst_11 = module_0.Bst()
    var_10 = var_8.__repr__()
    bst_12 = module_0.Bst()


def test_case_771():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_0.__repr__()
    object_0 = module_1.object()
    node_1 = module_0.Node(object_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_2 = module_0.Bst(str_0)
    none_type_0 = None
    bst_3 = module_0.Bst(none_type_0)
    list_1 = []
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(list_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_2)
    var_3 = node_2.__repr__()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_3 = module_0.Node(bytes_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bst_6 = module_0.Bst()
    var_7 = node_4.__repr__()
    bst_7 = module_0.Bst(bst_3)


def test_case_772():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    int_0 = -1464
    var_10 = bst_7.insert(int_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_7)
    str_0 = " \x0c^"
    node_6 = module_0.Node(str_0)
    var_11 = node_6.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_1)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    var_12 = node_8.__repr__()
    var_13 = bst_8.insert(str_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_0.__repr__()


def test_case_773():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    var_3 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_4 = node_3.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    node_5 = module_0.Node(bool_0)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    bst_8 = module_0.Bst()
    int_0 = 869
    node_7 = module_0.Node(int_0)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_11 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_8 = module_0.Node(set_1)
    node_9 = module_0.Node(bst_10)
    var_13 = var_11.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_10 = module_0.Node(set_2)
    var_14 = node_10.__repr__()
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    node_12 = module_0.Node(node_10)
    var_15 = var_8.__repr__()


def test_case_774():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bst_5 = module_0.Bst()
    var_5 = node_3.__repr__()
    node_4 = module_0.Node(var_2)


def test_case_775():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None


def test_case_776():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    int_0 = 869
    node_1 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    bst_4 = module_0.Bst(none_type_0)
    list_0 = []
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_2)
    var_3 = node_2.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    node_5 = module_0.Node(bst_7)
    node_6 = module_0.Node(node_3)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_6 = node_7.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_8 = module_0.Node(bst_8)
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_10)
    var_9 = bst_10.insert(node_9)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_8)
    bst_11 = module_0.Bst()
    node_11 = module_0.Node(bst_11)
    var_10 = bst_11.insert(node_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_10)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_13 = module_0.Node(set_0)
    var_11 = node_13.__repr__()
    var_12 = var_9.__repr__()


def test_case_777():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst(var_5)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_8 = node_1.__repr__()
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_7 = module_0.Bst(str_1)
    node_2 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_9 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_3.__repr__()
    node_4 = module_0.Node(bool_0)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_0 = []
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(list_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_12)
    bst_11 = module_0.Bst()
    var_13 = node_6.__repr__()
    bst_12 = module_0.Bst()


def test_case_778():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_4 = node_0.__repr__()


def test_case_779():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    var_2 = bst_5.insert(node_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_3 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_4 = node_5.__repr__()
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(tuple_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bool_1 = False
    node_7 = module_0.Node(bool_1)
    var_6 = node_7.__repr__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst(dict_0)


def test_case_780():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(bst_2)
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    bst_5 = module_0.Bst()


def test_case_781():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst(var_0)


def test_case_782():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_3 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_3)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_4 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_8.__repr__()
    var_6 = node_8.__repr__()
    list_0 = []
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(list_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_7)
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    bst_12 = module_0.Bst()
    var_11 = node_10.__repr__()
    bst_13 = module_0.Bst(node_1)


def test_case_783():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_0 = "7"
    node_4 = module_0.Node(str_0)
    float_0 = -1469.057
    node_5 = module_0.Node(float_0)


def test_case_784():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_0 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    var_5 = var_4.__repr__()
    bst_8 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_1)
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_6 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    node_6 = module_0.Node(bst_10)
    node_7 = module_0.Node(node_4)
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    var_8 = node_8.__repr__()
    bst_11 = module_0.Bst()


def test_case_785():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_3 = module_0.Node(set_1)
    var_4 = node_3.__repr__()
    bst_3 = module_0.Bst(var_4)
    var_5 = node_3.__repr__()
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_6 = module_0.Node(var_7)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_1 = False
    var_8 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_6 = module_0.Bst()
    tuple_0 = (node_7, var_8, var_9, var_9)
    node_8 = module_0.Node(tuple_0)
    none_type_2 = None
    bst_7 = module_0.Bst(none_type_2)
    list_0 = []
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(list_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_10)
    var_11 = node_9.__repr__()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_2)
    var_12 = node_10.__repr__()
    bst_9 = module_0.Bst()
    node_11 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_11.__repr__()
    bst_11 = module_0.Bst()
    node_12 = module_0.Node(var_13)
    var_15 = node_11.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    none_type_3 = None
    node_13 = module_0.Node(none_type_3)
    var_16 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_8.__repr__()


def test_case_786():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    list_0 = []
    bst_3 = module_0.Bst()
    var_0 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_4 = module_0.Bst()
    var_1 = node_0.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_2 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_4 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_9 = module_0.Bst(var_3)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_6 = node_1.__repr__()
    bst_10 = module_0.Bst(var_6)
    bst_11 = module_0.Bst()
    node_2 = module_0.Node(bst_11)
    var_7 = bst_11.insert(node_2)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_7)
    object_0 = module_1.object()
    node_4 = module_0.Node(object_0)
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    var_8 = node_5.__repr__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_6 = module_0.Node(bst_12)
    bst_14 = module_0.Bst()
    node_7 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    node_8 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_13 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_8.__repr__()
    bst_18 = module_0.Bst()
    node_9 = module_0.Node(bst_17)
    node_10 = module_0.Node(node_0)


def test_case_787():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()


def test_case_788():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_0.__repr__()


def test_case_789():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    var_1 = bst_0.insert(node_2)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    var_4 = var_2.__repr__()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(var_5)
    list_0 = []
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_7)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_0 = False
    var_8 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_1 = False
    var_10 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(var_11)
    list_1 = []
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(list_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_12)
    bst_12 = module_0.Bst()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_10 = module_0.Node(str_1)
    bst_13 = module_0.Bst()
    node_11 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_11.__repr__()
    bst_15 = module_0.Bst()
    node_12 = module_0.Node(bst_14)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_13 = module_0.Node(str_2)
    bst_16 = module_0.Bst()
    node_14 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_15 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_14.__repr__()
    node_15 = module_0.Node(bst_17)
    var_17 = var_15.__repr__()


def test_case_790():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()


def test_case_791():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(var_3)
    var_5 = node_2.__repr__()
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_8 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_6 = module_0.Node(var_9)
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_1 = False
    var_10 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst(none_type_0)


def test_case_792():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__repr__()


def test_case_793():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_2 = node_4.__repr__()
    node_5 = module_0.Node(var_2)
    none_type_1 = None
    bst_1 = module_0.Bst(none_type_1)
    list_0 = []
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_3)
    var_4 = node_6.__repr__()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    var_5 = node_7.__repr__()
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_2 = False
    var_6 = bst_3.insert(bool_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_8.__repr__()
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_9 = module_0.Node(bytes_0)
    var_8 = node_9.__repr__()
    var_9 = var_8.__repr__()
    bst_4 = module_0.Bst()
    node_10 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_10 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_10.__repr__()
    bst_6 = module_0.Bst()
    node_11 = module_0.Node(bst_5)
    node_12 = module_0.Node(var_9)


def test_case_794():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_4 = bst_3.insert(node_5)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_6 = module_0.Node(var_6)
    var_8 = var_7.__repr__()
    str_0 = "7"
    node_7 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    var_9 = node_8.__repr__()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_1)
    var_10 = node_9.__repr__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    bst_7 = module_0.Bst()
    node_10 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_13 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_10.__repr__()
    var_15 = var_13.__repr__()
    bst_9 = module_0.Bst()
    node_11 = module_0.Node(var_15)


def test_case_795():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_2)
    var_3 = node_4.__repr__()
    var_4 = var_1.__repr__()
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_3)


def test_case_796():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_2.__repr__()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    var_8 = node_4.__repr__()


def test_case_797():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    var_2 = var_0.__repr__()


def test_case_798():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    var_2 = node_2.__repr__()
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    var_3 = bst_1.insert(node_3)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_4)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    var_5 = node_5.__repr__()
    var_6 = var_3.__repr__()
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    var_9 = node_6.__repr__()
    node_7 = module_0.Node(var_8)
    bst_5 = module_0.Bst()


def test_case_799():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    object_0 = module_1.object()
    node_5 = module_0.Node(object_0)
    var_6 = node_3.__repr__()


def test_case_800():
    str_0 = " 4'"
    node_0 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    node_2 = module_0.Node(str_0)


def test_case_801():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_1)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    node_3 = module_0.Node(bst_1)
    int_0 = -1138
    node_4 = module_0.Node(int_0)
    str_2 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_2 = module_0.Bst(str_2)
    node_5 = module_0.Node(int_0)


def test_case_802():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    var_5 = node_4.__repr__()
    node_5 = module_0.Node(var_4)
    bst_6 = module_0.Bst()


def test_case_803():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = node_2.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    var_2 = node_3.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = var_3.__repr__()
    node_5 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(bst_3)
    var_5 = bst_3.insert(node_6)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_4)
    bst_4 = module_0.Bst()


def test_case_804():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_2.__repr__()
    list_0 = []
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_5)
    bst_3 = module_0.Bst()
    var_6 = node_1.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    tuple_0 = (node_2, var_7, var_8, var_8)
    node_3 = module_0.Node(tuple_0)
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = False
    var_9 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    bst_9 = module_0.Bst()
    var_12 = var_10.__repr__()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_7.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst(var_13)
    var_15 = node_0.__repr__()


def test_case_805():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst(var_4)
    bst_8 = module_0.Bst()
    node_1 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_1.__repr__()
    bst_10 = module_0.Bst()
    var_9 = var_7.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_10 = node_2.__repr__()
    bst_11 = module_0.Bst()
    node_3 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_3.__repr__()
    bst_13 = module_0.Bst()
    node_4 = module_0.Node(var_11)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    node_5 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    node_6 = module_0.Node(bst_17)
    bst_18 = module_0.Bst()
    bst_19 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bool_0 = False
    var_13 = bst_19.insert(bool_0)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_8 = module_0.Node(set_1)
    var_15 = node_8.__repr__()
    bst_20 = module_0.Bst()
    var_16 = bst_5.insert(bst_17)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_806():
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_0 = module_0.Node(bytes_0)
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_3.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_6 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(var_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_807():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    var_4 = node_3.__repr__()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_5 = node_4.__repr__()
    var_6 = node_4.__repr__()
    object_0 = module_1.object()
    node_5 = module_0.Node(object_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    node_8 = module_0.Node(bst_6)
    node_9 = module_0.Node(node_6)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    bool_0 = False
    var_9 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    str_1 = ""
    bst_8 = module_0.Bst(str_1)
    var_11 = var_9.__repr__()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    bst_10 = module_0.Bst()
    var_15 = node_11.__repr__()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_12 = module_0.Node(str_2)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_16 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_18 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    bst_16 = module_0.Bst(var_17)
    bst_17 = module_0.Bst(var_9)


def test_case_808():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst(var_3)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_2 = module_0.Node(var_7)
    str_0 = " 4'"
    node_3 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst(none_type_0)


def test_case_809():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    var_3 = node_0.__repr__()
    var_4 = var_3.__repr__()


def test_case_810():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    node_3 = module_0.Node(var_2)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_3 = node_4.__repr__()
    bst_1 = module_0.Bst(var_3)
    var_4 = node_4.__repr__()
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_3)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_7 = module_0.Node(set_1)
    var_7 = node_7.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_6 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_8 = module_0.Node(set_2)
    node_9 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_10 = module_0.Node(bst_7)
    var_12 = node_7.__repr__()


def test_case_811():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)


def test_case_812():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_4 = var_3.__repr__()
    bool_0 = True
    node_3 = module_0.Node(bool_0)


def test_case_813():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst(bst_0)


def test_case_814():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_3 = node_1.__repr__()
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(none_type_0)


def test_case_815():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_816():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_4 = module_0.Node(var_4)
    node_5 = module_0.Node(var_3)


def test_case_817():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_5)
    var_6 = node_3.__repr__()
    var_7 = var_4.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_4 = module_0.Node(var_8)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_5.__repr__()
    var_12 = node_5.__repr__()
    node_6 = module_0.Node(var_11)
    bst_8 = module_0.Bst()
    var_13 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_9 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_7 = module_0.Node(set_0)
    node_8 = module_0.Node(bst_8)
    var_15 = var_13.__repr__()
    none_type_0 = None
    node_9 = module_0.Node(none_type_0)
    var_16 = node_9.__repr__()
    var_17 = node_9.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_10 = module_0.Node(set_1)
    var_18 = node_10.__repr__()
    node_11 = module_0.Node(node_3)


def test_case_818():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    none_type_0 = None
    bst_3 = module_0.Bst(none_type_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_0)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    node_4 = module_0.Node(none_type_1)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    bst_7 = module_0.Bst()
    int_0 = 869
    node_6 = module_0.Node(int_0)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_6 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_7.__repr__()
    bst_11 = module_0.Bst()
    bool_1 = True
    float_1 = -128.5329
    dict_1 = {bool_1: float_1}
    tuple_0 = (dict_1, bool_1)
    bst_12 = module_0.Bst()
    var_8 = bst_12.insert(tuple_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()


def test_case_819():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst(bst_0)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_2 = module_0.Node(bytes_0)
    str_0 = " 4'"
    node_3 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    var_3 = node_4.__repr__()
    node_5 = module_0.Node(str_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_6 = module_0.Node(dict_0)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    var_6 = var_4.__repr__()
    bool_0 = True
    float_1 = -128.5329
    dict_1 = {bool_0: float_1}
    tuple_0 = (dict_1, bool_0)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(tuple_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_7 = module_0.Node(bst_7)
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    var_10 = bst_9.insert(node_8)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_9)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_10 = module_0.Node(set_1)
    var_11 = node_10.__repr__()
    bst_10 = module_0.Bst(var_11)
    var_12 = node_10.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()


def test_case_820():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(bst_5)
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    var_5 = node_2.__repr__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_3 = module_0.Node(dict_0)
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    var_10 = var_8.__repr__()
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_4 = module_0.Node(var_12)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_2 = False
    var_13 = bst_9.insert(bool_2)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_6.__repr__()
    bst_13 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    var_17 = var_16.__repr__()
    bst_14 = module_0.Bst(bst_11)
    bst_15 = module_0.Bst()


def test_case_821():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_1 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_1)
    var_2 = node_3.__repr__()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_5 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_1 = False
    var_8 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    node_7 = module_0.Node(bool_1)
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_8.__repr__()
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    var_12 = var_11.__repr__()
    none_type_3 = None
    bst_13 = module_0.Bst(none_type_3)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_14 = module_0.Bst(str_0)
    bst_15 = module_0.Bst()
    bool_2 = True
    float_0 = -128.5329
    dict_0 = {bool_2: float_0}
    tuple_0 = (dict_0, bool_2)
    bst_16 = module_0.Bst()
    var_13 = bst_16.insert(tuple_0)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(node_8)


def test_case_822():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    str_0 = " 4'"
    node_2 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_3 = module_0.Node(set_0)
    var_1 = node_3.__repr__()
    node_4 = module_0.Node(str_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_2 = node_5.__repr__()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_3 = node_6.__repr__()
    var_4 = node_6.__repr__()
    bst_3 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    list_1 = []
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(list_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_5)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    bst_6 = module_0.Bst()
    node_9 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_9.__repr__()
    var_11 = node_9.__repr__()
    node_10 = module_0.Node(var_10)
    var_12 = var_4.__repr__()


def test_case_823():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    var_4 = var_2.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()


def test_case_824():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_2 = module_0.Node(set_1)
    var_3 = node_2.__repr__()
    bst_2 = module_0.Bst()
    dict_0 = {str_0: var_1}
    var_4 = bst_1.insert(dict_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_825():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_1 = node_3.__repr__()
    bst_1 = module_0.Bst(var_1)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_4.__repr__()
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst(node_0)


def test_case_826():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    bst_2 = module_0.Bst(none_type_0)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = node_1.__repr__()
    var_2 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_827():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    var_3 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    node_4 = module_0.Node(var_1)


def test_case_828():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    list_0 = []
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == []
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_2 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_4 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(var_8)
    var_10 = var_1.__repr__()


def test_case_829():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_4 = module_0.Node(dict_0)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_8 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    tuple_0 = (node_5, var_8, var_9, var_9)
    node_6 = module_0.Node(tuple_0)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    int_0 = -1138
    node_8 = module_0.Node(int_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_9 = module_0.Bst(str_0)
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_10)
    var_10 = bst_10.insert(node_9)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    var_11 = bst_11.insert(node_10)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_11)
    var_12 = node_11.__repr__()
    var_13 = bst_4.insert(var_5)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_830():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    node_5 = module_0.Node(var_3)


def test_case_831():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst(bst_0)
    var_3 = var_2.__repr__()


def test_case_832():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    var_3 = node_0.__repr__()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    var_4 = node_2.__repr__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_7 = node_3.__repr__()
    var_8 = node_3.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_9 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_11 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_13 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_9 = module_0.Bst(var_12)
    node_5 = module_0.Node(var_2)


def test_case_833():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()


def test_case_834():
    list_0 = []
    node_0 = module_0.Node(list_0)


def test_case_835():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bst_1)
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_2 = module_0.Bst()
    tuple_0 = (bst_2,)
    tuple_1 = (dict_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_3 = bst_4.insert(node_6)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_7.__repr__()
    int_1 = 869
    node_8 = module_0.Node(int_1)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_9 = module_0.Node(str_0)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    var_6 = node_10.__repr__()
    var_7 = var_6.__repr__()
    var_8 = var_4.__repr__()


def test_case_836():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_0 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    var_10 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_2.__repr__()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_12 = node_3.__repr__()
    bst_8 = module_0.Bst(var_12)
    bool_2 = True
    bst_9 = module_0.Bst()
    var_13 = bst_9.insert(bool_2)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_8.__repr__()


def test_case_837():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_0 = node_2.__repr__()
    bst_0 = module_0.Bst()
    node_3 = module_0.Node(bst_0)
    var_1 = bst_0.insert(node_3)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_4 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_2 = bst_1.insert(node_5)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_3 = node_6.__repr__()
    var_4 = var_3.__repr__()
    none_type_2 = None
    bst_3 = module_0.Bst(none_type_2)
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_4 = module_0.Bst(str_1)
    bst_5 = module_0.Bst()
    list_0 = []
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    bool_1 = False
    var_6 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst(node_8)


def test_case_838():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_7 = var_3.__repr__()


def test_case_839():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    var_5 = node_1.__repr__()
    node_2 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(var_6)
    var_8 = node_3.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_5.__repr__()
    var_11 = var_9.__repr__()
    bst_10 = module_0.Bst()
    var_12 = bst_8.insert(bst_9)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_1 = False
    var_13 = bst_11.insert(bool_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_12 = module_0.Bst()
    tuple_0 = (node_7, var_13, var_14, var_14)
    node_8 = module_0.Node(tuple_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_9 = module_0.Node(set_0)
    var_15 = node_9.__repr__()
    node_10 = module_0.Node(var_15)
    bst_13 = module_0.Bst()
    node_11 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_16 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_11.__repr__()
    var_18 = var_16.__repr__()
    bst_15 = module_0.Bst()
    var_19 = var_9.__repr__()


def test_case_840():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    var_2 = node_2.__repr__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_1 = False
    var_5 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_5 = module_0.Node(var_6)
    bool_2 = True
    set_0 = {bool_2, bool_2}
    bst_5 = module_0.Bst(set_0)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_3 = False
    var_7 = bst_6.insert(bool_3)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_0)
    str_1 = " 4'"
    node_8 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_9 = module_0.Node(set_1)
    var_8 = node_9.__repr__()
    node_10 = module_0.Node(str_1)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_3}
    node_11 = module_0.Node(set_2)
    var_9 = node_11.__repr__()
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_8 = module_0.Bst()
    node_12 = module_0.Node(set_2)
    str_4 = " 4'"
    node_13 = module_0.Node(str_4)
    bst_9 = module_0.Bst()
    node_14 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_14.__repr__()
    bst_11 = module_0.Bst()
    node_15 = module_0.Node(var_12)
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_14 = node_2.__repr__()


def test_case_841():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    int_0 = -1464
    var_4 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_1)
    var_5 = var_3.__repr__()


def test_case_842():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(var_2)
    var_4 = node_1.__repr__()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst(var_7)


def test_case_843():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    list_0 = []
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_4 = bst_5.insert(node_4)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_5 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst(bst_7)
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_8.__repr__()
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(var_10)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_10 = module_0.Node(str_0)
    bst_14 = module_0.Bst()
    node_11 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_12 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_11.__repr__()
    node_12 = module_0.Node(bst_15)
    node_13 = module_0.Node(node_10)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_14 = module_0.Node(set_0)
    var_14 = node_14.__repr__()
    bst_16 = module_0.Bst()
    none_type_2 = None
    node_15 = module_0.Node(none_type_2)
    node_16 = module_0.Node(node_14)
    node_17 = module_0.Node(bst_14)


def test_case_844():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_2 = module_0.Node(var_2)
    bst_5 = module_0.Bst()


def test_case_845():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_2 = module_0.Node(set_1)
    var_1 = node_2.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(node_2)
    bst_1 = module_0.Bst()
    node_5 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_5.__repr__()
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(bst_2)
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_5 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    bst_6 = module_0.Bst()
    str_3 = "(-+2Yj@U8NM6[+0S0o"
    node_9 = module_0.Node(str_3)
    bst_7 = module_0.Bst()
    node_10 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_10.__repr__()
    node_11 = module_0.Node(bst_8)
    node_12 = module_0.Node(node_9)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    bst_12 = module_0.Bst()
    node_13 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_13.__repr__()
    var_15 = var_13.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    node_14 = module_0.Node(bst_15)
    bst_16 = module_0.Bst()
    var_16 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_14.__repr__()
    var_18 = var_16.__repr__()
    bst_17 = module_0.Bst()
    var_19 = bst_15.insert(bst_16)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_15 = module_0.Node(bst_3)


def test_case_846():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    var_3 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    bst_1 = module_0.Bst()
    var_6 = node_1.__repr__()
    bst_2 = module_0.Bst()
    var_7 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_8 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_2 = module_0.Node(var_8)
    var_10 = var_9.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_11 = node_3.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(node_3)
    bst_5 = module_0.Bst()
    var_12 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    int_0 = -1464
    var_15 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_12)
    bst_7 = module_0.Bst()
    var_16 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_8 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_8 = module_0.Node(set_1)
    node_9 = module_0.Node(bst_7)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_2)
    var_18 = node_10.__repr__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__repr__()
    var_21 = var_10.__repr__()


def test_case_847():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    bst_5 = module_0.Bst()
    var_4 = var_0.__repr__()


def test_case_848():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    object_0 = module_1.object()
    node_2 = module_0.Node(object_0)
    var_1 = node_2.__repr__()


def test_case_849():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_6.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_8 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_1 = module_0.Node(bst_3)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_5 = module_0.Bst(str_0)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_10 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    var_12 = bst_8.insert(node_3)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    var_13 = bst_9.insert(node_4)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_13)
    var_14 = node_5.__repr__()
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_15 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_6.__repr__()
    bst_12 = module_0.Bst()
    int_0 = 869
    node_7 = module_0.Node(int_0)
    bst_13 = module_0.Bst()
    node_8 = module_0.Node(var_13)


def test_case_850():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(bst_0)


def test_case_851():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(var_3)
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(var_4)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    int_0 = 3317
    node_7 = module_0.Node(int_0)
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_0 = []
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(list_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_8)
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bst_13 = module_0.Bst()
    str_0 = " 4'"
    node_11 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_12 = module_0.Node(set_0)
    var_9 = node_12.__repr__()
    node_13 = module_0.Node(str_0)
    var_10 = node_11.__repr__()


def test_case_852():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bool_0 = True
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_0 = None
    bst_4 = module_0.Bst(none_type_0)
    list_0 = []
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    var_4 = node_2.__repr__()
    bst_6 = module_0.Bst(bst_5)


def test_case_853():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    tuple_0 = (node_0, var_0, var_1, var_1)
    node_1 = module_0.Node(tuple_0)
    str_0 = " 4'"
    node_2 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst(bst_2)
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    list_0 = []
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()


def test_case_854():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    node_1 = module_0.Node(bst_0)


def test_case_855():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    int_0 = -1464
    var_5 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    var_6 = var_0.__repr__()


def test_case_856():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(var_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_3 = node_3.__repr__()
    bst_4 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    node_6 = module_0.Node(bst_6)
    var_6 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    var_7 = bst_7.insert(node_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_7)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_9 = module_0.Node(set_1)
    var_8 = node_9.__repr__()
    bst_8 = module_0.Bst(var_8)
    var_9 = node_9.__repr__()
    var_10 = var_1.__repr__()


def test_case_857():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_4 = node_5.__repr__()
    var_5 = node_5.__repr__()
    node_6 = module_0.Node(bst_5)


def test_case_858():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(none_type_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(var_4)
    var_6 = node_3.__repr__()
    bst_8 = module_0.Bst()
    var_7 = var_2.__repr__()


def test_case_859():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(var_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_860():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(var_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_0 = None
    bst_3 = module_0.Bst(none_type_0)
    list_0 = []
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_0 = module_0.Node(var_3)
    var_4 = node_0.__repr__()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    var_6 = bst_6.insert(node_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    var_7 = bst_7.insert(node_3)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_7)
    var_8 = node_4.__repr__()
    var_9 = var_6.__repr__()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_10 = node_5.__repr__()
    var_11 = node_5.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_0}
    node_6 = module_0.Node(set_1)
    var_12 = node_6.__repr__()
    bst_9 = module_0.Bst()
    var_13 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(set_1)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_8 = module_0.Node(dict_0)
    str_1 = ""
    bst_11 = module_0.Bst(str_1)
    var_15 = var_9.__repr__()


def test_case_861():
    bool_0 = True
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    str_0 = " \x0c^"
    node_2 = module_0.Node(str_0)
    var_5 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_4 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    var_10 = bst_6.insert(node_5)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_9)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_2 = False
    var_11 = bst_7.insert(bool_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(var_12)
    node_9 = module_0.Node(bst_8)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_1)
    bst_9 = module_0.Bst()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_11 = module_0.Node(str_2)
    bst_10 = module_0.Bst()
    node_12 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_12.__repr__()
    node_13 = module_0.Node(bst_11)
    var_15 = node_11.__repr__()
    bst_12 = module_0.Bst()


def test_case_862():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(set_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(node_1)


def test_case_863():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_3.__repr__()
    bst_3 = module_0.Bst()
    var_6 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_2 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_0 = False
    var_10 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_3.__repr__()
    node_4 = module_0.Node(bool_0)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_12 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_5 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    var_14 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    var_16 = var_14.__repr__()
    node_6 = module_0.Node(none_type_1)


def test_case_864():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    var_0 = bst_0.insert(bool_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(var_1)
    node_5 = module_0.Node(node_1)


def test_case_865():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    str_0 = " \x0c^"
    node_1 = module_0.Node(str_0)
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst(var_1)


def test_case_866():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst(var_7)
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_10 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    str_1 = ""
    bst_10 = module_0.Bst(str_1)
    var_12 = var_10.__repr__()
    bst_11 = module_0.Bst()
    node_4 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_4.__repr__()
    var_15 = node_4.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_5 = module_0.Node(dict_0)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_6 = module_0.Node(set_1)
    var_16 = node_6.__repr__()
    node_7 = module_0.Node(var_16)
    bst_13 = module_0.Bst()


def test_case_867():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    var_1 = node_0.__repr__()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    int_0 = -1464
    var_7 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_4)
    node_7 = module_0.Node(node_4)


def test_case_868():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    list_0 = []
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_5)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = False
    var_6 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_2 = False
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(node_5)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    var_7 = var_3.__repr__()


def test_case_869():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_1 = module_0.Bst()
    tuple_0 = (bst_1,)
    tuple_1 = (dict_0, tuple_0)
    node_1 = module_0.Node(tuple_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    node_4 = module_0.Node(var_2)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_1)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_6.__repr__()
    node_7 = module_0.Node(bst_5)
    node_8 = module_0.Node(node_1)


def test_case_870():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_1)
    none_type_1 = None
    bst_3 = module_0.Bst(none_type_1)
    list_0 = []
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_2)
    var_3 = node_2.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_3 = module_0.Node(set_0)
    var_4 = node_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_1 = False
    var_8 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst()
    tuple_0 = (node_6, var_8, var_9, var_9)
    node_7 = module_0.Node(tuple_0)
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_8.__repr__()
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(var_10)
    bst_14 = module_0.Bst()
    var_12 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    int_0 = -1138
    node_10 = module_0.Node(int_0)
    bst_15 = module_0.Bst()


def test_case_871():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_3 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    str_0 = "7"
    node_4 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_10 = module_0.Bst(var_11)
    bst_11 = module_0.Bst()
    node_5 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_5.__repr__()
    bst_13 = module_0.Bst()
    node_6 = module_0.Node(var_14)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_7 = module_0.Node(bytes_0)
    var_16 = node_7.__repr__()
    var_17 = var_16.__repr__()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_14 = module_0.Bst()
    tuple_0 = (bst_14,)
    tuple_1 = (dict_0, tuple_0)
    node_8 = module_0.Node(tuple_1)
    int_1 = 3317
    node_9 = module_0.Node(int_1)
    bst_15 = module_0.Bst()
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    bool_0 = False
    var_18 = bst_15.insert(bool_0)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    node_11 = module_0.Node(var_19)
    node_12 = module_0.Node(var_19)


def test_case_872():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(var_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_0 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_0.__repr__()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    var_6 = bst_3.insert(bst_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    var_7 = node_1.__repr__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    var_10 = bst_6.insert(node_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    var_11 = bst_7.insert(node_3)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_11)
    var_12 = node_4.__repr__()
    bst_8 = module_0.Bst()
    var_13 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_14 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_5 = module_0.Node(var_14)
    var_16 = var_15.__repr__()
    str_1 = "7"
    node_6 = module_0.Node(str_1)
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bool_1 = False
    var_17 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(var_18)
    node_9 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_19 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = var_19.__repr__()
    var_21 = var_20.__repr__()
    bst_13 = module_0.Bst(var_11)


def test_case_873():
    str_0 = "vOK:\\f"
    node_0 = module_0.Node(str_0)


def test_case_874():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(var_2)
    node_3 = module_0.Node(bst_1)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    node_6 = module_0.Node(bst_3)
    int_0 = 3317
    node_7 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_6 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_8 = module_0.Node(set_1)
    node_9 = module_0.Node(node_4)


def test_case_875():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    dict_0 = {node_0: none_type_0, node_0: none_type_0}
    bst_0 = module_0.Bst(dict_0)


def test_case_876():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_4 = module_0.Node(var_7)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    var_11 = var_10.__repr__()
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_8.__repr__()
    bst_10 = module_0.Bst()
    int_0 = 869
    node_9 = module_0.Node(int_0)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    var_14 = node_10.__repr__()
    var_15 = var_14.__repr__()
    bst_13 = module_0.Bst()
    var_16 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    var_17 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    node_11 = module_0.Node(var_17)
    var_19 = var_18.__repr__()
    str_1 = "7"
    node_12 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_13 = module_0.Node(set_1)
    var_20 = node_13.__repr__()
    node_14 = module_0.Node(var_20)
    bst_15 = module_0.Bst()
    var_21 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_16 = module_0.Bst(set_1)


def test_case_877():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()


def test_case_878():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(set_0)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    var_8 = var_6.__repr__()
    bst_8 = module_0.Bst(var_5)


def test_case_879():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_4 = module_0.Node(bytes_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst(var_3)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_5)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_9 = node_4.__repr__()


def test_case_880():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    node_3 = module_0.Node(node_2)


def test_case_881():
    bool_0 = True
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    str_0 = " 4'"
    node_2 = module_0.Node(str_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_3 = node_3.__repr__()
    bst_4 = module_0.Bst(var_3)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    var_4 = node_4.__repr__()
    var_5 = bst_3.insert(var_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_882():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    int_0 = -1138
    node_1 = module_0.Node(int_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    var_2 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(node_3)


def test_case_883():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst(bst_0)
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_5.__repr__()
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_8 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    node_7 = module_0.Node(bool_1)
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    int_1 = 869
    node_8 = module_0.Node(int_1)
    list_0 = []
    bst_8 = module_0.Bst()
    var_13 = bst_8.insert(list_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_13)
    bst_9 = module_0.Bst()
    var_14 = node_9.__repr__()
    bst_10 = module_0.Bst()
    var_15 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_10 = module_0.Node(var_0)
    var_17 = node_10.__repr__()


def test_case_884():
    int_0 = 2253
    node_0 = module_0.Node(int_0)


def test_case_885():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    var_0 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    object_0 = module_1.object()
    node_2 = module_0.Node(object_0)
    var_1 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_2 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_2)
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_3 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(bst_1)


def test_case_886():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()


def test_case_887():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = node_1.__repr__()
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst(var_5)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_7 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    bst_12 = module_0.Bst()
    node_7 = module_0.Node(var_7)
    var_9 = node_6.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_8 = module_0.Node(set_0)
    var_10 = node_8.__repr__()
    node_9 = module_0.Node(var_10)
    bst_13 = module_0.Bst()
    node_10 = module_0.Node(bst_13)
    var_11 = bst_13.insert(node_10)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    node_11 = module_0.Node(bst_14)
    var_12 = bst_14.insert(node_11)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_12)
    var_13 = node_12.__repr__()
    var_14 = var_11.__repr__()
    bst_15 = module_0.Bst()
    node_13 = module_0.Node(none_type_0)


def test_case_888():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)


def test_case_889():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst(var_2)
    var_3 = node_0.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(var_4)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)


def test_case_890():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    node_4 = module_0.Node(bst_5)
    var_5 = node_2.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst(bst_6)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_13 = module_0.Bst()
    node_7 = module_0.Node(bst_13)
    var_13 = bst_13.insert(node_7)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    node_8 = module_0.Node(bst_14)
    var_14 = bst_14.insert(node_8)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_14)
    var_15 = node_9.__repr__()
    var_16 = var_13.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_10 = module_0.Node(set_0)
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    var_19 = var_18.__repr__()
    str_2 = "w8<H^+~qIrArq]1_$"
    node_11 = module_0.Node(str_2)
    bst_16 = module_0.Bst()


def test_case_891():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_3 = node_2.__repr__()
    var_4 = node_2.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_5 = node_3.__repr__()
    none_type_1 = None
    bst_5 = module_0.Bst(none_type_1)
    list_0 = []
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_6)
    var_7 = node_4.__repr__()
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_5 = module_0.Node(set_1)
    var_9 = node_5.__repr__()
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(set_1)
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_11 = module_0.Bst()
    str_2 = " \x0c^"
    node_7 = module_0.Node(str_2)
    var_14 = node_7.__repr__()
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_8 = module_0.Node(bst_12)


def test_case_892():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    none_type_0 = None
    bst_1 = module_0.Bst(none_type_0)
    list_0 = []
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_0 = module_0.Node(var_3)
    var_4 = node_0.__repr__()
    list_1 = []
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(list_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    var_6 = node_1.__repr__()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    node_3 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    var_9 = bst_7.insert(node_4)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_9 = module_0.Bst()
    var_12 = var_10.__repr__()
    bst_10 = module_0.Bst()
    node_5 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_5.__repr__()
    bst_12 = module_0.Bst()
    node_6 = module_0.Node(var_13)
    var_15 = node_5.__repr__()
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_13 = module_0.Bst()
    var_16 = bst_13.insert(tuple_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_1 = True
    set_1 = {bool_1, bool_1}
    bst_14 = module_0.Bst(set_1)
    list_2 = []
    node_7 = module_0.Node(list_2)
    object_0 = module_1.object()
    node_8 = module_0.Node(object_0)
    node_9 = module_0.Node(var_5)


def test_case_893():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    node_2 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(var_4)
    node_5 = module_0.Node(var_3)


def test_case_894():
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_0 = module_0.Node(bytes_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(bst_3)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    var_4 = node_0.__repr__()


def test_case_895():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst(bst_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    int_0 = -1464
    var_7 = bst_5.insert(int_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    none_type_0 = None
    bst_6 = module_0.Bst(none_type_0)
    var_8 = var_6.__repr__()


def test_case_896():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    var_3 = var_1.__repr__()


def test_case_897():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    object_0 = module_1.object()
    node_1 = module_0.Node(object_0)
    list_0 = []
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    list_1 = []
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(list_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    node_5 = module_0.Node(bst_6)
    int_0 = -1138
    node_6 = module_0.Node(int_0)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_6)
    object_1 = module_1.object()
    node_9 = module_0.Node(object_1)
    var_7 = node_9.__repr__()
    bst_8 = module_0.Bst()
    node_10 = module_0.Node(bst_8)
    int_1 = -1464
    var_8 = bst_8.insert(int_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    bool_0 = False
    var_9 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_11.__repr__()
    node_12 = module_0.Node(none_type_2)
    bst_10 = module_0.Bst()
    none_type_3 = None
    node_13 = module_0.Node(none_type_3)
    bool_1 = False
    var_11 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    none_type_4 = None
    node_14 = module_0.Node(none_type_4)
    bst_11 = module_0.Bst()


def test_case_898():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    bst_2 = module_0.Bst()


def test_case_899():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_3 = node_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    var_6 = node_1.__repr__()
    node_2 = module_0.Node(var_5)
    var_7 = var_5.__repr__()
    bool_0 = True
    set_1 = {bool_0, bool_0}
    bst_3 = module_0.Bst(set_1)
    bst_4 = module_0.Bst()
    var_8 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_5 = module_0.Bst()
    var_10 = bst_5.insert(var_9)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_11 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_7 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_1}
    node_3 = module_0.Node(set_2)
    node_4 = module_0.Node(bst_6)
    var_13 = var_11.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    var_14 = bst_8.insert(node_5)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    var_15 = bst_9.insert(node_6)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_15)
    var_16 = node_7.__repr__()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_2)
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_9 = module_0.Node(none_type_0)
    var_17 = node_9.__repr__()
    var_18 = bst_10.insert(str_2)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_10.__repr__()


def test_case_900():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    int_0 = 869
    node_1 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(var_3)
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_6 = module_0.Bst(set_0)
    bool_2 = True
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bool_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(bst_2)
    var_5 = node_4.__repr__()


def test_case_901():
    str_0 = " 4'"
    node_0 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    node_2 = module_0.Node(str_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_3 = module_0.Node(bytes_0)
    var_1 = node_3.__repr__()
    var_2 = var_1.__repr__()
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    var_3 = node_4.__repr__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_1 = False
    var_6 = bst_0.insert(bool_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_6.data is False
    assert var_6.left is None
    assert var_6.right is None
    assert var_6.parent is None
    var_7 = var_6.__repr__()
    bst_1 = module_0.Bst()
    node_6 = module_0.Node(var_7)
    bst_2 = module_0.Bst()
    node_7 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_8 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    bst_4 = module_0.Bst()
    int_0 = 869
    node_8 = module_0.Node(int_0)
    bst_5 = module_0.Bst()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_9 = module_0.Node(str_2)
    bst_6 = module_0.Bst()
    node_10 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_10.__repr__()
    node_11 = module_0.Node(bst_7)
    var_12 = node_9.__repr__()
    bool_2 = False
    node_12 = module_0.Node(bool_2)
    str_3 = "w8<H^+~qIrArq]1_$"
    node_13 = module_0.Node(str_3)
    node_14 = module_0.Node(bst_7)


def test_case_902():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    node_4 = module_0.Node(bst_4)
    var_4 = node_2.__repr__()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    node_6 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    tuple_0 = (node_7, var_7, var_8, var_8)
    node_8 = module_0.Node(tuple_0)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_10 = module_0.Bst(str_2)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_9 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    int_0 = -1138
    node_10 = module_0.Node(int_0)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_3}
    node_11 = module_0.Node(set_1)
    var_14 = node_11.__repr__()
    bst_13 = module_0.Bst()
    var_15 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_14 = module_0.Bst()
    node_12 = module_0.Node(set_1)
    bst_15 = module_0.Bst(bst_6)


def test_case_903():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    bst_0 = module_0.Bst()
    float_0 = -131.8
    bst_1 = module_0.Bst(float_0)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    str_1 = " \x0c^"
    node_2 = module_0.Node(str_1)
    var_4 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_5 = node_3.__repr__()
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    var_9 = node_4.__repr__()
    node_5 = module_0.Node(node_0)


def test_case_904():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    var_1 = node_0.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_1)
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    var_2 = node_1.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_3.data is False
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_4 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    dict_0 = {node_6: none_type_2, node_6: none_type_2}
    bst_4 = module_0.Bst(dict_0)
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_7.__repr__()
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    var_8 = bst_7.insert(node_8)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_9 = module_0.Node(str_2)
    bst_11 = module_0.Bst(var_5)


def test_case_905():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst(var_2)
    str_1 = ""
    bst_6 = module_0.Bst(str_1)
    var_5 = bst_3.insert(var_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_906():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    str_1 = " 4'"
    node_1 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_2 = module_0.Node(set_0)
    var_0 = node_2.__repr__()
    node_3 = module_0.Node(str_1)
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_4.__repr__()
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_6 = module_0.Node(bytes_0)
    var_3 = node_6.__repr__()
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_7)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    var_8 = var_6.__repr__()
    str_3 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_3)
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_9.__repr__()
    node_10 = module_0.Node(bst_8)
    var_11 = node_8.__repr__()
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_11 = module_0.Node(none_type_0)
    var_12 = node_11.__repr__()
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_12 = module_0.Node(none_type_1)
    bool_0 = False
    var_13 = bst_10.insert(bool_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_12.__repr__()
    bst_11 = module_0.Bst()


def test_case_907():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_2.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(var_6)
    var_8 = node_2.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_12 = module_0.Bst(var_10)
    bst_13 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_13 = bst_13.insert(bool_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_14 = module_0.Bst()
    node_5 = module_0.Node(var_14)
    node_6 = module_0.Node(bst_14)
    list_0 = []
    bst_15 = module_0.Bst()
    var_15 = bst_15.insert(list_0)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_15)
    bst_16 = module_0.Bst()
    var_16 = node_7.__repr__()
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_0 = (dict_0, bool_1)
    bst_17 = module_0.Bst()
    var_17 = bst_17.insert(tuple_0)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_18 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bool_2 = False
    var_18 = bst_18.insert(bool_2)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    bst_19 = module_0.Bst()
    bool_3 = True
    set_0 = {bool_3, bool_3}
    bst_20 = module_0.Bst(set_0)
    var_20 = node_8.__repr__()
    var_21 = var_20.__repr__()


def test_case_908():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst(var_0)
    str_0 = " \x0c^"
    node_1 = module_0.Node(str_0)
    var_2 = node_1.__repr__()
    node_2 = module_0.Node(bst_3)


def test_case_909():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_1 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_2 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    str_0 = "7"
    node_3 = module_0.Node(str_0)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    dict_0 = {node_5: none_type_1, node_5: none_type_1}
    bst_9 = module_0.Bst(dict_0)
    var_14 = node_0.__repr__()


def test_case_910():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_5.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_3.__repr__()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(var_8)
    str_0 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_0)
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_8 = module_0.Node(set_0)
    var_12 = node_8.__repr__()
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_0 = False
    var_14 = bst_13.insert(bool_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_14 = module_0.Bst()
    tuple_0 = (node_10, var_14, var_15, var_15)
    node_11 = module_0.Node(tuple_0)
    var_16 = node_11.__repr__()


def test_case_911():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(var_0)


def test_case_912():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_9.__repr__()
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_5 = module_0.Bst(set_0)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_4.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    var_13 = var_12.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_14 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_6 = module_0.Node(var_14)
    var_16 = var_14.__repr__()
    var_17 = node_3.__repr__()


def test_case_913():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst(node_2)


def test_case_914():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_4 = node_1.__repr__()
    bst_4 = module_0.Bst()


def test_case_915():
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_0 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_4 = module_0.Bst()
    var_3 = bst_2.insert(bst_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_0 = []
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_4)
    bst_6 = module_0.Bst()
    var_5 = node_1.__repr__()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    var_8 = node_3.__repr__()
    node_4 = module_0.Node(var_7)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    var_9 = node_5.__repr__()
    bst_9 = module_0.Bst()
    list_1 = [var_3, bst_7]
    node_6 = module_0.Node(list_1)


def test_case_916():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    bst_3 = module_0.Bst(none_type_0)
    list_0 = []
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_3)
    var_4 = node_1.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_2.__repr__()
    bst_7 = module_0.Bst()
    var_7 = var_5.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_8 = node_3.__repr__()
    bst_8 = module_0.Bst(var_8)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_9 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_1)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_1 = False
    var_10 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(var_11)
    str_2 = " \x0c^"
    node_8 = module_0.Node(str_2)
    var_12 = node_8.__repr__()
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_13 = module_0.Bst()


def test_case_917():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_5 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    float_0 = -131.8
    bst_6 = module_0.Bst(float_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    var_4 = node_4.__repr__()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    node_6 = module_0.Node(node_4)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_5 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst(var_7)


def test_case_918():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_2 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_4 = module_0.Bst()
    var_6 = var_4.__repr__()
    int_0 = 869
    node_3 = module_0.Node(int_0)
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(tuple_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    int_1 = 3317
    node_4 = module_0.Node(int_1)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    bst_9 = module_0.Bst()
    int_2 = 869
    node_6 = module_0.Node(int_2)
    bst_10 = module_0.Bst()
    float_1 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_1: float_1, float_1: complex_0}
    node_7 = module_0.Node(dict_1)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bool_1 = False
    var_11 = bst_12.insert(bool_1)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    node_10 = module_0.Node(none_type_1)
    bst_13 = module_0.Bst(var_10)


def test_case_919():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    var_6 = bst_3.insert(bst_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_3.__repr__()
    node_4 = module_0.Node(bool_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    var_9 = node_5.__repr__()
    node_6 = module_0.Node(var_9)
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_7 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    list_0 = []
    node_8 = module_0.Node(list_0)
    bst_9 = module_0.Bst()


def test_case_920():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_1 = "7"
    node_3 = module_0.Node(str_1)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    var_8 = var_6.__repr__()
    bst_6 = module_0.Bst()
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    var_11 = node_6.__repr__()
    node_7 = module_0.Node(var_10)
    var_12 = var_10.__repr__()
    bst_9 = module_0.Bst()
    var_13 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_8 = module_0.Node(var_14)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_9 = module_0.Node(str_2)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_15 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_10 = module_0.Node(bst_10)
    bst_12 = module_0.Bst()
    node_11 = module_0.Node(bst_12)
    var_17 = bst_12.insert(node_11)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_16)
    bst_13 = module_0.Bst(var_5)


def test_case_921():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_4 = node_1.__repr__()
    bst_2 = module_0.Bst(var_4)
    var_5 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_4 = module_0.Bst(str_1)
    list_0 = []
    node_3 = module_0.Node(list_0)
    none_type_0 = None
    bst_5 = module_0.Bst(none_type_0)
    str_2 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_6 = module_0.Bst(str_2)
    bst_7 = module_0.Bst()
    str_3 = " 4'"
    node_4 = module_0.Node(str_3)
    str_4 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_4}
    node_5 = module_0.Node(set_1)
    var_6 = node_5.__repr__()
    node_6 = module_0.Node(str_3)
    node_7 = module_0.Node(var_5)


def test_case_922():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_2 = module_0.Node(bytes_0)
    var_2 = node_2.__repr__()
    var_3 = var_2.__repr__()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_4 = node_4.__repr__()
    bst_3 = module_0.Bst(var_4)
    str_0 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_0 = False
    var_5 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_8.__repr__()
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(var_7)
    var_9 = node_8.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_10.__repr__()
    var_12 = var_10.__repr__()
    bst_12 = module_0.Bst()
    var_13 = bst_10.insert(bst_11)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_14 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    var_16 = var_14.__repr__()
    bst_14 = module_0.Bst()
    none_type_3 = None
    node_11 = module_0.Node(none_type_3)
    var_17 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_16.__repr__()
    bst_15 = module_0.Bst()
    var_19 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_16 = module_0.Bst()
    var_20 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_21 = var_20.__repr__()
    node_12 = module_0.Node(var_20)
    var_22 = var_21.__repr__()
    node_13 = module_0.Node(node_6)


def test_case_923():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_5 = module_0.Bst()
    str_0 = " \x0c^"
    node_3 = module_0.Node(str_0)
    var_5 = node_3.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_1)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    node_6 = module_0.Node(bst_7)
    var_8 = node_4.__repr__()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_9 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(var_10)
    node_9 = module_0.Node(bst_9)
    str_2 = "w8<H^+~qIrArq]1_$"
    node_10 = module_0.Node(str_2)
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_0 = (dict_0, bool_1)
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(tuple_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = 3317
    node_11 = module_0.Node(int_0)
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_12 = module_0.Node(none_type_2)
    bool_2 = False
    var_12 = bst_11.insert(bool_2)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_13 = module_0.Node(var_13)
    bst_12 = module_0.Bst()
    none_type_3 = None
    node_14 = module_0.Node(none_type_3)
    bool_3 = False
    var_14 = bst_12.insert(bool_3)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst(var_8)


def test_case_924():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    var_3 = var_0.__repr__()


def test_case_925():
    str_0 = " 4'"
    node_0 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    node_2 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_4 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    node_5 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_5.__repr__()
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(var_2)
    var_4 = node_5.__repr__()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bst_4 = module_0.Bst()
    node_8 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_8)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_9 = module_0.Node(bst_5)
    var_6 = bst_5.insert(node_9)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_6)
    var_7 = node_10.__repr__()
    bst_6 = module_0.Bst()
    node_11 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_11.__repr__()
    bst_8 = module_0.Bst()
    node_12 = module_0.Node(bst_7)
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    float_0 = -131.8
    bst_10 = module_0.Bst(float_0)
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    var_14 = var_13.__repr__()
    var_15 = var_9.__repr__()


def test_case_926():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_2)
    float_0 = -131.8
    bst_1 = module_0.Bst(float_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    var_7 = node_4.__repr__()
    node_5 = module_0.Node(var_6)
    bst_6 = module_0.Bst()


def test_case_927():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    object_0 = module_1.object()
    node_2 = module_0.Node(object_0)
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    bst_4 = module_0.Bst()


def test_case_928():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()


def test_case_929():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bst_2 = module_0.Bst()
    var_5 = node_1.__repr__()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_6 = node_2.__repr__()
    var_7 = node_2.__repr__()


def test_case_930():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    node_4 = module_0.Node(none_type_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst(node_7)
    node_8 = module_0.Node(bst_1)


def test_case_931():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_2 = module_0.Node(set_1)
    var_3 = node_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    int_0 = -1464
    var_7 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_8 = node_5.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_6 = module_0.Node(dict_0)
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    var_9 = bst_5.insert(node_7)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    var_12 = bst_9.insert(node_8)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_12)
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    var_13 = bst_10.insert(node_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_11 = module_0.Bst(str_2)
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    bool_0 = False
    var_14 = bst_12.insert(bool_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    str_3 = ""
    bst_13 = module_0.Bst(str_3)
    var_16 = var_14.__repr__()
    node_12 = module_0.Node(var_9)


def test_case_932():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(node_1)


def test_case_933():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    var_3 = var_0.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    var_4 = node_1.__repr__()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_4 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_4 = module_0.Node(bst_5)
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_0 = (dict_0, bool_1)
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(tuple_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    int_0 = 869
    node_5 = module_0.Node(int_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_6 = module_0.Node(bytes_0)
    var_11 = node_6.__repr__()
    var_12 = var_11.__repr__()
    bst_9 = module_0.Bst()
    var_13 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_14 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_7 = module_0.Node(var_14)
    var_16 = var_15.__repr__()
    str_1 = "7"
    node_8 = module_0.Node(str_1)
    node_9 = module_0.Node(dict_0)


def test_case_934():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_6 = module_0.Bst(bst_4)
    bst_7 = module_0.Bst()


def test_case_935():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_1 = module_0.Node(set_1)
    var_0 = node_1.__repr__()
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    bst_3 = module_0.Bst()


def test_case_936():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    node_2 = module_0.Node(bst_3)
    var_3 = node_0.__repr__()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(var_5)
    var_7 = var_6.__repr__()
    str_1 = "7"
    node_4 = module_0.Node(str_1)
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    str_2 = " 4'"
    node_6 = module_0.Node(str_2)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_9.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst(var_10)
    node_10 = module_0.Node(node_8)
    var_12 = node_10.__repr__()


def test_case_937():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    var_3 = var_1.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_4 = node_3.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_4 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    str_2 = " 4'"
    node_5 = module_0.Node(str_2)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_3}
    node_6 = module_0.Node(set_1)
    var_5 = node_6.__repr__()
    node_7 = module_0.Node(str_2)
    bst_3 = module_0.Bst()
    node_8 = module_0.Node(bst_3)
    var_6 = bst_3.insert(node_8)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_9 = module_0.Node(bst_4)
    var_7 = bst_4.insert(node_9)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_7)
    var_8 = node_10.__repr__()
    none_type_1 = None
    bst_5 = module_0.Bst(none_type_1)
    list_0 = []
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_9)
    var_10 = node_11.__repr__()
    bst_7 = module_0.Bst()
    node_12 = module_0.Node(bst_7)
    var_11 = bst_7.insert(node_12)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_12 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    str_4 = " \x0c^"
    node_13 = module_0.Node(str_4)
    var_14 = node_13.__repr__()
    str_5 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_5}
    node_14 = module_0.Node(set_2)
    var_15 = node_14.__repr__()
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_15 = module_0.Node(none_type_2)
    node_16 = module_0.Node(node_14)
    var_16 = var_15.__repr__()


def test_case_938():
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_2 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_2 = module_0.Node(bst_7)
    var_4 = bst_7.insert(node_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = node_1.__repr__()


def test_case_939():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_0)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    var_5 = var_3.__repr__()
    float_1 = -131.8
    bst_4 = module_0.Bst(float_1)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_9 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    str_0 = ""
    bst_10 = module_0.Bst(str_0)
    var_11 = var_9.__repr__()
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_12 = bst_11.insert(bool_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_6.__repr__()
    node_7 = module_0.Node(bool_1)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_1)
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_14 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_9.__repr__()
    node_10 = module_0.Node(bst_13)
    var_16 = node_8.__repr__()
    bst_14 = module_0.Bst()
    node_11 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = node_11.__repr__()
    bst_16 = module_0.Bst()
    node_12 = module_0.Node(var_17)
    var_19 = node_11.__repr__()
    bst_17 = module_0.Bst()
    var_20 = node_4.__repr__()


def test_case_940():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_1.__repr__()
    var_3 = var_0.__repr__()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_3 = module_0.Bst()
    tuple_0 = (bst_3,)
    tuple_1 = (dict_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_0: float_0, float_0: complex_0}
    node_5 = module_0.Node(dict_1)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    var_8 = var_6.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    var_11 = var_10.__repr__()
    node_8 = module_0.Node(var_3)


def test_case_941():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst(node_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_6.__repr__()
    bst_8 = module_0.Bst()


def test_case_942():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst(var_3)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_5 = node_5.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_6 = module_0.Node(str_0)
    bst_7 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_1)
    int_0 = 3317
    node_8 = module_0.Node(int_0)
    var_6 = node_7.__repr__()
    node_9 = module_0.Node(int_0)


def test_case_943():
    str_0 = "\tD\rb9y@AZRea"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()


def test_case_944():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = var_3.__repr__()
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_5 = module_0.Bst(set_0)
    float_0 = -131.8
    bst_6 = module_0.Bst(float_0)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    str_0 = "\tD\rb9y@AZRea"
    node_4 = module_0.Node(str_0)
    var_6 = node_4.__repr__()
    int_0 = 2253
    node_5 = module_0.Node(int_0)
    node_6 = module_0.Node(float_0)


def test_case_945():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_6 = bst_5.insert(node_6)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_7 = module_0.Node(set_0)
    var_7 = node_7.__repr__()
    bst_6 = module_0.Bst(var_7)
    var_8 = var_0.__repr__()


def test_case_946():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    str_0 = "\tD\rb9y@AZRea"
    node_2 = module_0.Node(str_0)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(var_4)
    int_1 = 869
    node_4 = module_0.Node(int_1)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_7 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    tuple_0 = (node_6, var_7, var_8, var_8)
    node_7 = module_0.Node(tuple_0)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_2 = False
    var_9 = bst_7.insert(bool_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(var_11)
    bst_11 = module_0.Bst()
    bool_3 = False
    node_11 = module_0.Node(bool_3)
    node_12 = module_0.Node(node_11)
    bst_12 = module_0.Bst()


def test_case_947():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    int_0 = 869
    node_1 = module_0.Node(int_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst(var_3)
    var_4 = node_2.__repr__()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(var_5)
    var_7 = var_5.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(tuple_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_6.__repr__()
    var_14 = var_12.__repr__()
    bst_12 = module_0.Bst()
    bool_1 = True
    float_1 = -128.5329
    dict_1 = {bool_1: float_1}
    tuple_1 = (dict_1, bool_1)
    bst_13 = module_0.Bst()
    var_15 = bst_13.insert(tuple_1)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    bool_2 = False
    node_7 = module_0.Node(bool_2)
    bst_15 = module_0.Bst()
    var_16 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_16 = module_0.Bst()
    node_8 = module_0.Node(bool_2)


def test_case_948():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(node_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_0 = node_3.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_4.__repr__()
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(bst_1)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_6.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(var_4)
    var_6 = node_6.__repr__()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    var_7 = node_8.__repr__()
    var_8 = node_8.__repr__()
    bst_8 = module_0.Bst()


def test_case_949():
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_0 = module_0.Node(dict_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()


def test_case_950():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_2 = module_0.Bst(str_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_2.__repr__()
    var_8 = node_2.__repr__()
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_3.__repr__()
    bst_10 = module_0.Bst()
    int_0 = 869
    node_4 = module_0.Node(int_0)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_13 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_1 = False
    var_13 = bst_13.insert(bool_1)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_14 = module_0.Bst()
    tuple_0 = (node_5, var_13, var_14, var_14)
    node_6 = module_0.Node(tuple_0)
    bst_15 = module_0.Bst()
    var_15 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    var_17 = var_15.__repr__()
    bst_16 = module_0.Bst()
    node_7 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_18 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = node_7.__repr__()
    bst_18 = module_0.Bst()
    node_8 = module_0.Node(var_18)
    bst_19 = module_0.Bst()
    node_9 = module_0.Node(bst_5)


def test_case_951():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    var_2 = bst_5.insert(node_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    node_4 = module_0.Node(bst_4)


def test_case_952():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_2 = module_0.Node(var_0)
    object_0 = module_1.object()
    node_3 = module_0.Node(object_0)
    var_1 = node_3.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    var_4 = var_3.__repr__()
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_3 = module_0.Bst(set_0)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(var_6)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    var_10 = var_9.__repr__()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_7 = module_0.Node(bytes_0)
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_2 = False
    var_11 = bst_9.insert(bool_2)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_8.__repr__()
    node_9 = module_0.Node(bool_2)
    var_13 = var_2.__repr__()


def test_case_953():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_2.__repr__()
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_2 = module_0.Bst(str_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_1 = module_0.Node(dict_0)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    var_7 = var_5.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_1)
    none_type_1 = None
    bst_5 = module_0.Bst(none_type_1)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_3.__repr__()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(var_8)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_5 = module_0.Node(bst_5)


def test_case_954():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    none_type_0 = None
    bst_1 = module_0.Bst(none_type_0)
    list_0 = []
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    var_1 = node_0.__repr__()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    var_4 = var_3.__repr__()
    var_5 = var_2.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_2.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    var_8 = bst_8.insert(node_4)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_8)
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_9 = bst_9.insert(node_6)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = 3317
    node_7 = module_0.Node(int_0)
    bst_10 = module_0.Bst()
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    bool_2 = False
    var_10 = bst_10.insert(bool_2)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_9 = module_0.Node(var_11)
    bst_11 = module_0.Bst()
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_12)
    object_0 = module_1.object()
    node_12 = module_0.Node(object_0)
    var_13 = node_12.__repr__()
    bool_3 = False
    node_13 = module_0.Node(bool_3)
    node_14 = module_0.Node(node_13)
    var_14 = node_4.__repr__()


def test_case_955():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_3 = node_3.__repr__()
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    var_4 = node_5.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_6 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_9 = module_0.Bst(node_5)


def test_case_956():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_4 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_7)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_7 = module_0.Node(set_0)
    var_8 = node_7.__repr__()
    bst_7 = module_0.Bst(var_8)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_2)
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_9.__repr__()
    node_10 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    none_type_3 = None
    node_11 = module_0.Node(none_type_3)
    var_11 = node_11.__repr__()
    var_12 = node_11.__repr__()
    bst_11 = module_0.Bst()
    node_12 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_12.__repr__()
    bst_13 = module_0.Bst()
    var_15 = var_13.__repr__()
    bst_14 = module_0.Bst(node_7)


def test_case_957():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_4 = module_0.Bst()
    var_3 = var_2.__repr__()
    var_4 = var_1.__repr__()
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_1 = False
    var_5 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    str_0 = ""
    bst_6 = module_0.Bst(str_0)
    var_7 = var_5.__repr__()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_7 = module_0.Bst()
    tuple_0 = (bst_7,)
    tuple_1 = (dict_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_5 = module_0.Node(var_9)
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    var_12 = var_11.__repr__()
    bst_12 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_1)
    int_1 = 3317
    node_9 = module_0.Node(int_1)
    var_13 = node_8.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_0: float_0, float_0: complex_0}
    node_10 = module_0.Node(dict_1)
    bst_13 = module_0.Bst()
    node_11 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_11.__repr__()
    bst_15 = module_0.Bst()
    node_12 = module_0.Node(var_14)
    var_16 = var_11.__repr__()


def test_case_958():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bst_3 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    var_2 = node_3.__repr__()
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_4 = module_0.Bst(set_0)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(var_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_5)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_9 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    var_11 = node_6.__repr__()
    node_7 = module_0.Node(var_10)
    var_12 = node_3.__repr__()


def test_case_959():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_1 = module_0.Bst()
    tuple_0 = (bst_1,)
    tuple_1 = (dict_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_1 = node_3.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_0: float_0, float_0: complex_0}
    node_4 = module_0.Node(dict_1)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_5 = module_0.Node(bytes_0)
    node_6 = module_0.Node(float_0)
    var_2 = node_6.__repr__()


def test_case_960():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()


def test_case_961():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is False
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(bool_0)
    var_4 = node_2.__repr__()
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_5 = node_4.__repr__()
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_6 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    var_8 = node_5.__repr__()
    node_6 = module_0.Node(var_7)
    var_9 = var_7.__repr__()
    var_10 = var_6.__repr__()


def test_case_962():
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_0 = [bytes_0]
    node_0 = module_0.Node(list_0)


def test_case_963():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_1 = module_0.Node(bytes_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(node_0)


def test_case_964():
    int_0 = 869
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    var_2 = var_0.__repr__()
    str_0 = " \x0c^"
    node_3 = module_0.Node(str_0)
    var_3 = node_3.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(var_4)
    var_6 = node_4.__repr__()
    bst_6 = module_0.Bst()
    list_0 = []
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(list_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_7)
    bst_8 = module_0.Bst()
    var_8 = node_6.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_7 = module_0.Node(set_0)
    var_9 = node_7.__repr__()
    bst_9 = module_0.Bst(var_9)
    var_10 = node_7.__repr__()
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bool_0 = False
    var_13 = bst_12.insert(bool_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_13 = module_0.Bst()
    node_10 = module_0.Node(var_14)
    node_11 = module_0.Node(bst_13)
    bst_14 = module_0.Bst(var_4)


def test_case_965():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_0.__repr__()
    var_3 = var_0.__repr__()


def test_case_966():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_2 = module_0.Bst(set_0)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(var_5)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_7 = node_1.__repr__()
    bst_5 = module_0.Bst(var_7)
    list_0 = []
    node_2 = module_0.Node(list_0)
    var_8 = var_7.__repr__()


def test_case_967():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    var_3 = var_0.__repr__()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    dict_0 = {node_1: none_type_1, node_1: none_type_1}
    bst_2 = module_0.Bst(dict_0)
    str_0 = " 4'"
    node_2 = module_0.Node(str_0)
    node_3 = module_0.Node(var_3)


def test_case_968():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_6 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    node_3 = module_0.Node(bst_5)
    node_4 = module_0.Node(bst_6)


def test_case_969():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_1 = module_0.Node(bytes_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(node_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(var_7)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_0)


def test_case_970():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    var_2 = var_0.__repr__()
    list_0 = []
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_3)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_4 = node_2.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    var_5 = var_2.__repr__()


def test_case_971():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    var_5 = var_4.__repr__()
    var_6 = var_3.__repr__()
    bst_4 = module_0.Bst(none_type_0)
    var_7 = bst_4.insert(var_6)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_972():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(node_0)


def test_case_973():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_3 = module_0.Node(var_6)
    var_8 = var_6.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_4.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(var_9)
    var_11 = node_4.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_12 = bst_10.insert(bool_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(var_13)
    var_14 = var_11.__repr__()


def test_case_974():
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_0 = module_0.Bst()
    tuple_0 = (bst_0,)
    tuple_1 = (dict_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_2 = module_0.Node(var_0)
    var_1 = node_2.__repr__()


def test_case_975():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    var_0 = node_0.__repr__()


def test_case_976():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_3 = module_0.Bst(str_1)
    node_1 = module_0.Node(bst_3)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_2 = module_0.Node(bytes_0)
    var_2 = node_2.__repr__()
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(node_1)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    float_0 = -131.8
    bst_5 = module_0.Bst(float_0)
    list_0 = []
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_5)
    node_7 = module_0.Node(bst_6)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_8 = module_0.Node(set_0)
    var_6 = node_8.__repr__()
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    node_10 = module_0.Node(node_8)
    str_3 = "(-+2Yj@U8NM6[+0S0o"
    node_11 = module_0.Node(str_3)
    bst_8 = module_0.Bst()
    node_12 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_12.__repr__()
    node_13 = module_0.Node(bst_9)
    var_9 = node_11.__repr__()
    node_14 = module_0.Node(bst_9)


def test_case_977():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    var_4 = var_2.__repr__()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_2 = module_0.Node(var_5)
    var_7 = node_1.__repr__()


def test_case_978():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    var_1 = node_0.__repr__()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_1 = module_0.Node(bytes_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_8 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_7.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_10 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_11 = node_5.__repr__()
    bst_6 = module_0.Bst()
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    bool_1 = False
    var_12 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    bool_2 = False
    var_13 = bst_7.insert(bool_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_7.__repr__()
    str_1 = ""
    bst_8 = module_0.Bst(str_1)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_15 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_8 = module_0.Node(var_16)
    node_9 = module_0.Node(node_8)
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_11 = module_0.Bst()
    tuple_0 = (bst_11,)
    tuple_1 = (dict_0, tuple_0)
    node_10 = module_0.Node(tuple_1)
    bst_12 = module_0.Bst()


def test_case_979():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    int_0 = 2253
    node_2 = module_0.Node(int_0)
    node_3 = module_0.Node(var_1)


def test_case_980():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_2 = module_0.Bst(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(node_2)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_3}
    node_5 = module_0.Node(set_1)
    var_4 = node_5.__repr__()
    bst_4 = module_0.Bst(var_4)
    var_5 = node_5.__repr__()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_0 = True
    set_2 = {bool_0, bool_0}
    bst_6 = module_0.Bst(set_2)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(var_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(var_10)
    var_12 = node_6.__repr__()
    bst_12 = module_0.Bst()
    node_8 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_8.__repr__()
    bst_14 = module_0.Bst()
    node_9 = module_0.Node(var_13)
    bst_15 = module_0.Bst()
    var_15 = node_6.__repr__()


def test_case_981():
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_0 = module_0.Node(bytes_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst(bst_0)
    var_3 = node_0.__repr__()


def test_case_982():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    var_5 = bst_2.insert(bst_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    int_0 = -1464
    var_9 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_6)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_10)
    object_0 = module_1.object()
    node_8 = module_0.Node(object_0)
    var_11 = node_8.__repr__()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_9 = module_0.Node(str_1)
    var_12 = node_9.__repr__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()
    object_1 = module_1.object()
    node_10 = module_0.Node(object_1)
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    var_15 = node_11.__repr__()
    bst_9 = module_0.Bst()
    node_12 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_16 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_12.__repr__()
    var_18 = var_16.__repr__()
    bst_11 = module_0.Bst()
    node_13 = module_0.Node(var_1)


def test_case_983():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_2 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    str_1 = "7"
    node_3 = module_0.Node(str_1)
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_2 = module_0.Bst()
    tuple_0 = (bst_2,)
    tuple_1 = (dict_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst(var_5)
    int_1 = 2253
    node_6 = module_0.Node(int_1)
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_8 = module_0.Node(var_10)
    var_12 = var_11.__repr__()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_9.__repr__()
    var_15 = var_13.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_0: float_0, float_0: complex_0}
    node_10 = module_0.Node(dict_1)
    bst_12 = module_0.Bst()
    var_16 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_13 = module_0.Bst()
    var_18 = var_16.__repr__()
    bst_14 = module_0.Bst()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    bool_1 = False
    var_19 = bst_14.insert(bool_1)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = var_19.__repr__()
    bst_15 = module_0.Bst()
    node_12 = module_0.Node(var_20)
    node_13 = module_0.Node(bst_15)
    var_21 = node_0.__repr__()


def test_case_984():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == []
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst(bst_3)
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    var_8 = var_6.__repr__()
    bst_9 = module_0.Bst()
    var_9 = bst_7.insert(bst_8)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_0)
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    var_10 = node_7.__repr__()
    var_11 = bst_11.insert(str_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_9.__repr__()
    var_15 = var_13.__repr__()
    bst_15 = module_0.Bst(bst_10)


def test_case_985():
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_0 = module_0.Node(list_0)


def test_case_986():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_1)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    int_0 = -1464
    var_3 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    str_0 = " 4'"
    node_6 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_7 = module_0.Node(set_0)
    var_4 = node_7.__repr__()
    node_8 = module_0.Node(str_0)
    node_9 = module_0.Node(node_0)


def test_case_987():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_6 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    node_3 = module_0.Node(bst_5)
    var_4 = var_2.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    var_7 = var_5.__repr__()
    bst_9 = module_0.Bst()
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_10 = module_0.Bst(str_1)
    node_5 = module_0.Node(bst_10)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_6 = module_0.Node(bytes_0)
    var_8 = node_6.__repr__()
    var_9 = var_8.__repr__()
    node_7 = module_0.Node(node_5)
    bst_11 = module_0.Bst()


def test_case_988():
    bool_0 = True
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = False
    var_1 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_2 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_2 = False
    var_3 = bst_2.insert(bool_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    node_4 = module_0.Node(bool_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_3 = False
    var_5 = bst_4.insert(bool_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    node_6 = module_0.Node(none_type_2)
    bst_5 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_7)
    bst_6 = module_0.Bst()
    node_9 = module_0.Node(bst_6)
    var_8 = bst_6.insert(node_9)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    var_11 = bst_10.insert(node_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_11)
    bool_4 = False
    node_12 = module_0.Node(bool_4)
    var_12 = node_12.__repr__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()
    none_type_4 = None
    node_13 = module_0.Node(none_type_4)
    var_15 = node_13.__repr__()
    var_16 = node_13.__repr__()
    node_14 = module_0.Node(none_type_0)


def test_case_989():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    str_0 = "\tD\rb9y@AZRea"
    node_2 = module_0.Node(str_0)
    var_1 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    var_4 = node_5.__repr__()
    var_5 = var_2.__repr__()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_8.__repr__()
    node_9 = module_0.Node(bst_8)
    bst_9 = module_0.Bst(node_9)
    var_10 = node_9.__repr__()


def test_case_990():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_1 = module_0.Node(bytes_0)
    float_0 = -131.8
    bst_1 = module_0.Bst(float_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(var_1)
    var_3 = node_2.__repr__()
    int_1 = -1138
    node_4 = module_0.Node(int_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    var_4 = node_5.__repr__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(bst_5)
    node_8 = module_0.Node(none_type_0)


def test_case_991():
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_0 = module_0.Node(list_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_2 = module_0.Node(bst_0)
    list_1 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bst_3 = module_0.Bst()
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_4 = module_0.Bst(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    var_2 = node_5.__repr__()
    bst_5 = module_0.Bst(var_2)
    var_3 = node_5.__repr__()
    bst_6 = module_0.Bst(var_3)


def test_case_992():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_1 = module_0.Node(list_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    node_5 = module_0.Node(bst_4)
    node_6 = module_0.Node(node_3)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_7 = module_0.Node(var_7)
    node_8 = module_0.Node(node_7)
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_1 = [bytes_0]
    node_9 = module_0.Node(list_1)
    str_1 = " 4'"
    node_10 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_11 = module_0.Node(set_0)
    var_8 = node_11.__repr__()
    node_12 = module_0.Node(str_1)
    node_13 = module_0.Node(str_1)


def test_case_993():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    node_1 = module_0.Node(var_3)


def test_case_994():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_1 = module_0.Bst(str_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    dict_0 = {node_0: none_type_0, node_0: none_type_0}
    bst_2 = module_0.Bst(dict_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_2 = module_0.Node(set_0)
    var_2 = node_2.__repr__()
    bst_3 = module_0.Bst(var_2)
    int_0 = 869
    node_3 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst(var_3)
    str_3 = " 4'"
    node_5 = module_0.Node(str_3)
    str_4 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_4}
    node_6 = module_0.Node(set_1)
    var_5 = node_6.__repr__()
    node_7 = module_0.Node(str_3)
    var_6 = node_1.__repr__()


def test_case_995():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_5 = node_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_1)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_6 = module_0.Node(set_1)
    node_7 = module_0.Node(bst_7)
    var_10 = var_8.__repr__()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_8.__repr__()
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_2)


def test_case_996():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_1 = module_0.Bst(var_3)
    var_4 = node_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_5 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_3 = module_0.Bst()
    list_0 = []
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_7)
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_2 = False
    var_8 = bst_5.insert(bool_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    node_7 = module_0.Node(bool_2)
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_6 = module_0.Bst(str_1)
    node_8 = module_0.Node(bst_6)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_9 = module_0.Node(bytes_0)
    var_10 = node_9.__repr__()
    var_11 = var_10.__repr__()
    node_10 = module_0.Node(node_8)
    node_11 = module_0.Node(node_2)


def test_case_997():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    node_1 = module_0.Node(var_3)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    node_3 = module_0.Node(node_1)


def test_case_998():
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    var_3 = var_2.__repr__()


def test_case_999():
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_0 = module_0.Node(bytes_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_4 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    str_1 = ""
    bst_6 = module_0.Bst(str_1)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    var_7 = bst_9.insert(node_6)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    var_8 = bst_10.insert(node_7)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_8)
    var_9 = node_8.__repr__()
    var_10 = var_7.__repr__()
    str_2 = "{&:T\r/p-BHx9-lgMP"
    bst_11 = module_0.Bst(str_2)
    node_9 = module_0.Node(bst_11)
    bytes_1 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_10 = module_0.Node(bytes_1)
    var_11 = node_10.__repr__()
    var_12 = var_11.__repr__()
    node_11 = module_0.Node(node_9)
    node_12 = module_0.Node(node_2)


def test_case_1000():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_1 = node_2.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(node_2)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_5 = module_0.Node(set_1)
    var_2 = node_5.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_0 = False
    var_6 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(str_0)


def test_case_1001():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    var_0 = node_0.__repr__()


def test_case_1002():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    list_0 = []
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    var_3 = node_1.__repr__()


def test_case_1003():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_0.__repr__()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_5)
    list_0 = []
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_6)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bst_8 = module_0.Bst()
    list_1 = []
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(list_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_7)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()


def test_case_1004():
    bool_0 = True
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_1 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_1)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_1 = module_0.Node(bytes_0)
    var_1 = node_1.__repr__()
    var_2 = var_1.__repr__()
    node_2 = module_0.Node(node_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst(bst_2)
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    var_6 = node_5.__repr__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    var_11 = var_9.__repr__()
    bst_8 = module_0.Bst()
    var_12 = bst_6.insert(bst_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_7.__repr__()
    var_15 = node_7.__repr__()
    node_8 = module_0.Node(var_14)
    var_16 = var_14.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_9 = module_0.Node(dict_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_10 = module_0.Node(set_0)
    var_17 = node_10.__repr__()
    bst_11 = module_0.Bst(var_17)
    var_18 = node_10.__repr__()
    bst_12 = module_0.Bst()
    none_type_0 = None
    node_11 = module_0.Node(none_type_0)
    var_19 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_19)
    node_13 = module_0.Node(node_11)


def test_case_1005():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_0 = "7"
    node_3 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    node_5 = module_0.Node(bool_0)
    bst_6 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    list_0 = []
    node_7 = module_0.Node(list_0)
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_8.__repr__()
    var_10 = node_8.__repr__()
    node_9 = module_0.Node(var_9)
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_10.__repr__()
    bst_11 = module_0.Bst()
    int_0 = 869
    node_11 = module_0.Node(int_0)
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    node_12 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_12.__repr__()
    bst_15 = module_0.Bst()
    var_15 = var_13.__repr__()
    bst_16 = module_0.Bst()
    node_13 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_16 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_13.__repr__()
    var_18 = node_13.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_14 = module_0.Node(dict_0)
    bool_1 = True
    set_1 = {bool_1, bool_1}
    bst_18 = module_0.Bst(set_1)
    var_19 = node_14.__repr__()
    var_20 = var_16.__repr__()


def test_case_1006():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_0 = [bytes_0]
    node_1 = module_0.Node(list_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    bool_0 = True
    set_1 = {bool_0, bool_0}
    bst_3 = module_0.Bst(set_1)
    bst_4 = module_0.Bst()
    var_1 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(var_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()


def test_case_1007():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_1 = module_0.Node(bytes_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(node_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_2 = node_3.__repr__()
    var_3 = node_3.__repr__()
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4.data).__module__}.{type(var_4.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_4.left is None
    assert var_4.right is None
    assert var_4.parent is None
    var_5 = node_4.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst(var_6)
    bst_9 = module_0.Bst()


def test_case_1008():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bst_1)
    str_0 = "vOK:\\f"
    node_3 = module_0.Node(str_0)
    list_0 = []
    node_4 = module_0.Node(list_0)
    var_2 = var_0.__repr__()


def test_case_1009():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    list_0 = []
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst(var_3)
    var_5 = bst_7.insert(list_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1010():
    int_0 = 869
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()


def test_case_1011():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    str_0 = ""
    bst_6 = module_0.Bst(str_0)
    var_6 = var_4.__repr__()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_7 = node_1.__repr__()
    var_8 = node_1.__repr__()
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_9)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_4 = module_0.Node(dict_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    var_12 = node_6.__repr__()
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_7 = module_0.Node(var_14)
    var_16 = var_15.__repr__()
    bst_13 = module_0.Bst()
    node_8 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_17 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = node_8.__repr__()
    bst_15 = module_0.Bst()
    node_9 = module_0.Node(var_17)
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    int_0 = 3317
    node_10 = module_0.Node(int_0)
    bst_18 = module_0.Bst()


def test_case_1012():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    node_1 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst(bst_3)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_7 = node_4.__repr__()
    bst_7 = module_0.Bst(var_7)
    var_8 = node_4.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_5 = module_0.Node(set_1)
    var_9 = node_5.__repr__()
    bst_8 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_6 = module_0.Node(set_2)
    var_10 = node_6.__repr__()
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(set_2)
    list_0 = []
    node_8 = module_0.Node(list_0)
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    var_13 = node_10.__repr__()
    bst_13 = module_0.Bst()
    node_11 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_11.__repr__()
    var_16 = node_11.__repr__()
    node_12 = module_0.Node(var_15)
    bst_15 = module_0.Bst()


def test_case_1013():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    node_2 = module_0.Node(var_2)
    node_3 = module_0.Node(node_2)
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_5.__repr__()
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    var_7 = bst_2.insert(node_4)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_8 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(var_8)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_7 = module_0.Node(set_0)
    var_10 = node_7.__repr__()
    bst_6 = module_0.Bst(var_10)
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_8.__repr__()
    var_13 = node_8.__repr__()
    node_9 = module_0.Node(var_12)
    var_14 = var_12.__repr__()
    str_2 = " 4'"
    node_10 = module_0.Node(str_2)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_3}
    node_11 = module_0.Node(set_1)
    var_15 = node_11.__repr__()
    node_12 = module_0.Node(str_2)
    var_16 = bst_3.insert(node_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1014():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    tuple_0 = (node_1, var_0, var_1, var_1)
    node_2 = module_0.Node(tuple_0)
    float_1 = 1992.7524
    complex_1 = 3567.8657 + 867j
    dict_1 = {float_1: float_1, float_1: complex_1}
    node_3 = module_0.Node(dict_1)
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_2 = module_0.Bst(set_0)
    var_2 = node_3.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_5 = node_4.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    int_0 = -2466
    dict_2 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_6 = module_0.Bst()
    tuple_1 = (bst_6,)
    tuple_2 = (dict_2, tuple_1)
    node_6 = module_0.Node(tuple_2)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_7 = module_0.Node(var_6)
    var_8 = var_6.__repr__()
    str_1 = " 4'"
    node_8 = module_0.Node(str_1)
    bst_8 = module_0.Bst()


def test_case_1015():
    int_0 = 3820
    tuple_0 = (int_0,)
    node_0 = module_0.Node(tuple_0)
    var_0 = node_0.__repr__()


def test_case_1016():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = node_2.__repr__()
    var_2 = node_2.__repr__()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    bst_2 = module_0.Bst()
    var_6 = node_3.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_1)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    node_7 = module_0.Node(bst_5)
    var_9 = node_5.__repr__()
    bst_6 = module_0.Bst()


def test_case_1017():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    dict_0 = {node_0: none_type_0, node_0: none_type_0}
    bst_0 = module_0.Bst(dict_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_2 = var_1.__repr__()
    bst_4 = module_0.Bst(bst_1)
    str_0 = " 4'"
    node_3 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    var_3 = node_4.__repr__()
    node_5 = module_0.Node(str_0)
    bst_5 = module_0.Bst()


def test_case_1018():
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_3 = module_0.Bst(str_1)
    node_3 = module_0.Node(bst_3)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_4 = module_0.Node(bytes_0)
    var_3 = node_4.__repr__()
    var_4 = var_3.__repr__()
    node_5 = module_0.Node(node_3)
    str_2 = " 4'"
    node_6 = module_0.Node(str_2)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_3}
    node_7 = module_0.Node(set_0)
    var_5 = node_7.__repr__()
    node_8 = module_0.Node(str_2)
    object_0 = module_1.object()
    node_9 = module_0.Node(object_0)
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_0 = (dict_0, bool_1)
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(tuple_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()


def test_case_1019():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    var_1 = node_0.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    node_3 = module_0.Node(bst_2)
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(var_5)
    var_7 = node_4.__repr__()
    bst_7 = module_0.Bst()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_2)
    bool_0 = False
    node_7 = module_0.Node(bool_0)
    var_8 = node_7.__repr__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst(node_4)


def test_case_1020():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    list_1 = []
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(list_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_3)


def test_case_1021():
    str_0 = ""
    bst_0 = module_0.Bst(str_0)
    str_1 = "vOK:\\f"
    node_0 = module_0.Node(str_1)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_2 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_1 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_2 = bst_3.insert(node_5)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_2)
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_7.__repr__()
    node_8 = module_0.Node(bst_5)
    var_5 = node_6.__repr__()
    var_6 = node_6.__repr__()


def test_case_1022():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_4 = node_1.__repr__()
    node_2 = module_0.Node(var_4)
    bst_3 = module_0.Bst()


def test_case_1023():
    int_0 = 869
    node_0 = module_0.Node(int_0)
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    node_4 = module_0.Node(int_0)


def test_case_1024():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    str_1 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    var_6 = var_5.__repr__()
    var_7 = var_4.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    str_2 = "{&:T\r/p-BHx9-lgMP"
    bst_6 = module_0.Bst(str_2)
    node_5 = module_0.Node(bst_6)
    node_6 = module_0.Node(bool_0)


def test_case_1025():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    object_0 = module_1.object()
    node_3 = module_0.Node(object_0)
    str_0 = " 4'"
    node_4 = module_0.Node(str_0)
    node_5 = module_0.Node(var_2)


def test_case_1026():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(var_3)
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_3 = module_0.Bst(str_0)
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    var_6 = var_4.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_7 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(var_8)
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    var_11 = var_10.__repr__()
    bst_11 = module_0.Bst(bst_8)
    bst_12 = module_0.Bst()
    node_10 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_12 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_10.__repr__()
    bst_14 = module_0.Bst()
    node_11 = module_0.Node(var_12)
    str_1 = "\tD\rb9y@AZRea"
    node_12 = module_0.Node(str_1)
    var_14 = node_12.__repr__()
    bst_15 = module_0.Bst()
    var_15 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_13 = module_0.Node(var_15)
    var_17 = var_15.__repr__()
    var_18 = bst_7.insert(bst_14)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1027():
    bst_0 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_1 = module_0.Node(list_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    str_1 = ""
    bst_4 = module_0.Bst(str_1)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bst_9 = module_0.Bst(bst_7)
    bst_10 = module_0.Bst()
    var_6 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    node_7 = module_0.Node(var_5)


def test_case_1028():
    int_0 = -1138
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    var_2 = node_3.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_5)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_4)
    var_5 = node_6.__repr__()
    node_7 = module_0.Node(node_0)


def test_case_1029():
    object_0 = module_1.object()
    node_0 = module_0.Node(object_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()


def test_case_1030():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()


def test_case_1031():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    list_0 = []
    bst_4 = module_0.Bst()
    var_0 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = node_2.__repr__()
    var_2 = var_1.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_3 = module_0.Node(dict_0)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_7 = module_0.Bst()
    var_5 = var_3.__repr__()
    var_6 = var_5.__repr__()


def test_case_1032():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_2 = node_3.__repr__()
    bst_2 = module_0.Bst(var_2)
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(tuple_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    float_1 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_1: float_1, float_1: complex_0}
    node_4 = module_0.Node(dict_1)
    bool_1 = True
    set_1 = {bool_1, bool_1}
    bst_5 = module_0.Bst(set_1)
    var_7 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    var_8 = bst_6.insert(node_5)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    var_11 = var_9.__repr__()
    node_6 = module_0.Node(var_11)
    float_2 = 1992.7524
    complex_1 = 3567.8657 + 867j
    dict_2 = {float_2: float_2, float_2: complex_1}
    node_7 = module_0.Node(dict_2)
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_10 = module_0.Bst()
    var_14 = var_12.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_8 = module_0.Node(bst_11)
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(bst_13)
    var_17 = bst_13.insert(node_9)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_16)
    bst_14 = module_0.Bst()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    var_18 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_18)
    object_0 = module_1.object()
    node_13 = module_0.Node(object_0)
    var_19 = node_13.__repr__()
    node_14 = module_0.Node(var_15)


def test_case_1033():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    var_1 = node_0.__repr__()
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(tuple_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bst_7 = module_0.Bst(bst_5)
    bst_8 = module_0.Bst()


def test_case_1034():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = " 4'"
    node_1 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_4 = node_2.__repr__()
    node_3 = module_0.Node(str_0)
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst(var_6)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_7 = module_0.Node(var_10)
    var_12 = var_11.__repr__()
    var_13 = node_1.__repr__()


def test_case_1035():
    int_0 = 869
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    str_0 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_0)
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_0 = (dict_0, bool_1)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(tuple_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    var_6 = bst_6.insert(node_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_6)
    list_0 = []
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(list_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_7)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_9.__repr__()
    bst_11 = module_0.Bst()
    int_1 = 869
    node_10 = module_0.Node(int_1)
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    bool_2 = False
    var_10 = bst_13.insert(bool_2)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    str_1 = ""
    bst_14 = module_0.Bst(str_1)
    var_12 = var_10.__repr__()
    none_type_2 = None
    bst_15 = module_0.Bst(none_type_2)
    list_1 = []
    bst_16 = module_0.Bst()
    var_13 = bst_16.insert(list_1)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_13)
    bst_17 = module_0.Bst()
    var_14 = bst_17.insert(var_8)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1036():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    node_1 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    list_0 = []
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_7)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_3 = module_0.Node(bst_5)
    none_type_0 = None
    bst_7 = module_0.Bst(none_type_0)
    list_1 = []
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(list_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_10)
    var_11 = node_4.__repr__()
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_0 = False
    var_12 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_5.__repr__()
    node_6 = module_0.Node(bool_0)
    var_14 = node_6.__repr__()
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_1 = False
    var_15 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(var_16)
    bst_12 = module_0.Bst()
    var_17 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    var_19 = var_18.__repr__()
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(bst_13)
    int_0 = -1464
    var_20 = bst_13.insert(int_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_17)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_11 = module_0.Node(set_0)
    var_21 = node_11.__repr__()
    node_12 = module_0.Node(var_21)
    bst_14 = module_0.Bst()


def test_case_1037():
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)


def test_case_1038():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    var_3 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    var_6 = node_3.__repr__()
    node_4 = module_0.Node(var_5)
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    var_7 = node_5.__repr__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_0 = [bytes_0]
    node_6 = module_0.Node(list_0)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    dict_0 = {node_7: none_type_0, node_7: none_type_0}
    bst_4 = module_0.Bst(dict_0)
    var_10 = node_4.__repr__()
    var_11 = var_10.__repr__()


def test_case_1039():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    node_3 = module_0.Node(bool_0)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bst_8 = module_0.Bst(bst_6)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_6 = module_0.Node(dict_0)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    var_9 = var_7.__repr__()
    list_0 = []
    node_7 = module_0.Node(list_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_8 = module_0.Node(set_0)
    var_10 = node_8.__repr__()
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(set_0)
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    var_15 = var_14.__repr__()
    bst_14 = module_0.Bst()
    node_10 = module_0.Node(bst_14)
    int_1 = -1464
    var_16 = bst_14.insert(int_1)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_13)
    none_type_2 = None
    node_12 = module_0.Node(none_type_2)
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    var_19 = var_17.__repr__()
    bst_16 = module_0.Bst()
    var_20 = node_12.__repr__()
    bool_1 = True
    float_1 = -128.5329
    dict_1 = {bool_1: float_1}
    tuple_0 = (dict_1, bool_1)
    bst_17 = module_0.Bst()
    var_21 = bst_17.insert(tuple_0)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_18 = module_0.Bst()
    int_2 = 2253
    node_13 = module_0.Node(int_2)
    bst_19 = module_0.Bst(bst_3)


def test_case_1040():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    node_1 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    var_6 = var_4.__repr__()
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_0 = [bytes_0]
    node_3 = module_0.Node(list_0)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_7 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    node_5 = module_0.Node(bool_1)
    var_9 = node_5.__repr__()
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_2 = False
    var_10 = bst_6.insert(bool_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(var_11)
    bst_8 = module_0.Bst()


def test_case_1041():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst(bst_0)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_4 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    var_5 = node_4.__repr__()
    var_6 = var_3.__repr__()
    bst_6 = module_0.Bst()


def test_case_1042():
    set_0 = set()
    node_0 = module_0.Node(set_0)


def test_case_1043():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_2 = module_0.Node(set_1)
    var_1 = node_2.__repr__()
    bst_0 = module_0.Bst(var_1)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_3 = module_0.Node(dict_0)
    bool_0 = True
    set_2 = {bool_0, bool_0}
    bst_1 = module_0.Bst(set_2)
    var_2 = node_3.__repr__()
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = node_4.__repr__()
    var_5 = node_4.__repr__()
    node_5 = module_0.Node(var_4)
    node_6 = module_0.Node(var_5)


def test_case_1044():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_6 = node_0.__repr__()
    var_7 = node_0.__repr__()
    var_8 = var_4.__repr__()


def test_case_1045():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(node_2)
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_0.insert(bool_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is False
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_2 = False
    var_4 = bst_1.insert(bool_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(bst_1)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_7 = module_0.Node(dict_0)
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_3 = module_0.Bst()
    var_7 = var_5.__repr__()
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    dict_1 = {node_8: none_type_3, node_8: none_type_3}
    bst_4 = module_0.Bst(dict_1)
    bst_5 = module_0.Bst()
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    bool_3 = False
    var_8 = bst_5.insert(bool_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    str_0 = ""
    bst_6 = module_0.Bst(str_0)
    var_10 = var_8.__repr__()
    bst_7 = module_0.Bst()
    node_10 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_10.__repr__()
    var_13 = node_10.__repr__()
    node_11 = module_0.Node(var_12)
    var_14 = var_12.__repr__()
    bst_9 = module_0.Bst()


def test_case_1046():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(tuple_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_3 = module_0.Bst(str_0)
    none_type_1 = None
    bst_4 = module_0.Bst(none_type_1)
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_5 = module_0.Bst(str_1)
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_1 = node_1.__repr__()
    bst_7 = module_0.Bst(var_1)
    str_2 = ""
    bst_8 = module_0.Bst(str_2)
    bst_9 = module_0.Bst()
    var_2 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_9)
    str_3 = " 4'"
    node_3 = module_0.Node(str_3)
    str_4 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_4}
    node_4 = module_0.Node(set_0)
    var_3 = node_4.__repr__()
    node_5 = module_0.Node(str_3)
    int_0 = 869
    node_6 = module_0.Node(int_0)
    bst_10 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    bool_1 = False
    var_4 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_7.__repr__()
    bool_2 = False
    node_8 = module_0.Node(bool_2)
    node_9 = module_0.Node(node_8)
    var_6 = bst_4.insert(var_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1047():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(node_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    object_0 = module_1.object()
    node_4 = module_0.Node(object_0)
    var_3 = node_4.__repr__()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_4 = node_5.__repr__()
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(tuple_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_6 = node_6.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(set_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_8 = module_0.Node(set_1)
    var_9 = node_8.__repr__()
    node_9 = module_0.Node(var_9)
    str_2 = " 4'"
    node_10 = module_0.Node(str_2)
    var_10 = var_5.__repr__()


def test_case_1048():
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_0 = module_0.Node(bytes_0)
    bst_0 = module_0.Bst()


def test_case_1049():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    int_0 = 869
    node_1 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    var_2 = bst_2.insert(var_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1050():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bool_1 = False
    node_0 = module_0.Node(bool_1)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = node_0.__repr__()


def test_case_1051():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst(var_1)


def test_case_1052():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_3 = node_0.__repr__()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    dict_0 = {node_1: none_type_1, node_1: none_type_1}
    bst_2 = module_0.Bst(dict_0)
    int_0 = 869
    node_2 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst(node_6)
    set_0 = set()
    node_7 = module_0.Node(set_0)
    var_8 = node_1.__repr__()


def test_case_1053():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    tuple_0 = (node_3, var_3, var_4, var_4)
    node_4 = module_0.Node(tuple_0)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_5 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    var_8 = var_6.__repr__()
    node_6 = module_0.Node(var_8)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_0)
    bst_8 = module_0.Bst()
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_1 = (dict_0, bool_1)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(tuple_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_2 = False
    var_10 = bst_11.insert(bool_2)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_12 = module_0.Bst()
    var_12 = var_11.__repr__()
    var_13 = var_10.__repr__()
    bst_13 = module_0.Bst()
    node_10 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_10.__repr__()
    bst_15 = module_0.Bst()
    none_type_3 = None
    node_11 = module_0.Node(none_type_3)
    bst_16 = module_0.Bst(bst_14)
    node_12 = module_0.Node(var_0)


def test_case_1054():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(node_2)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_5)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_4 = bst_4.insert(node_7)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_8 = module_0.Node(var_5)
    var_7 = var_5.__repr__()
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_0 = False
    var_8 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    list_0 = []
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(list_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_10)
    bst_8 = module_0.Bst()
    none_type_3 = None
    node_11 = module_0.Node(none_type_3)
    bool_1 = False
    var_11 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_9 = module_0.Bst()
    node_12 = module_0.Node(var_12)
    node_13 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()


def test_case_1055():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_2 = module_0.Node(bytes_0)
    bool_0 = True
    float_1 = -128.5329
    dict_1 = {bool_0: float_1}
    tuple_0 = (dict_1, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(node_4)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    var_1 = node_6.__repr__()
    node_7 = module_0.Node(var_1)
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    var_2 = node_8.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    var_3 = var_2.__repr__()


def test_case_1056():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = node_2.__repr__()
    var_2 = node_2.__repr__()


def test_case_1057():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    var_2 = var_0.__repr__()
    str_1 = " 4'"
    node_1 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    node_3 = module_0.Node(str_1)
    node_4 = module_0.Node(none_type_0)


def test_case_1058():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    bst_5 = module_0.Bst()


def test_case_1059():
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__repr__()


def test_case_1060():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is False
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_3 = module_0.Bst(str_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst(var_4)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    node_6 = module_0.Node(var_3)


def test_case_1061():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    int_0 = -1464
    var_4 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_4 = module_0.Node(bst_2)
    int_1 = -2016
    list_0 = [int_1, int_1]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_4)


def test_case_1062():
    str_0 = " \x0c^"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_4 = node_3.__repr__()
    var_5 = node_3.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_4 = module_0.Node(str_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_5 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_1)


def test_case_1063():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_0.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_1 = module_0.Node(dict_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    var_4 = var_2.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_5 = node_2.__repr__()
    bst_4 = module_0.Bst(var_5)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(node_5)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    var_6 = node_7.__repr__()
    var_7 = node_7.__repr__()
    var_8 = var_3.__repr__()


def test_case_1064():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    var_3 = node_3.__repr__()
    list_0 = []
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    var_8 = bst_5.insert(node_6)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    var_11 = bst_9.insert(node_7)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    var_12 = bst_10.insert(node_8)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_12)
    var_13 = node_9.__repr__()
    var_14 = var_11.__repr__()
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_10.__repr__()
    var_17 = node_10.__repr__()
    bst_13 = module_0.Bst()
    var_18 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    bst_14 = module_0.Bst()
    float_0 = -131.8
    bst_15 = module_0.Bst(float_0)
    var_20 = var_19.__repr__()


def test_case_1065():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_2 = node_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_3 = module_0.Bst(str_1)
    node_3 = module_0.Node(bst_3)
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_6 = module_0.Node(set_1)
    var_7 = node_6.__repr__()
    node_7 = module_0.Node(var_7)
    int_1 = -1138
    node_8 = module_0.Node(int_1)
    node_9 = module_0.Node(var_5)


def test_case_1066():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)
    list_0 = []
    node_4 = module_0.Node(list_0)
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_4.__repr__()
    str_1 = ""
    bst_4 = module_0.Bst(str_1)
    var_7 = node_0.__repr__()


def test_case_1067():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    bst_2 = module_0.Bst()
    dict_0 = {bst_2: var_0, node_0: bst_2, none_type_0: none_type_0, bst_1: bst_1}
    bst_3 = module_0.Bst(dict_0)


def test_case_1068():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)
    bool_1 = True
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_4 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    var_9 = bst_6.insert(node_5)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_8 = module_0.Bst()
    var_12 = var_10.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_6.__repr__()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    var_15 = var_14.__repr__()
    bst_12 = module_0.Bst(bst_9)
    node_8 = module_0.Node(node_3)


def test_case_1069():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = node_1.__repr__()
    var_2 = node_1.__repr__()
    int_1 = 869
    node_2 = module_0.Node(int_1)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_3 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    var_5 = bst_2.insert(node_4)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    var_6 = bst_3.insert(node_5)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_6)
    var_7 = node_6.__repr__()
    var_8 = var_5.__repr__()
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_9 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_7.__repr__()
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(bst_5)
    var_11 = var_10.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_9 = module_0.Node(dict_0)
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_7 = module_0.Bst(set_0)
    var_12 = node_9.__repr__()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_10 = module_0.Node(bytes_0)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_11 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_11.__repr__()
    var_15 = node_11.__repr__()
    node_12 = module_0.Node(var_14)
    bst_11 = module_0.Bst()
    var_16 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_12 = module_0.Bst()


def test_case_1070():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst(var_4)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_9 = module_0.Bst(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    var_7 = node_1.__repr__()
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_8)
    object_0 = module_1.object()
    node_4 = module_0.Node(object_0)
    var_9 = node_4.__repr__()
    node_5 = module_0.Node(node_2)


def test_case_1071():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()
    var_3 = var_0.__repr__()


def test_case_1072():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    str_0 = ""
    bst_3 = module_0.Bst(str_0)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(node_3)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_1 = False
    var_2 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    var_4 = var_3.__repr__()
    var_5 = var_2.__repr__()
    var_6 = var_0.__repr__()


def test_case_1073():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    object_0 = module_1.object()
    node_1 = module_0.Node(object_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    var_0 = node_3.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_4 = module_0.Node(set_0)
    node_5 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_6 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_6)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst(var_5)
    node_7 = module_0.Node(set_0)


def test_case_1074():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    var_1 = node_1.__repr__()


def test_case_1075():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(set_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_3 = module_0.Node(set_1)
    var_3 = node_3.__repr__()
    bst_2 = module_0.Bst(var_3)
    var_4 = node_3.__repr__()
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_5 = module_0.Node(set_2)
    var_5 = node_5.__repr__()
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    var_6 = node_6.__repr__()
    list_0 = []
    node_7 = module_0.Node(list_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    bool_2 = False
    var_7 = bst_3.insert(bool_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_4 = module_0.Bst()
    var_9 = var_8.__repr__()
    var_10 = var_7.__repr__()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bool_3 = False
    var_11 = bst_5.insert(bool_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_6 = module_0.Bst()
    tuple_0 = (node_9, var_11, var_12, var_12)
    node_10 = module_0.Node(tuple_0)
    var_13 = node_4.__repr__()


def test_case_1076():
    complex_0 = 102.8 - 272.1151j
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(complex_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == (102.8 - 272.1151j)
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()


def test_case_1077():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    tuple_0 = (node_2, var_1, var_2, var_2)
    node_3 = module_0.Node(tuple_0)
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = False
    var_3 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    str_1 = ""
    bst_4 = module_0.Bst(str_1)
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    var_8 = var_6.__repr__()
    bst_7 = module_0.Bst()
    var_9 = bst_5.insert(bst_6)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    var_12 = var_11.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_8 = module_0.Node(bst_11)
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(bst_13)
    var_15 = bst_13.insert(node_9)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_14)
    dict_0 = {node_5: var_8, node_4: bool_1}
    node_11 = module_0.Node(dict_0)


def test_case_1078():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_0.__repr__()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    var_3 = node_0.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    var_4 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    list_0 = []
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_6)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    bst_11 = module_0.Bst()
    var_9 = var_7.__repr__()
    bst_12 = module_0.Bst()
    node_6 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_10 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    var_12 = node_6.__repr__()
    node_7 = module_0.Node(var_11)
    int_0 = 3820
    tuple_1 = (int_0,)
    node_8 = module_0.Node(tuple_1)
    var_13 = node_8.__repr__()
    bst_14 = module_0.Bst()
    node_9 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_14 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_9.__repr__()
    var_16 = node_9.__repr__()
    var_17 = bst_9.insert(bst_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1079():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    node_1 = module_0.Node(var_3)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst(node_4)
    bst_6 = module_0.Bst()
    str_1 = " 4'"
    node_5 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    int_0 = 2253
    node_8 = module_0.Node(int_0)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_9 = module_0.Node(str_2)
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_9 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_10.__repr__()
    node_11 = module_0.Node(bst_12)
    node_12 = module_0.Node(node_9)
    bst_13 = module_0.Bst()
    none_type_0 = None
    node_13 = module_0.Node(none_type_0)
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_14 = module_0.Node(var_11)
    object_0 = module_1.object()
    node_15 = module_0.Node(object_0)
    var_12 = node_15.__repr__()
    var_13 = node_8.__repr__()


def test_case_1080():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_2.__repr__()
    bst_2 = module_0.Bst()


def test_case_1081():
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_0 = module_0.Bst()
    tuple_0 = (bst_0,)
    tuple_1 = (dict_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    var_3 = var_1.__repr__()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_2.__repr__()
    var_8 = var_6.__repr__()
    bst_8 = module_0.Bst()
    var_9 = bst_6.insert(bst_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(bst_4)


def test_case_1082():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    var_3 = var_1.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    node_4 = module_0.Node(bst_3)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_6 = node_5.__repr__()
    var_7 = node_5.__repr__()
    bool_0 = True
    node_6 = module_0.Node(bool_0)


def test_case_1083():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)


def test_case_1084():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(var_4)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_4 = module_0.Node(var_6)
    var_8 = var_7.__repr__()
    str_0 = "7"
    node_5 = module_0.Node(str_0)
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_9 = module_0.Bst(set_0)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(var_10)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_2 = False
    var_12 = bst_12.insert(bool_2)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_6.__repr__()
    node_7 = module_0.Node(bool_2)
    bst_13 = module_0.Bst()
    list_0 = []
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(list_0)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_14)
    bst_15 = module_0.Bst()
    var_15 = node_8.__repr__()
    bst_16 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    var_16 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_16)
    object_0 = module_1.object()
    node_11 = module_0.Node(object_0)
    var_17 = node_11.__repr__()
    bool_3 = True
    set_1 = {bool_3, bool_3}
    bst_17 = module_0.Bst(set_1)
    var_18 = var_16.__repr__()


def test_case_1085():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(node_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_2 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    node_5 = module_0.Node(var_3)


def test_case_1086():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    var_7 = var_5.__repr__()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_3 = module_0.Node(bytes_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_4.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(var_8)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    bst_13 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    var_12 = var_11.__repr__()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    var_13 = node_8.__repr__()
    bst_14 = module_0.Bst(var_13)
    bst_15 = module_0.Bst()
    node_9 = module_0.Node(bst_15)
    bst_16 = module_0.Bst()
    var_14 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_9.__repr__()
    bst_17 = module_0.Bst()
    node_10 = module_0.Node(bst_17)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_11 = module_0.Node(str_1)
    bst_18 = module_0.Bst()
    none_type_1 = None
    node_12 = module_0.Node(none_type_1)
    var_16 = node_12.__repr__()
    var_17 = bst_18.insert(str_1)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_19 = module_0.Bst()
    node_13 = module_0.Node(bst_19)
    bst_20 = module_0.Bst()
    var_18 = bst_20.insert(bst_20)
    assert (
        f"{type(bst_20.root).__module__}.{type(bst_20.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = node_13.__repr__()
    bst_21 = module_0.Bst()
    node_14 = module_0.Node(bst_20)
    bytes_1 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_15 = module_0.Node(bytes_1)
    node_16 = module_0.Node(bst_19)


def test_case_1087():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(node_1)


def test_case_1088():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_1 = module_0.Node(bytes_0)
    var_4 = node_1.__repr__()
    list_0 = []
    node_2 = module_0.Node(list_0)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    list_1 = []
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(list_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    node_5 = module_0.Node(bst_5)
    bytes_1 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_6 = module_0.Node(bytes_1)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_7.__repr__()
    node_8 = module_0.Node(bool_0)
    var_8 = node_8.__repr__()
    var_9 = var_6.__repr__()
    var_10 = node_3.__repr__()


def test_case_1089():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_4 = module_0.Bst(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_3 = module_0.Node(set_0)
    var_3 = node_3.__repr__()
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    var_4 = node_4.__repr__()
    bool_2 = True
    set_1 = {bool_2, bool_2}
    bst_5 = module_0.Bst(set_1)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_2)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_8.__repr__()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(var_7)
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_0)


def test_case_1090():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    int_0 = 2253
    node_1 = module_0.Node(int_0)
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(var_6)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst(node_3)


def test_case_1091():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    int_1 = 2253
    node_4 = module_0.Node(int_1)
    var_6 = node_4.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_8 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(bst_7)
    node_7 = module_0.Node(var_8)


def test_case_1092():
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    var_3 = var_1.__repr__()
    bytes_1 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_0 = [bytes_1]
    node_2 = module_0.Node(list_0)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(tuple_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    dict_1 = {node_4: none_type_0, node_4: none_type_0}
    bst_3 = module_0.Bst(dict_1)
    bst_4 = module_0.Bst()


def test_case_1093():
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_0 = module_0.Bst()
    tuple_0 = (bst_0,)
    tuple_1 = (dict_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_3 = node_1.__repr__()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    var_4 = node_2.__repr__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_7 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_8 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_5 = module_0.Bst()
    var_10 = var_8.__repr__()
    node_4 = module_0.Node(var_10)
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_7 = module_0.Node(set_0)
    var_11 = node_7.__repr__()
    bst_6 = module_0.Bst(var_11)
    var_12 = node_7.__repr__()
    node_8 = module_0.Node(none_type_0)


def test_case_1094():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_4 = module_0.Node(var_3)
    var_4 = var_3.__repr__()


def test_case_1095():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_6 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_7 = node_1.__repr__()
    bst_3 = module_0.Bst(var_7)
    var_8 = node_1.__repr__()
    set_1 = set()
    node_2 = module_0.Node(set_1)
    bst_4 = module_0.Bst()


def test_case_1096():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bst_1)
    str_0 = "vOK:\\f"
    node_3 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst(bst_2)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_1)
    var_7 = node_5.__repr__()


def test_case_1097():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst(bst_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    var_3 = node_3.__repr__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    int_0 = -1464
    var_6 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_5 = module_0.Node(bytes_0)
    var_7 = node_5.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    var_11 = node_6.__repr__()
    str_2 = "w8<H^+~qIrArq]1_$"
    node_7 = module_0.Node(str_2)
    bst_6 = module_0.Bst()
    str_3 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_7 = module_0.Bst(str_3)
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    var_15 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_14.__repr__()
    var_17 = bst_2.insert(var_16)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1098():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    node_3 = module_0.Node(bst_3)
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst(bst_5)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    bst_9 = module_0.Bst()
    none_type_0 = None
    bst_10 = module_0.Bst(none_type_0)
    set_1 = set()
    node_7 = module_0.Node(set_1)
    str_2 = " \x0c^"
    node_8 = module_0.Node(str_2)
    var_9 = node_8.__repr__()
    var_10 = bst_4.insert(bst_7)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1099():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    node_1 = module_0.Node(var_3)
    int_0 = 2253
    node_2 = module_0.Node(int_0)
    var_4 = node_2.__repr__()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_5 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    var_9 = bst_8.insert(node_6)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_10 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_12 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_10.__repr__()
    bst_16 = module_0.Bst()
    node_11 = module_0.Node(bst_15)
    str_1 = " 4'"
    node_12 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_13 = module_0.Node(set_0)
    var_14 = node_13.__repr__()
    node_14 = module_0.Node(str_1)
    node_15 = module_0.Node(bst_0)


def test_case_1100():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    var_2 = bst_5.insert(node_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_5 = var_4.__repr__()


def test_case_1101():
    str_0 = "\tD\rb9y@AZRea"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    bool_0 = True
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is True
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_1 = module_0.Bst(str_1)
    node_1 = module_0.Node(bst_1)
    var_2 = var_0.__repr__()


def test_case_1102():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = node_2.__repr__()
    var_2 = node_2.__repr__()
    bst_0 = module_0.Bst()
    var_3 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    set_1 = set()
    node_3 = module_0.Node(set_1)
    node_4 = module_0.Node(var_1)


def test_case_1103():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_1 = node_1.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    str_1 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_1)
    float_0 = -131.8
    bst_3 = module_0.Bst(float_0)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst(bst_4)
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    var_6 = bst_8.insert(node_6)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    var_7 = bst_9.insert(node_7)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_7)
    var_8 = node_8.__repr__()
    var_9 = var_6.__repr__()
    bst_10 = module_0.Bst()


def test_case_1104():
    bst_0 = module_0.Bst()
    list_0 = [bst_0, bst_0, bst_0]
    bool_0 = True
    tuple_0 = (bst_0, list_0, bool_0, bst_0)
    node_0 = module_0.Node(tuple_0)


def test_case_1105():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_4 = module_0.Bst(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    bst_5 = module_0.Bst(none_type_2)
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_6 = module_0.Bst(str_1)
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(none_type_2)


def test_case_1106():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst(var_1)
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    int_1 = -1464
    var_3 = bst_4.insert(int_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    node_6 = module_0.Node(none_type_0)
    node_7 = module_0.Node(bst_4)


def test_case_1107():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_1 = False
    var_0 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_0)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = var_1.__repr__()
    float_1 = 1992.7524
    complex_1 = 3567.8657 + 867j
    dict_1 = {float_1: float_1, float_1: complex_1}
    node_3 = module_0.Node(dict_1)
    bool_2 = True
    set_1 = {bool_2, bool_2}
    bst_4 = module_0.Bst(set_1)
    var_4 = node_3.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_1}
    node_4 = module_0.Node(set_2)
    var_5 = node_4.__repr__()
    bst_5 = module_0.Bst(var_5)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_3 = {str_2}
    node_5 = module_0.Node(set_3)
    var_6 = node_5.__repr__()
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(set_3)
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    var_11 = var_10.__repr__()
    node_9 = module_0.Node(dict_1)


def test_case_1108():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_1 = False
    var_0 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_0}
    node_3 = module_0.Node(set_1)
    node_4 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(var_4)
    var_6 = node_5.__repr__()
    bst_8 = module_0.Bst(var_5)
    complex_0 = 102.8 - 272.1151j
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(complex_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = node_0.__repr__()


def test_case_1109():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    set_0 = {bst_0, node_0}
    bst_1 = module_0.Bst(set_0)


def test_case_1110():
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    list_0 = []
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_6 = module_0.Node(bst_7)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(var_8)
    node_9 = module_0.Node(bst_10)
    str_1 = " \x0c^"
    node_10 = module_0.Node(str_1)
    var_9 = node_10.__repr__()
    bst_11 = module_0.Bst()
    node_11 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_11.__repr__()
    var_12 = var_10.__repr__()
    bst_13 = module_0.Bst()
    node_12 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_12.__repr__()
    bst_15 = module_0.Bst()
    node_13 = module_0.Node(var_13)
    var_15 = node_12.__repr__()
    bst_16 = module_0.Bst()


def test_case_1111():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_5 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    var_6 = node_5.__repr__()
    bst_3 = module_0.Bst(var_6)
    var_7 = node_5.__repr__()
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    var_8 = bst_4.insert(node_6)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_9 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_7.__repr__()
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    bool_1 = False
    var_13 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    var_14 = bst_11.insert(node_9)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_14)
    tuple_0 = ()
    node_11 = module_0.Node(tuple_0)


def test_case_1112():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    var_3 = node_1.__repr__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_6 = node_2.__repr__()
    var_7 = node_2.__repr__()
    var_8 = bst_2.insert(var_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1113():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_1 = module_0.Bst(set_0)
    bst_2 = module_0.Bst()


def test_case_1114():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(bst_0)


def test_case_1115():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst(var_2)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_0)
    bool_0 = True
    set_1 = {bool_0, bool_0}
    bst_5 = module_0.Bst(set_1)
    var_5 = node_2.__repr__()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(node_4)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_2 = False
    var_6 = bst_6.insert(bool_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_1)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    var_8 = node_8.__repr__()
    var_9 = bst_8.insert(str_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    object_0 = module_1.object()
    node_9 = module_0.Node(object_0)
    var_10 = node_9.__repr__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    bst_9 = module_0.Bst()


def test_case_1116():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_3 = node_2.__repr__()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_4 = node_3.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_4 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    bst_8 = module_0.Bst()
    none_type_2 = None
    bst_9 = module_0.Bst(none_type_2)
    list_0 = []
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(list_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_10)
    var_11 = node_6.__repr__()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    var_12 = bst_11.insert(node_7)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_12)
    bst_12 = module_0.Bst()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    var_13 = bst_12.insert(node_9)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_8)


def test_case_1117():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    var_2 = node_0.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_1)
    int_0 = 2253
    node_4 = module_0.Node(int_0)
    var_3 = node_4.__repr__()
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_5)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_0.__repr__()


def test_case_1118():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    node_3 = module_0.Node(var_1)


def test_case_1119():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    int_0 = 869
    node_1 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_8 = module_0.Bst(var_3)
    str_0 = "vOK:\\f"
    node_2 = module_0.Node(str_0)
    int_1 = 869
    node_3 = module_0.Node(int_1)
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bst_10 = module_0.Bst(bst_9)


def test_case_1120():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    var_3 = var_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_2.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst(var_5)
    int_0 = 869
    node_3 = module_0.Node(int_0)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    var_11 = bst_8.insert(node_4)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_10 = module_0.Bst()
    var_14 = var_12.__repr__()
    node_5 = module_0.Node(var_14)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_15 = node_6.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_7 = module_0.Node(str_0)
    bst_11 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_8 = module_0.Node(set_0)
    var_16 = node_8.__repr__()
    bst_12 = module_0.Bst()
    var_17 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(set_0)
    bst_14 = module_0.Bst()
    var_19 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = var_19.__repr__()
    node_10 = module_0.Node(var_20)
    bst_15 = module_0.Bst()


def test_case_1121():
    bst_0 = module_0.Bst()
    list_0 = [bst_0, bst_0, bst_0]
    bool_0 = True
    tuple_0 = (bst_0, list_0, bool_0, bst_0)
    node_0 = module_0.Node(tuple_0)
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None


def test_case_1122():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_0.__repr__()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_1.insert(bst_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_5 = node_1.__repr__()
    var_6 = node_1.__repr__()
    bst_5 = module_0.Bst()


def test_case_1123():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    var_2 = node_0.__repr__()
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(tuple_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_3 = module_0.Node(set_0)
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(node_3)
    var_5 = node_2.__repr__()


def test_case_1124():
    bool_0 = False
    bst_0 = module_0.Bst(bool_0)


def test_case_1125():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)


def test_case_1126():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    object_0 = module_1.object()
    node_2 = module_0.Node(object_0)
    var_1 = node_2.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    float_0 = -131.8
    bst_5 = module_0.Bst(float_0)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    node_7 = module_0.Node(bst_6)
    var_7 = var_5.__repr__()
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_8 = module_0.Node(var_9)
    node_9 = module_0.Node(node_8)
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(bst_9)
    var_10 = bst_9.insert(node_10)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_10)
    node_12 = module_0.Node(str_0)


def test_case_1127():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_3 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    str_1 = ""
    bst_3 = module_0.Bst(str_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(var_5)
    var_7 = node_4.__repr__()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_2)
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    node_8 = module_0.Node(bst_9)
    node_9 = module_0.Node(node_6)
    int_0 = 869
    node_10 = module_0.Node(int_0)
    bst_10 = module_0.Bst()
    node_11 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_11.__repr__()
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_12 = module_0.Node(none_type_2)
    bst_13 = module_0.Bst(bst_11)
    node_13 = module_0.Node(var_7)


def test_case_1128():
    int_0 = 3820
    tuple_0 = (int_0,)
    node_0 = module_0.Node(tuple_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    var_3 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(var_4)
    node_4 = module_0.Node(bst_2)
    str_0 = ""
    bst_3 = module_0.Bst(str_0)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_2 = False
    var_5 = bst_4.insert(bool_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    str_1 = ""
    bst_5 = module_0.Bst(str_1)
    bst_6 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_6 = module_0.Node(set_0)
    var_7 = node_6.__repr__()
    bst_7 = module_0.Bst(var_7)
    bst_8 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    var_8 = node_7.__repr__()
    var_9 = var_8.__repr__()
    str_3 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_3)
    object_0 = module_1.object()
    node_9 = module_0.Node(object_0)
    node_10 = module_0.Node(bst_4)


def test_case_1129():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    var_4 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    var_6 = var_5.__repr__()
    var_7 = var_4.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_1)
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    var_8 = node_4.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_6 = module_0.Node(dict_0)
    bst_4 = module_0.Bst()
    var_9 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_5 = module_0.Bst()
    var_11 = var_9.__repr__()
    int_1 = 3317
    node_7 = module_0.Node(int_1)
    var_12 = node_2.__repr__()


def test_case_1130():
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)


def test_case_1131():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)


def test_case_1132():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = var_1.__repr__()


def test_case_1133():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()


def test_case_1134():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    int_0 = -1138
    node_1 = module_0.Node(int_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_3 = module_0.Node(var_0)
    str_1 = ""
    bst_2 = module_0.Bst(str_1)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_8 = module_0.Bst(var_3)
    bool_1 = True
    float_1 = -128.5329
    dict_1 = {bool_1: float_1}
    tuple_0 = (dict_1, bool_1)
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(tuple_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    complex_1 = 102.8 - 272.1151j
    bst_11 = module_0.Bst()
    var_7 = bst_11.insert(complex_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_12 = module_0.Bst()


def test_case_1135():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()
    node_3 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_1)
    var_10 = node_4.__repr__()
    var_11 = var_7.__repr__()


def test_case_1136():
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_0 = [bytes_0]
    node_0 = module_0.Node(list_0)
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_1 = module_0.Node(bst_0)
    bytes_1 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_2 = module_0.Node(bytes_1)
    var_0 = node_2.__repr__()
    var_1 = var_0.__repr__()
    node_3 = module_0.Node(node_1)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    node_5 = module_0.Node(bst_1)
    node_6 = module_0.Node(node_3)


def test_case_1137():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    node_3 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst(var_4)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_7 = node_5.__repr__()
    bst_8 = module_0.Bst(var_7)
    bst_9 = module_0.Bst()


def test_case_1138():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    var_5 = node_2.__repr__()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_5 = module_0.Bst()
    tuple_0 = (bst_5,)
    tuple_1 = (dict_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_4 = module_0.Node(var_7)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    str_0 = ""
    bst_12 = module_0.Bst(str_0)
    bst_13 = module_0.Bst()


def test_case_1139():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_1 = module_0.Node(bst_6)
    var_5 = bst_6.insert(node_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    var_8 = var_6.__repr__()
    node_2 = module_0.Node(var_8)
    bst_9 = module_0.Bst()
    node_3 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_3.__repr__()
    bst_11 = module_0.Bst()
    node_4 = module_0.Node(var_9)
    node_5 = module_0.Node(bst_5)
    var_11 = node_5.__repr__()


def test_case_1140():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_0.__repr__()
    var_3 = var_1.__repr__()
    bst_4 = module_0.Bst()
    var_4 = bst_2.insert(bst_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_5 = node_1.__repr__()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_2 = module_0.Node(var_7)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_3.__repr__()
    var_10 = var_8.__repr__()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_4.__repr__()
    bst_10 = module_0.Bst()
    node_5 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_5.__repr__()
    bst_12 = module_0.Bst()
    node_6 = module_0.Node(var_13)
    var_15 = node_5.__repr__()
    bst_13 = module_0.Bst(var_14)
    node_7 = module_0.Node(bool_0)


def test_case_1141():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    int_0 = -1138
    node_2 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    node_4 = module_0.Node(bool_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    list_0 = [bst_3, bst_3, bst_3]
    bool_2 = True
    tuple_0 = (bst_3, list_0, bool_2, bst_3)
    node_5 = module_0.Node(tuple_0)
    var_4 = bst_3.insert(bool_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    node_7 = module_0.Node(bst_5)
    var_7 = var_5.__repr__()


def test_case_1142():
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    var_3 = var_1.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_3 = module_0.Node(set_1)
    var_4 = node_3.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(node_3)
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_1 = False
    var_5 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    node_7 = module_0.Node(bool_1)
    bst_4 = module_0.Bst()
    node_8 = module_0.Node(bst_4)
    var_7 = bst_4.insert(node_8)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    var_10 = node_9.__repr__()
    var_11 = var_10.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_10 = module_0.Node(dict_0)
    bool_2 = True
    set_2 = {bool_2, bool_2}
    bst_9 = module_0.Bst(set_2)
    var_12 = node_10.__repr__()
    node_11 = module_0.Node(str_0)


def test_case_1143():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(var_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_1 = False
    bst_3 = module_0.Bst(bool_1)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_2 = False
    var_3 = bst_4.insert(bool_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    node_1 = module_0.Node(var_4)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_0)
    list_0 = []
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bst_8 = module_0.Bst()
    var_6 = node_3.__repr__()


def test_case_1144():
    int_0 = 3820
    tuple_0 = (int_0,)
    node_0 = module_0.Node(tuple_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst(var_1)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    node_3 = module_0.Node(bool_0)
    var_5 = node_3.__repr__()
    var_6 = var_3.__repr__()
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_5 = module_0.Bst(set_0)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(var_8)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "jW1"
    list_0 = [bst_0, bool_0, str_0]
    bst_8 = module_0.Bst(list_0)


def test_case_1145():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    var_1 = node_1.__repr__()
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(node_0)


def test_case_1146():
    bool_0 = True
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    bst_2 = module_0.Bst()


def test_case_1147():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_2 = node_3.__repr__()
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_4 = module_0.Node(var_5)
    node_5 = module_0.Node(node_4)
    var_6 = node_2.__repr__()


def test_case_1148():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_3 = node_3.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(node_3)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_7.__repr__()
    node_8 = module_0.Node(bst_6)
    var_6 = node_6.__repr__()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_9 = module_0.Node(var_8)
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_0 = False
    var_9 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    node_11 = module_0.Node(var_10)
    node_12 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    node_13 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_13.__repr__()
    var_13 = var_11.__repr__()
    bst_12 = module_0.Bst()
    var_14 = bst_10.insert(bst_11)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    node_14 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_15 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_14.__repr__()
    bst_15 = module_0.Bst()
    int_0 = 869
    node_15 = module_0.Node(int_0)
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    none_type_3 = None
    node_16 = module_0.Node(none_type_3)
    bool_1 = False
    var_17 = bst_17.insert(bool_1)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_18 = module_0.Bst()
    node_17 = module_0.Node(var_18)
    bst_19 = module_0.Bst()
    var_19 = bst_19.insert(bst_19)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = var_19.__repr__()
    node_18 = module_0.Node(var_19)
    bst_20 = module_0.Bst()


def test_case_1149():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(var_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_1 = False
    node_0 = module_0.Node(bool_1)
    node_1 = module_0.Node(node_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_2 = False
    var_3 = bst_4.insert(bool_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    tuple_0 = (node_2, var_3, var_4, var_4)
    node_3 = module_0.Node(tuple_0)
    list_0 = []
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bst_8 = module_0.Bst()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_6 = module_0.Node(str_0)
    bst_9 = module_0.Bst()
    list_1 = [bst_9, bst_9, bst_9]
    bool_3 = True
    tuple_1 = (bst_9, list_1, bool_3, bst_9)
    node_7 = module_0.Node(tuple_1)
    list_2 = []
    bst_10 = module_0.Bst()
    var_6 = bst_10.insert(list_2)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_6)
    bool_4 = False
    node_9 = module_0.Node(bool_4)
    var_7 = var_4.__repr__()


def test_case_1150():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_4 = node_0.__repr__()


def test_case_1151():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_1 = module_0.Bst(set_0)
    bst_2 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    var_1 = node_2.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst(node_5)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    var_8 = var_6.__repr__()
    bst_8 = module_0.Bst()
    var_9 = bst_6.insert(bst_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    dict_0 = {node_7: none_type_1, node_7: none_type_1}
    bst_9 = module_0.Bst(dict_0)
    set_1 = set()
    node_8 = module_0.Node(set_1)
    var_10 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1152():
    str_0 = "UFO[|LK]k_j$\x0c=.rF{"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()


def test_case_1153():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    var_3 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = var_3.__repr__()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(node_0)


def test_case_1154():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()


def test_case_1155():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is False
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    tuple_0 = (node_1, var_2, var_3, var_3)
    node_2 = module_0.Node(tuple_0)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    var_6 = var_4.__repr__()
    bst_5 = module_0.Bst()
    list_0 = [bst_5, bst_5, bst_5]
    bool_1 = True
    tuple_1 = (bst_5, list_0, bool_1, bst_5)
    node_4 = module_0.Node(tuple_1)
    str_0 = " 4'"
    node_5 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    var_7 = bst_7.insert(node_6)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    var_10 = node_7.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_8 = module_0.Node(str_1)
    bst_11 = module_0.Bst()
    var_11 = var_10.__repr__()


def test_case_1156():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(var_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_4)
    var_5 = node_3.__repr__()
    none_type_0 = None
    bst_5 = module_0.Bst(none_type_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_0}
    node_4 = module_0.Node(set_1)
    var_6 = node_4.__repr__()
    bst_6 = module_0.Bst(var_6)
    var_7 = node_4.__repr__()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    bst_8 = module_0.Bst()
    var_11 = node_5.__repr__()
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_1 = False
    var_12 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(var_13)
    node_8 = module_0.Node(bst_10)
    node_9 = module_0.Node(var_4)


def test_case_1157():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    var_2 = var_1.__repr__()


def test_case_1158():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_0)


def test_case_1159():
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_0 = module_0.Node(list_0)
    bst_0 = module_0.Bst()


def test_case_1160():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_1.__repr__()
    var_3 = var_0.__repr__()
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_4)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    int_1 = 3317
    node_6 = module_0.Node(int_1)
    bst_8 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    bool_1 = False
    var_7 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_8 = module_0.Node(var_8)
    dict_0 = {}
    node_9 = module_0.Node(dict_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_10 = module_0.Node(set_0)
    var_9 = node_10.__repr__()
    bst_9 = module_0.Bst()
    none_type_4 = None
    node_11 = module_0.Node(none_type_4)
    node_12 = module_0.Node(node_10)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_0: float_0, float_0: complex_0}
    node_13 = module_0.Node(dict_1)
    none_type_5 = None
    bst_10 = module_0.Bst(none_type_5)
    node_14 = module_0.Node(bst_9)


def test_case_1161():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    var_2 = var_0.__repr__()
    object_0 = module_1.object()
    node_1 = module_0.Node(object_0)
    var_3 = node_1.__repr__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_1 = module_0.Bst(var_3)


def test_case_1162():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_4 = module_0.Bst(bst_2)
    var_3 = node_2.__repr__()


def test_case_1163():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    bst_1 = module_0.Bst()


def test_case_1164():
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_0 = module_0.Node(dict_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(node_0)


def test_case_1165():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_2 = module_0.Node(set_1)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(node_2)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_3 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_5 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_10 = module_0.Bst(var_4)
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_7 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    bst_13 = module_0.Bst()
    node_8 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_9 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_15 = module_0.Bst()
    node_9 = module_0.Node(bst_14)
    var_11 = var_10.__repr__()
    bst_16 = module_0.Bst(bst_13)
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    var_12 = node_10.__repr__()
    bst_17 = module_0.Bst()


def test_case_1166():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_0 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    list_0 = []
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_7 = module_0.Bst()
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_1 = [bytes_0]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(var_3)


def test_case_1167():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = node_1.__repr__()
    object_0 = module_1.object()
    node_2 = module_0.Node(object_0)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    list_0 = []
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_6.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(var_4)
    var_6 = node_6.__repr__()
    bst_6 = module_0.Bst()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_8 = module_0.Node(dict_0)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_7 = module_0.Bst(set_0)
    var_7 = node_8.__repr__()
    bst_8 = module_0.Bst(int_0)


def test_case_1168():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    var_3 = var_1.__repr__()
    var_4 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1169():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    node_3 = module_0.Node(bst_1)
    node_4 = module_0.Node(node_1)
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bst_3 = module_0.Bst()
    var_5 = node_7.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_1)
    bst_4 = module_0.Bst()
    node_9 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_9.__repr__()
    node_10 = module_0.Node(bst_5)
    bst_6 = module_0.Bst(node_10)
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_0 = [bytes_0]
    node_11 = module_0.Node(list_0)
    bool_1 = False
    node_12 = module_0.Node(bool_1)
    var_8 = node_12.__repr__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    var_11 = var_3.__repr__()


def test_case_1170():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    var_1 = bst_0.insert(str_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == "(-+2Yj@U8NM6[+0S0o"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = node_2.__repr__()
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(var_1)


def test_case_1171():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    var_2 = var_1.__repr__()


def test_case_1172():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()


def test_case_1173():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_2 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_3)
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_1 = module_0.Bst()
    var_4 = bst_1.insert(tuple_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_5)
    object_0 = module_1.object()
    node_4 = module_0.Node(object_0)
    var_6 = node_4.__repr__()
    object_1 = module_1.object()
    node_5 = module_0.Node(object_1)
    var_7 = node_5.__repr__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_1 = False
    var_10 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_5 = module_0.Bst()
    var_12 = var_11.__repr__()
    var_13 = var_10.__repr__()
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_14 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_8.__repr__()
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    var_16 = var_15.__repr__()
    bst_9 = module_0.Bst(bst_6)
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    var_17 = bst_10.insert(node_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    none_type_3 = None
    node_11 = module_0.Node(none_type_3)
    var_18 = node_11.__repr__()
    var_19 = var_18.__repr__()
    var_20 = var_3.__repr__()


def test_case_1174():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bytes_0 = b"K\xe8m:\xf2&\x11\xdf"
    node_2 = module_0.Node(bytes_0)


def test_case_1175():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(none_type_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    var_4 = node_3.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    var_7 = node_4.__repr__()
    node_5 = module_0.Node(var_6)
    var_8 = var_6.__repr__()
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    var_9 = bst_5.insert(node_6)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    var_10 = bst_6.insert(node_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_10)
    var_11 = node_8.__repr__()
    var_12 = var_9.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_9 = module_0.Node(set_0)
    var_13 = node_9.__repr__()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_10 = module_0.Node(str_2)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_11 = module_0.Node(dict_0)
    bool_1 = True
    set_1 = {bool_1, bool_1}
    bst_7 = module_0.Bst(set_1)
    var_14 = node_11.__repr__()
    str_3 = " 4'"
    node_12 = module_0.Node(str_3)
    str_4 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_4}
    node_13 = module_0.Node(set_2)
    var_15 = node_13.__repr__()
    node_14 = module_0.Node(str_3)
    str_5 = "(-+2Yj@U8NM6[+0S0o"
    node_15 = module_0.Node(str_5)
    bst_8 = module_0.Bst()
    node_16 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_16 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_16.__repr__()
    node_17 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst(set_2)


def test_case_1176():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)
    int_0 = 2253
    node_4 = module_0.Node(int_0)
    var_2 = node_4.__repr__()
    bst_2 = module_0.Bst(var_2)
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    var_3 = node_5.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_0 = [bytes_0]
    node_6 = module_0.Node(list_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_8 = module_0.Node(set_0)
    var_5 = node_8.__repr__()
    node_9 = module_0.Node(var_5)
    node_10 = module_0.Node(var_5)


def test_case_1177():
    int_0 = 2029
    node_0 = module_0.Node(int_0)


def test_case_1178():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bst_1)
    bool_1 = False
    bst_2 = module_0.Bst(bool_1)
    var_2 = node_2.__repr__()


def test_case_1179():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_1 = module_0.Bst(set_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    list_0 = []
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_1)


def test_case_1180():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_1 = module_0.Node(bytes_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(node_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_3 = module_0.Node(dict_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_1)
    bst_1 = module_0.Bst()
    node_5 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_5.__repr__()
    node_6 = module_0.Node(bst_2)
    node_7 = module_0.Node(node_4)
    bst_3 = module_0.Bst()
    list_0 = [bst_3, bst_3, bst_3]
    bool_0 = True
    tuple_0 = (bst_3, list_0, bool_0, bst_3)
    node_8 = module_0.Node(tuple_0)
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = 869
    node_9 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    node_10 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_10.__repr__()
    bst_6 = module_0.Bst()
    set_0 = set()
    node_11 = module_0.Node(set_0)
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_12 = module_0.Node(none_type_0)
    bool_1 = False
    var_7 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    str_2 = ""
    bst_8 = module_0.Bst(str_2)
    var_9 = var_7.__repr__()
    bst_9 = module_0.Bst()
    node_13 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_13.__repr__()
    bst_11 = module_0.Bst()
    var_12 = var_10.__repr__()
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_14 = module_0.Node(var_13)
    var_15 = var_13.__repr__()
    var_16 = node_11.__repr__()


def test_case_1181():
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_1.__repr__()
    var_4 = var_2.__repr__()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_5 = node_2.__repr__()
    var_6 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_7 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = 869
    node_4 = module_0.Node(int_0)
    bst_3 = module_0.Bst()


def test_case_1182():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    str_0 = " 4'"
    node_3 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_5 = module_0.Node(dict_0)
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    var_9 = var_7.__repr__()
    bst_6 = module_0.Bst(dict_0)


def test_case_1183():
    str_0 = "vOK:\\f"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_2 = module_0.Node(var_0)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_1 = module_0.Bst(set_0)
    bst_2 = module_0.Bst()
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_3 = module_0.Node(dict_0)
    var_1 = node_3.__repr__()
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_5 = module_0.Node(set_1)
    var_4 = node_5.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    node_7 = module_0.Node(node_5)
    bst_5 = module_0.Bst()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_8 = module_0.Node(bytes_0)
    bst_6 = module_0.Bst()
    bool_1 = True
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()


def test_case_1184():
    bst_0 = module_0.Bst()
    list_0 = [bst_0, bst_0, bst_0]
    bool_0 = True
    tuple_0 = (bst_0, list_0, bool_0, bst_0)
    node_0 = module_0.Node(tuple_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_1 = module_0.Node(bytes_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_2 = node_2.__repr__()
    bst_1 = module_0.Bst(var_2)
    var_3 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4.data).__module__}.{type(var_4.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_4.left is None
    assert var_4.right is None
    assert var_4.parent is None
    var_5 = node_3.__repr__()
    var_6 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_2.insert(bst_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_8 = node_4.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = "vOK:\\f"
    node_7 = module_0.Node(str_2)
    bst_7 = module_0.Bst()


def test_case_1185():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = var_0.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_3 = node_3.__repr__()
    var_4 = bst_2.insert(str_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_5 = node_4.__repr__()
    bst_3 = module_0.Bst(var_5)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_7 = module_0.Node(bst_8)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_0 = False
    var_11 = bst_10.insert(bool_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(bst_10)
    int_0 = 189
    int_1 = 943
    set_1 = {int_0, int_1}
    node_10 = module_0.Node(set_1)
    var_12 = node_10.__repr__()
    node_11 = module_0.Node(var_12)
    bst_11 = module_0.Bst()
    node_12 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_12.__repr__()
    bst_13 = module_0.Bst()
    node_13 = module_0.Node(bst_12)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_14 = module_0.Node(bytes_0)
    bst_14 = module_0.Bst()


def test_case_1186():
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()


def test_case_1187():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(node_2)
    var_3 = var_2.__repr__()


def test_case_1188():
    bool_0 = True
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_0.__repr__()
    var_3 = node_0.__repr__()
    node_1 = module_0.Node(var_2)
    var_4 = var_2.__repr__()
    var_5 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_6 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(node_2)
    bst_4 = module_0.Bst()
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_5 = module_0.Bst(str_1)
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_2)
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bool_1 = False
    var_9 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(var_10)
    node_11 = module_0.Node(bst_11)
    int_0 = 3820
    tuple_0 = (int_0,)
    node_12 = module_0.Node(tuple_0)
    var_11 = node_12.__repr__()
    list_0 = []
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(list_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(var_12)
    bst_13 = module_0.Bst()
    none_type_2 = None
    node_14 = module_0.Node(none_type_2)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst(int_0)


def test_case_1189():
    bool_0 = True
    node_0 = module_0.Node(bool_0)


def test_case_1190():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    bst_1 = module_0.Bst()


def test_case_1191():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(var_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(node_2)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_5 = module_0.Bst(str_1)
    node_5 = module_0.Node(bst_5)
    var_2 = node_0.__repr__()


def test_case_1192():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_2)


def test_case_1193():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_1)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    int_0 = -1464
    var_2 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_5 = module_0.Node(bst_4)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_6 = module_0.Node(dict_0)
    none_type_0 = None
    bst_6 = module_0.Bst(none_type_0)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_5 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(var_5)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()


def test_case_1194():
    int_0 = -1138
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(none_type_0)
    str_0 = " 4'"
    node_3 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    var_2 = node_4.__repr__()
    node_5 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    node_6 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_6.__repr__()
    var_5 = var_3.__repr__()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    dict_0 = {node_7: none_type_1, node_7: none_type_1}
    bst_3 = module_0.Bst(dict_0)
    bst_4 = module_0.Bst()


def test_case_1195():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bst_1)
    dict_0 = {}
    node_3 = module_0.Node(dict_0)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_2 = module_0.Bst(set_0)
    none_type_1 = None
    bst_3 = module_0.Bst(none_type_1)
    int_0 = 189
    int_1 = 943
    set_1 = {int_0, int_1}
    node_4 = module_0.Node(set_1)
    var_2 = node_4.__repr__()
    node_5 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_6 = module_0.Node(bst_5)
    int_2 = -1138
    node_7 = module_0.Node(int_2)
    bst_7 = module_0.Bst()


def test_case_1196():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = node_2.__repr__()
    bst_1 = module_0.Bst(var_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_2 = node_3.__repr__()
    bst_2 = module_0.Bst(var_2)
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = False
    var_3 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_1)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst(none_type_2)


def test_case_1197():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_2 = node_3.__repr__()
    var_3 = var_2.__repr__()
    str_0 = " 4'"
    node_4 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    var_4 = node_5.__repr__()
    node_6 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst(var_6)
    list_0 = []
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(list_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_9)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(bst_12)
    var_10 = bst_12.insert(node_9)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_14 = module_0.Bst()
    var_13 = var_11.__repr__()
    node_10 = module_0.Node(var_13)
    var_14 = node_10.__repr__()


def test_case_1198():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    str_1 = "vOK:\\f"
    node_3 = module_0.Node(str_1)
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_4.__repr__()
    var_2 = node_4.__repr__()
    node_5 = module_0.Node(var_1)
    var_3 = var_1.__repr__()
    int_0 = 2253
    node_6 = module_0.Node(int_0)
    var_4 = node_6.__repr__()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_7)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    str_2 = " 4'"
    node_8 = module_0.Node(str_2)
    complex_0 = 102.8 - 272.1151j
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(complex_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = node_4.__repr__()


def test_case_1199():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_0.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    var_2 = node_1.__repr__()
    int_1 = 189
    int_2 = 943
    set_0 = {int_1, int_2}
    node_3 = module_0.Node(set_0)
    var_3 = node_3.__repr__()
    node_4 = module_0.Node(var_3)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_5 = module_0.Node(set_1)
    var_4 = node_5.__repr__()
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    var_5 = node_6.__repr__()
    str_2 = "{&:T\r/p-BHx9-lgMP"
    bst_2 = module_0.Bst(str_2)
    node_7 = module_0.Node(bst_2)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_8 = module_0.Node(bytes_0)
    var_6 = node_8.__repr__()
    var_7 = var_6.__repr__()
    node_9 = module_0.Node(node_7)
    bst_3 = module_0.Bst()


def test_case_1200():
    object_0 = module_1.object()
    node_0 = module_0.Node(object_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(var_0)
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    str_0 = ""
    bst_7 = module_0.Bst(str_0)
    bst_8 = module_0.Bst()
    int_0 = 869
    node_4 = module_0.Node(int_0)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_7 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    list_0 = []
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(list_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_9)
    node_7 = module_0.Node(bst_10)
    list_1 = []
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(list_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_10)
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    bool_2 = False
    var_11 = bst_15.insert(bool_2)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_16 = module_0.Bst()
    int_1 = 1235
    dict_0 = {int_1: int_1, int_1: int_1}
    node_11 = module_0.Node(dict_0)
    var_13 = node_11.__repr__()
    var_14 = var_13.__repr__()
    node_12 = module_0.Node(node_11)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_13 = module_0.Node(str_1)
    node_14 = module_0.Node(var_14)


def test_case_1201():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()


def test_case_1202():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_2 = node_2.__repr__()
    var_3 = node_2.__repr__()
    bool_0 = True
    float_1 = -128.5329
    dict_1 = {bool_0: float_1}
    tuple_0 = (dict_1, bool_0)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(tuple_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4.data).__module__}.{type(var_4.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_4.data) == 2
    assert var_4.left is None
    assert var_4.right is None
    assert var_4.parent is None
    var_5 = var_2.__repr__()


def test_case_1203():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    var_1 = bst_0.insert(str_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == "(-+2Yj@U8NM6[+0S0o"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    var_4 = node_2.__repr__()
    node_3 = module_0.Node(var_4)
    int_0 = 2253
    node_4 = module_0.Node(int_0)
    var_5 = node_4.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_0 = False
    var_6 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    str_1 = ""
    bst_5 = module_0.Bst(str_1)
    var_8 = var_6.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_6 = module_0.Node(set_0)
    int_1 = 1235
    dict_0 = {int_1: int_1, int_1: int_1}
    node_7 = module_0.Node(dict_0)
    var_9 = node_7.__repr__()
    var_10 = var_9.__repr__()
    node_8 = module_0.Node(str_0)


def test_case_1204():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    none_type_1 = None
    bst_1 = module_0.Bst(none_type_1)
    bst_2 = module_0.Bst(dict_0)


def test_case_1205():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_1 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    var_3 = var_0.__repr__()
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_3 = module_0.Node(set_0)
    var_4 = node_3.__repr__()
    node_4 = module_0.Node(var_4)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_5 = node_5.__repr__()
    var_6 = node_5.__repr__()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()


def test_case_1206():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_6.__repr__()
    var_6 = node_6.__repr__()
    node_7 = module_0.Node(var_5)
    var_7 = var_5.__repr__()
    var_8 = bst_5.insert(node_6)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    var_9 = node_8.__repr__()
    var_10 = var_9.__repr__()
    bool_0 = False
    node_9 = module_0.Node(bool_0)
    node_10 = module_0.Node(node_9)
    node_11 = module_0.Node(node_10)
    bst_8 = module_0.Bst()


def test_case_1207():
    str_0 = " 4'"
    node_0 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    node_2 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    list_0 = [bst_0, bst_0, bst_0]
    bool_0 = True
    tuple_0 = (bst_0, list_0, bool_0, bst_0)
    node_3 = module_0.Node(tuple_0)
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is True
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_1 = (dict_0, bool_1)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(tuple_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_2 = False
    var_3 = bst_2.insert(bool_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(bst_2)
    list_1 = []
    node_6 = module_0.Node(list_1)
    float_1 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_1: float_1, float_1: complex_0}
    node_7 = module_0.Node(dict_1)
    bool_3 = True
    set_1 = {bool_3, bool_3}
    bst_3 = module_0.Bst(set_1)
    var_4 = node_7.__repr__()
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_2 = [bytes_0]
    node_8 = module_0.Node(list_2)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bool_4 = False
    var_5 = bst_4.insert(bool_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    str_2 = ""
    bst_5 = module_0.Bst(str_2)
    var_7 = var_5.__repr__()
    node_10 = module_0.Node(bst_1)


def test_case_1208():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_5.__repr__()
    node_6 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    str_2 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_5 = module_0.Bst(str_2)
    node_7 = module_0.Node(bst_5)
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_8 = module_0.Node(bytes_0)
    var_4 = node_8.__repr__()
    none_type_0 = None
    bst_6 = module_0.Bst(none_type_0)
    str_3 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_7 = module_0.Bst(str_3)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()


def test_case_1209():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    tuple_0 = (node_0, var_0, var_1, var_1)
    node_1 = module_0.Node(tuple_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    node_3 = module_0.Node(bst_2)
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    var_7 = var_5.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()


def test_case_1210():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    var_1 = node_1.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_4 = node_2.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_5 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_5.data is False
    assert var_5.left is None
    assert var_5.right is None
    assert var_5.parent is None
    var_6 = var_5.__repr__()
    bst_2 = module_0.Bst()
    var_7 = var_6.__repr__()
    var_8 = var_5.__repr__()
    bool_1 = False
    bst_3 = module_0.Bst(bool_1)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_2 = False
    var_9 = bst_4.insert(bool_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_4.__repr__()
    node_5 = module_0.Node(bool_2)
    bst_5 = module_0.Bst()
    int_0 = 2253
    node_6 = module_0.Node(int_0)
    var_11 = node_6.__repr__()
    bst_6 = module_0.Bst()
    var_12 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    var_13 = bst_7.insert(node_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    var_14 = node_8.__repr__()
    var_15 = node_8.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_9 = module_0.Node(set_1)
    var_16 = node_9.__repr__()
    bst_10 = module_0.Bst(var_16)
    var_17 = node_9.__repr__()
    bst_11 = module_0.Bst()
    var_18 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_19 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = var_19.__repr__()
    node_10 = module_0.Node(var_19)
    var_21 = var_20.__repr__()
    bst_13 = module_0.Bst()


def test_case_1211():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    var_3 = bst_0.insert(bool_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_3.data is False
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = node_2.__repr__()
    node_3 = module_0.Node(bool_1)
    var_5 = node_3.__repr__()
    var_6 = var_3.__repr__()
    none_type_1 = None
    bst_1 = module_0.Bst(none_type_1)
    list_0 = []
    bst_2 = module_0.Bst()
    var_7 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_7)
    var_8 = node_4.__repr__()
    list_1 = []
    bst_3 = module_0.Bst()
    var_9 = bst_3.insert(list_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_9)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()


def test_case_1212():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is False
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    var_4 = var_3.__repr__()
    var_5 = var_2.__repr__()
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_2 = module_0.Node(dict_0)
    var_6 = node_2.__repr__()
    var_7 = var_6.__repr__()
    node_3 = module_0.Node(node_2)
    list_0 = []
    bst_2 = module_0.Bst()
    var_8 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_8)
    bst_3 = module_0.Bst()
    var_9 = node_4.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    int_1 = -1464
    var_10 = bst_4.insert(int_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_2 = 2253
    node_6 = module_0.Node(int_2)
    var_11 = node_6.__repr__()
    bst_5 = module_0.Bst()
    var_12 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    var_13 = bst_6.insert(node_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(var_4)


def test_case_1213():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    node_1 = module_0.Node(bst_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    int_0 = 2253
    node_3 = module_0.Node(int_0)
    var_1 = node_3.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_4)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    int_1 = -2016
    list_1 = [int_1, int_1]
    node_5 = module_0.Node(list_1)
    bst_4 = module_0.Bst()


def test_case_1214():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()


def test_case_1215():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_1 = node_1.__repr__()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    var_2 = node_2.__repr__()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = node_4.__repr__()
    var_5 = node_4.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_9 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_8.__repr__()
    list_0 = []
    bst_6 = module_0.Bst()
    var_11 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_11)
    bst_7 = module_0.Bst()
    var_12 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    int_0 = -1464
    var_15 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_12)
    node_9 = module_0.Node(bst_7)


def test_case_1216():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_1 = module_0.Node(dict_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    int_1 = -2016
    list_0 = [int_1, int_1]
    node_2 = module_0.Node(list_0)
    bst_0 = module_0.Bst()
    node_3 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_3.__repr__()
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    var_4 = var_2.__repr__()


def test_case_1217():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_2 = module_0.Node(bytes_0)
    var_3 = node_2.__repr__()
    int_0 = -1138
    node_3 = module_0.Node(int_0)
    str_0 = " \x0c^"
    node_4 = module_0.Node(str_0)
    var_4 = node_4.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_5 = module_0.Node(dict_0)
    none_type_0 = None
    bst_4 = module_0.Bst(none_type_0)
    none_type_1 = None
    bst_5 = module_0.Bst(none_type_1)
    bst_6 = module_0.Bst(dict_0)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_0 = False
    var_5 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst()
    list_0 = []
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(list_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_7)
    bst_10 = module_0.Bst()
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    bst_11 = module_0.Bst()
    int_1 = 3317
    node_9 = module_0.Node(int_1)
    bst_12 = module_0.Bst()
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    bool_1 = False
    var_8 = bst_12.insert(bool_1)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_11 = module_0.Node(var_9)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_12 = module_0.Node(str_1)
    int_2 = 3317
    node_13 = module_0.Node(int_2)
    var_10 = node_12.__repr__()
    bst_13 = module_0.Bst()
    node_14 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_11 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_14.__repr__()
    bst_15 = module_0.Bst()
    int_3 = 869
    node_15 = module_0.Node(int_3)
    bst_16 = module_0.Bst()
    node_16 = module_0.Node(bst_12)


def test_case_1218():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    node_3 = module_0.Node(bst_1)
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    var_5 = node_4.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(var_3)


def test_case_1219():
    str_0 = " \x0c^"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    var_1 = node_2.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_0 = module_0.Bst()
    list_0 = []
    bst_1 = module_0.Bst()
    var_4 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_4.data == []
    assert var_4.left is None
    assert var_4.right is None
    assert var_4.parent is None
    node_3 = module_0.Node(var_4)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_5 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_8)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_2)
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_9.__repr__()
    node_10 = module_0.Node(bst_9)
    var_11 = node_8.__repr__()
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_11 = module_0.Node(bytes_0)
    var_12 = node_11.__repr__()
    var_13 = var_12.__repr__()
    bst_10 = module_0.Bst()
    var_14 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    var_16 = var_14.__repr__()
    var_17 = var_16.__repr__()
    bst_11 = module_0.Bst()
    none_type_3 = None
    node_12 = module_0.Node(none_type_3)
    bool_2 = False
    var_18 = bst_11.insert(bool_2)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = node_12.__repr__()
    node_13 = module_0.Node(bool_2)
    bst_12 = module_0.Bst()
    var_20 = node_6.__repr__()


def test_case_1220():
    bool_0 = True
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_1.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    node_5 = module_0.Node(bst_8)
    var_8 = var_6.__repr__()
    int_0 = 2253
    node_6 = module_0.Node(int_0)
    var_9 = node_6.__repr__()
    int_1 = 869
    node_7 = module_0.Node(int_1)
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_8.__repr__()
    var_12 = node_8.__repr__()
    var_13 = bst_4.insert(bst_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1221():
    bytes_0 = b"<S\x0b\xb4A[\xb7\x02\xac\x90\xea'i"
    node_0 = module_0.Node(bytes_0)


def test_case_1222():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    var_3 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_4 = node_1.__repr__()
    bst_2 = module_0.Bst(var_4)
    var_5 = node_1.__repr__()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(node_3)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_6 = node_5.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_6 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(bst_4)
    bool_2 = False
    node_8 = module_0.Node(bool_2)
    var_8 = node_8.__repr__()
    str_2 = "vOK:\\f"
    node_9 = module_0.Node(str_2)
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_5 = module_0.Bst()
    tuple_0 = (bst_5,)
    tuple_1 = (dict_0, tuple_0)
    node_10 = module_0.Node(tuple_1)
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    bst_6 = module_0.Bst()
    list_0 = [bst_6, bst_6, bst_6]
    bool_3 = True
    tuple_2 = (bst_6, list_0, bool_3, bst_6)
    node_12 = module_0.Node(tuple_2)
    var_9 = var_8.__repr__()


def test_case_1223():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    var_1 = node_0.__repr__()
    list_0 = []
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data == []
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    node_1 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()


def test_case_1224():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()
    var_3 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bst_4 = module_0.Bst(bst_2)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    float_0 = -131.8
    bst_8 = module_0.Bst(float_0)
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_7 = module_0.Node(dict_0)
    var_8 = node_7.__repr__()
    var_9 = var_8.__repr__()
    node_8 = module_0.Node(node_7)
    bst_9 = module_0.Bst()


def test_case_1225():
    str_0 = " \x0c^"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    bytes_0 = b"<S\x0b\xb4A[\xb7\x02\xac\x90\xea'i"
    node_1 = module_0.Node(bytes_0)
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    var_6 = var_0.__repr__()


def test_case_1226():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    bst_7 = module_0.Bst()
    var_4 = var_3.__repr__()
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    node_5 = module_0.Node(bool_0)
    var_7 = node_5.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bst_12 = module_0.Bst(bst_10)
    bst_13 = module_0.Bst()
    node_8 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_10 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_8.__repr__()
    bst_15 = module_0.Bst()
    node_9 = module_0.Node(var_10)
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    bool_1 = False
    node_10 = module_0.Node(bool_1)
    list_0 = []
    bst_18 = module_0.Bst()
    var_12 = bst_18.insert(list_0)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_12)
    bst_19 = module_0.Bst()
    var_13 = node_11.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_12 = module_0.Node(str_0)
    var_14 = node_12.__repr__()
    var_15 = var_10.__repr__()


def test_case_1227():
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_0 = module_0.Node(bytes_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(var_0)
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    int_0 = 2253
    node_5 = module_0.Node(int_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_4 = node_6.__repr__()
    bst_4 = module_0.Bst()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    node_8 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_8.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_9 = module_0.Node(var_7)
    var_9 = var_7.__repr__()
    node_10 = module_0.Node(str_0)


def test_case_1228():
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    node_3 = module_0.Node(none_type_0)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_4 = module_0.Node(bytes_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    var_3 = node_5.__repr__()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_4 = node_6.__repr__()
    complex_0 = 102.8 - 272.1151j
    bst_1 = module_0.Bst()
    var_5 = bst_1.insert(complex_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_2 = module_0.Bst()
    node_7 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_1 = False
    var_7 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()


def test_case_1229():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    var_2 = var_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = node_2.__repr__()
    node_3 = module_0.Node(var_4)
    var_6 = var_4.__repr__()
    node_4 = module_0.Node(var_6)


def test_case_1230():
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_0 = module_0.Node(list_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(node_1)
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_3 = module_0.Bst(str_1)
    node_4 = module_0.Node(bst_3)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_2)
    var_3 = node_5.__repr__()
    var_4 = var_0.__repr__()


def test_case_1231():
    int_0 = 2029
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    list_0 = [bst_0, bst_0, bst_0]
    bool_0 = True
    tuple_0 = (bst_0, list_0, bool_0, bst_0)
    node_1 = module_0.Node(tuple_0)
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(var_0.left).__module__}.{type(var_0.left).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1232():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_4 = node_4.__repr__()
    var_5 = bst_4.insert(str_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_2)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()


def test_case_1233():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    var_1 = node_0.__repr__()
    list_1 = []
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(list_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    var_6 = var_4.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_3 = module_0.Node(dict_0)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_6 = module_0.Bst(set_0)
    var_7 = node_3.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    var_8 = bst_7.insert(node_4)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_0}
    node_5 = module_0.Node(set_1)
    var_11 = node_5.__repr__()
    node_6 = module_0.Node(var_11)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_15 = module_0.Bst(var_13)
    bst_16 = module_0.Bst()
    node_7 = module_0.Node(bst_16)
    var_16 = bst_16.insert(node_7)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_17 = module_0.Bst()
    node_8 = module_0.Node(bst_17)
    var_17 = bst_17.insert(node_8)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_17)
    bst_18 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    var_18 = bst_18.insert(node_10)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_2)


def test_case_1234():
    str_0 = "vOK:\\f"
    node_0 = module_0.Node(str_0)
    node_1 = module_0.Node(str_0)


def test_case_1235():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    node_1 = module_0.Node(bst_0)
    str_0 = "vOK:\\f"
    node_2 = module_0.Node(str_0)
    node_3 = module_0.Node(str_0)
    str_1 = "w8<H^+~qIrArq]1_$"
    node_4 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_5 = module_0.Node(set_0)
    var_1 = node_5.__repr__()
    bst_1 = module_0.Bst(var_1)
    var_2 = node_5.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_6.__repr__()
    node_7 = module_0.Node(bool_0)
    var_5 = node_7.__repr__()
    var_6 = var_3.__repr__()
    bst_3 = module_0.Bst()
    var_7 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_8 = module_0.Node(var_8)
    node_9 = module_0.Node(node_8)
    bst_4 = module_0.Bst()
    var_9 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_10 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_10 = module_0.Node(var_10)
    var_12 = var_11.__repr__()
    str_3 = "7"
    node_11 = module_0.Node(str_3)
    str_4 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_4}
    node_12 = module_0.Node(set_1)
    var_13 = node_12.__repr__()
    bst_6 = module_0.Bst()
    var_14 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_7 = module_0.Bst()
    node_13 = module_0.Node(set_1)
    node_14 = module_0.Node(str_0)


def test_case_1236():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    none_type_1 = None
    bst_1 = module_0.Bst(none_type_1)
    bst_2 = module_0.Bst(dict_0)
    bst_3 = module_0.Bst()
    var_0 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(var_0)
    var_2 = var_0.__repr__()
    list_0 = []
    node_2 = module_0.Node(list_0)
    int_0 = -2016
    list_1 = [int_0, int_0]
    node_3 = module_0.Node(list_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bst_8 = module_0.Bst(bst_6)
    var_5 = bst_0.insert(var_4)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1237():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bool_0 = True
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    var_3 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_4 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_5)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    var_10 = var_8.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    var_11 = bst_9.insert(node_6)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_11 = module_0.Bst()
    var_14 = var_12.__repr__()
    node_7 = module_0.Node(var_14)
    list_0 = []
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(list_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_15)
    bst_13 = module_0.Bst()
    var_16 = node_8.__repr__()
    node_9 = module_0.Node(var_9)


def test_case_1238():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    node_1 = module_0.Node(var_3)
    dict_0 = {}
    node_2 = module_0.Node(dict_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_3 = module_0.Node(bytes_0)
    var_4 = node_3.__repr__()
    var_5 = var_4.__repr__()
    str_0 = "UFO[|LK]k_j$\x0c=.rF{"
    node_4 = module_0.Node(str_0)
    var_6 = node_4.__repr__()
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_5 = module_0.Node(set_0)
    var_7 = node_5.__repr__()
    node_6 = module_0.Node(var_7)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    var_8 = node_7.__repr__()
    var_9 = node_7.__repr__()
    bytes_1 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_0 = [bytes_1]
    node_8 = module_0.Node(list_0)
    bst_4 = module_0.Bst()
    node_9 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_10 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_9.__repr__()
    var_12 = var_10.__repr__()
    set_1 = set()
    node_10 = module_0.Node(set_1)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_0: float_0, float_0: complex_0}
    node_11 = module_0.Node(dict_1)
    none_type_1 = None
    bst_6 = module_0.Bst(none_type_1)
    node_12 = module_0.Node(int_1)


def test_case_1239():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_0 = False
    var_6 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    node_6 = module_0.Node(bool_0)
    var_8 = node_6.__repr__()
    var_9 = var_6.__repr__()
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_7 = module_0.Node(bytes_0)
    var_10 = node_7.__repr__()
    list_0 = []
    node_8 = module_0.Node(list_0)
    str_1 = " 4'"
    node_9 = module_0.Node(str_1)
    bst_6 = module_0.Bst()
    list_1 = [bst_6, bst_6, bst_6]
    bool_1 = True
    tuple_0 = (bst_6, list_1, bool_1, bst_6)
    node_10 = module_0.Node(tuple_0)
    var_11 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_2 = []
    bst_7 = module_0.Bst()
    var_12 = bst_7.insert(list_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_12)
    node_12 = module_0.Node(node_8)


def test_case_1240():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = -1138
    node_1 = module_0.Node(int_0)
    bool_0 = False
    bst_3 = module_0.Bst(bool_0)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_2 = module_0.Node(bytes_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    var_7 = var_5.__repr__()
    node_4 = module_0.Node(var_7)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_0)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst(node_7)
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    var_10 = bst_11.insert(node_9)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    node_10 = module_0.Node(bst_15)
    set_0 = {bst_15, node_10}
    bst_16 = module_0.Bst(set_0)
    var_13 = node_7.__repr__()


def test_case_1241():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    float_0 = -131.8
    bst_1 = module_0.Bst(float_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_0 = node_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_1 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_3.__repr__()
    node_4 = module_0.Node(bool_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    int_0 = -1464
    var_6 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_3)
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst(bst_7)
    int_1 = 3317
    node_9 = module_0.Node(int_1)
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_2 = False
    var_10 = bst_11.insert(bool_2)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_11 = module_0.Node(var_11)
    bst_12 = module_0.Bst()
    node_12 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_12 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_12.__repr__()
    var_14 = var_12.__repr__()
    bst_14 = module_0.Bst()
    none_type_3 = None
    node_13 = module_0.Node(none_type_3)
    bool_3 = False
    var_15 = bst_14.insert(bool_3)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_14 = module_0.Node(node_12)


def test_case_1242():
    float_0 = -131.8
    bst_0 = module_0.Bst(float_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    var_4 = node_2.__repr__()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_4 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    bst_8 = module_0.Bst()
    var_9 = var_7.__repr__()
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_10)
    object_0 = module_1.object()
    node_8 = module_0.Node(object_0)
    var_11 = node_8.__repr__()
    assert var_11 == "<object object at 0x7fa0aed523c0>"
    set_0 = {var_5}
    list_0 = [var_8, set_0, var_6, var_9]
    var_12 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1243():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()
    node_2 = module_0.Node(node_1)


def test_case_1244():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    tuple_0 = (node_0, var_0, var_1, var_1)
    node_1 = module_0.Node(tuple_0)
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_1 = (dict_0, bool_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(tuple_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_3 = module_0.Node(bytes_0)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(var_3)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_2 = False
    var_5 = bst_9.insert(bool_2)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_10 = module_0.Bst()
    var_7 = var_6.__repr__()
    bst_11 = module_0.Bst()


def test_case_1245():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(var_4)
    var_6 = node_3.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()


def test_case_1246():
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_0 = module_0.Node(dict_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(node_0)
    list_0 = []
    bst_0 = module_0.Bst()
    var_2 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data == []
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    node_2 = module_0.Node(var_2)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    var_5 = node_3.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    node_5 = module_0.Node(bool_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    var_8 = bst_6.insert(node_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    var_9 = bst_7.insert(node_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_9)
    var_10 = node_8.__repr__()
    node_9 = module_0.Node(node_8)


def test_case_1247():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(bool_0)
    var_4 = node_2.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    var_5 = node_4.__repr__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_4 = module_0.Bst(bst_3)


def test_case_1248():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_4 = module_0.Bst()
    list_0 = [bst_4, bst_4, bst_4]
    bool_1 = True
    tuple_0 = (bst_4, list_0, bool_1, bst_4)
    node_3 = module_0.Node(tuple_0)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(var_5)
    bst_8 = module_0.Bst()
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst(var_8)
    int_0 = 2253
    node_7 = module_0.Node(int_0)
    var_10 = node_7.__repr__()
    bool_2 = False
    bst_13 = module_0.Bst(bool_2)
    var_11 = bst_4.insert(var_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1249():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_2 = node_1.__repr__()
    bst_1 = module_0.Bst(var_2)
    var_3 = node_1.__repr__()
    bst_2 = module_0.Bst(bst_1)


def test_case_1250():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_2 = module_0.Bst()
    tuple_0 = (bst_2,)
    tuple_1 = (dict_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    var_2 = node_5.__repr__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()


def test_case_1251():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    str_1 = " \x0c^"
    node_1 = module_0.Node(str_1)
    var_2 = node_1.__repr__()
    float_0 = -131.8
    bst_3 = module_0.Bst(float_0)
    var_3 = var_0.__repr__()


def test_case_1252():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    var_3 = bst_0.insert(bool_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_3.data is False
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = node_2.__repr__()
    node_3 = module_0.Node(bool_1)
    var_5 = node_3.__repr__()
    bst_1 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_2 = False
    var_6 = bst_1.insert(bool_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    str_0 = ""
    bst_2 = module_0.Bst(str_0)
    var_8 = var_6.__repr__()
    node_5 = module_0.Node(none_type_1)


def test_case_1253():
    str_0 = " \x0c^"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_1 = node_1.__repr__()
    bst_0 = module_0.Bst(var_1)
    var_2 = node_1.__repr__()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_2)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = node_3.__repr__()
    node_4 = module_0.Node(bst_2)
    var_5 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    var_8 = node_6.__repr__()
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    int_0 = -1464
    var_9 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_9.__repr__()
    var_14 = var_12.__repr__()
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_3}
    node_10 = module_0.Node(set_1)
    var_15 = node_10.__repr__()
    bst_11 = module_0.Bst(var_15)
    node_11 = module_0.Node(var_11)


def test_case_1254():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    object_0 = module_1.object()
    node_1 = module_0.Node(object_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_3 = node_4.__repr__()
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    int_0 = -1464
    var_8 = bst_5.insert(int_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_9 = node_7.__repr__()
    var_10 = node_7.__repr__()
    str_1 = "vOK:\\f"
    node_8 = module_0.Node(str_1)
    node_9 = module_0.Node(str_1)
    int_1 = 2029
    node_10 = module_0.Node(int_1)
    bst_7 = module_0.Bst()
    list_0 = [bst_7, bst_7, bst_7]
    bool_0 = True
    tuple_0 = (bst_7, list_0, bool_0, bst_7)
    node_11 = module_0.Node(tuple_0)
    var_11 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = bst_7.insert(bool_0)
    assert (
        f"{type(var_11.left).__module__}.{type(var_11.left).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_12.parent).__module__}.{type(var_12.parent).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_12 = module_0.Node(bytes_0)
    var_13 = node_7.__repr__()


def test_case_1255():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    none_type_0 = None
    bst_1 = module_0.Bst(none_type_0)
    list_0 = []
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_1)
    var_2 = node_1.__repr__()
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    node_3 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    bool_0 = True
    set_1 = {bool_0, bool_0}
    bst_4 = module_0.Bst(set_1)
    bst_5 = module_0.Bst()
    int_2 = 2029
    node_6 = module_0.Node(int_2)
    bst_6 = module_0.Bst()
    list_1 = [bst_6, bst_6, bst_6]
    bool_1 = True
    tuple_0 = (bst_6, list_1, bool_1, bst_6)
    node_7 = module_0.Node(tuple_0)
    var_5 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = bst_6.insert(bool_1)
    assert (
        f"{type(var_5.left).__module__}.{type(var_5.left).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_6.parent).__module__}.{type(var_6.parent).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_2 = False
    node_8 = module_0.Node(bool_2)
    var_7 = node_8.__repr__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_9.__repr__()
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(var_10)
    node_11 = module_0.Node(bst_0)


def test_case_1256():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_0.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    node_3 = module_0.Node(bst_3)
    node_4 = module_0.Node(node_1)
    list_1 = []
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(list_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(tuple_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = 1235
    dict_1 = {int_0: int_0, int_0: int_0}
    node_6 = module_0.Node(dict_1)
    var_6 = node_6.__repr__()
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    var_8 = bst_8.insert(node_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_10 = module_0.Bst()
    var_11 = var_9.__repr__()
    node_9 = module_0.Node(var_11)
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()
    bst_12 = module_0.Bst()
    node_10 = module_0.Node(bst_12)
    var_15 = bst_12.insert(node_10)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_15)
    bst_13 = module_0.Bst()
    none_type_0 = None
    node_12 = module_0.Node(none_type_0)
    var_16 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(var_16)
    object_0 = module_1.object()
    node_14 = module_0.Node(object_0)
    var_17 = node_14.__repr__()
    var_18 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1257():
    bytes_0 = b"\x16\xf4"
    node_0 = module_0.Node(bytes_0)


def test_case_1258():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    str_0 = "vOK:\\f"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(node_3)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(var_5)
    node_7 = module_0.Node(bst_7)
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_8 = module_0.Node(dict_0)
    var_6 = node_8.__repr__()
    var_7 = var_6.__repr__()
    node_9 = module_0.Node(node_8)
    bst_8 = module_0.Bst()
    node_10 = module_0.Node(bst_8)
    var_8 = bst_8.insert(node_10)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_11 = module_0.Node(bst_9)
    var_9 = bst_9.insert(node_11)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_9)
    var_10 = node_12.__repr__()
    var_11 = var_8.__repr__()
    none_type_1 = None
    node_13 = module_0.Node(none_type_1)
    var_12 = node_13.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_14 = module_0.Node(str_1)
    bst_10 = module_0.Bst()
    int_1 = -2466
    dict_1 = {int_1: int_1, int_1: int_1, int_1: int_1, int_1: int_1}
    bst_11 = module_0.Bst()
    tuple_0 = (bst_11,)
    tuple_1 = (dict_1, tuple_0)
    node_15 = module_0.Node(tuple_1)
    object_0 = module_1.object()
    node_16 = module_0.Node(object_0)
    var_13 = node_16.__repr__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__repr__()
    bst_12 = module_0.Bst()
    node_17 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_16 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_17.__repr__()
    bst_14 = module_0.Bst()
    node_18 = module_0.Node(bst_13)
    bst_15 = module_0.Bst(var_3)


def test_case_1259():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_4 = module_0.Bst(str_0)
    node_2 = module_0.Node(bst_4)
    int_0 = 2253
    node_3 = module_0.Node(int_0)
    var_3 = node_3.__repr__()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_5 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    var_8 = node_5.__repr__()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_9 = bst_10.insert(bool_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(bst_10)
    node_9 = module_0.Node(none_type_1)


def test_case_1260():
    bytes_0 = b"\x16\xf4"
    node_0 = module_0.Node(bytes_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    node_3 = module_0.Node(bst_1)
    var_2 = node_1.__repr__()
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    var_3 = node_5.__repr__()
    bst_2 = module_0.Bst()
    node_6 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_6.__repr__()
    var_6 = node_6.__repr__()
    node_7 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_1 = 2253
    node_9 = module_0.Node(int_1)
    var_8 = node_9.__repr__()
    bst_5 = module_0.Bst(var_8)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    bool_1 = False
    var_9 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    tuple_0 = (node_10, var_9, var_10, var_10)
    node_11 = module_0.Node(tuple_0)
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_12 = module_0.Node(none_type_2)
    bool_2 = False
    var_11 = bst_8.insert(bool_2)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_9 = module_0.Bst()
    var_13 = var_12.__repr__()
    var_14 = var_11.__repr__()
    bst_10 = module_0.Bst(node_2)


def test_case_1261():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    node_1 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    var_6 = node_2.__repr__()
    bst_6 = module_0.Bst()
    str_0 = "\tD\rb9y@AZRea"
    node_3 = module_0.Node(str_0)
    var_7 = node_3.__repr__()
    complex_0 = 102.8 - 272.1151j
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(complex_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    var_10 = node_4.__repr__()
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    node_6 = module_0.Node(node_4)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_7.__repr__()
    bst_12 = module_0.Bst()
    node_8 = module_0.Node(var_11)
    var_13 = node_7.__repr__()
    bst_13 = module_0.Bst(var_12)
    none_type_1 = None
    bst_14 = module_0.Bst(none_type_1)
    list_0 = []
    bst_15 = module_0.Bst()
    var_14 = bst_15.insert(list_0)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_14)
    var_15 = node_9.__repr__()
    bst_16 = module_0.Bst()
    var_16 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    var_18 = var_17.__repr__()
    dict_0 = {}
    node_10 = module_0.Node(dict_0)
    var_19 = var_11.__repr__()


def test_case_1262():
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    var_1 = bst_0.insert(node_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    str_0 = "vOK:\\f"
    node_2 = module_0.Node(str_0)
    node_3 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst(var_2)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_6.__repr__()
    node_7 = module_0.Node(bool_0)
    var_6 = node_7.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_8 = module_0.Node(set_0)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bool_1 = False
    var_7 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    var_9 = var_8.__repr__()
    var_10 = var_7.__repr__()
    bst_8 = module_0.Bst()
    node_10 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_10.__repr__()
    var_13 = node_10.__repr__()
    bst_10 = module_0.Bst()
    node_11 = module_0.Node(bst_10)
    var_14 = bst_10.insert(node_11)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_14)
    node_13 = module_0.Node(str_1)


def test_case_1263():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    var_2 = bst_1.insert(node_3)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_4)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    var_4 = node_5.__repr__()
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(var_5)
    var_7 = node_6.__repr__()
    bool_0 = False
    node_8 = module_0.Node(bool_0)
    var_8 = node_8.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bool_1 = False
    var_9 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_9.__repr__()
    node_10 = module_0.Node(none_type_1)
    node_11 = module_0.Node(bst_5)


def test_case_1264():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    str_1 = " 4'"
    node_1 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_2 = module_0.Node(set_0)
    var_0 = node_2.__repr__()
    node_3 = module_0.Node(str_1)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_4 = module_0.Node(bst_1)
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_5 = module_0.Node(list_0)
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_3)
    bst_2 = module_0.Bst()
    node_7 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_7.__repr__()
    var_4 = node_7.__repr__()
    node_8 = module_0.Node(var_3)
    var_5 = var_3.__repr__()
    var_6 = bst_2.insert(node_7)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(node_1)


def test_case_1265():
    str_0 = " \x0c^"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    list_0 = []
    node_1 = module_0.Node(list_0)
    str_1 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_1)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    node_5 = module_0.Node(var_2)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_6 = module_0.Node(dict_0)
    none_type_1 = None
    bst_1 = module_0.Bst(none_type_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_7 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_7.__repr__()
    bst_5 = module_0.Bst()
    node_8 = module_0.Node(bst_4)
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst(bst_3)
    none_type_2 = None
    bst_7 = module_0.Bst(none_type_2)
    list_1 = []
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(list_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_6)
    bst_9 = module_0.Bst()
    var_7 = node_9.__repr__()
    bst_10 = module_0.Bst()


def test_case_1266():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(var_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    set_1 = set()
    node_2 = module_0.Node(set_1)
    bst_3 = module_0.Bst()
    list_0 = [bst_3, bst_3, bst_3]
    bool_2 = True
    tuple_0 = (bst_3, list_0, bool_2, bst_3)
    node_3 = module_0.Node(tuple_0)
    str_0 = "\tD\rb9y@AZRea"
    node_4 = module_0.Node(str_0)
    var_4 = node_4.__repr__()
    bytes_0 = b"'\xf7\x9b\x06g\xdfu-i\x9fE"
    bst_4 = module_0.Bst(bytes_0)


def test_case_1267():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_0.__repr__()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    var_5 = node_0.__repr__()


def test_case_1268():
    bytes_0 = b"<S\x0b\xb4A[\xb7\x02\xac\x90\xea'i"
    node_0 = module_0.Node(bytes_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst(node_3)
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_3 = module_0.Bst(str_1)
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(var_2)
    var_4 = node_5.__repr__()
    node_7 = module_0.Node(bst_2)


def test_case_1269():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_1 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_7 = module_0.Bst(set_0)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_4 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_6.__repr__()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    var_6 = var_5.__repr__()
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_0}
    node_9 = module_0.Node(set_1)
    var_7 = node_9.__repr__()
    bst_13 = module_0.Bst()
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    node_11 = module_0.Node(node_9)
    node_12 = module_0.Node(node_10)


def test_case_1270():
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_0 = module_0.Bst()
    tuple_0 = (bst_0,)
    tuple_1 = (dict_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = ""
    bst_2 = module_0.Bst(str_0)
    var_2 = var_0.__repr__()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    var_4 = node_4.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_1 = False
    var_5 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    int_1 = -1464
    var_7 = bst_6.insert(int_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_8)
    bool_2 = True
    set_1 = {bool_2, bool_2}
    bst_8 = module_0.Bst(set_1)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    bool_3 = False
    var_9 = bst_10.insert(bool_3)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_9.__repr__()
    node_10 = module_0.Node(bool_3)
    var_11 = node_10.__repr__()
    var_12 = var_9.__repr__()
    int_2 = 189
    int_3 = 943
    set_2 = {int_2, int_3}
    node_11 = module_0.Node(set_2)
    var_13 = node_11.__repr__()
    node_12 = module_0.Node(var_13)
    bst_11 = module_0.Bst()
    node_13 = module_0.Node(node_8)


def test_case_1271():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_4 = module_0.Node(dict_0)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(var_3)
    bst_8 = module_0.Bst()
    var_5 = var_4.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_7 = module_0.Node(set_0)
    var_6 = node_7.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    list_0 = [bst_10, bst_10, bst_10]
    bool_0 = True
    tuple_0 = (bst_10, list_0, bool_0, bst_10)
    node_8 = module_0.Node(tuple_0)
    var_7 = bst_10.insert(bool_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_1 = []
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(list_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_8)
    bst_12 = module_0.Bst()
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    bool_1 = False
    var_9 = bst_15.insert(bool_1)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_16 = module_0.Bst()
    node_12 = module_0.Node(var_10)
    node_13 = module_0.Node(bst_16)
    node_14 = module_0.Node(bool_1)


def test_case_1272():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_0 = (dict_0, bool_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(tuple_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst(var_2)


def test_case_1273():
    str_0 = "vOK:\\f"
    node_0 = module_0.Node(str_0)
    node_1 = module_0.Node(str_0)
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_1 = node_2.__repr__()
    node_3 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_2 = node_4.__repr__()
    var_3 = node_4.__repr__()
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    var_6 = node_5.__repr__()
    node_6 = module_0.Node(var_5)
    var_7 = var_5.__repr__()
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(var_8)
    bst_7 = module_0.Bst()
    list_0 = []
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(list_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_10)
    bool_1 = True
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_10 = module_0.Node(bst_10)
    var_14 = var_1.__repr__()


def test_case_1274():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    complex_0 = 102.8 - 272.1151j
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(complex_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    list_1 = []
    node_3 = module_0.Node(list_1)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = False
    var_6 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    node_5 = module_0.Node(bool_1)
    var_8 = node_5.__repr__()
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(var_6)


def test_case_1275():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    var_3 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    var_6 = var_5.__repr__()
    var_7 = var_2.__repr__()


def test_case_1276():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    var_3 = node_2.__repr__()
    node_3 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(var_4)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_6 = module_0.Node(bytes_0)
    bst_8 = module_0.Bst()
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_7 = module_0.Node(dict_0)
    var_6 = node_7.__repr__()
    var_7 = var_6.__repr__()
    str_0 = ""
    bst_9 = module_0.Bst(str_0)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_8 = module_0.Node(bst_10)
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(bst_12)
    var_10 = bst_12.insert(node_9)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_9)
    int_1 = 2253
    node_11 = module_0.Node(int_1)
    var_11 = node_11.__repr__()
    bst_13 = module_0.Bst()
    none_type_1 = None
    node_12 = module_0.Node(none_type_1)
    var_12 = node_12.__repr__()
    var_13 = var_12.__repr__()
    bst_14 = module_0.Bst()
    node_13 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_14 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_13.__repr__()
    bst_16 = module_0.Bst()
    node_14 = module_0.Node(bst_16)
    var_16 = var_9.__repr__()


def test_case_1277():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_0)
    none_type_1 = None
    bst_3 = module_0.Bst(none_type_1)
    none_type_2 = None
    bst_4 = module_0.Bst(none_type_2)
    bst_5 = module_0.Bst(dict_0)
    bst_6 = module_0.Bst()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    bool_1 = False
    var_2 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    str_0 = ""
    bst_7 = module_0.Bst(str_0)
    var_4 = var_2.__repr__()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    var_5 = node_5.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_6 = module_0.Node(str_1)
    bst_8 = module_0.Bst()
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_7 = module_0.Node(bytes_0)
    var_6 = node_7.__repr__()
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)


def test_case_1278():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    var_2 = bst_5.insert(node_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_7 = module_0.Bst()
    var_5 = var_3.__repr__()
    node_3 = module_0.Node(var_5)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    str_0 = ""
    bst_9 = module_0.Bst(str_0)
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_10.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_6 = module_0.Node(dict_0)
    none_type_2 = None
    bst_12 = module_0.Bst(none_type_2)
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_7 = module_0.Node(bst_14)
    var_12 = bst_14.insert(node_7)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_12)
    int_0 = 869
    node_9 = module_0.Node(int_0)
    bst_15 = module_0.Bst()
    list_0 = [bst_15, bst_15, bst_15]
    bool_1 = True
    tuple_0 = (bst_15, list_0, bool_1, bst_15)
    node_10 = module_0.Node(tuple_0)
    bst_16 = module_0.Bst()
    node_11 = module_0.Node(bst_16)
    var_13 = bst_16.insert(node_11)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_17 = module_0.Bst()
    node_12 = module_0.Node(bst_17)
    var_14 = bst_17.insert(node_12)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(var_14)
    var_15 = node_13.__repr__()
    var_16 = var_13.__repr__()
    var_17 = var_3.__repr__()


def test_case_1279():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    node_2 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    int_2 = 1235
    dict_0 = {int_2: int_2, int_2: int_2}
    node_3 = module_0.Node(dict_0)
    var_1 = node_3.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()


def test_case_1280():
    str_0 = " 4'"
    node_0 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    node_2 = module_0.Node(str_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_2)
    bst_0 = module_0.Bst()
    bytes_0 = b"\x16\xf4"
    node_4 = module_0.Node(bytes_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    tuple_0 = (node_5, var_1, var_2, var_2)
    node_6 = module_0.Node(tuple_0)
    int_0 = 869
    node_7 = module_0.Node(int_0)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(node_5)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1281():
    int_0 = -1138
    node_0 = module_0.Node(int_0)
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_0 = node_2.__repr__()
    var_1 = var_0.__repr__()
    str_1 = "UFO[|LK]k_j$\x0c=.rF{"
    node_3 = module_0.Node(str_1)
    var_2 = node_3.__repr__()
    int_1 = 3820
    tuple_0 = (int_1,)
    node_4 = module_0.Node(tuple_0)
    var_3 = node_4.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_0 = False
    var_4 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_4.data is False
    assert var_4.left is None
    assert var_4.right is None
    assert var_4.parent is None
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(var_5)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_7 = module_0.Node(dict_0)
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_4 = module_0.Bst(set_0)
    var_6 = node_7.__repr__()
    bst_5 = module_0.Bst()
    node_8 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_8.__repr__()
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(var_7)
    var_9 = node_8.__repr__()
    int_2 = 869
    node_10 = module_0.Node(int_2)
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    bool_2 = False
    var_10 = bst_8.insert(bool_2)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_11.__repr__()
    node_12 = module_0.Node(node_8)


def test_case_1282():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_1 = module_0.Node(bytes_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(node_0)
    object_0 = module_1.object()
    node_3 = module_0.Node(object_0)
    var_2 = node_3.__repr__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    set_0 = set()
    node_4 = module_0.Node(set_0)
    str_1 = "vOK:\\f"
    node_5 = module_0.Node(str_1)
    node_6 = module_0.Node(str_1)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    str_2 = "vOK:\\f"
    node_8 = module_0.Node(str_2)
    bytes_1 = b"\x16\xf4"
    node_9 = module_0.Node(bytes_1)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    bool_1 = False
    var_5 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_5.data is False
    assert var_5.left is None
    assert var_5.right is None
    assert var_5.parent is None
    var_6 = node_10.__repr__()
    node_11 = module_0.Node(node_0)


def test_case_1283():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = var_0.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_5 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    var_8 = var_7.__repr__()
    var_9 = var_6.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    var_12 = var_11.__repr__()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_1)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_9 = module_0.Node(bst_11)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_10 = module_0.Node(set_0)
    bool_1 = False
    node_11 = module_0.Node(bool_1)
    var_15 = node_11.__repr__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__repr__()
    bst_13 = module_0.Bst()
    int_0 = 189
    int_1 = 943
    set_1 = {int_0, int_1}
    node_12 = module_0.Node(set_1)
    var_18 = node_12.__repr__()
    node_13 = module_0.Node(var_18)
    bst_14 = module_0.Bst()
    var_19 = var_11.__repr__()


def test_case_1284():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(bst_2)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_4 = node_5.__repr__()
    var_5 = bst_4.insert(str_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(var_6)
    bst_8 = module_0.Bst()
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    var_13 = node_9.__repr__()
    bst_14 = module_0.Bst()
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_15 = module_0.Bst(set_0)
    bst_16 = module_0.Bst()
    var_14 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_17 = module_0.Bst()
    var_16 = bst_17.insert(var_15)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_18 = module_0.Bst()
    node_10 = module_0.Node(bst_18)
    var_17 = bst_18.insert(node_10)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_19 = module_0.Bst()
    var_18 = bst_19.insert(bst_19)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    bst_20 = module_0.Bst()
    bst_21 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_11 = module_0.Node(set_1)
    var_20 = node_11.__repr__()
    bool_2 = True
    node_12 = module_0.Node(bool_2)
    var_21 = node_12.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_13 = module_0.Node(dict_0)
    none_type_2 = None
    bst_22 = module_0.Bst(none_type_2)
    bst_23 = module_0.Bst()
    bst_24 = module_0.Bst()


def test_case_1285():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_2 = module_0.Node(dict_0)
    var_3 = node_2.__repr__()
    var_4 = var_3.__repr__()
    none_type_0 = None
    bst_2 = module_0.Bst(none_type_0)
    int_1 = 869
    node_3 = module_0.Node(int_1)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_5 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    bool_1 = False
    node_6 = module_0.Node(bool_1)
    var_7 = node_6.__repr__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    bst_4 = module_0.Bst()
    str_2 = "{&:T\r/p-BHx9-lgMP"
    bst_5 = module_0.Bst(str_2)
    node_7 = module_0.Node(bst_5)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_3}
    node_8 = module_0.Node(set_1)
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_2 = False
    var_10 = bst_6.insert(bool_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_9.__repr__()
    node_10 = module_0.Node(bool_2)
    var_12 = node_10.__repr__()
    var_13 = node_10.__repr__()


def test_case_1286():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst(bst_1)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(var_6)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_5 = module_0.Node(bst_11)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_8 = node_6.__repr__()
    bst_12 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_9 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_7.__repr__()
    bst_14 = module_0.Bst()
    node_8 = module_0.Node(bst_13)
    bst_15 = module_0.Bst()
    var_11 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_9 = module_0.Node(var_12)
    node_10 = module_0.Node(node_9)
    bst_16 = module_0.Bst()
    var_13 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_14 = bst_17.insert(bst_7)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1287():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_1 = None
    bst_3 = module_0.Bst(none_type_1)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_4 = module_0.Bst(str_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_3 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    node_4 = module_0.Node(str_0)


def test_case_1288():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_2 = node_3.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst(node_6)
    bool_1 = True
    set_1 = {bool_1, bool_1}
    bst_8 = module_0.Bst(set_1)
    bst_9 = module_0.Bst()
    var_5 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(var_6)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    object_0 = module_1.object()
    node_7 = module_0.Node(object_0)
    var_8 = node_7.__repr__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    bool_2 = False
    node_8 = module_0.Node(bool_2)
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_12 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_9 = module_0.Node(set_2)
    node_10 = module_0.Node(bst_11)
    var_13 = var_8.__repr__()
    var_14 = var_13.__repr__()


def test_case_1289():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__repr__()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    node_3 = module_0.Node(bst_2)
    var_6 = node_1.__repr__()
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    var_7 = node_4.__repr__()
    int_0 = 3820
    tuple_0 = (int_0,)
    node_5 = module_0.Node(tuple_0)
    var_8 = node_5.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    var_9 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_9)
    object_0 = module_1.object()
    node_8 = module_0.Node(object_0)
    var_10 = node_8.__repr__()
    bst_4 = module_0.Bst()
    node_9 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_11 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    var_13 = node_9.__repr__()
    node_10 = module_0.Node(var_12)
    node_11 = module_0.Node(var_0)


def test_case_1290():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_1 = module_0.Node(list_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1291():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    var_2 = node_3.__repr__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    node_4 = module_0.Node(var_2)
    bytes_0 = b"\x16\xf4"
    node_5 = module_0.Node(bytes_0)
    bool_2 = True
    set_0 = {bool_2, bool_2}
    bst_1 = module_0.Bst(set_0)
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_3 = module_0.Bst()
    var_7 = bst_3.insert(var_6)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_1 = None
    bst_4 = module_0.Bst(none_type_1)
    list_0 = []
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_8)
    var_9 = node_6.__repr__()
    bst_6 = module_0.Bst(var_4)


def test_case_1292():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()


def test_case_1293():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)
    int_0 = -1138
    node_2 = module_0.Node(int_0)
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_0 = (dict_0, bool_1)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(tuple_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    list_0 = []
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst()


def test_case_1294():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = node_1.__repr__()
    var_2 = bst_1.insert(str_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    node_5 = module_0.Node(bst_4)
    node_6 = module_0.Node(node_3)
    node_7 = module_0.Node(var_1)


def test_case_1295():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()
    var_3 = var_0.__repr__()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_4 = node_2.__repr__()
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_3 = module_0.Bst()
    int_0 = 869
    node_4 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_5 = module_0.Node(bytes_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    int_1 = -1464
    var_7 = bst_6.insert(int_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_7 = module_0.Bst(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_7 = module_0.Node(set_0)
    var_8 = node_7.__repr__()
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    node_9 = module_0.Node(node_7)
    bst_9 = module_0.Bst()


def test_case_1296():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    var_2 = node_0.__repr__()
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_3 = module_0.Node(list_0)
    bst_2 = module_0.Bst()
    str_1 = " 4'"
    node_4 = module_0.Node(str_1)
    list_1 = []
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(list_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    node_6 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_7.__repr__()
    var_6 = var_4.__repr__()
    bst_6 = module_0.Bst()
    var_7 = bst_4.insert(bst_5)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_0 = None
    bst_7 = module_0.Bst(none_type_0)
    str_2 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_8 = module_0.Bst(str_2)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_8.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst(var_8)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    node_9 = module_0.Node(bst_15)
    bst_16 = module_0.Bst()
    var_10 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_9.__repr__()
    var_12 = node_9.__repr__()
    bst_17 = module_0.Bst()
    bst_18 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    var_13 = bst_18.insert(bst_18)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_13)
    bst_19 = module_0.Bst()
    node_12 = module_0.Node(bst_19)
    node_13 = module_0.Node(bst_18)
    list_2 = []
    bst_20 = module_0.Bst()
    var_14 = bst_20.insert(list_2)
    assert (
        f"{type(bst_20.root).__module__}.{type(bst_20.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_14 = module_0.Node(var_14)
    var_15 = var_13.__repr__()


def test_case_1297():
    complex_0 = 102.8 - 272.1151j
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(complex_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == (102.8 - 272.1151j)
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    float_0 = 1992.7524
    complex_1 = 3567.8657 + 867j
    dict_1 = {float_0: float_0, float_0: complex_1}
    node_1 = module_0.Node(dict_1)
    none_type_0 = None
    bst_1 = module_0.Bst(none_type_0)
    bst_2 = module_0.Bst()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(var_2)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_4 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    str_0 = "vOK:\\f"
    node_6 = module_0.Node(str_0)
    node_7 = module_0.Node(str_0)
    list_0 = []
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(list_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_7)
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bst_11 = module_0.Bst()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_10 = module_0.Node(bytes_0)
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    var_8 = node_11.__repr__()
    var_9 = node_11.__repr__()
    node_12 = module_0.Node(var_5)


def test_case_1298():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst(var_0)


def test_case_1299():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(node_1)
    var_0 = node_2.__repr__()


def test_case_1300():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    var_1 = var_0.__repr__()


def test_case_1301():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_2)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_3 = module_0.Node(bytes_0)
    var_2 = node_3.__repr__()
    var_3 = var_2.__repr__()
    list_1 = []
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(list_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_2 = False
    var_10 = bst_7.insert(bool_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    bst_8 = module_0.Bst(var_10)
    node_7 = module_0.Node(bst_0)


def test_case_1302():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(node_6)
    var_5 = node_0.__repr__()


def test_case_1303():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    var_1 = node_1.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_0)
    bst_0 = module_0.Bst()
    var_2 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    var_4 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(var_5)
    var_7 = node_3.__repr__()
    node_5 = module_0.Node(bool_0)


def test_case_1304():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_2 = module_0.Node(bytes_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    var_6 = node_3.__repr__()
    node_4 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_5.__repr__()
    var_11 = var_9.__repr__()
    bst_9 = module_0.Bst()
    object_0 = module_1.object()
    node_6 = module_0.Node(object_0)
    int_0 = 869
    node_7 = module_0.Node(int_0)
    list_1 = []
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(list_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_12)
    bst_11 = module_0.Bst()
    list_2 = []
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(list_2)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_13)
    var_14 = node_6.__repr__()


def test_case_1305():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(var_2)
    var_4 = node_1.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_5 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    node_4 = module_0.Node(bool_1)
    var_7 = node_4.__repr__()
    var_8 = var_5.__repr__()
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_5 = module_0.Bst(str_0)
    node_5 = module_0.Node(bst_5)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_6 = module_0.Node(bytes_0)
    var_9 = node_6.__repr__()
    var_10 = var_9.__repr__()
    node_7 = module_0.Node(node_5)
    bst_6 = module_0.Bst()
    var_11 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_8 = module_0.Node(var_11)
    var_13 = var_11.__repr__()
    bool_2 = False
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(node_9)
    node_11 = module_0.Node(node_10)
    var_14 = node_5.__repr__()


def test_case_1306():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(var_5)
    object_0 = module_1.object()
    node_5 = module_0.Node(object_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_6 = module_0.Node(bytes_0)
    var_6 = node_6.__repr__()
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_1 = False
    var_8 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    str_0 = ""
    bst_7 = module_0.Bst(str_0)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_8.__repr__()
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(var_10)
    var_12 = node_8.__repr__()
    bst_12 = module_0.Bst(var_11)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_10 = module_0.Node(dict_0)
    none_type_2 = None
    bst_13 = module_0.Bst(none_type_2)
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_15 = module_0.Bst()
    var_14 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_11 = module_0.Node(var_14)
    var_16 = var_15.__repr__()
    bst_16 = module_0.Bst()
    var_17 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    var_19 = var_17.__repr__()
    bst_17 = module_0.Bst()
    none_type_3 = None
    node_12 = module_0.Node(none_type_3)
    var_20 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_21 = var_19.__repr__()
    var_22 = var_17.__repr__()


def test_case_1307():
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    list_0 = []
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    bst_2 = module_0.Bst()
    var_4 = node_2.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_3 = module_0.Node(dict_0)
    none_type_0 = None
    bst_3 = module_0.Bst(none_type_0)
    bst_4 = module_0.Bst()
    list_1 = []
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(list_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    var_8 = var_7.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_0}
    node_8 = module_0.Node(set_1)
    var_9 = node_8.__repr__()
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    node_10 = module_0.Node(node_8)
    list_2 = []
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(list_2)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_10)
    bst_13 = module_0.Bst()
    node_12 = module_0.Node(bst_8)


def test_case_1308():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    bst_1 = module_0.Bst()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    var_3 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_3.data is False
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_5 = module_0.Bst()
    var_7 = var_5.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    bool_2 = False
    node_5 = module_0.Node(bool_2)
    var_8 = node_5.__repr__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    bst_6 = module_0.Bst()
    int_0 = 3317
    node_6 = module_0.Node(int_0)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    dict_1 = {node_7: none_type_2, node_7: none_type_2}
    bst_7 = module_0.Bst(dict_1)
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_8.__repr__()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    var_13 = var_12.__repr__()
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    var_14 = bst_0.insert(str_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1309():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    var_5 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_11 = module_0.Bst(var_10)
    var_13 = var_7.__repr__()


def test_case_1310():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(node_3)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_4 = node_5.__repr__()
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(set_0)
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst(var_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_11.__repr__()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_14 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_9.__repr__()
    var_16 = var_14.__repr__()
    bool_2 = False
    bst_12 = module_0.Bst(bool_2)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_10 = module_0.Node(set_1)
    var_17 = node_10.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()


def test_case_1311():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    var_1 = bst_2.insert(node_4)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_2 = bst_3.insert(node_6)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_1.__repr__()


def test_case_1312():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is False
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(bool_0)
    int_0 = 2253
    node_3 = module_0.Node(int_0)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_4 = module_0.Node(bytes_0)
    bst_2 = module_0.Bst()
    dict_0 = {}
    node_5 = module_0.Node(dict_0)
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_4 = node_6.__repr__()
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    bool_1 = False
    var_6 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_7.__repr__()
    bst_5 = module_0.Bst(var_6)
    bst_6 = module_0.Bst()
    list_0 = [bst_6, bst_6, bst_6]
    bool_2 = True
    tuple_0 = (bst_6, list_0, bool_2, bst_6)
    node_8 = module_0.Node(tuple_0)
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    int_1 = -1464
    var_8 = bst_7.insert(int_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_1 = []
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(list_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_9)
    bst_9 = module_0.Bst()
    none_type_4 = None
    node_11 = module_0.Node(none_type_4)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1313():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst(var_4)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_5 = module_0.Node(var_8)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_6 = module_0.Node(dict_0)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_10 = module_0.Bst()
    var_11 = var_9.__repr__()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_7.__repr__()
    bst_13 = module_0.Bst()
    node_8 = module_0.Node(bst_12)
    var_14 = var_13.__repr__()
    node_9 = module_0.Node(bst_2)


def test_case_1314():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    str_1 = "UFO[|LK]k_j$\x0c=.rF{"
    node_3 = module_0.Node(str_1)
    var_2 = node_3.__repr__()
    var_3 = var_1.__repr__()


def test_case_1315():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_1 = module_0.Bst(set_0)
    bytes_0 = b"\x16\xf4"
    node_1 = module_0.Node(bytes_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_1 = node_3.__repr__()
    var_2 = bst_2.insert(str_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_3 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_2 = False
    node_5 = module_0.Node(bool_2)
    var_4 = node_5.__repr__()
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_3 = False
    node_7 = module_0.Node(bool_3)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(node_8)
    bst_5 = module_0.Bst()
    node_10 = module_0.Node(bst_5)
    var_5 = bst_5.insert(node_10)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    var_8 = var_6.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_11 = module_0.Node(set_1)
    var_9 = node_11.__repr__()
    bst_8 = module_0.Bst()
    var_10 = node_6.__repr__()


def test_case_1316():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bool_0 = True
    set_1 = {bool_0, bool_0}
    bst_3 = module_0.Bst(set_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_7 = module_0.Bst()
    var_6 = node_4.__repr__()
    node_5 = module_0.Node(var_6)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_7 = node_6.__repr__()
    list_0 = []
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(list_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_8)
    bst_10 = module_0.Bst()
    var_9 = node_7.__repr__()
    none_type_2 = None
    bst_11 = module_0.Bst(none_type_2)
    list_1 = []
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(list_1)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_10)
    var_11 = node_8.__repr__()
    var_12 = bst_11.insert(bst_8)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1317():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    str_1 = "vOK:\\f"
    node_1 = module_0.Node(str_1)
    node_2 = module_0.Node(str_1)
    bst_0 = module_0.Bst()
    node_3 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_3)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    node_4 = module_0.Node(var_3)
    str_2 = "\tD\rb9y@AZRea"
    node_5 = module_0.Node(str_2)
    var_4 = node_5.__repr__()
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_3}
    node_6 = module_0.Node(set_0)
    var_5 = node_6.__repr__()
    bst_3 = module_0.Bst(var_5)
    var_6 = node_6.__repr__()
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(var_7)
    bst_7 = module_0.Bst()
    var_9 = var_8.__repr__()
    node_9 = module_0.Node(bst_5)


def test_case_1318():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    node_5 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()


def test_case_1319():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    bst_1 = module_0.Bst()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_1 = module_0.Node(bytes_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_0 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_4 = module_0.Bst()
    var_1 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_5 = module_0.Bst()
    var_3 = var_1.__repr__()
    node_3 = module_0.Node(var_3)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    node_6 = module_0.Node(bst_7)
    none_type_1 = None
    bst_8 = module_0.Bst(none_type_1)
    bst_9 = module_0.Bst()


def test_case_1320():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(var_5)
    var_7 = var_2.__repr__()


def test_case_1321():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    bst_1 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_4.__repr__()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst(var_4)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_6 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    var_9 = bst_11.insert(node_7)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_8)
    int_0 = -2814
    set_1 = {node_4, bst_6, int_0}
    var_10 = bst_0.insert(set_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1322():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    var_6 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_2.insert(bst_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    list_0 = [bst_6, bst_6, bst_6]
    bool_0 = True
    tuple_0 = (bst_6, list_0, bool_0, bst_6)
    node_4 = module_0.Node(tuple_0)
    var_8 = var_4.__repr__()


def test_case_1323():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst(var_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    var_2 = node_1.__repr__()
    int_0 = -1138
    node_2 = module_0.Node(int_0)
    int_1 = 2253
    node_3 = module_0.Node(int_1)
    int_2 = 869
    node_4 = module_0.Node(int_2)
    str_1 = " 4'"
    node_5 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_6 = module_0.Node(set_0)
    var_3 = node_6.__repr__()
    node_7 = module_0.Node(str_1)
    int_3 = 2253
    node_8 = module_0.Node(int_3)
    var_4 = node_8.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_9 = module_0.Node(none_type_0)
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_5)
    bool_0 = True
    set_1 = {bool_0, bool_0}
    bst_5 = module_0.Bst(set_1)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_11 = module_0.Node(bst_7)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_3}
    node_12 = module_0.Node(set_2)
    var_8 = node_12.__repr__()
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_13 = module_0.Node(none_type_1)
    node_14 = module_0.Node(node_12)
    var_9 = node_1.__repr__()
    var_10 = var_9.__repr__()


def test_case_1324():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    var_2 = node_4.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(set_0)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_6 = module_0.Node(set_1)
    var_5 = node_6.__repr__()
    node_7 = module_0.Node(var_5)
    int_0 = 3317
    node_8 = module_0.Node(int_0)
    bool_0 = False
    node_9 = module_0.Node(bool_0)
    var_6 = node_9.__repr__()
    set_2 = set()
    node_10 = module_0.Node(set_2)
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_0 = (dict_0, bool_1)
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(tuple_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_1 = 2253
    node_11 = module_0.Node(int_1)
    var_8 = node_11.__repr__()
    bool_2 = True
    set_3 = {bool_2, bool_2}
    bst_5 = module_0.Bst(set_3)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(var_10)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_2 = -2466
    dict_1 = {int_2: int_2, int_2: int_2, int_2: int_2, int_2: int_2}
    bst_8 = module_0.Bst()
    tuple_1 = (bst_8,)
    tuple_2 = (dict_1, tuple_1)
    node_12 = module_0.Node(tuple_2)
    var_12 = var_2.__repr__()


def test_case_1325():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    int_0 = 2253
    node_1 = module_0.Node(int_0)
    var_1 = node_1.__repr__()
    bst_0 = module_0.Bst(var_1)
    bst_1 = module_0.Bst()


def test_case_1326():
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_0 = module_0.Node(dict_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(node_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_1)
    bst_0 = module_0.Bst()
    var_2 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    var_4 = var_2.__repr__()
    node_3 = module_0.Node(var_4)


def test_case_1327():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(node_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_0 = node_3.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(node_3)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_6 = module_0.Node(bytes_0)
    bst_1 = module_0.Bst()
    bool_1 = True
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is True
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_7 = module_0.Node(node_6)


def test_case_1328():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    str_0 = ""
    bst_3 = module_0.Bst(str_0)
    var_3 = var_1.__repr__()
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_5 = module_0.Node(dict_0)
    var_4 = node_5.__repr__()
    var_5 = var_4.__repr__()
    node_6 = module_0.Node(node_5)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_0: float_0, float_0: complex_0}
    node_7 = module_0.Node(dict_1)
    none_type_2 = None
    bst_4 = module_0.Bst(none_type_2)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_8 = module_0.Node(var_7)
    node_9 = module_0.Node(node_8)
    bst_7 = module_0.Bst()
    node_10 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_10.__repr__()
    var_10 = node_10.__repr__()
    node_11 = module_0.Node(var_9)
    var_11 = var_9.__repr__()
    bst_9 = module_0.Bst()
    none_type_3 = None
    node_12 = module_0.Node(none_type_3)
    bool_1 = False
    var_12 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_12.__repr__()
    node_13 = module_0.Node(bool_1)
    var_14 = node_13.__repr__()
    str_1 = "\tD\rb9y@AZRea"
    node_14 = module_0.Node(str_1)
    var_15 = node_14.__repr__()
    node_15 = module_0.Node(complex_0)


def test_case_1329():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    var_2 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1330():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_1 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_2 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_2)
    var_3 = node_4.__repr__()
    var_4 = var_1.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_5 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    var_8 = var_6.__repr__()
    node_6 = module_0.Node(bst_3)


def test_case_1331():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = 869
    node_3 = module_0.Node(int_0)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    node_5 = module_0.Node(var_3)


def test_case_1332():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    var_5 = bst_6.insert(node_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = bst_0.insert(bst_4)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1333():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    var_2 = var_0.__repr__()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_1 = module_0.Node(bytes_0)
    bst_2 = module_0.Bst()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    var_3 = node_2.__repr__()
    none_type_1 = None
    bst_3 = module_0.Bst(none_type_1)
    int_0 = 869
    node_3 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_2 = False
    var_4 = bst_4.insert(bool_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    var_8 = node_5.__repr__()
    bst_7 = module_0.Bst()
    list_0 = [bst_7, bst_7, bst_7]
    bool_3 = True
    tuple_0 = (bst_7, list_0, bool_3, bst_7)
    node_6 = module_0.Node(tuple_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_7 = module_0.Node(set_0)
    var_9 = node_7.__repr__()
    bst_8 = module_0.Bst(var_9)
    var_10 = node_7.__repr__()
    bst_9 = module_0.Bst()


def test_case_1334():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_1 = module_0.Node(dict_0)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_3 = module_0.Bst(set_0)
    var_4 = node_1.__repr__()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(node_3)
    var_5 = node_4.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_2 = False
    var_6 = bst_4.insert(bool_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    bool_3 = True
    set_1 = {bool_3, bool_3}
    bst_6 = module_0.Bst(set_1)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_0)
    int_0 = 1235
    dict_1 = {int_0: int_0, int_0: int_0}
    node_7 = module_0.Node(dict_1)
    var_8 = node_7.__repr__()
    var_9 = var_8.__repr__()
    node_8 = module_0.Node(node_7)
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_9.__repr__()
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(var_10)
    var_12 = node_9.__repr__()
    bst_10 = module_0.Bst(var_11)
    bst_11 = module_0.Bst()


def test_case_1335():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()
    var_3 = var_0.__repr__()
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_1 = module_0.Bst(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_5 = module_0.Node(var_5)
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_6 = module_0.Node(set_0)
    var_6 = node_6.__repr__()
    node_7 = module_0.Node(var_6)
    node_8 = module_0.Node(none_type_0)


def test_case_1336():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_1)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_2 = module_0.Bst(str_0)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    node_5 = module_0.Node(bool_0)
    var_4 = node_5.__repr__()
    var_5 = var_2.__repr__()
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(var_6)
    bst_7 = module_0.Bst()
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_8 = module_0.Bst(str_1)
    node_9 = module_0.Node(bst_8)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_10 = module_0.Node(bytes_0)
    var_8 = node_10.__repr__()
    var_9 = var_8.__repr__()
    node_11 = module_0.Node(node_9)
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_12 = module_0.Node(none_type_2)
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(var_10)
    bool_2 = True
    set_0 = {bool_2, bool_2}
    bst_10 = module_0.Bst(set_0)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    none_type_3 = None
    node_14 = module_0.Node(none_type_3)
    bool_3 = False
    var_11 = bst_12.insert(bool_3)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_14.__repr__()
    node_15 = module_0.Node(bool_3)
    var_13 = node_15.__repr__()
    int_0 = 2029
    node_16 = module_0.Node(int_0)
    var_14 = var_4.__repr__()


def test_case_1337():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_4 = node_3.__repr__()
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    var_5 = node_4.__repr__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(var_8)
    var_10 = node_5.__repr__()
    bst_8 = module_0.Bst()
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_7 = module_0.Node(dict_0)
    var_11 = node_7.__repr__()
    var_12 = var_11.__repr__()
    bst_9 = module_0.Bst(var_8)


def test_case_1338():
    bst_0 = module_0.Bst()
    tuple_0 = (bst_0,)
    node_0 = module_0.Node(tuple_0)


def test_case_1339():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    str_1 = "vOK:\\f"
    node_2 = module_0.Node(str_1)
    node_3 = module_0.Node(str_1)
    list_0 = []
    node_4 = module_0.Node(list_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_5.__repr__()
    node_6 = module_0.Node(bool_0)
    var_3 = node_6.__repr__()
    bst_1 = module_0.Bst()


def test_case_1340():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    var_1 = node_0.__repr__()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = node_1.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    int_0 = 2253
    node_3 = module_0.Node(int_0)
    var_3 = node_3.__repr__()
    bst_3 = module_0.Bst(var_3)
    var_4 = var_2.__repr__()


def test_case_1341():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    object_0 = module_1.object()
    node_1 = module_0.Node(object_0)
    var_1 = node_1.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_3 = module_0.Bst()
    var_6 = node_2.__repr__()
    node_3 = module_0.Node(var_6)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    var_9 = var_2.__repr__()


def test_case_1342():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    node_0 = module_0.Node(set_0)


def test_case_1343():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_2 = module_0.Node(bytes_0)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_5 = module_0.Node(var_1)
    str_2 = "\tD\rb9y@AZRea"
    node_6 = module_0.Node(str_2)
    var_2 = node_6.__repr__()
    int_1 = 3317
    node_7 = module_0.Node(int_1)
    int_2 = -1138
    node_8 = module_0.Node(int_2)
    node_9 = module_0.Node(str_1)


def test_case_1344():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_1 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(var_1)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_4 = module_0.Node(bst_10)
    var_3 = bst_10.insert(node_4)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_4 = bst_11.insert(node_6)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = 3820
    tuple_0 = (int_0,)
    node_7 = module_0.Node(tuple_0)
    var_5 = node_7.__repr__()
    str_0 = " \x0c^"
    node_8 = module_0.Node(str_0)
    var_6 = node_8.__repr__()
    var_7 = node_0.__repr__()


def test_case_1345():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = "\tD\rb9y@AZRea"
    node_1 = module_0.Node(str_0)
    var_0 = node_1.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_1 = node_2.__repr__()
    bst_0 = module_0.Bst()
    bool_0 = True
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is True
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_3 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_2 = False
    var_5 = bst_3.insert(bool_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    node_5 = module_0.Node(bool_2)
    bst_4 = module_0.Bst()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_6 = module_0.Node(dict_0)
    none_type_3 = None
    bst_5 = module_0.Bst(none_type_3)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()


def test_case_1346():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    int_0 = 2029
    node_2 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    list_1 = [bst_3, bst_3, bst_3]
    bool_0 = True
    tuple_0 = (bst_3, list_1, bool_0, bst_3)
    node_3 = module_0.Node(tuple_0)
    var_1 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(var_3)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bytes_0 = b"\x16\xf4"
    node_6 = module_0.Node(bytes_0)
    int_1 = -2466
    dict_0 = {int_1: int_1, int_1: int_1, int_1: int_1, int_1: int_1}
    bst_9 = module_0.Bst()
    tuple_1 = (bst_9,)
    tuple_2 = (dict_0, tuple_1)
    node_7 = module_0.Node(tuple_2)
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_10 = module_0.Bst(str_0)
    node_8 = module_0.Node(bst_10)
    node_9 = module_0.Node(var_2)


def test_case_1347():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    var_3 = var_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = False
    var_4 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    bst_3 = module_0.Bst(var_4)
    bst_4 = module_0.Bst(var_3)


def test_case_1348():
    bytes_0 = b"<S\x0b\xb4A[\xb7\x02\xac\x90\xea'i"
    node_0 = module_0.Node(bytes_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_0 = node_2.__repr__()
    var_1 = bst_1.insert(str_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == "(-+2Yj@U8NM6[+0S0o"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_2 = module_0.Bst()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_4 = module_0.Bst()
    tuple_0 = (bst_4,)
    tuple_1 = (dict_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    var_4 = node_5.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_6 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_7.__repr__()
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(var_5)
    var_7 = node_7.__repr__()
    bst_9 = module_0.Bst()


def test_case_1349():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst(var_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()
    none_type_0 = None
    bst_4 = module_0.Bst(none_type_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_5 = module_0.Bst(str_0)
    bst_6 = module_0.Bst()
    int_0 = 869
    node_2 = module_0.Node(int_0)
    str_1 = "vOK:\\f"
    node_3 = module_0.Node(str_1)
    node_4 = module_0.Node(str_1)
    bool_1 = False
    node_5 = module_0.Node(bool_1)
    var_3 = node_5.__repr__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bool_2 = True
    set_0 = {bool_2, bool_2}
    bst_7 = module_0.Bst(set_0)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(var_7)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_3 = False
    var_9 = bst_10.insert(bool_3)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    node_7 = module_0.Node(bool_3)
    var_11 = node_7.__repr__()
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_8.__repr__()
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(var_12)
    bst_14 = module_0.Bst()
    var_14 = var_13.__repr__()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_10 = module_0.Node(str_2)
    var_15 = var_11.__repr__()


def test_case_1350():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    var_2 = var_1.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    bool_0 = True
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_7 = module_0.Bst(str_1)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_2)
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    var_6 = node_4.__repr__()
    bool_1 = False
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    bool_2 = True
    float_0 = -128.5329
    dict_0 = {bool_2: float_0}
    tuple_0 = (dict_0, bool_2)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(tuple_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_3 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_3)
    var_8 = node_3.__repr__()


def test_case_1351():
    str_0 = "vOK:\\f"
    node_0 = module_0.Node(str_0)
    bytes_0 = b"<S\x0b\xb4A[\xb7\x02\xac\x90\xea'i"
    node_1 = module_0.Node(bytes_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_1)
    bst_0 = module_0.Bst()
    node_3 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_3.__repr__()
    node_4 = module_0.Node(bst_1)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_5 = module_0.Node(bst_2)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_6 = module_0.Node(set_0)
    var_5 = node_6.__repr__()
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(set_0)
    bst_6 = module_0.Bst()


def test_case_1352():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    var_5 = node_4.__repr__()
    var_6 = var_3.__repr__()
    int_0 = 869
    node_5 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_7.__repr__()
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(var_9)
    var_11 = node_7.__repr__()
    var_12 = var_0.__repr__()


def test_case_1353():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    tuple_0 = (node_0, var_0, var_1, var_1)
    node_1 = module_0.Node(tuple_0)
    node_2 = module_0.Node(var_0)


def test_case_1354():
    str_0 = "UFO[|LK]k_j$\x0c=.rF{"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    object_0 = module_1.object()
    node_1 = module_0.Node(object_0)
    var_1 = node_1.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_0 = module_0.Bst()
    tuple_0 = (bst_0,)
    tuple_1 = (dict_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    list_0 = []
    bst_1 = module_0.Bst()
    var_4 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_4.data == []
    assert var_4.left is None
    assert var_4.right is None
    assert var_4.parent is None
    node_3 = module_0.Node(var_4)
    bst_2 = module_0.Bst()
    var_5 = node_3.__repr__()
    object_1 = module_1.object()
    node_4 = module_0.Node(object_1)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    int_1 = 869
    node_8 = module_0.Node(int_1)
    bool_0 = True
    float_0 = -128.5329
    dict_1 = {bool_0: float_0}
    tuple_2 = (dict_1, bool_0)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(tuple_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = bst_4.insert(var_8)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1355():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    str_1 = " 4'"
    node_2 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_3 = module_0.Node(set_1)
    var_1 = node_3.__repr__()
    node_4 = module_0.Node(str_1)
    bst_0 = module_0.Bst()
    list_0 = [bst_0, bst_0, bst_0]
    bool_0 = True
    tuple_0 = (bst_0, list_0, bool_0, bst_0)
    node_5 = module_0.Node(tuple_0)
    int_0 = 189
    int_1 = 943
    set_2 = {int_0, int_1}
    node_6 = module_0.Node(set_2)
    var_2 = node_6.__repr__()
    node_7 = module_0.Node(var_2)
    int_2 = -2016
    list_1 = [int_2, int_2]
    node_8 = module_0.Node(list_1)
    bst_1 = module_0.Bst()
    node_9 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = node_9.__repr__()
    bst_3 = module_0.Bst()
    node_10 = module_0.Node(bst_2)
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst(bst_1)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_11 = module_0.Node(none_type_0)
    bool_1 = False
    var_6 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    var_8 = var_7.__repr__()
    str_3 = " \x0c^"
    node_12 = module_0.Node(str_3)
    var_9 = node_12.__repr__()
    bst_7 = module_0.Bst()


def test_case_1356():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is False
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(var_3)
    var_4 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_5 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_6 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_4 = module_0.Bst()
    var_8 = var_6.__repr__()
    node_4 = module_0.Node(var_8)
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_5 = module_0.Node(list_0)
    bst_5 = module_0.Bst()
    list_1 = []
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(list_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_9)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    int_1 = 2253
    node_8 = module_0.Node(int_1)
    var_10 = node_8.__repr__()
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    var_12 = bst_11.insert(node_9)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    list_2 = []
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(list_2)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_13)
    node_11 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    none_type_3 = None
    node_12 = module_0.Node(none_type_3)
    bool_1 = False
    var_14 = bst_14.insert(bool_1)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_12.__repr__()
    str_0 = ""
    bst_15 = module_0.Bst(str_0)
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()


def test_case_1357():
    bst_0 = module_0.Bst()
    tuple_0 = (bst_0,)
    node_0 = module_0.Node(tuple_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_3 = module_0.Bst()
    int_0 = 869
    node_2 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    str_0 = ""
    bst_6 = module_0.Bst(str_0)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    int_1 = -1464
    var_4 = bst_8.insert(int_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_5 = node_5.__repr__()
    bool_1 = True
    bst_10 = module_0.Bst()
    var_6 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(bst_10)


def test_case_1358():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_0 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_5 = module_0.Bst(var_0)
    int_0 = 3820
    tuple_0 = (int_0,)
    node_2 = module_0.Node(tuple_0)
    var_2 = node_2.__repr__()
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()


def test_case_1359():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_3)


def test_case_1360():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_1)
    bst_0 = module_0.Bst()
    node_3 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_3.__repr__()
    node_4 = module_0.Node(bst_1)
    var_3 = node_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(bst_4)
    bytes_0 = b"\x16\xf4"
    node_9 = module_0.Node(bytes_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_10 = module_0.Node(dict_0)
    none_type_2 = None
    bst_5 = module_0.Bst(none_type_2)
    bst_6 = module_0.Bst()


def test_case_1361():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = node_2.__repr__()
    bst_1 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_3 = module_0.Node(set_1)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    var_2 = node_4.__repr__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_2 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_5 = module_0.Node(set_2)
    var_5 = node_5.__repr__()
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    node_7 = module_0.Node(node_5)
    bst_4 = module_0.Bst()
    node_8 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_8)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_6.data).__module__}.{type(var_6.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_6.left is None
    assert var_6.right is None
    assert var_6.parent is None
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    var_9 = var_7.__repr__()
    bool_1 = False
    node_9 = module_0.Node(bool_1)
    var_10 = node_9.__repr__()
    int_0 = 2253
    node_10 = module_0.Node(int_0)
    var_11 = node_10.__repr__()
    bst_7 = module_0.Bst(var_11)
    bst_8 = module_0.Bst()
    var_12 = var_3.__repr__()


def test_case_1362():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(var_3)
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_6 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(var_6)
    var_8 = node_6.__repr__()
    var_9 = node_1.__repr__()


def test_case_1363():
    str_0 = " \x0c^"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_1 = module_0.Node(bytes_0)
    var_1 = node_1.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    list_0 = [bst_0, bst_0, bst_0]
    bool_0 = True
    tuple_0 = (bst_0, list_0, bool_0, bst_0)
    node_2 = module_0.Node(tuple_0)
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(var_4)
    list_1 = []
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(list_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_6 = node_5.__repr__()
    var_7 = node_5.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_8 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    node_7 = module_0.Node(bool_1)
    var_10 = node_7.__repr__()
    var_11 = var_8.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_12 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_14 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_9 = module_0.Bst(var_13)
    bool_2 = False
    node_8 = module_0.Node(bool_2)
    var_16 = node_8.__repr__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__repr__()
    node_9 = module_0.Node(var_16)
    var_19 = var_3.__repr__()


def test_case_1364():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()
    var_3 = var_0.__repr__()
    object_0 = module_1.object()
    node_2 = module_0.Node(object_0)
    bst_1 = module_0.Bst()
    var_4 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_7 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_6.__repr__()
    node_4 = module_0.Node(bst_1)


def test_case_1365():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = var_3.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    var_7 = bst_5.insert(node_4)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_7)
    var_8 = node_5.__repr__()
    var_9 = var_6.__repr__()
    bst_6 = module_0.Bst(var_9)


def test_case_1366():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    object_0 = module_1.object()
    node_2 = module_0.Node(object_0)
    var_1 = node_2.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(bst_1)
    node_4 = module_0.Node(node_1)


def test_case_1367():
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_3 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_3.__repr__()
    node_4 = module_0.Node(bst_1)
    list_0 = []
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    var_4 = node_5.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_5)
    bool_0 = True
    set_1 = {bool_0, bool_0}
    bst_5 = module_0.Bst(set_1)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_8.__repr__()
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()


def test_case_1368():
    object_0 = module_1.object()
    node_0 = module_0.Node(object_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst(bst_0)
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    var_3 = node_3.__repr__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    int_0 = -1464
    var_9 = bst_5.insert(int_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    var_10 = bst_6.insert(node_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_8 = module_0.Bst()
    var_13 = var_11.__repr__()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    dict_0 = {node_7: none_type_0, node_7: none_type_0}
    bst_9 = module_0.Bst(dict_0)
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_8 = module_0.Node(bytes_0)
    var_14 = node_8.__repr__()
    list_0 = []
    bst_10 = module_0.Bst()
    var_15 = bst_10.insert(list_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_15)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_0: float_0, float_0: complex_0}
    node_10 = module_0.Node(dict_1)
    none_type_1 = None
    bst_11 = module_0.Bst(none_type_1)
    none_type_2 = None
    bst_12 = module_0.Bst(none_type_2)
    bst_13 = module_0.Bst(dict_1)
    bst_14 = module_0.Bst()


def test_case_1369():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    var_2 = var_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = var_3.__repr__()
    bst_6 = module_0.Bst()
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_3 = module_0.Node(bytes_0)
    var_6 = node_3.__repr__()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_7 = module_0.Bst()
    tuple_0 = (bst_7,)
    tuple_1 = (dict_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    node_6 = module_0.Node(var_1)


def test_case_1370():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()
    node_2 = module_0.Node(node_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    str_1 = " 4'"
    node_4 = module_0.Node(str_1)
    bytes_0 = b"<S\x0b\xb4A[\xb7\x02\xac\x90\xea'i"
    node_5 = module_0.Node(bytes_0)
    bool_1 = True
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = "UFO[|LK]k_j$\x0c=.rF{"
    node_6 = module_0.Node(str_2)
    var_4 = node_6.__repr__()
    bst_2 = module_0.Bst()


def test_case_1371():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_4 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst(bst_5)
    int_1 = -1138
    node_7 = module_0.Node(int_1)
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    var_9 = node_8.__repr__()
    var_10 = node_8.__repr__()
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(bst_9)
    var_12 = var_8.__repr__()


def test_case_1372():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_2 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    bst_5 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_1)
    int_1 = 3317
    node_6 = module_0.Node(int_1)
    var_5 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_7.__repr__()
    var_8 = var_6.__repr__()
    bst_8 = module_0.Bst()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()


def test_case_1373():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    int_0 = 869
    node_1 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    int_1 = 2253
    node_2 = module_0.Node(int_1)
    var_2 = node_2.__repr__()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_4 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst()
    tuple_0 = (node_4, var_5, var_6, var_6)
    node_5 = module_0.Node(tuple_0)
    bst_9 = module_0.Bst()


def test_case_1374():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    int_0 = 2253
    node_1 = module_0.Node(int_0)
    var_1 = node_1.__repr__()
    bst_0 = module_0.Bst(var_1)
    bst_1 = module_0.Bst()
    int_1 = 2029
    node_2 = module_0.Node(int_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bst_3 = module_0.Bst()
    var_5 = node_3.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    str_0 = ""
    bst_5 = module_0.Bst(str_0)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(none_type_1)


def test_case_1375():
    int_0 = -1138
    node_0 = module_0.Node(int_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()


def test_case_1376():
    int_0 = -1138
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_2)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_4 = module_0.Bst(set_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()


def test_case_1377():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    var_2 = node_0.__repr__()
    bytes_0 = b"\x16\xf4"
    node_3 = module_0.Node(bytes_0)
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_4 = module_0.Node(list_0)
    int_1 = 869
    node_5 = module_0.Node(int_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_6.__repr__()
    bst_3 = module_0.Bst()


def test_case_1378():
    bst_0 = module_0.Bst()
    list_0 = [bst_0, bst_0, bst_0]
    bool_0 = True
    tuple_0 = (bst_0, list_0, bool_0, bst_0)
    node_0 = module_0.Node(tuple_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = var_0.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_1.insert(bst_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bytes_0 = b"\x16\xf4"
    node_2 = module_0.Node(bytes_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(var_5)
    bst_8 = module_0.Bst()
    bool_1 = False
    bst_9 = module_0.Bst(bool_1)
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    int_0 = -2016
    list_1 = [int_0, int_0]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(var_3)


def test_case_1379():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_3)
    list_0 = []
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_4)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    node_5 = module_0.Node(bst_5)
    var_7 = node_3.__repr__()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_6 = module_0.Bst()
    tuple_0 = (bst_6,)
    tuple_1 = (dict_0, tuple_0)
    node_6 = module_0.Node(tuple_1)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    var_10 = node_7.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst(bst_10)


def test_case_1380():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst(var_1)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst(node_4)
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_7 = module_0.Bst()
    tuple_0 = (bst_7,)
    tuple_1 = (dict_0, tuple_0)
    node_5 = module_0.Node(tuple_1)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    bst_9 = module_0.Bst()
    var_8 = node_6.__repr__()
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_9 = bst_10.insert(bool_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst()
    var_11 = var_10.__repr__()
    node_8 = module_0.Node(var_5)


def test_case_1381():
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(var_0)


def test_case_1382():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    node_4 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_5 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_6 = bst_6.insert(node_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_0 = False
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(node_8)
    node_10 = module_0.Node(node_9)
    var_7 = node_10.__repr__()
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    bool_1 = False
    var_8 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_12 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_12.__repr__()
    bst_10 = module_0.Bst()
    node_13 = module_0.Node(var_9)
    bst_11 = module_0.Bst()
    node_14 = module_0.Node(node_13)
    bst_12 = module_0.Bst()


def test_case_1383():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_2)
    int_1 = 869
    node_3 = module_0.Node(int_1)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(node_5)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_8.__repr__()
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_8)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_14 = module_0.Bst(var_10)
    str_0 = " 4'"
    node_10 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_11 = module_0.Node(set_0)
    var_13 = node_11.__repr__()
    node_12 = module_0.Node(str_0)
    var_14 = var_6.__repr__()


def test_case_1384():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    node_1 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_5 = module_0.Bst()
    var_6 = var_4.__repr__()
    int_0 = 2253
    node_3 = module_0.Node(int_0)
    var_7 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_4.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(var_8)
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(node_5)
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_7.__repr__()
    var_12 = node_7.__repr__()
    bst_12 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    bool_0 = False
    var_13 = bst_12.insert(bool_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_8.__repr__()
    node_9 = module_0.Node(none_type_0)
    complex_0 = 102.8 - 272.1151j
    bst_13 = module_0.Bst()
    var_15 = bst_13.insert(complex_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_14 = module_0.Bst()


def test_case_1385():
    object_0 = module_1.object()
    node_0 = module_0.Node(object_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()


def test_case_1386():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    bool_1 = True
    set_1 = {bool_1, bool_1}
    bst_1 = module_0.Bst(set_1)
    int_0 = 3820
    tuple_0 = (int_0,)
    node_2 = module_0.Node(tuple_0)
    var_3 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    int_1 = -1464
    var_4 = bst_2.insert(int_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_4.data == -1464
    assert var_4.left is None
    assert var_4.right is None
    assert var_4.parent is None
    var_5 = var_3.__repr__()


def test_case_1387():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    float_0 = -131.8
    bst_0 = module_0.Bst(float_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_3 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_4)
    var_5 = node_3.__repr__()
    var_6 = var_3.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    node_5 = module_0.Node(bool_0)
    var_9 = node_5.__repr__()
    node_6 = module_0.Node(node_5)
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_7 = module_0.Node(set_0)
    var_10 = node_7.__repr__()
    node_8 = module_0.Node(var_10)
    bst_4 = module_0.Bst()
    node_9 = module_0.Node(bst_4)
    var_11 = bst_4.insert(node_9)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()


def test_case_1388():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    str_1 = ""
    bst_3 = module_0.Bst(str_1)
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_4 = node_2.__repr__()
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_1 = False
    var_5 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    object_0 = module_1.object()
    node_4 = module_0.Node(object_0)
    int_0 = 2253
    node_5 = module_0.Node(int_0)
    var_7 = node_5.__repr__()
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    var_9 = bst_9.insert(node_6)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    var_10 = node_7.__repr__()
    str_2 = "w8<H^+~qIrArq]1_$"
    node_8 = module_0.Node(str_2)
    bst_11 = module_0.Bst()
    var_11 = var_0.__repr__()


def test_case_1389():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    var_3 = var_1.__repr__()
    var_4 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_2 = module_0.Node(var_5)
    list_0 = []
    bst_3 = module_0.Bst()
    var_7 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_7)
    bst_4 = module_0.Bst()
    var_8 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_9 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_4 = module_0.Node(var_9)
    var_11 = var_10.__repr__()
    str_0 = "7"
    node_5 = module_0.Node(str_0)
    node_6 = module_0.Node(node_2)


def test_case_1390():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst(node_2)
    str_1 = " \x0c^"
    node_3 = module_0.Node(str_1)
    var_2 = node_3.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_4 = module_0.Node(var_4)
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_7 = module_0.Node(var_6)
    int_1 = 1235
    dict_0 = {int_1: int_1, int_1: int_1}
    node_8 = module_0.Node(dict_0)
    var_7 = node_8.__repr__()
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bool_1 = False
    var_9 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_6 = module_0.Bst()
    tuple_0 = (node_9, var_9, var_10, var_10)
    node_10 = module_0.Node(tuple_0)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_11)
    bool_2 = True
    set_0 = {bool_2, bool_2}
    bst_8 = module_0.Bst(set_0)
    bst_9 = module_0.Bst()
    bool_3 = False
    bst_10 = module_0.Bst(bool_3)
    bst_11 = module_0.Bst(str_1)


def test_case_1391():
    int_0 = -1138
    node_0 = module_0.Node(int_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_0 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_4 = module_0.Bst()
    var_1 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bytes_0 = b"\x16\xf4"
    node_4 = module_0.Node(bytes_0)
    var_3 = node_4.__repr__()


def test_case_1392():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    int_0 = 2029
    node_1 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    node_2 = module_0.Node(var_2)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_3 = module_0.Node(set_0)
    var_3 = node_3.__repr__()
    bst_1 = module_0.Bst(var_3)
    var_4 = node_3.__repr__()
    bst_2 = module_0.Bst()


def test_case_1393():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = var_3.__repr__()
    bst_6 = module_0.Bst()
    var_6 = bst_4.insert(bst_5)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_6)
    node_4 = module_0.Node(var_0)


def test_case_1394():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_0.__repr__()
    str_0 = "vOK:\\f"
    node_1 = module_0.Node(str_0)
    var_2 = var_1.__repr__()


def test_case_1395():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_6.__repr__()
    bst_6 = module_0.Bst()


def test_case_1396():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    str_0 = " 4'"
    node_2 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_3.__repr__()
    node_4 = module_0.Node(bool_0)
    var_3 = node_4.__repr__()
    node_5 = module_0.Node(node_4)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    node_7 = module_0.Node(bst_4)
    var_6 = var_4.__repr__()
    int_0 = -1138
    node_8 = module_0.Node(int_0)
    bool_1 = False
    node_9 = module_0.Node(bool_1)
    bst_6 = module_0.Bst()
    node_10 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_11 = module_0.Node(bst_9)
    var_7 = bst_9.insert(node_11)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_11 = module_0.Bst()
    var_10 = var_8.__repr__()
    node_12 = module_0.Node(var_10)
    bst_12 = module_0.Bst()


def test_case_1397():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    node_1 = module_0.Node(var_3)
    list_0 = []
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    list_1 = []
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(list_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    var_6 = node_4.__repr__()
    int_0 = 2253
    node_5 = module_0.Node(int_0)
    var_7 = node_5.__repr__()
    bst_8 = module_0.Bst(var_7)
    int_1 = 3820
    tuple_0 = (int_1,)
    node_6 = module_0.Node(tuple_0)
    var_8 = node_6.__repr__()
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_12 = bst_10.insert(bool_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_11 = module_0.Bst()
    var_14 = var_13.__repr__()
    bool_1 = False
    node_8 = module_0.Node(bool_1)
    var_15 = node_8.__repr__()
    int_2 = 2253
    node_9 = module_0.Node(int_2)
    var_16 = node_9.__repr__()
    bst_12 = module_0.Bst(var_16)
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_10 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = node_10.__repr__()
    bst_16 = module_0.Bst()
    node_11 = module_0.Node(var_17)
    bst_17 = module_0.Bst()
    bst_18 = module_0.Bst()
    bst_19 = module_0.Bst()


def test_case_1398():
    dict_0 = {}
    bst_0 = module_0.Bst(dict_0)


def test_case_1399():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    var_0 = node_0.__repr__()
    bool_1 = True
    float_1 = -128.5329
    dict_1 = {bool_1: float_1}
    tuple_0 = (dict_1, bool_1)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(tuple_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_1.data) == 2
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    set_1 = {bst_3, node_1}
    bst_4 = module_0.Bst(set_1)
    bst_5 = module_0.Bst()
    list_0 = [bst_5, bst_5, bst_5]
    bool_2 = True
    tuple_1 = (bst_5, list_0, bool_2, bst_5)
    node_2 = module_0.Node(tuple_1)
    list_1 = []
    bst_6 = module_0.Bst()
    var_2 = bst_6.insert(list_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    bst_7 = module_0.Bst()
    var_3 = node_3.__repr__()
    str_0 = "vOK:\\f"
    node_4 = module_0.Node(str_0)
    var_4 = var_3.__repr__()
    int_0 = -2466
    dict_2 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_8 = module_0.Bst()
    tuple_2 = (bst_8,)
    tuple_3 = (dict_2, tuple_2)
    node_5 = module_0.Node(tuple_3)
    bst_9 = module_0.Bst()
    var_5 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_1}
    node_6 = module_0.Node(set_2)
    var_6 = node_6.__repr__()
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    node_8 = module_0.Node(node_6)
    bst_11 = module_0.Bst()
    var_7 = bst_11.insert(dict_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1400():
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__repr__()
    dict_0 = {}
    bst_0 = module_0.Bst(dict_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    str_0 = ""
    bst_2 = module_0.Bst(str_0)
    var_3 = var_1.__repr__()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_7 = node_2.__repr__()
    str_1 = " 4'"
    node_3 = module_0.Node(str_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    str_2 = "vOK:\\f"
    node_5 = module_0.Node(str_2)
    node_6 = module_0.Node(str_2)
    node_7 = module_0.Node(bool_0)


def test_case_1401():
    int_0 = 3820
    tuple_0 = (int_0,)
    node_0 = module_0.Node(tuple_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst(bst_0)
    int_1 = 869
    node_3 = module_0.Node(int_1)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_1 = (dict_0, bool_1)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(tuple_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()


def test_case_1402():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_0.__repr__()
    bst_2 = module_0.Bst(var_4)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_1 = module_0.Node(dict_0)
    none_type_1 = None
    bst_3 = module_0.Bst(none_type_1)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_2.__repr__()
    var_8 = node_2.__repr__()
    node_3 = module_0.Node(var_7)
    node_4 = module_0.Node(var_2)


def test_case_1403():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    var_3 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    var_9 = var_8.__repr__()
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    var_10 = node_5.__repr__()
    int_0 = 2253
    node_6 = module_0.Node(int_0)
    var_11 = node_6.__repr__()
    bst_6 = module_0.Bst(var_11)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    var_12 = node_7.__repr__()
    var_13 = node_7.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_0)
    int_1 = 3317
    node_9 = module_0.Node(int_1)
    var_14 = node_8.__repr__()
    var_15 = node_4.__repr__()


def test_case_1404():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_1 = module_0.Bst(str_1)
    node_1 = module_0.Node(bst_1)
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_2 = module_0.Node(list_0)
    bst_2 = module_0.Bst()
    int_1 = 3317
    node_3 = module_0.Node(int_1)
    int_2 = -2016
    list_1 = [int_2, int_2]
    node_4 = module_0.Node(list_1)
    bst_3 = module_0.Bst()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_5 = module_0.Node(dict_0)
    bst_4 = module_0.Bst()
    var_1 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_5 = module_0.Bst()
    var_3 = var_1.__repr__()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_2)
    var_4 = node_6.__repr__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_7 = module_0.Node(var_8)
    var_10 = var_9.__repr__()
    str_3 = "7"
    node_8 = module_0.Node(str_3)
    list_2 = []
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(list_2)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_11)
    bst_9 = module_0.Bst()
    var_12 = node_9.__repr__()
    var_13 = var_12.__repr__()


def test_case_1405():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(float_0)


def test_case_1406():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_0 = (dict_0, bool_1)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(tuple_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst(bst_1)


def test_case_1407():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(var_1)
    bst_4 = module_0.Bst()
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_4 = node_3.__repr__()
    var_5 = var_4.__repr__()
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(node_5)
    var_6 = node_6.__repr__()
    int_1 = 869
    node_7 = module_0.Node(int_1)
    int_2 = -1138
    node_8 = module_0.Node(int_2)
    bool_1 = False
    node_9 = module_0.Node(bool_1)
    bst_6 = module_0.Bst()
    node_10 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bool_2 = False
    node_11 = module_0.Node(bool_2)
    node_12 = module_0.Node(node_11)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_13 = module_0.Node(none_type_1)
    bool_3 = False
    var_7 = bst_9.insert(bool_3)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()


def test_case_1408():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_4 = node_0.__repr__()
    node_1 = module_0.Node(var_4)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(node_3)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_1 = False
    var_5 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    bst_7 = module_0.Bst()


def test_case_1409():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst(bool_0)


def test_case_1410():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    list_0 = [bst_1, bst_1, bst_1]
    bool_0 = True
    tuple_0 = (bst_1, list_0, bool_0, bst_1)
    node_2 = module_0.Node(tuple_0)
    str_1 = "vOK:\\f"
    node_3 = module_0.Node(str_1)
    list_1 = []
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(list_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == []
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_4 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    var_2 = node_4.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_3 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(var_4)
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_2 = False
    var_5 = bst_6.insert(bool_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_7.__repr__()
    node_8 = module_0.Node(bool_2)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_9 = module_0.Node(bool_1)


def test_case_1411():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_0 = []
    node_3 = module_0.Node(list_0)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_1 = False
    var_5 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    node_5 = module_0.Node(bool_1)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_6 = module_0.Node(var_8)
    node_7 = module_0.Node(node_6)
    bst_6 = module_0.Bst()


def test_case_1412():
    str_0 = "vOK:\\f"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_4 = module_0.Node(str_1)
    var_8 = bst_4.insert(var_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1413():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_1)
    var_3 = var_1.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_4 = node_3.__repr__()
    var_5 = bst_2.insert(str_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_6 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    var_9 = var_7.__repr__()
    bst_6 = module_0.Bst()


def test_case_1414():
    str_0 = "vOK:\\f"
    node_0 = module_0.Node(str_0)
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    var_3 = bst_2.insert(var_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1415():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    object_0 = module_1.object()
    node_1 = module_0.Node(object_0)
    var_1 = node_1.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_4.data is False
    assert var_4.left is None
    assert var_4.right is None
    assert var_4.parent is None
    node_3 = module_0.Node(bst_1)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    node_6 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1416():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    var_3 = var_0.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_3 = module_0.Node(dict_0)
    none_type_0 = None
    bst_2 = module_0.Bst(none_type_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()


def test_case_1417():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    str_1 = ""
    bst_1 = module_0.Bst(str_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(var_3)
    var_5 = node_2.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_9 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    bst_13 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    var_11 = var_10.__repr__()
    bst_14 = module_0.Bst(bst_11)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_2)
    bst_15 = module_0.Bst()
    var_12 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    list_0 = []
    bst_16 = module_0.Bst()
    var_14 = bst_16.insert(list_0)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_14)
    var_15 = var_14.__repr__()
    bst_17 = module_0.Bst(var_5)


def test_case_1418():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    node_0 = module_0.Node(bst_0)
    var_0 = node_0.__repr__()


def test_case_1419():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    int_0 = -1138
    node_2 = module_0.Node(int_0)
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(none_type_0)


def test_case_1420():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_1 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_2 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    var_3 = bst_6.insert(node_3)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_2)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_4 = node_5.__repr__()
    var_5 = var_4.__repr__()
    int_0 = 2253
    node_6 = module_0.Node(int_0)
    var_6 = node_6.__repr__()
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    var_8 = bst_9.insert(node_7)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_0 = False
    var_9 = bst_11.insert(bool_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_12 = module_0.Bst()
    tuple_0 = (node_8, var_9, var_10, var_10)
    node_9 = module_0.Node(tuple_0)
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_11 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    var_13 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_17 = module_0.Bst(var_12)
    str_0 = "UFO[|LK]k_j$\x0c=.rF{"
    node_10 = module_0.Node(str_0)
    var_15 = node_10.__repr__()
    bst_18 = module_0.Bst()
    node_11 = module_0.Node(bst_18)
    bst_19 = module_0.Bst()
    var_16 = bst_19.insert(bst_19)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_11.__repr__()
    bst_20 = module_0.Bst()
    var_18 = node_11.__repr__()
    node_12 = module_0.Node(var_18)
    var_19 = node_10.__repr__()


def test_case_1421():
    str_0 = "UFO[|LK]k_j$\x0c=.rF{"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_3 = node_1.__repr__()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    var_4 = node_2.__repr__()
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(var_5)
    var_7 = node_3.__repr__()
    bst_4 = module_0.Bst()
    int_0 = 2029
    node_5 = module_0.Node(int_0)
    bst_5 = module_0.Bst()
    list_0 = [bst_5, bst_5, bst_5]
    bool_1 = True
    tuple_0 = (bst_5, list_0, bool_1, bst_5)
    node_6 = module_0.Node(tuple_0)
    var_8 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = bst_5.insert(bool_1)
    assert (
        f"{type(var_8.left).__module__}.{type(var_8.left).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_9.parent).__module__}.{type(var_9.parent).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_7 = module_0.Node(str_2)
    int_1 = 2253
    node_8 = module_0.Node(int_1)
    var_10 = node_8.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    var_13 = node_9.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_14 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_10.__repr__()
    bst_12 = module_0.Bst()
    node_11 = module_0.Node(bst_11)
    var_16 = var_15.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_12 = module_0.Node(bst_14)
    var_17 = bst_14.insert(node_12)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(var_17)
    node_14 = module_0.Node(bst_4)


def test_case_1422():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    var_3 = var_0.__repr__()
    int_0 = 2029
    node_1 = module_0.Node(int_0)
    bst_2 = module_0.Bst()
    list_0 = [bst_2, bst_2, bst_2]
    bool_1 = True
    tuple_0 = (bst_2, list_0, bool_1, bst_2)
    node_2 = module_0.Node(tuple_0)
    var_4 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = bst_2.insert(bool_1)
    assert (
        f"{type(var_4.left).__module__}.{type(var_4.left).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_5.parent).__module__}.{type(var_5.parent).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_1 = 189
    int_2 = 943
    set_0 = {int_1, int_2}
    node_3 = module_0.Node(set_0)
    var_6 = node_3.__repr__()
    node_4 = module_0.Node(var_6)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_2 = False
    var_7 = bst_3.insert(bool_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(var_9)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_11 = node_6.__repr__()


def test_case_1423():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(node_2)
    var_1 = node_3.__repr__()
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst(var_2)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_5 = module_0.Node(var_4)
    var_6 = var_4.__repr__()
    var_7 = var_6.__repr__()


def test_case_1424():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    set_0 = {bst_0, node_0}
    bst_1 = module_0.Bst(set_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_0 = node_0.__repr__()


def test_case_1425():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    int_0 = 869
    node_1 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    var_4 = node_2.__repr__()
    bst_7 = module_0.Bst()
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = bst_6.insert(bst_8)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )


def test_case_1426():
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_0 = [bytes_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)


def test_case_1427():
    object_0 = module_1.object()
    node_0 = module_0.Node(object_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_1 = node_2.__repr__()
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    var_2 = node_3.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    node_5 = module_0.Node(var_3)
    object_1 = module_1.object()
    node_6 = module_0.Node(object_1)
    var_4 = node_6.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    node_8 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_8.__repr__()
    node_9 = module_0.Node(bst_4)
    var_7 = node_7.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_6 = module_0.Bst()
    node_10 = module_0.Node(bst_6)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_2)
    var_10 = node_11.__repr__()
    str_3 = "vOK:\\f"
    node_12 = module_0.Node(str_3)
    dict_0 = {}
    node_13 = module_0.Node(dict_0)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_14 = module_0.Node(none_type_2)
    bool_1 = False
    var_11 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_8 = module_0.Bst(bool_1)
    bst_9 = module_0.Bst()
    node_15 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_15.__repr__()
    bst_11 = module_0.Bst()
    var_15 = node_15.__repr__()
    node_16 = module_0.Node(var_15)
    str_4 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_4}
    node_17 = module_0.Node(set_1)
    var_16 = node_17.__repr__()
    node_18 = module_0.Node(var_16)
    bst_12 = module_0.Bst()


def test_case_1428():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    var_2 = var_1.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()


def test_case_1429():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    object_0 = module_1.object()
    node_4 = module_0.Node(object_0)
    var_3 = node_4.__repr__()
    list_0 = []
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bst_6 = module_0.Bst()
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_7 = module_0.Bst(set_0)
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(var_6)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_1 = False
    var_8 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    str_0 = ""
    bst_11 = module_0.Bst(str_0)
    var_10 = var_8.__repr__()
    str_1 = ""
    bst_12 = module_0.Bst(str_1)
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    bst_13 = module_0.Bst()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    bool_3 = False
    var_11 = bst_13.insert(bool_3)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_10 = module_0.Node(bytes_0)
    node_11 = module_0.Node(var_4)


def test_case_1430():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_4 = node_3.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_4 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    var_7 = var_6.__repr__()
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_7 = module_0.Node(dict_0)
    var_8 = node_7.__repr__()
    var_9 = var_8.__repr__()
    node_8 = module_0.Node(node_7)
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    var_10 = node_10.__repr__()
    bst_9 = module_0.Bst(var_10)
    bool_0 = False
    node_11 = module_0.Node(bool_0)
    var_11 = node_11.__repr__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__repr__()
    list_0 = []
    node_12 = module_0.Node(list_0)
    bool_1 = False
    node_13 = module_0.Node(bool_1)
    node_14 = module_0.Node(node_13)
    node_15 = module_0.Node(node_14)
    var_14 = node_15.__repr__()
    node_16 = module_0.Node(node_15)


def test_case_1431():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst(var_0)
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(node_4)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    var_2 = bst_4.insert(node_6)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_5 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(var_5)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_9 = module_0.Node(str_0)
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_7 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_10.__repr__()
    node_11 = module_0.Node(bst_12)
    bst_13 = module_0.Bst(node_11)
    bst_14 = module_0.Bst()
    node_12 = module_0.Node(bst_14)
    set_0 = {bst_14, node_12}
    bst_15 = module_0.Bst(set_0)
    bst_16 = module_0.Bst()
    node_13 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_9 = node_12.__repr__()
    int_0 = 3317
    node_14 = module_0.Node(int_0)
    bst_18 = module_0.Bst()
    none_type_0 = None
    node_15 = module_0.Node(none_type_0)
    bool_2 = True
    float_0 = -128.5329
    dict_0 = {bool_2: float_0}
    tuple_0 = (dict_0, bool_2)
    bst_19 = module_0.Bst()
    var_10 = bst_19.insert(tuple_0)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_15.__repr__()


def test_case_1432():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()
    var_3 = var_0.__repr__()
    node_2 = module_0.Node(node_1)


def test_case_1433():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    int_0 = 2029
    node_2 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    list_0 = [bst_1, bst_1, bst_1]
    bool_0 = True
    tuple_0 = (bst_1, list_0, bool_0, bst_1)
    node_3 = module_0.Node(tuple_0)
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(var_0.left).__module__}.{type(var_0.left).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = "{&:T\r/p-BHx9-lgMP"
    bst_2 = module_0.Bst(str_2)
    node_4 = module_0.Node(bst_2)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_5 = module_0.Node(bytes_0)
    var_2 = node_5.__repr__()
    var_3 = var_2.__repr__()
    node_6 = module_0.Node(node_4)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_3}
    node_7 = module_0.Node(set_1)
    var_4 = node_7.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst(node_1)


def test_case_1434():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst(var_0)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(bool_1)
    bst_3 = module_0.Bst()
    var_4 = node_2.__repr__()


def test_case_1435():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(bst_0)
    str_0 = "\tD\rb9y@AZRea"
    node_4 = module_0.Node(str_0)
    var_1 = node_4.__repr__()
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_5.__repr__()
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_3)
    var_4 = var_3.__repr__()
    int_0 = 2253
    node_7 = module_0.Node(int_0)
    var_5 = node_7.__repr__()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_8)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()


def test_case_1436():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(node_3)
    var_2 = node_4.__repr__()
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    var_5 = var_4.__repr__()


def test_case_1437():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    var_3 = node_2.__repr__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_3)
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    bst_2 = module_0.Bst()


def test_case_1438():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = node_1.__repr__()
    var_3 = var_2.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    str_1 = " 4'"
    node_3 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_4 = module_0.Node(set_0)
    var_4 = node_4.__repr__()
    node_5 = module_0.Node(str_1)
    object_0 = module_1.object()
    node_6 = module_0.Node(object_0)
    dict_0 = {}
    node_7 = module_0.Node(dict_0)
    bst_1 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_0 = False
    var_5 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_5.data is False
    assert var_5.left is None
    assert var_5.right is None
    assert var_5.parent is None
    var_6 = var_5.__repr__()
    bst_2 = module_0.Bst()
    node_9 = module_0.Node(var_6)
    node_10 = module_0.Node(none_type_1)
    var_7 = node_10.__repr__()


def test_case_1439():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    node_1 = module_0.Node(bst_0)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    var_1 = node_1.__repr__()


def test_case_1440():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_0 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = node_1.__repr__()
    node_2 = module_0.Node(var_1)
    var_3 = var_1.__repr__()
    var_4 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_6 = module_0.Bst()
    int_0 = 869
    node_4 = module_0.Node(int_0)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    str_0 = ""
    bst_9 = module_0.Bst(str_0)
    var_9 = var_7.__repr__()
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_6 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    list_0 = []
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(list_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_14)
    bst_13 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bst_14 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_9 = module_0.Node(set_0)
    var_15 = node_9.__repr__()
    bst_15 = module_0.Bst(var_15)
    var_16 = node_9.__repr__()
    var_17 = node_2.__repr__()


def test_case_1441():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    list_1 = [bst_1, bst_1, bst_1]
    bool_0 = True
    tuple_0 = (bst_1, list_1, bool_0, bst_1)
    node_2 = module_0.Node(tuple_0)
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    none_type_0 = None
    bst_5 = module_0.Bst(none_type_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_6 = module_0.Bst(str_0)
    bst_7 = module_0.Bst()
    str_1 = "\tD\rb9y@AZRea"
    node_6 = module_0.Node(str_1)
    var_6 = node_6.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    var_9 = var_7.__repr__()
    bst_10 = module_0.Bst()
    var_10 = bst_8.insert(bst_9)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_10)
    int_0 = 3820
    tuple_1 = (int_0,)
    node_9 = module_0.Node(tuple_1)
    var_11 = node_9.__repr__()
    bool_1 = False
    node_10 = module_0.Node(bool_1)
    node_11 = module_0.Node(node_10)
    node_12 = module_0.Node(node_11)
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_13 = module_0.Node(none_type_1)
    bool_2 = False
    var_12 = bst_11.insert(bool_2)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_13.__repr__()
    node_14 = module_0.Node(bool_2)
    node_15 = module_0.Node(node_6)


def test_case_1442():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    bool_1 = False
    bst_2 = module_0.Bst(bool_1)
    int_0 = 2253
    node_1 = module_0.Node(int_0)
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_4)
    bool_2 = True
    set_0 = {bool_2, bool_2}
    bst_4 = module_0.Bst(set_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    var_7 = var_5.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    tuple_0 = (bst_11,)
    node_5 = module_0.Node(tuple_0)
    bst_12 = module_0.Bst()


def test_case_1443():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    node_0 = module_0.Node(bst_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_0}
    node_2 = module_0.Node(set_1)
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    var_3 = node_3.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_4 = module_0.Node(dict_0)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    bst_5 = module_0.Bst()
    var_6 = node_5.__repr__()
    node_6 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    int_0 = -1464
    var_10 = bst_7.insert(int_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_7)
    var_11 = var_10.__repr__()


def test_case_1444():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst(node_1)


def test_case_1445():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_7 = module_0.Bst()
    var_7 = node_4.__repr__()
    node_5 = module_0.Node(var_7)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_6 = module_0.Node(set_1)
    var_8 = node_6.__repr__()
    bst_8 = module_0.Bst(var_8)
    var_9 = var_5.__repr__()


def test_case_1446():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    dict_0 = {node_0: none_type_0, node_0: none_type_0}
    bst_0 = module_0.Bst(dict_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    var_0 = node_2.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    bool_1 = True
    set_1 = {bool_1, bool_1}
    bst_2 = module_0.Bst(set_1)
    node_4 = module_0.Node(set_1)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_0: float_0, float_0: complex_0}
    node_5 = module_0.Node(dict_1)
    none_type_1 = None
    bst_3 = module_0.Bst(none_type_1)
    none_type_2 = None
    bst_4 = module_0.Bst(none_type_2)
    bst_5 = module_0.Bst(dict_1)
    int_0 = 189
    int_1 = 943
    set_2 = {int_0, int_1}
    node_6 = module_0.Node(set_2)
    var_3 = node_6.__repr__()
    node_7 = module_0.Node(var_3)
    bst_6 = module_0.Bst()
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4.data).__module__}.{type(var_4.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_4.left is None
    assert var_4.right is None
    assert var_4.parent is None
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bst_8 = module_0.Bst()
    var_7 = node_8.__repr__()
    bst_9 = module_0.Bst()
    tuple_0 = (bst_9,)
    node_9 = module_0.Node(tuple_0)
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    var_8 = bst_10.insert(node_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_12 = module_0.Bst()
    var_11 = var_9.__repr__()
    bst_13 = module_0.Bst()
    var_12 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    var_14 = var_12.__repr__()
    bst_14 = module_0.Bst()


def test_case_1447():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_0 = [bytes_0]
    node_1 = module_0.Node(list_0)
    str_1 = "vOK:\\f"
    node_2 = module_0.Node(str_1)
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(node_4)
    var_1 = node_5.__repr__()
    bytes_1 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_1 = [bytes_1]
    node_6 = module_0.Node(list_1)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bool_1 = True
    set_1 = {bool_1, bool_1}
    bst_0 = module_0.Bst(set_1)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(var_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bytes_2 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_8 = module_0.Node(bytes_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bool_2 = False
    var_5 = bst_4.insert(bool_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_9.__repr__()
    node_10 = module_0.Node(bool_2)
    var_7 = node_10.__repr__()
    node_11 = module_0.Node(node_10)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_12 = module_0.Node(str_2)
    bst_5 = module_0.Bst()
    node_13 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_13.__repr__()
    node_14 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst(bst_2)


def test_case_1448():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()


def test_case_1449():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    int_0 = 2253
    node_2 = module_0.Node(int_0)
    var_6 = node_2.__repr__()
    str_0 = "UFO[|LK]k_j$\x0c=.rF{"
    node_3 = module_0.Node(str_0)
    var_7 = node_3.__repr__()
    int_1 = 2253
    node_4 = module_0.Node(int_1)
    var_8 = node_4.__repr__()
    bst_4 = module_0.Bst()
    var_9 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_10 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    str_1 = "vOK:\\f"
    node_6 = module_0.Node(str_1)
    node_7 = module_0.Node(str_1)
    bst_7 = module_0.Bst()


def test_case_1450():
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_0}
    node_3 = module_0.Node(set_1)
    var_1 = node_3.__repr__()
    bst_1 = module_0.Bst(var_1)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(node_5)
    bst_2 = module_0.Bst()
    node_7 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    bool_1 = False
    var_2 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is False
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    tuple_0 = (node_8, var_2, var_3, var_3)
    node_9 = module_0.Node(tuple_0)
    int_2 = 869
    node_10 = module_0.Node(int_2)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    bool_2 = False
    var_4 = bst_5.insert(bool_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_11.__repr__()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_12 = module_0.Node(bytes_0)
    bst_6 = module_0.Bst()
    node_13 = module_0.Node(bool_1)


def test_case_1451():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_0 = module_0.Node(var_3)
    node_1 = module_0.Node(node_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_3 = module_0.Bst(var_4)
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_4 = module_0.Bst(set_0)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    node_6 = module_0.Node(bst_5)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_0)
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_8.__repr__()
    node_9 = module_0.Node(bst_8)
    bst_9 = module_0.Bst(node_9)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_2 = False
    var_9 = bst_10.insert(bool_2)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst()
    var_11 = var_10.__repr__()
    int_0 = -1138
    node_11 = module_0.Node(int_0)
    bool_3 = False
    node_12 = module_0.Node(bool_3)
    bst_12 = module_0.Bst()
    node_13 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    node_14 = module_0.Node(bst_15)
    bst_16 = module_0.Bst()
    var_12 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_14.__repr__()
    bst_17 = module_0.Bst()
    var_14 = node_14.__repr__()
    node_15 = module_0.Node(var_14)
    bst_18 = module_0.Bst()


def test_case_1452():
    list_0 = []
    node_0 = module_0.Node(list_0)
    bst_0 = module_0.Bst()


def test_case_1453():
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_0 = module_0.Node(dict_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(node_0)
    bst_0 = module_0.Bst(var_0)


def test_case_1454():
    complex_0 = 350.386 - 999.567573j
    node_0 = module_0.Node(complex_0)


def test_case_1455():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_5.__repr__()
    node_6 = module_0.Node(bst_4)
    var_4 = node_4.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_7.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst(var_5)
    var_7 = node_7.__repr__()


def test_case_1456():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_2)
    node_2 = module_0.Node(var_0)


def test_case_1457():
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_0 = module_0.Node(dict_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    int_1 = 2253
    node_2 = module_0.Node(int_1)
    bst_0 = module_0.Bst()
    var_2 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    complex_0 = 350.386 - 999.567573j
    node_4 = module_0.Node(complex_0)
    bool_0 = True
    float_0 = -128.5329
    dict_1 = {bool_0: float_0}
    tuple_0 = (dict_1, bool_0)
    bst_2 = module_0.Bst()
    var_6 = bst_2.insert(tuple_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(var_3)


def test_case_1458():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_3 = module_0.Bst(str_1)
    node_3 = module_0.Node(bst_3)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_4 = module_0.Node(dict_0)
    none_type_0 = None
    bst_4 = module_0.Bst(none_type_0)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_5 = module_0.Node(set_0)
    var_2 = node_5.__repr__()
    str_3 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_3)
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_7.__repr__()
    node_8 = module_0.Node(bst_6)
    var_5 = node_6.__repr__()
    complex_1 = 102.8 - 272.1151j
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(complex_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bool_0 = False
    var_8 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_9.__repr__()
    str_4 = ""
    bst_9 = module_0.Bst(str_4)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    var_10 = node_10.__repr__()
    int_0 = 2029
    node_11 = module_0.Node(int_0)
    bst_11 = module_0.Bst()
    list_0 = [bst_11, bst_11, bst_11]
    bool_1 = True
    tuple_0 = (bst_11, list_0, bool_1, bst_11)
    node_12 = module_0.Node(tuple_0)
    var_11 = bst_11.insert(bool_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = bst_11.insert(bool_1)
    assert (
        f"{type(var_11.left).__module__}.{type(var_11.left).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_12.parent).__module__}.{type(var_12.parent).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(bst_12)
    node_14 = module_0.Node(var_7)


def test_case_1459():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    node_1 = module_0.Node(bst_0)
    var_1 = node_0.__repr__()


def test_case_1460():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    var_1 = node_2.__repr__()
    var_2 = node_2.__repr__()


def test_case_1461():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_0)


def test_case_1462():
    object_0 = module_1.object()
    node_0 = module_0.Node(object_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    var_1 = node_1.__repr__()


def test_case_1463():
    int_0 = 2029
    node_0 = module_0.Node(int_0)
    object_0 = module_1.object()
    node_1 = module_0.Node(object_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_0 = node_2.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    var_5 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    node_6 = module_0.Node(bool_0)
    var_8 = node_6.__repr__()
    node_7 = module_0.Node(node_6)
    bytes_0 = b"<S\x0b\xb4A[\xb7\x02\xac\x90\xea'i"
    node_8 = module_0.Node(bytes_0)
    bst_6 = module_0.Bst()
    node_9 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_9.__repr__()
    bst_8 = module_0.Bst()
    node_10 = module_0.Node(bst_7)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    bool_1 = False
    var_11 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_12 = module_0.Node(var_12)


def test_case_1464():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    bst_3 = module_0.Bst(none_type_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_4 = module_0.Bst(str_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_1 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_3 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_8 = module_0.Bst()
    var_5 = node_1.__repr__()
    node_2 = module_0.Node(var_5)
    node_3 = module_0.Node(var_3)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_6 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_5 = module_0.Node(bst_10)
    bst_12 = module_0.Bst()


def test_case_1465():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)
    node_1 = module_0.Node(node_0)
    var_2 = node_1.__repr__()


def test_case_1466():
    float_0 = -131.8
    bst_0 = module_0.Bst(float_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    tuple_0 = (bst_3,)
    node_0 = module_0.Node(tuple_0)
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    var_2 = bst_4.insert(node_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst()
    var_5 = var_3.__repr__()
    object_0 = module_1.object()
    node_2 = module_0.Node(object_0)
    var_6 = node_2.__repr__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    int_0 = 869
    node_3 = module_0.Node(int_0)
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_9 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_4.__repr__()
    list_0 = []
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(list_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_11)
    node_6 = module_0.Node(bst_8)
    var_12 = node_5.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_7 = module_0.Node(set_0)
    var_13 = node_7.__repr__()
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    node_9 = module_0.Node(node_7)
    bst_10 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_10 = module_0.Node(set_1)
    var_14 = node_10.__repr__()
    bst_11 = module_0.Bst()
    node_11 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_11.__repr__()
    bst_13 = module_0.Bst()
    node_12 = module_0.Node(var_15)
    bst_14 = module_0.Bst()
    var_17 = node_1.__repr__()


def test_case_1467():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    int_0 = 2253
    node_1 = module_0.Node(int_0)
    var_2 = node_1.__repr__()
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_5 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    node_4 = module_0.Node(bool_1)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    bst_7 = module_0.Bst()
    var_9 = node_5.__repr__()
    node_6 = module_0.Node(var_9)
    object_0 = module_1.object()
    node_7 = module_0.Node(object_0)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    var_10 = node_8.__repr__()
    bst_8 = module_0.Bst(var_10)
    bst_9 = module_0.Bst()
    var_11 = node_8.__repr__()
    bst_10 = module_0.Bst()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    bool_2 = False
    var_12 = bst_10.insert(bool_2)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_9.__repr__()
    bst_11 = module_0.Bst(var_12)
    node_10 = module_0.Node(var_7)


def test_case_1468():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    int_0 = 2253
    node_1 = module_0.Node(int_0)
    var_1 = node_1.__repr__()
    bst_0 = module_0.Bst(var_1)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_7 = module_0.Bst(bst_5)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(var_8)


def test_case_1469():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    bytes_0 = b"<S\x0b\xb4A[\xb7\x02\xac\x90\xea'i"
    node_0 = module_0.Node(bytes_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_0 = node_1.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    dict_0 = {}
    node_3 = module_0.Node(dict_0)
    bst_2 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_0 = False
    var_1 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst(bool_0)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    int_0 = -1138
    node_7 = module_0.Node(int_0)
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_7 = module_0.Bst(set_0)
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(var_6)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()
    var_11 = var_10.__repr__()
    var_12 = node_5.__repr__()


def test_case_1470():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    str_0 = "\tD\rb9y@AZRea"
    node_2 = module_0.Node(str_0)
    var_2 = node_2.__repr__()
    list_0 = []
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_1 = []
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(list_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_5)
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_8.__repr__()
    var_8 = node_8.__repr__()
    bst_9 = module_0.Bst()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    bool_1 = False
    var_9 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_9.__repr__()
    node_10 = module_0.Node(none_type_3)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_11 = module_0.Node(set_0)
    bst_10 = module_0.Bst()
    node_12 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_12.__repr__()
    bst_12 = module_0.Bst()
    node_13 = module_0.Node(bst_11)
    var_13 = var_12.__repr__()
    bst_13 = module_0.Bst(bst_10)
    bst_14 = module_0.Bst()
    node_14 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_14 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_14.__repr__()
    bst_16 = module_0.Bst()
    none_type_4 = None
    node_15 = module_0.Node(none_type_4)
    bst_17 = module_0.Bst(bst_15)
    var_16 = node_3.__repr__()


def test_case_1471():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()


def test_case_1472():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    node_4 = module_0.Node(bool_0)
    var_5 = node_4.__repr__()
    node_5 = module_0.Node(node_4)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_6 = module_0.Node(var_7)
    node_7 = module_0.Node(node_6)
    var_8 = node_7.__repr__()
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    var_9 = bst_7.insert(node_8)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_8)
    var_10 = bst_8.insert(node_9)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_10)
    var_11 = node_10.__repr__()
    var_12 = var_9.__repr__()
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    bool_1 = False
    var_13 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_11.__repr__()
    bst_10 = module_0.Bst(var_13)
    bool_2 = False
    node_12 = module_0.Node(bool_2)
    node_13 = module_0.Node(bst_1)


def test_case_1473():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = node_2.__repr__()
    node_3 = module_0.Node(var_4)
    var_6 = var_4.__repr__()
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    var_7 = node_4.__repr__()
    int_0 = 2253
    node_5 = module_0.Node(int_0)
    var_8 = node_5.__repr__()
    bst_5 = module_0.Bst(var_8)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    set_0 = {bst_7, node_6}
    bst_8 = module_0.Bst(set_0)
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_9 = node_6.__repr__()
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(bst_12)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_9 = module_0.Node(str_0)
    bst_13 = module_0.Bst()
    node_10 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_10.__repr__()
    node_11 = module_0.Node(bst_14)
    bst_15 = module_0.Bst(node_11)
    bst_16 = module_0.Bst()
    node_12 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_15 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_12.__repr__()
    bst_18 = module_0.Bst()
    node_13 = module_0.Node(bst_18)
    node_14 = module_0.Node(var_4)


def test_case_1474():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    str_0 = "UFO[|LK]k_j$\x0c=.rF{"
    node_1 = module_0.Node(str_0)
    var_0 = node_1.__repr__()
    bytes_0 = b"\x94\xcf\xa9\x17"
    bst_0 = module_0.Bst(bytes_0)


def test_case_1475():
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    int_2 = -2466
    dict_0 = {int_2: int_2, int_2: int_2, int_2: int_2, int_2: int_2}
    bst_5 = module_0.Bst()
    tuple_0 = (bst_5,)
    tuple_1 = (dict_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_0: float_0, float_0: complex_0}
    node_4 = module_0.Node(dict_1)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    node_6 = module_0.Node(bool_0)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    list_0 = [bst_8, bst_8, bst_8]
    bool_1 = True
    tuple_2 = (bst_8, list_0, bool_1, bst_8)
    node_7 = module_0.Node(tuple_2)
    var_6 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_8.__repr__()
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(var_7)
    bst_12 = module_0.Bst()


def test_case_1476():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    var_2 = var_1.__repr__()
    object_0 = module_1.object()
    node_2 = module_0.Node(object_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    var_5 = node_3.__repr__()
    node_4 = module_0.Node(var_4)
    var_6 = var_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    bst_11 = module_0.Bst()
    var_13 = node_7.__repr__()
    node_8 = module_0.Node(var_2)


def test_case_1477():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_2 = module_0.Bst(set_0)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(var_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_1 = module_0.Node(var_7)
    node_2 = module_0.Node(node_1)
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    var_8 = node_3.__repr__()
    int_0 = 2253
    node_4 = module_0.Node(int_0)
    var_9 = node_4.__repr__()
    bst_6 = module_0.Bst(var_9)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_10 = node_5.__repr__()
    str_0 = "\tD\rb9y@AZRea"
    node_6 = module_0.Node(str_0)
    var_11 = node_6.__repr__()
    bool_3 = False
    node_7 = module_0.Node(bool_3)
    var_12 = node_7.__repr__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()
    node_8 = module_0.Node(var_12)


def test_case_1478():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_2 = module_0.Node(bytes_0)
    var_3 = node_2.__repr__()
    var_4 = var_3.__repr__()
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(tuple_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    int_0 = 3820
    tuple_1 = (int_0,)
    node_5 = module_0.Node(tuple_1)
    var_6 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    var_10 = var_8.__repr__()
    node_7 = module_0.Node(var_10)
    var_11 = var_3.__repr__()


def test_case_1479():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_1 = module_0.Node(bytes_0)
    var_1 = node_1.__repr__()
    int_0 = 3820
    tuple_0 = (int_0,)
    node_2 = module_0.Node(tuple_0)
    var_2 = node_2.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = var_3.__repr__()
    node_4 = module_0.Node(bst_0)
    list_0 = []
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    node_6 = module_0.Node(bst_2)
    var_6 = node_5.__repr__()
    str_1 = ""
    bst_3 = module_0.Bst(str_1)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_7 = node_7.__repr__()
    var_8 = node_7.__repr__()
    bytes_1 = b"BI'@Uh\x92\xd5e\xe4A\xf5Y"
    node_8 = module_0.Node(bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    none_type_0 = None
    complex_0 = 3018.4 + 1758j
    node_0 = module_0.Node(complex_0)
    var_0 = node_0.__repr__()
    var_0.insert(none_type_0)


def test_case_1481():
    bst_0 = module_0.Bst()
    none_type_0 = None
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    none_type_0 = None
    float_0 = 3247.0026
    node_0 = module_0.Node(float_0)
    var_0 = node_0.__repr__()
    var_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    node_0 = module_0.Node(bst_6)
    var_5.insert(bst_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    var_3.insert(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_0.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_2 = module_0.Node(var_7)
    var_6.insert(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    var_6 = bst_5.insert(node_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_5.insert(bst_8)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    set_0 = set()
    float_0 = -1349.6
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(float_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == pytest.approx(-1349.6, abs=0.01, rel=0.01)
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_0.insert(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst(var_7)
    var_4.insert(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst(var_4)
    bst_9 = module_0.Bst()
    node_1 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_1.__repr__()
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_2 = module_0.Node(bst_14)
    int_0 = -1464
    var_12 = bst_14.insert(int_0)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_15 = module_0.Bst()
    node_3 = module_0.Node(bst_15)
    var_13 = bst_15.insert(node_3)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_16 = module_0.Bst()
    var_14 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_4 = module_0.Node(var_14)
    bst_17 = module_0.Bst()
    var_16 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    var_14.insert(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_0.insert(var_0)


def test_case_1491():
    int_0 = -2363
    bytes_0 = b"a\xc7\xc8\xf4<\xb1M\xd5\x83S\xf7\xd1\x84\x84s"
    node_0 = module_0.Node(bytes_0)
    bst_0 = module_0.Bst(node_0)
    with pytest.raises(TypeError):
        bst_0.insert(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    node_0 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    node_1 = module_0.Node(bst_5)
    var_5 = bst_5.insert(node_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_2 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_2.__repr__()
    bst_11 = module_0.Bst()
    node_3 = module_0.Node(bst_11)
    var_10 = bst_11.insert(node_3)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_1.insert(bst_7)


def test_case_1493():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    int_0 = -1464
    var_4 = bst_5.insert(int_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst(var_6)
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_12 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_4 = module_0.Node(var_11)
    bst_14 = module_0.Bst()
    node_5 = module_0.Node(bst_14)
    with pytest.raises(TypeError):
        bst_4.insert(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst(var_2)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_1 = module_0.Node(var_5)
    bst_8 = module_0.Bst()
    node_2 = module_0.Node(bst_8)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    var_1.insert(bst_3)


def test_case_1495():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst(var_4)
    bst_8 = module_0.Bst()
    node_1 = module_0.Node(bst_8)
    var_7 = bst_8.insert(node_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_2 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    node_3 = module_0.Node(bst_13)
    var_10 = bst_13.insert(node_3)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    bst_14 = module_0.Bst()
    var_11 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_15 = module_0.Bst()
    var_13 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    with pytest.raises(TypeError):
        bst_6.insert(bst_10)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    var_6 = node_1.__repr__()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_6.insert(node_1)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst(var_8)
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_14 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    var_16 = var_15.__repr__()
    bst_14 = module_0.Bst()
    node_3 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = node_3.__repr__()
    var_19 = var_11.__repr__()
    var_19.insert(bst_3)


def test_case_1498():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    var_6 = bst_6.insert(node_3)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst(var_8)
    dict_0 = {bst_3: bst_6, var_5: bst_2}
    with pytest.raises(TypeError):
        bst_10.insert(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_2 = module_0.Node(var_5)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    var_1.insert(var_8)


def test_case_1500():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    int_0 = -1464
    var_5 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_3 = module_0.Node(bst_10)
    var_10 = bst_10.insert(node_3)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_4 = module_0.Node(bst_11)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    node_6 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_11 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_6.__repr__()
    int_1 = -217
    with pytest.raises(TypeError):
        bst_10.insert(int_1)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    float_0 = 1401.1
    complex_0 = 5119 - 109.6707j
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(complex_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == (5119 - 109.6707j)
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_1.insert(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_2.__repr__()
    var_12 = node_2.__repr__()
    node_3 = module_0.Node(var_11)
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    var_13 = bst_7.insert(node_4)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_14 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_15 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_5 = module_0.Node(var_15)
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    int_0 = -1464
    var_17 = bst_10.insert(int_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    var_18 = bst_12.insert(node_7)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_19 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = var_19.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_20.insert(var_20)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    int_0 = -1464
    var_5 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_3 = module_0.Node(var_6)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_4.__repr__()
    var_10 = node_4.__repr__()
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_12 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_9 = module_0.Bst()
    var_9.insert(var_0)


def test_case_1504():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_3 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_4 = module_0.Node(var_10)
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_5 = module_0.Node(bst_11)
    var_15 = bst_11.insert(node_5)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_16 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_12.insert(bst_6)


def test_case_1505():
    none_type_0 = None
    bst_0 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst(var_5)
    bst_7 = module_0.Bst()
    node_1 = module_0.Node(bst_7)
    var_8 = bst_7.insert(node_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8.insert(bst_6)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_0.insert(bst_1)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    var_0.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    int_0 = -1464
    var_6 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_3.__repr__()
    int_1 = -2584
    var_6.insert(int_1)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    var_3.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = node_1.__repr__()
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    object_0 = module_1.object()
    var_5.insert(object_0)


def test_case_1512():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = node_2.__repr__()
    node_3 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_4 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    var_10 = bst_11.insert(node_6)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    node_7 = module_0.Node(bst_15)
    var_13 = bst_15.insert(node_7)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_16 = module_0.Bst()
    var_14 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_17 = module_0.Bst()
    var_16 = var_14.__repr__()
    bst_18 = module_0.Bst()
    var_17 = bst_18.insert(bst_18)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    var_19 = var_18.__repr__()
    bst_19 = module_0.Bst()
    var_20 = bst_19.insert(bst_19)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_21 = var_20.__repr__()
    bst_20 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_19.insert(node_4)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = node_2.__repr__()
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_3 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    str_0 = "7"
    node_4 = module_0.Node(str_0)
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_14 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_5.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_16 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    node_6 = module_0.Node(bst_12)
    var_15.insert(bst_13)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_0 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    var_2 = node_2.__repr__()
    bst_5 = module_0.Bst(bst_4)
    bst_5.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = node_2.__repr__()
    node_3 = module_0.Node(var_4)
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_4)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    var_9 = var_7.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    bst_12 = module_0.Bst()
    node_5 = module_0.Node(bst_12)
    int_0 = -1464
    var_13 = bst_12.insert(int_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_10)
    set_0 = set()
    var_14 = var_4.__repr__()
    var_14.insert(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_1 = module_0.Node(bst_5)
    var_3 = bst_5.insert(node_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    int_0 = -1464
    var_8 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_9 = node_5.__repr__()
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_6 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    bst_12 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_14 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_7.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_16 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15.insert(bst_12)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    var_3.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    node_0 = module_0.Node(bst_6)
    int_0 = -1464
    var_7 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_4)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_2 = module_0.Node(var_8)
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    var_10 = bst_9.insert(node_4)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_11 = module_0.Bst()
    var_13 = var_11.__repr__()
    bst_12 = module_0.Bst()
    node_5 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_14 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_5.__repr__()
    bst_14 = module_0.Bst()
    node_6 = module_0.Node(bst_13)
    module_1.object(**var_4)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    int_0 = 2358
    int_1 = -2425
    node_0 = module_0.Node(int_1)
    var_0 = node_0.__repr__()
    var_0.insert(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    node_1 = module_0.Node(bst_5)
    var_8 = bst_5.insert(node_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    var_11 = var_9.__repr__()
    bst_8 = module_0.Bst()
    node_2 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_2.__repr__()
    var_14 = node_2.__repr__()
    node_3 = module_0.Node(var_13)
    bst_10 = module_0.Bst()
    var_15 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_11 = module_0.Bst()
    str_0 = ""
    bst_12 = module_0.Bst(str_0)
    var_5.insert(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    var_4 = bst_5.insert(node_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    var_8.insert(var_7)


def test_case_1522():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_0 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_9 = module_0.Bst(var_4)
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_10.insert(bool_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_8 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    node_7 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_10 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_7.__repr__()
    bst_16 = module_0.Bst()
    var_12 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_17 = module_0.Bst()
    var_13 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_8 = module_0.Node(var_13)
    var_15 = var_14.__repr__()
    with pytest.raises(TypeError):
        bst_12.insert(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_1 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    node_2 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_3 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_2)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_4)
    str_0 = ""
    bst_7 = module_0.Bst(str_0)
    var_1.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    int_0 = -1464
    var_4 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_7 = module_0.Node(bst_8)
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    var_8 = node_8.__repr__()
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_0.insert(var_1)


def test_case_1525():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_2 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_3.__repr__()
    bst_10 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    with pytest.raises(TypeError):
        bst_2.insert(bst_10)


def test_case_1526():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    with pytest.raises(TypeError):
        bst_0.insert(bst_3)


def test_case_1527():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    str_0 = ""
    bst_2 = module_0.Bst(str_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_1 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_7 = module_0.Bst(var_2)
    bst_8 = module_0.Bst()
    node_2 = module_0.Node(bst_8)
    var_5 = bst_8.insert(node_2)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_10 = module_0.Bst()
    var_8 = var_6.__repr__()
    bst_11 = module_0.Bst()
    node_3 = module_0.Node(bst_11)
    var_9 = bst_11.insert(node_3)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    node_4 = module_0.Node(bst_12)
    int_0 = -1464
    var_10 = bst_12.insert(int_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    node_5 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_11 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_5.__repr__()
    bst_15 = module_0.Bst()
    node_6 = module_0.Node(var_11)
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    var_13 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_7 = module_0.Node(bst_16)
    bst_18 = module_0.Bst()
    node_8 = module_0.Node(bst_18)
    var_15 = bst_18.insert(node_8)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_14)
    bst_19 = module_0.Bst()
    var_16 = bst_19.insert(bst_19)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    var_18 = var_17.__repr__()
    with pytest.raises(TypeError):
        bst_18.insert(node_9)


def test_case_1528():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_3 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_8)
    str_1 = ""
    bst_7 = module_0.Bst(str_1)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_6 = module_0.Node(var_9)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_0 = False
    var_11 = bst_10.insert(bool_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    int_0 = -1464
    var_12 = bst_11.insert(int_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    with pytest.raises(TypeError):
        bst_3.insert(node_6)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    var_5 = node_2.__repr__()
    node_3 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    var_8 = bst_7.insert(node_6)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_7 = module_0.Node(var_10)
    var_12 = var_11.__repr__()
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_8 = module_0.Node(var_13)
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_9.__repr__()
    var_17 = node_9.__repr__()
    bst_13 = module_0.Bst()
    node_10 = module_0.Node(bst_13)
    int_0 = -1464
    var_18 = bst_13.insert(int_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    node_11 = module_0.Node(bst_14)
    var_19 = bst_14.insert(node_11)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_15 = module_0.Bst()
    var_20 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_21 = var_20.__repr__()
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    var_10.insert(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_2.__repr__()
    var_8 = node_2.__repr__()
    node_3 = module_0.Node(var_7)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_10 = module_0.Bst(var_10)
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    var_15 = var_14.__repr__()
    bst_12 = module_0.Bst()
    node_4 = module_0.Node(bst_12)
    int_0 = -1464
    var_16 = bst_12.insert(int_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_13)
    bst_13 = module_0.Bst()
    var_17 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    var_18 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    node_6 = module_0.Node(var_18)
    var_20 = var_19.__repr__()
    str_0 = "7"
    node_7 = module_0.Node(str_0)
    var_13.insert(node_2)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    str_0 = ""
    bst_6 = module_0.Bst(str_0)
    var_2.insert(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_0 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_1.__repr__()
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_3.__repr__()
    var_10 = node_3.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_11 = node_4.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_5 = module_0.Node(set_1)
    var_12 = node_5.__repr__()
    bst_9 = module_0.Bst()
    var_8.insert(bst_9)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    bst_0 = module_0.Bst()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = node_1.__repr__()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1.insert(node_1)


def test_case_1534():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_5 = module_0.Node(var_8)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_10 = node_6.__repr__()
    with pytest.raises(TypeError):
        bst_2.insert(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_0 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_5 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_5)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    var_9 = bst_8.insert(node_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    var_7.insert(var_13)


def test_case_1536():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_3)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_5 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    var_8 = node_4.__repr__()
    node_5 = module_0.Node(var_7)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    int_0 = -1464
    var_12 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_9)
    with pytest.raises(TypeError):
        bst_1.insert(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_6 = node_2.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_3 = module_0.Node(var_8)
    var_10 = var_9.__repr__()
    bst_6 = module_0.Bst()
    var_11 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_12 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_4 = module_0.Node(var_12)
    var_14 = var_13.__repr__()
    str_1 = "7"
    node_5 = module_0.Node(str_1)
    str_2 = ""
    bst_8 = module_0.Bst(str_2)
    bst_9 = module_0.Bst()
    var_15 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_6 = module_0.Node(var_15)
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_2.insert(var_4)


def test_case_1538():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    node_0 = module_0.Node(bst_5)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_8 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(bst_9)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    var_10 = node_6.__repr__()
    with pytest.raises(TypeError):
        bst_3.insert(node_2)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    var_0.insert(bst_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    var_6 = bst_6.insert(node_5)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst(var_8)
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_11 = bst_13.insert(bool_1)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(bst_13)
    str_1 = ""
    bst_14 = module_0.Bst(str_1)
    var_0.insert(none_type_1)


def test_case_1541():
    str_0 = ""
    bst_0 = module_0.Bst(str_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


def test_case_1542():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_2)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_3 = node_1.__repr__()
    with pytest.raises(TypeError):
        bst_1.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    none_type_0 = None
    object_0 = module_1.object()
    set_0 = {object_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    var_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_0.__repr__()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(var_2)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_8 = module_0.Bst()
    var_1.insert(node_1)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_3 = node_1.__repr__()
    bst_4 = module_0.Bst(var_3)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_7 = node_2.__repr__()
    str_1 = ""
    bst_7 = module_0.Bst(str_1)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_12 = module_0.Bst(var_9)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_3 = module_0.Node(set_1)
    list_0 = [node_1, var_2, bst_0]
    var_6.insert(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    int_0 = -2694
    complex_0 = 935.5098 - 2246.966j
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(complex_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == (935.5098 - 2246.966j)
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst(var_3)
    bst_1.insert(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_1 = module_0.Node(var_4)
    var_0.insert(node_1)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    node_1 = module_0.Node(bst_5)
    var_4 = bst_5.insert(node_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_2 = module_0.Node(set_1)
    var_5 = node_2.__repr__()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_7 = var_6.__repr__()
    var_7.insert(bst_1)


def test_case_1549():
    none_type_0 = None
    bst_0 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


def test_case_1550():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    int_1 = -1464
    var_3 = bst_1.insert(int_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_4 = node_3.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(node_3)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_0 = False
    var_6 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_8.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_9 = module_0.Node(set_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_10 = module_0.Node(set_2)
    var_10 = node_10.__repr__()
    with pytest.raises(TypeError):
        bst_4.insert(set_2)


def test_case_1551():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(var_0)
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    with pytest.raises(TypeError):
        bst_0.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    int_0 = -1464
    var_5 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    var_10 = node_5.__repr__()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    int_1 = -1464
    var_11 = bst_9.insert(int_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9.insert(bst_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = ""
    bst_8 = module_0.Bst(str_1)
    var_0.insert(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(var_0)
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    var_5 = node_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    var_6 = bst_5.insert(node_4)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    var_9 = var_7.__repr__()
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_10 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_5.__repr__()
    var_9.insert(var_0)


def test_case_1555():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_3 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    int_0 = 3317
    node_6 = module_0.Node(int_0)
    with pytest.raises(TypeError):
        bst_1.insert(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_1.__repr__()
    var_9 = node_1.__repr__()
    bst_5 = module_0.Bst()
    var_10 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_11 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_2 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_14 = node_3.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_15 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_16 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_5.__repr__()
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bst_12 = module_0.Bst(bst_10)
    bst_13 = module_0.Bst()
    var_18 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    node_7 = module_0.Node(var_18)
    int_0 = 3317
    node_8 = module_0.Node(int_0)
    var_15.insert(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    var_1.insert(var_0)


def test_case_1558():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    int_0 = -1464
    var_2 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    var_5 = node_4.__repr__()
    node_5 = module_0.Node(var_4)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_6 = node_6.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bst_8 = module_0.Bst(bst_6)
    bst_9 = module_0.Bst()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    bool_1 = False
    var_9 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    with pytest.raises(TypeError):
        bst_0.insert(bst_4)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_3.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(var_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    bst_7 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    int_0 = -1464
    var_9 = bst_9.insert(int_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_6)
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_8 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    str_1 = "7"
    node_9 = module_0.Node(str_1)
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    var_15 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    node_10 = module_0.Node(var_15)
    var_17 = var_16.__repr__()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    var_6.insert(bst_1)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_2 = node_3.__repr__()
    bst_1 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_4 = module_0.Node(set_1)
    var_3 = node_4.__repr__()
    bst_2 = module_0.Bst(var_3)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_5 = module_0.Node(set_2)
    var_4 = node_5.__repr__()
    var_1.insert(var_2)


def test_case_1561():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    var_3 = var_1.__repr__()
    with pytest.raises(TypeError):
        bst_1.insert(bool_0)


def test_case_1562():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_3 = module_0.Node(var_6)
    var_8 = var_7.__repr__()
    list_0 = []
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(list_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_9)
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_10 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_7 = module_0.Node(var_11)
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    int_1 = -1464
    var_14 = bst_10.insert(int_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_9 = module_0.Node(set_0)
    var_15 = node_9.__repr__()
    bst_11 = module_0.Bst(var_15)
    with pytest.raises(TypeError):
        bst_7.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_2.insert(var_0)


def test_case_1564():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_4 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    var_9 = bst_7.insert(node_5)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_9)
    with pytest.raises(TypeError):
        bst_7.insert(node_2)


def test_case_1565():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_6 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    node_2 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_3 = module_0.Node(bst_11)
    var_8 = bst_11.insert(node_3)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_8)
    bst_12 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_9 = bst_12.insert(bool_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(bst_12)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_7 = module_0.Node(set_0)
    bst_13 = module_0.Bst()
    var_10 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_8 = module_0.Node(set_1)
    var_13 = node_8.__repr__()
    bst_14 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_13.insert(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_4.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(var_1)
    var_3 = node_1.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    var_6 = node_3.__repr__()
    node_4 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_5 = module_0.Node(var_8)
    var_10 = var_9.__repr__()
    str_0 = "7"
    node_6 = module_0.Node(str_0)
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    bst_10 = module_0.Bst()
    var_14 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_7.__repr__()
    bst_13 = module_0.Bst()
    node_8 = module_0.Node(bst_12)
    bst_14 = module_0.Bst()
    node_9 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = node_9.__repr__()
    var_19 = node_9.__repr__()
    var_3.insert(var_15)


def test_case_1568():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    with pytest.raises(TypeError):
        bst_0.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_2 = node_1.__repr__()
    var_1.insert(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_4 = module_0.Bst()
    list_0 = []
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    bst_6 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_5 = node_5.__repr__()
    bst_7 = module_0.Bst(var_5)
    int_0 = 3317
    node_6 = module_0.Node(int_0)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_9 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_13 = module_0.Bst(var_8)
    var_10.insert(bst_13)


def test_case_1571():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    with pytest.raises(TypeError):
        bst_0.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    var_4 = node_1.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_6)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_6 = module_0.Node(var_8)
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_7.__repr__()
    var_13 = var_11.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_14 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_8 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_0 = False
    var_16 = bst_12.insert(bool_0)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_10.__repr__()
    str_0 = ""
    bst_13 = module_0.Bst(str_0)
    bst_14 = module_0.Bst()
    var_10.insert(node_2)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    bool_0 = True
    bytes_0 = b"2I\xcc\x05\xef\xb0\xac\xb7r?\x82\xf7\x19"
    complex_0 = 358.1 - 303.256j
    tuple_0 = (bytes_0, complex_0)
    dict_0 = {tuple_0: complex_0, tuple_0: tuple_0}
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(dict_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == {
        (b"2I\xcc\x05\xef\xb0\xac\xb7r?\x82\xf7\x19", (358.1 - 303.256j)): (
            b"2I\xcc\x05\xef\xb0\xac\xb7r?\x82\xf7\x19",
            (358.1 - 303.256j),
        )
    }
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_0.insert(bool_0)


def test_case_1574():
    pass


def test_case_1575():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_3 = node_1.__repr__()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(var_4)
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_6 = module_0.Node(var_7)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_2 = False
    var_11 = bst_10.insert(bool_2)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    node_10 = module_0.Node(bool_2)
    bool_3 = True
    with pytest.raises(TypeError):
        bst_7.insert(bool_3)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = node_1.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(node_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_5 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_6 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_6)
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_9.__repr__()
    var_10 = var_8.__repr__()
    bst_9 = module_0.Bst()
    var_10.insert(bst_9)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_6 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    var_7 = bst_7.insert(node_6)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(var_8)
    bool_0 = False
    node_9 = module_0.Node(bool_0)
    node_10 = module_0.Node(node_9)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    var_6.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bst_7 = module_0.Bst()
    node_2 = module_0.Node(bst_7)
    var_6 = bst_7.insert(node_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    var_7 = bst_8.insert(node_3)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_7)
    var_8 = node_4.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_5 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(bst_11)
    var_11 = bst_11.insert(node_6)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_10)
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_1 = False
    var_12 = bst_12.insert(bool_1)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_8.__repr__()
    bst_13 = module_0.Bst()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    var_16 = var_15.__repr__()
    bst_15 = module_0.Bst()
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    bool_2 = False
    var_17 = bst_15.insert(bool_2)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15.insert(var_6)


def test_case_1579():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_2 = False
    var_3 = bst_3.insert(bool_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    with pytest.raises(TypeError):
        bst_4.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_4)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    var_7 = var_5.__repr__()
    var_6.insert(bst_3)


def test_case_1581():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    var_5 = node_1.__repr__()
    node_2 = module_0.Node(var_4)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_10 = module_0.Bst(var_7)
    bst_11 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_10 = node_3.__repr__()
    bst_12 = module_0.Bst()
    node_4 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_4.__repr__()
    bst_14 = module_0.Bst()
    node_5 = module_0.Node(var_11)
    var_13 = node_4.__repr__()
    int_0 = 3317
    node_6 = module_0.Node(int_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_7 = module_0.Node(set_0)
    var_14 = node_7.__repr__()
    bst_15 = module_0.Bst(var_14)
    bst_16 = module_0.Bst()
    node_8 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_15 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_8.__repr__()
    bst_18 = module_0.Bst()
    node_9 = module_0.Node(var_15)
    with pytest.raises(TypeError):
        bst_17.insert(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    var_1 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    str_0 = ""
    bst_2 = module_0.Bst(str_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    int_0 = -1464
    var_8 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_5)
    list_0 = []
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(list_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_9)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_2 = False
    var_10 = bst_11.insert(bool_2)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_12 = module_0.Bst()
    var_10.insert(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    var_5 = node_5.__repr__()
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_6)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    var_9 = var_7.__repr__()
    var_1.insert(var_2)


def test_case_1584():
    pass


def test_case_1585():
    none_type_0 = None
    bst_0 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


def test_case_1586():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_7 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    str_0 = ""
    bst_8 = module_0.Bst(str_0)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    node_7 = module_0.Node(bst_10)
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    with pytest.raises(TypeError):
        bst_5.insert(var_11)


def test_case_1587():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst(bst_1)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    var_4 = node_2.__repr__()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_11 = module_0.Bst(var_7)
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    with pytest.raises(TypeError):
        bst_4.insert(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_0.insert(var_0)


def test_case_1589():
    str_0 = ""
    bst_0 = module_0.Bst(str_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_3 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    node_4 = module_0.Node(bool_1)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_2 = False
    var_5 = bst_4.insert(bool_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    bool_3 = False
    var_7 = bst_5.insert(bool_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_6.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    list_0 = [bst_1]
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.list"
    )
    assert len(var_0.data) == 1
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_0.insert(bst_0)


def test_case_1591():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_4)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_5 = node_3.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_6 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    var_7 = bst_4.insert(node_5)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_6 = module_0.Bst()
    var_10 = var_8.__repr__()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_7.__repr__()
    var_13 = node_7.__repr__()
    node_8 = module_0.Node(var_12)
    int_0 = 3317
    node_9 = module_0.Node(int_0)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_1 = False
    var_14 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_11 = module_0.Node(var_15)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_12 = module_0.Node(set_1)
    var_16 = node_12.__repr__()
    bst_11 = module_0.Bst()
    var_17 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_12 = module_0.Bst()
    node_13 = module_0.Node(set_1)
    bst_13 = module_0.Bst(node_8)
    with pytest.raises(TypeError):
        bst_13.insert(none_type_2)


def test_case_1592():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    node_2 = module_0.Node(bool_0)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    with pytest.raises(TypeError):
        bst_2.insert(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    int_0 = -1464
    var_9 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_10 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_5 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_5.__repr__()
    bst_13 = module_0.Bst()
    var_14 = var_12.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_15 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    var_17 = var_16.__repr__()
    bst_16 = module_0.Bst()
    node_6 = module_0.Node(bst_16)
    int_1 = -1464
    var_18 = bst_16.insert(int_1)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_15)
    set_1 = {bst_2}
    var_18.insert(set_1)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    var_3 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_4 = module_0.Node(var_4)
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_2 = False
    var_7 = bst_5.insert(bool_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    var_9 = node_8.__repr__()
    var_8.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    bool_0 = True
    bool_1 = False
    node_0 = module_0.Node(bool_1)
    var_0 = node_0.__repr__()
    var_0.insert(bool_0)


def test_case_1596():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    str_1 = ""
    bst_6 = module_0.Bst(str_1)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    int_0 = -1464
    var_8 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_6 = module_0.Node(dict_0)
    list_0 = []
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(list_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_9)
    with pytest.raises(TypeError):
        bst_3.insert(bst_3)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    str_0 = ""
    bst_3 = module_0.Bst(str_0)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_2 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    str_1 = "7"
    node_3 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    var_11 = bst_8.insert(node_4)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_11)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_12 = bst_9.insert(node_6)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    var_15 = var_14.__repr__()
    var_11.insert(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    list_0 = []
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_2)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_6 = node_4.__repr__()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(set_0)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(var_9)
    var_11 = node_6.__repr__()
    bytes_0 = b"_\xf3\x9a\xed\x94\xbc\xd3\\\xabP+\x97\xf4"
    var_10.insert(bytes_0)


def test_case_1599():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1600():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_2.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_1 = node_2.__repr__()
    bst_1 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_3 = module_0.Node(set_1)
    var_2 = node_3.__repr__()
    bst_2 = module_0.Bst(var_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst(var_4)
    bst_7.insert(bst_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    var_4 = node_2.__repr__()
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    var_7 = bst_7.insert(node_4)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_8 = node_5.__repr__()
    bst_8 = module_0.Bst(var_8)
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_10 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_6 = module_0.Node(set_1)
    node_7 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_11)
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_10 = module_0.Node(var_12)
    bst_13 = module_0.Bst()
    node_11 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_11.__repr__()
    bst_15 = module_0.Bst()
    var_16 = var_14.__repr__()
    var_3.insert(node_6)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_4 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_4 = module_0.Node(var_8)
    var_10 = var_9.__repr__()
    var_2.insert(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    str_0 = ""
    bst_7 = module_0.Bst(str_0)
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_3.__repr__()
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bst_11 = module_0.Bst(bst_9)
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_1 = False
    var_10 = bst_12.insert(bool_1)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_7 = module_0.Node(var_11)
    bst_13 = module_0.Bst()
    node_8 = module_0.Node(bst_13)
    var_12 = bst_13.insert(node_8)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_15 = module_0.Bst()
    var_15 = var_13.__repr__()
    var_7.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    bool_0 = True
    dict_0 = {}
    node_0 = module_0.Node(dict_0)
    var_0 = node_0.__repr__()
    var_0.insert(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_2 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_3 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    node_4 = module_0.Node(bool_1)
    var_1.insert(node_2)


def test_case_1607():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_2 = module_0.Node(var_5)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_6 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    var_7 = bst_4.insert(node_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_7)
    var_8 = node_5.__repr__()
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bst_8 = module_0.Bst(bst_6)
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    var_11 = bst_9.insert(node_8)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_10)
    var_12 = bst_10.insert(node_9)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_12)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_11 = module_0.Node(set_0)
    var_13 = node_11.__repr__()
    bst_11 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_1.insert(var_10)


def test_case_1608():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    node_4 = module_0.Node(bool_1)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    bst_5 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_2.insert(node_4)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    int_0 = -1464
    var_4 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_0.insert(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_5 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    var_9 = node_5.__repr__()
    var_2.insert(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = "wdzu=& k\x0bL."
    node_1 = module_0.Node(str_0)
    var_0 = node_1.__repr__()
    var_0.insert(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    var_0 = bst_0.insert(bool_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_1 = "7"
    node_4 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_6 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_6)
    var_6.insert(node_4)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    var_6 = bst_9.insert(node_4)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    var_7 = node_5.__repr__()
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_11 = module_0.Bst()
    node_6 = module_0.Node(set_0)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst()
    var_12 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_7 = module_0.Node(bst_13)
    var_13.insert(node_1)


def test_case_1614():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_5 = bst_3.insert(node_5)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_0 = False
    var_6 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_3.insert(bst_5)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_2 = module_0.Node(var_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_5)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_3)
    var_4 = node_6.__repr__()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_7 = module_0.Node(set_0)
    node_8 = module_0.Node(bst_5)
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    var_7 = bst_7.insert(node_9)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()
    var_10 = var_8.__repr__()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_10.__repr__()
    bst_12 = module_0.Bst()
    node_11 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    node_12 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_13 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_12.__repr__()
    var_7.insert(var_2)


def test_case_1616():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    int_0 = -1464
    var_6 = bst_7.insert(int_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    with pytest.raises(TypeError):
        bst_4.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_5 = module_0.Node(var_5)
    var_7 = var_6.__repr__()
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    int_0 = -1464
    var_11 = bst_7.insert(int_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_8)
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    int_1 = -1464
    var_12 = bst_8.insert(int_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_9.__repr__()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    var_15 = node_10.__repr__()
    bst_11 = module_0.Bst()
    node_11 = module_0.Node(bst_11)
    var_16 = bst_11.insert(node_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    node_12 = module_0.Node(bst_12)
    var_17 = bst_12.insert(node_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(var_17)
    var_18 = node_13.__repr__()
    var_10.insert(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_0 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    var_5 = bst_3.insert(node_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_4)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_6 = node_3.__repr__()
    bst_4 = module_0.Bst()
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_7 = module_0.Node(set_1)
    node_8 = module_0.Node(bst_8)
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    bst_12 = module_0.Bst()
    var_13 = var_11.__repr__()
    bst_13 = module_0.Bst()
    var_14 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_14 = module_0.Bst()
    node_10 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_16 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_10.__repr__()
    var_18 = var_16.__repr__()
    var_1.insert(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_4 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3.insert(node_2)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    var_3.insert(var_2)


def test_case_1621():
    bytes_0 = b"1\xee\x92\x90\xeem\xc5\x9d\x19Z\x8d\x02XG\xbb&"
    bst_0 = module_0.Bst(bytes_0)


def test_case_1622():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    str_1 = ""
    bst_3 = module_0.Bst(str_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    bst_7 = module_0.Bst()
    var_8 = var_6.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_11 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_12 = module_0.Bst(var_10)
    bst_13 = module_0.Bst()
    node_4 = module_0.Node(bst_13)
    var_13 = bst_13.insert(node_4)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_13)
    bst_14 = module_0.Bst()
    node_6 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_14 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_6.__repr__()
    bst_16 = module_0.Bst()
    node_7 = module_0.Node(var_14)
    var_16 = node_6.__repr__()
    bst_17 = module_0.Bst()
    node_8 = module_0.Node(bst_17)
    bst_18 = module_0.Bst()
    var_17 = bst_18.insert(bst_18)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    var_19 = var_18.__repr__()
    var_9.insert(var_10)


def test_case_1624():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    var_3 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_4 = node_3.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(node_3)
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(bst_6)
    int_0 = -1464
    var_7 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_9.__repr__()
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    bst_10 = module_0.Bst(bst_8)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_12 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_11 = module_0.Node(set_1)
    node_12 = module_0.Node(bst_11)
    bst_13 = module_0.Bst()
    none_type_2 = None
    node_13 = module_0.Node(none_type_2)
    bool_0 = False
    var_12 = bst_13.insert(bool_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    node_14 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_13 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_14.__repr__()
    bst_16 = module_0.Bst()
    node_15 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    node_16 = module_0.Node(bst_17)
    var_15 = bst_17.insert(node_16)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_18 = module_0.Bst()
    node_17 = module_0.Node(bst_18)
    var_16 = bst_18.insert(node_17)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_18 = module_0.Node(var_16)
    var_17 = node_18.__repr__()
    with pytest.raises(TypeError):
        bst_8.insert(bst_10)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    float_0 = -718.48
    tuple_0 = (float_0,)
    tuple_1 = ()
    node_0 = module_0.Node(tuple_1)
    var_0 = node_0.__repr__()
    var_0.insert(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_2 = module_0.Bst()
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    node_2 = module_0.Node(bst_2)
    var_7 = var_5.__repr__()
    bst_4 = module_0.Bst()
    var_8 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_3 = module_0.Node(var_9)
    bst_5 = module_0.Bst()
    var_10 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    var_12 = bst_8.insert(node_5)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    var_13 = bst_9.insert(node_6)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_13)
    var_14 = node_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_15 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_8.__repr__()
    bool_0 = False
    node_9 = module_0.Node(bool_0)
    var_16.insert(node_6)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_3 = node_0.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_1 = module_0.Node(dict_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    var_6 = node_2.__repr__()
    node_3 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_7 = node_4.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    bst_6 = module_0.Bst()
    var_11 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_7 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    node_6 = module_0.Node(bst_6)
    var_13 = var_11.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    int_0 = -1464
    var_14 = bst_8.insert(int_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14.insert(str_0)


def test_case_1628():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_2 = module_0.Node(set_1)
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(set_1)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_4 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    str_2 = "7"
    node_5 = module_0.Node(str_2)
    with pytest.raises(TypeError):
        bst_7.insert(bst_5)


def test_case_1629():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_3 = node_1.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    var_6 = var_4.__repr__()
    with pytest.raises(TypeError):
        bst_6.insert(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_0.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_5 = module_0.Node(var_3)
    var_0.insert(node_2)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    str_0 = ""
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    list_0 = []
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_2)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(node_2)
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_7 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    int_0 = -1464
    var_13 = bst_10.insert(int_0)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_10)
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_10.__repr__()
    bst_13 = module_0.Bst()
    var_11.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    bst_4 = module_0.Bst()
    var_3 = var_1.__repr__()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_3 = module_0.Node(set_0)
    node_4 = module_0.Node(bst_5)
    var_1.insert(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_2 = module_0.Node(bst_0)
    var_1.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_2 = module_0.Bst()
    tuple_0 = (node_0, var_3, var_4, var_4)
    node_1 = module_0.Node(tuple_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_2.__repr__()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_7 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4.insert(bst_6)


def test_case_1636():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_3 = node_2.__repr__()
    bst_2 = module_0.Bst(var_3)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    int_0 = -1464
    var_9 = bst_7.insert(int_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_6)
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(var_10)
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_9 = module_0.Node(set_1)
    var_13 = node_9.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_14 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    node_10 = module_0.Node(bst_15)
    var_16 = bst_15.insert(node_10)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_16 = module_0.Bst()
    node_11 = module_0.Node(bst_16)
    var_17 = bst_16.insert(node_11)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_17)
    var_18 = node_12.__repr__()
    with pytest.raises(TypeError):
        bst_7.insert(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(var_6)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    var_8 = bst_10.insert(node_6)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_7 = module_0.Node(set_0)
    var_9 = node_7.__repr__()
    bst_11 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    node_9 = module_0.Node(node_7)
    float_0 = -131.8
    bst_12 = module_0.Bst(float_0)
    var_1.insert(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    int_0 = -1464
    var_6 = bst_4.insert(int_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    var_3.insert(var_5)


def test_case_1639():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_5 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_6)
    var_7 = node_4.__repr__()
    var_8 = var_5.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(var_9)
    var_11 = node_5.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    var_12 = bst_8.insert(node_7)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_12)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_10)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_10 = module_0.Node(set_0)
    var_13 = node_10.__repr__()
    bst_11 = module_0.Bst()
    var_14 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_12 = module_0.Bst()
    node_11 = module_0.Node(set_0)
    with pytest.raises(TypeError):
        bst_3.insert(var_8)


def test_case_1640():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    node_3 = module_0.Node(bst_4)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_1)
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    var_8 = node_4.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_6 = module_0.Node(dict_0)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    var_9 = bst_6.insert(node_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_8 = module_0.Bst()
    var_12 = var_10.__repr__()
    with pytest.raises(TypeError):
        bst_6.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_4)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_2.__repr__()
    var_7 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_6 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    node_4 = module_0.Node(bst_5)
    var_10 = var_8.__repr__()
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_12 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_5 = module_0.Node(var_12)
    var_14 = var_13.__repr__()
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bst_10 = module_0.Bst()
    var_15 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_11 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_7 = module_0.Node(set_1)
    node_8 = module_0.Node(bst_10)
    var_15.insert(node_5)


def test_case_1642():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    node_2 = module_0.Node(bst_4)
    var_5 = var_3.__repr__()
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_3.__repr__()
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    with pytest.raises(TypeError):
        bst_0.insert(bst_7)


def test_case_1643():
    float_0 = -131.8
    bst_0 = module_0.Bst(float_0)
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_0 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_4 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_6 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    node_3 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_3.__repr__()
    var_10 = node_3.__repr__()
    node_4 = module_0.Node(var_9)
    with pytest.raises(TypeError):
        bst_9.insert(bst_7)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_4 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(var_5)
    var_0.insert(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    str_0 = "^<>5z9:)"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    str_0 = ""
    bst_3 = module_0.Bst(str_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_1)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_3 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    var_6 = var_4.__repr__()
    var_0.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)
    var_1.insert(bst_0)


def test_case_1648():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1649():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_3)
    var_1.insert(bst_3)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    list_0 = []
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_0 = module_0.Node(var_3)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_1 = module_0.Node(var_5)
    var_7 = var_6.__repr__()
    var_2.insert(node_1)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_4 = module_0.Bst()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_4 = module_0.Node(dict_0)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    int_0 = -1464
    var_7 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_4)
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    var_8 = bst_7.insert(node_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(bst_8)
    var_9 = bst_8.insert(node_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_9)
    var_10 = node_9.__repr__()
    list_0 = []
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(list_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_11)
    var_4.insert(node_1)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_4)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = False
    var_5 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_2.__repr__()
    str_0 = ""
    bst_7 = module_0.Bst(str_0)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_3 = module_0.Node(bst_9)
    var_7 = bst_9.insert(node_3)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    node_4 = module_0.Node(bst_10)
    var_8 = bst_10.insert(node_4)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_8)
    var_9 = node_5.__repr__()
    bool_1 = False
    node_6 = module_0.Node(bool_1)
    var_10 = node_6.__repr__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    var_13 = bst_11.insert(node_7)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    node_8 = module_0.Node(bst_12)
    var_14 = bst_12.insert(node_8)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_14)
    var_15 = node_9.__repr__()
    var_16 = var_13.__repr__()
    var_7.insert(bst_4)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_3 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    var_4.insert(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    var_4 = node_2.__repr__()
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_5 = module_0.Node(var_9)
    var_11 = var_10.__repr__()
    str_0 = "7"
    node_6 = module_0.Node(str_0)
    var_1.insert(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_0.insert(bool_0)


def test_case_1656():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_7 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    tuple_0 = (node_4, var_7, var_8, var_8)
    node_5 = module_0.Node(tuple_0)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_1 = False
    var_9 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_6.__repr__()
    node_7 = module_0.Node(bool_1)
    with pytest.raises(TypeError):
        bst_1.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_0 = module_0.Bst()
    tuple_0 = (bst_0,)
    tuple_1 = (dict_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    float_0 = -131.8
    bst_1 = module_0.Bst(float_0)
    str_0 = "w8<H^+~qIrArq]1_$"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_0 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(bst_6)
    var_3.insert(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    float_0 = 567.69
    bytes_0 = b"\x8e\xdf\xac\x01\xc2un"
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bytes_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == b"\x8e\xdf\xac\x01\xc2un"
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_1.insert(float_0)


def test_case_1659():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_1 = node_1.__repr__()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    var_4 = var_2.__repr__()
    bst_3 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_3 = module_0.Node(set_1)
    var_5 = node_3.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_4 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_0 = False
    var_8 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_1 = False
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    with pytest.raises(TypeError):
        bst_6.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    tuple_0 = (node_1, var_2, var_3, var_3)
    node_2 = module_0.Node(tuple_0)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_4 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_5 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    var_6 = node_5.__repr__()
    var_3.insert(node_1)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    int_0 = 869
    node_0 = module_0.Node(int_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    var_3 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    bst_1 = module_0.Bst()
    var_4 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_2 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_7 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_8 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_8)
    var_9 = node_5.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_10 = node_6.__repr__()
    var_8.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_5 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    node_6 = module_0.Node(bool_1)
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    var_7 = node_7.__repr__()
    var_8 = var_7.__repr__()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    bst_11 = module_0.Bst()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    bst_12 = module_0.Bst(bst_10)
    bst_13 = module_0.Bst()
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    var_11 = node_10.__repr__()
    bst_14 = module_0.Bst()
    var_12 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_11 = module_0.Node(var_12)
    bst_15 = module_0.Bst()
    none_type_5 = None
    node_12 = module_0.Node(none_type_5)
    bool_2 = False
    var_14 = bst_15.insert(bool_2)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_16 = module_0.Bst()
    var_14.insert(node_7)


def test_case_1663():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_1 = module_0.Bst(str_0)
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_2 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_5 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_6 = module_0.Node(var_14)
    var_16 = var_15.__repr__()
    str_1 = "7"
    node_7 = module_0.Node(str_1)
    with pytest.raises(TypeError):
        bst_6.insert(var_8)


def test_case_1664():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(var_4)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_6 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(var_6)
    var_8 = node_6.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    var_9 = node_8.__repr__()
    bst_14 = module_0.Bst()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    bool_1 = False
    var_10 = bst_14.insert(bool_1)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_9.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_10 = module_0.Node(set_0)
    var_12 = node_10.__repr__()
    with pytest.raises(TypeError):
        bst_14.insert(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_1 = module_0.Bst(str_1)
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_1 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_2)
    var_3 = node_4.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst()
    tuple_0 = (node_6, var_6, var_7, var_7)
    node_7 = module_0.Node(tuple_0)
    var_5.insert(set_0)


def test_case_1666():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(var_1)
    with pytest.raises(TypeError):
        bst_0.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    var_0.insert(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = node_2.__repr__()
    var_3 = var_2.__repr__()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    int_0 = -1464
    var_7 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(var_8)
    var_10 = node_5.__repr__()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    int_1 = -1464
    var_11 = bst_10.insert(int_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    var_12 = bst_11.insert(node_8)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_13 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_13 = module_0.Bst()
    var_15 = var_13.__repr__()
    bst_14 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_1 = False
    var_16 = bst_14.insert(bool_1)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_9.__repr__()
    node_10 = module_0.Node(none_type_2)
    int_2 = 869
    node_11 = module_0.Node(int_2)
    bst_15 = module_0.Bst()
    var_18 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    var_20 = var_18.__repr__()
    bst_16 = module_0.Bst()
    none_type_3 = None
    node_12 = module_0.Node(none_type_3)
    var_21 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_22 = var_20.__repr__()
    var_22.insert(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_2.__repr__()
    var_0.insert(var_4)


def test_case_1670():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1671():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_0.insert(bst_1)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    int_1 = 3317
    node_3 = module_0.Node(int_1)
    var_2 = node_2.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_4 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    str_1 = "7"
    node_5 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_6 = module_0.Node(var_7)
    var_9 = var_7.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_7 = module_0.Node(set_0)
    var_10 = node_7.__repr__()
    bst_6 = module_0.Bst(var_10)
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_8 = module_0.Bst()
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_3}
    node_8 = module_0.Node(set_1)
    node_9 = module_0.Node(bst_7)
    var_8.insert(bst_4)


def test_case_1673():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    with pytest.raises(TypeError):
        bst_0.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    bool_0 = True
    bytes_0 = b"\xc6\x1d`\xc6F\x94\x05\x92\xd7"
    bool_1 = False
    list_0 = [bytes_0, bytes_0, bool_1, bytes_0]
    bst_0 = module_0.Bst(list_0)
    bst_0.insert(bool_0)


def test_case_1675():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_0.__repr__()
    str_0 = ""
    bst_6 = module_0.Bst(str_0)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_9 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_8.__repr__()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    node_4 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_4.__repr__()
    bst_13 = module_0.Bst()
    node_5 = module_0.Node(var_11)
    var_13 = node_4.__repr__()
    bst_14 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_2 = False
    var_14 = bst_14.insert(bool_2)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_15 = module_0.Bst()
    node_7 = module_0.Node(var_15)
    bytes_0 = b"m"
    with pytest.raises(TypeError):
        bst_12.insert(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    var_3 = node_2.__repr__()
    list_0 = []
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_4)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_5 = module_0.Node(dict_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_0)
    none_type_1 = None
    bst_6 = module_0.Bst(none_type_1)
    int_0 = 3317
    node_7 = module_0.Node(int_0)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_8 = module_0.Node(var_6)
    var_8 = var_7.__repr__()
    str_1 = "7"
    node_9 = module_0.Node(str_1)
    bool_0 = False
    node_10 = module_0.Node(bool_0)
    node_11 = module_0.Node(node_10)
    var_8.insert(node_1)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    str_0 = ""
    bst_3 = module_0.Bst(str_0)
    bst_4 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_6 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_7 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_7)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(var_8)
    var_10 = node_6.__repr__()
    bst_10 = module_0.Bst()
    str_2 = " \x0c^"
    node_8 = module_0.Node(str_2)
    var_11 = node_8.__repr__()
    str_3 = "{&:T\r/p-BHx9-lgMP"
    bst_11 = module_0.Bst(str_3)
    node_9 = module_0.Node(bst_11)
    int_0 = -1138
    node_10 = module_0.Node(int_0)
    var_8.insert(node_10)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_1 = module_0.Node(set_1)
    var_0 = node_1.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    list_0 = []
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bool_1 = False
    var_6 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    tuple_0 = (node_7, var_6, var_7, var_7)
    node_8 = module_0.Node(tuple_0)
    int_0 = 3317
    node_9 = module_0.Node(int_0)
    bst_10 = module_0.Bst()
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    bool_2 = False
    var_8 = bst_10.insert(bool_2)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_11 = module_0.Node(var_9)
    bst_11 = module_0.Bst()
    node_12 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    none_type_4 = None
    node_13 = module_0.Node(none_type_4)
    var_10 = node_13.__repr__()
    bool_3 = False
    node_14 = module_0.Node(bool_3)
    var_11 = node_14.__repr__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__repr__()
    var_11.insert(var_2)


def test_case_1679():
    none_type_0 = None
    str_0 = "^@?"
    bst_0 = module_0.Bst(str_0)
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_4.insert(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    str_0 = " \x0c^"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    var_1 = bst_0.insert(node_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_2 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_2 = bst_1.insert(node_3)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    bst_3 = module_0.Bst()
    var_6 = node_4.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    var_9 = var_7.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_1)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_7.__repr__()
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_12 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_9 = module_0.Node(var_12)
    var_14 = var_12.__repr__()
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bst_10 = module_0.Bst()
    node_11 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_15 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_11.__repr__()
    bst_12 = module_0.Bst()
    node_12 = module_0.Node(bst_12)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_13 = module_0.Node(set_0)
    var_17 = node_13.__repr__()
    str_3 = "w8<H^+~qIrArq]1_$"
    node_14 = module_0.Node(str_3)
    var_8.insert(node_1)


def test_case_1682():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    float_0 = -1110.0
    with pytest.raises(TypeError):
        bst_0.insert(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    none_type_0 = None
    complex_0 = -2542.75 + 2071.518j
    node_0 = module_0.Node(complex_0)
    var_0 = node_0.__repr__()
    var_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    bool_0 = True
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_0.insert(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_4 = module_0.Bst()
    int_0 = 869
    node_3 = module_0.Node(int_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(var_8)
    node_7 = module_0.Node(bst_10)
    var_7.insert(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(var_6)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    var_8 = node_6.__repr__()
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_7 = module_0.Node(var_10)
    var_12 = var_11.__repr__()
    str_2 = " 4'"
    node_8 = module_0.Node(str_2)
    var_6.insert(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_2 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_3)
    var_4 = node_4.__repr__()
    var_5 = var_2.__repr__()
    var_1.insert(node_2)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    var_3 = node_3.__repr__()
    bst_2 = module_0.Bst()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    var_6 = node_5.__repr__()
    node_6 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    tuple_0 = (node_7, var_7, var_8, var_8)
    node_8 = module_0.Node(tuple_0)
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    var_4.insert(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    bool_0 = True
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_0.__repr__()
    var_3 = var_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(bst_5)
    var_7 = bst_5.insert(node_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_3 = module_0.Node(var_8)
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_8 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    node_5 = module_0.Node(bst_7)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_2)
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_12 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_7.__repr__()
    node_8 = module_0.Node(bst_10)
    node_9 = module_0.Node(node_6)
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_14 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_10.__repr__()
    bst_13 = module_0.Bst()
    node_11 = module_0.Node(bst_12)
    bst_14 = module_0.Bst()
    var_16 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13.insert(var_12)


def test_case_1690():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = False
    var_0 = bst_0.insert(bool_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(var_5)
    var_7 = var_5.__repr__()
    bool_2 = False
    node_4 = module_0.Node(bool_2)
    var_8 = node_4.__repr__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    with pytest.raises(TypeError):
        bst_4.insert(bst_4)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(none_type_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_5 = module_0.Bst()
    tuple_0 = (bst_5,)
    tuple_1 = (dict_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(var_4)
    var_6 = node_5.__repr__()
    bst_9 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_7 = module_0.Node(set_0)
    var_7 = node_7.__repr__()
    node_8 = module_0.Node(var_7)
    var_6.insert(var_3)


def test_case_1692():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_1 = module_0.Node(bytes_0)
    var_2 = node_0.__repr__()
    with pytest.raises(TypeError):
        bst_0.insert(var_2)


def test_case_1693():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(var_2)
    var_4 = node_1.__repr__()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_8 = node_3.__repr__()
    str_0 = " 4'"
    node_4 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_5.__repr__()
    var_11 = node_5.__repr__()
    node_6 = module_0.Node(var_10)
    bst_8 = module_0.Bst()
    var_12 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_13 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_7 = module_0.Node(var_13)
    var_15 = var_14.__repr__()
    int_0 = 3317
    node_8 = module_0.Node(int_0)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_1 = False
    var_16 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    node_10 = module_0.Node(var_17)
    bst_11 = module_0.Bst()
    var_18 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_19 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = var_19.__repr__()
    var_21 = var_20.__repr__()
    bst_13 = module_0.Bst()
    var_22 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_23 = var_22.__repr__()
    node_11 = module_0.Node(var_22)
    with pytest.raises(TypeError):
        bst_0.insert(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_2 = module_0.Node(bytes_0)
    var_0.insert(bst_3)


def test_case_1695():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_6 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_6)
    bst_3 = module_0.Bst()
    var_7 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_8 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_5 = module_0.Node(var_8)
    var_10 = var_9.__repr__()
    str_2 = "7"
    node_6 = module_0.Node(str_2)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_1 = False
    var_11 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bool_2 = False
    node_8 = module_0.Node(bool_2)
    node_9 = module_0.Node(node_8)
    with pytest.raises(TypeError):
        bst_3.insert(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_2 = module_0.Node(bytes_0)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_4 = module_0.Node(var_7)
    str_0 = " \x0c^"
    node_5 = module_0.Node(str_0)
    var_9 = node_5.__repr__()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_10)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_8 = module_0.Node(set_0)
    var_11 = node_8.__repr__()
    node_9 = module_0.Node(var_11)
    bst_8 = module_0.Bst()
    node_10 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_12 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_10.__repr__()
    bst_10 = module_0.Bst()
    node_11 = module_0.Node(var_12)
    var_4.insert(node_4)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    var_1 = node_0.__repr__()
    var_0.insert(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = False
    var_4 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(bst_3)
    none_type_3 = None
    bst_4 = module_0.Bst(none_type_3)
    bool_2 = True
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bool_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3.insert(node_3)


def test_case_1699():
    bst_0 = module_0.Bst()


@pytest.mark.xfail(strict=True)
def test_case_1700():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    node_2 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    int_0 = -1464
    var_5 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_4 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_1)
    int_1 = 3317
    node_6 = module_0.Node(int_1)
    var_10 = node_5.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_7 = module_0.Node(set_1)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_8 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    var_13 = bst_11.insert(node_9)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_12)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_3}
    node_11 = module_0.Node(set_2)
    var_14 = node_11.__repr__()
    bst_12 = module_0.Bst()
    var_15 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_13 = module_0.Bst()
    node_12 = module_0.Node(set_2)
    str_4 = '^ n*j8"KTldS,<rdr4DR'
    set_3 = {str_4}
    node_13 = module_0.Node(set_3)
    var_17 = node_13.__repr__()
    bst_14 = module_0.Bst(var_17)
    var_18 = node_13.__repr__()
    var_10.insert(str_4)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(var_5)
    var_7 = node_2.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_4.__repr__()
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(var_8)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_2.insert(var_9)


def test_case_1702():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    str_0 = ""
    bst_5 = module_0.Bst(str_0)
    list_0 = []
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_4 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(var_5)
    node_5 = module_0.Node(bst_8)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_6 = module_0.Node(str_1)
    var_6 = node_6.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_7 = module_0.Node(set_0)
    var_7 = node_7.__repr__()
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_1 = False
    var_8 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(bst_9)
    str_3 = "{&:T\r/p-BHx9-lgMP"
    bst_10 = module_0.Bst(str_3)
    node_10 = module_0.Node(bst_10)
    with pytest.raises(TypeError):
        bst_6.insert(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    float_0 = -131.8
    bst_5 = module_0.Bst(float_0)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_7 = module_0.Bst()
    node_1 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_4 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_1.__repr__()
    var_6 = node_1.__repr__()
    node_2 = module_0.Node(var_5)
    bst_9 = module_0.Bst()
    node_3 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_3.__repr__()
    bst_11 = module_0.Bst()
    node_4 = module_0.Node(var_7)
    var_9 = node_3.__repr__()
    bst_12 = module_0.Bst()
    object_0 = module_1.object()
    node_5 = module_0.Node(object_0)
    int_0 = 869
    node_6 = module_0.Node(int_0)
    bst_5.insert(var_7)


def test_case_1704():
    tuple_0 = ()
    node_0 = module_0.Node(tuple_0)
    str_0 = ".\t&QA"
    bytes_0 = b"<\xcf"
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bytes_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == b"<\xcf"
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst(var_0)
    with pytest.raises(TypeError):
        bst_1.insert(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    tuple_0 = ()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == ()
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_1.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_5)
    var_6 = var_3.__repr__()
    var_6.insert(node_1)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    object_0 = module_1.object()
    node_0 = module_0.Node(object_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    var_0 = bst_0.insert(bool_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    var_5 = node_5.__repr__()
    node_6 = module_0.Node(var_4)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    var_6 = node_7.__repr__()
    var_7 = node_7.__repr__()
    bst_5 = module_0.Bst()
    node_8 = module_0.Node(bst_5)
    int_0 = -1464
    var_8 = bst_5.insert(int_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = " \x0c^"
    node_9 = module_0.Node(str_0)
    var_9 = node_9.__repr__()
    bst_6 = module_0.Bst()
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    bool_2 = False
    var_10 = bst_6.insert(bool_2)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_7 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_11 = module_0.Node(set_0)
    var_12 = node_11.__repr__()
    bst_8 = module_0.Bst(var_12)
    var_13 = node_11.__repr__()
    var_8.insert(var_7)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_4 = node_1.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(node_1)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_4 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_4 = module_0.Node(set_1)
    node_5 = module_0.Node(bst_3)
    var_7 = var_5.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_6 = module_0.Node(set_2)
    var_8 = node_6.__repr__()
    list_0 = []
    bst_5 = module_0.Bst()
    var_9 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_9)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bool_0 = False
    var_10 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_8.__repr__()
    str_3 = ""
    bst_8 = module_0.Bst(str_3)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_9 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_9.__repr__()
    bst_12 = module_0.Bst()
    node_10 = module_0.Node(var_12)
    bst_13 = module_0.Bst()
    var_7.insert(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_0 = node_2.__repr__()
    bst_0 = module_0.Bst()
    node_3 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_3.__repr__()
    var_3 = var_1.__repr__()
    bst_2 = module_0.Bst()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_4 = module_0.Node(str_2)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    node_6 = module_0.Node(bst_4)
    var_6 = node_4.__repr__()
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_3}
    node_7 = module_0.Node(set_0)
    var_7 = node_7.__repr__()
    bst_5 = module_0.Bst(var_7)
    var_8 = node_7.__repr__()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    var_11 = var_9.__repr__()
    bst_7 = module_0.Bst()
    var_12 = node_8.__repr__()
    bst_8 = module_0.Bst()
    var_13 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    var_7.insert(var_12)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_5 = module_0.Bst()
    int_0 = 869
    node_3 = module_0.Node(int_0)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_0)
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    node_7 = module_0.Node(bst_9)
    var_8 = node_5.__repr__()
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_1 = False
    var_9 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    node_9 = module_0.Node(none_type_2)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_10 = module_0.Node(set_0)
    var_11 = node_10.__repr__()
    var_1.insert(bst_1)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    object_0 = module_1.object()
    node_0 = module_0.Node(object_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_5 = bst_3.insert(node_5)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_0 = False
    var_6 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    node_7 = module_0.Node(none_type_1)
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    bool_1 = False
    var_8 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_8.__repr__()
    str_0 = ""
    bst_6 = module_0.Bst(str_0)
    bst_7 = module_0.Bst()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    var_10 = node_9.__repr__()
    var_4.insert(var_0)


def test_case_1712():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_2)
    with pytest.raises(TypeError):
        bst_1.insert(bst_1)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    none_type_0 = None
    bst_2 = module_0.Bst(none_type_0)
    list_0 = []
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_2)
    var_3 = node_5.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_8 = module_0.Bst(var_5)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bst_10 = module_0.Bst()
    var_9 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    bst_11 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_8 = module_0.Node(set_1)
    node_9 = module_0.Node(bst_10)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_3}
    node_10 = module_0.Node(set_2)
    var_11 = node_10.__repr__()
    bst_12 = module_0.Bst()
    list_1 = [set_2, str_3, str_1, bst_9]
    module_1.object(*list_1, **bst_5)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    int_0 = -1138
    node_1 = module_0.Node(int_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    str_1 = " \x0c^"
    node_3 = module_0.Node(str_1)
    var_1 = node_3.__repr__()
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    bst_3 = module_0.Bst()
    int_1 = 869
    node_5 = module_0.Node(int_1)
    bst_4 = module_0.Bst()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_2)
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_7.__repr__()
    node_8 = module_0.Node(bst_6)
    node_9 = module_0.Node(node_6)
    object_0 = module_1.object()
    node_10 = module_0.Node(object_0)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_11 = module_0.Node(var_7)
    var_9 = var_8.__repr__()
    str_3 = "7"
    node_12 = module_0.Node(str_3)
    var_7.insert(node_10)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_4 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(var_5)
    bst_6 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_7 = node_6.__repr__()
    node_7 = module_0.Node(var_7)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_8 = module_0.Node(str_1)
    var_8 = node_8.__repr__()
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_9 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_9.__repr__()
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(var_9)
    var_11 = node_9.__repr__()
    bst_10 = module_0.Bst()
    node_11 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_12 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_11.__repr__()
    var_14 = var_12.__repr__()
    bst_12 = module_0.Bst()
    node_12 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_15 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_12.__repr__()
    bst_14 = module_0.Bst()
    node_13 = module_0.Node(bst_13)
    var_17 = var_16.__repr__()
    var_8.insert(bst_9)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    str_0 = " \x0c^"
    node_2 = module_0.Node(str_0)
    var_1 = node_2.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_5 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_4.__repr__()
    var_1.insert(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_4 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_2 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_2.__repr__()
    bst_8 = module_0.Bst()
    int_0 = 869
    node_3 = module_0.Node(int_0)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = False
    var_7 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_11 = module_0.Bst()
    tuple_0 = (node_4, var_7, var_8, var_8)
    node_5 = module_0.Node(tuple_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_6 = module_0.Node(bytes_0)
    var_9 = node_6.__repr__()
    var_10 = var_9.__repr__()
    bst_12 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_7.__repr__()
    var_13 = var_11.__repr__()
    bst_14 = module_0.Bst()
    node_8 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_14 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_8.__repr__()
    bst_16 = module_0.Bst()
    node_9 = module_0.Node(var_14)
    var_16 = node_8.__repr__()
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    var_17 = node_10.__repr__()
    var_18 = node_10.__repr__()
    var_0.insert(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    list_0 = []
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    var_3 = node_4.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    bst_8 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_7 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    var_10 = bst_11.insert(node_8)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_9)
    var_10.insert(bst_4)


def test_case_1719():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    bst_0 = module_0.Bst()
    str_2 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_2)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_3.__repr__()
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(var_1)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    int_0 = -3545
    bytes_0 = b"'\xab^$\x02=\x1d\xb5\x12NQ"
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_1.insert(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(bst_0)
    object_0 = module_1.object()
    node_2 = module_0.Node(object_0)
    int_0 = 869
    node_3 = module_0.Node(int_0)
    var_0.insert(node_3)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    str_1 = ""
    bst_2 = module_0.Bst(str_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = node_2.__repr__()
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bool_0 = True
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_8 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    node_6 = module_0.Node(bool_1)
    var_3.insert(bst_1)


def test_case_1723():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    float_0 = -131.8
    bst_2 = module_0.Bst(float_0)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    str_0 = " \x0c^"
    node_3 = module_0.Node(str_0)
    var_5 = node_3.__repr__()
    str_1 = "RhJ%"
    with pytest.raises(TypeError):
        bst_1.insert(str_1)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    var_0.insert(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    object_0 = module_1.object()
    node_0 = module_0.Node(object_0)
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = False
    var_1 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_3.__repr__()
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = False
    var_3 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    node_5 = module_0.Node(none_type_2)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    var_7 = node_6.__repr__()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_7 = module_0.Node(bytes_0)
    var_0.insert(bst_3)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    var_3 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    var_5 = bst_7.insert(node_4)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_6 = bst_8.insert(node_6)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_7 = module_0.Node(bst_9)
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    var_9 = bst_11.insert(node_8)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_8)
    bst_12 = module_0.Bst()
    var_10 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    node_10 = module_0.Node(var_10)
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_12 = module_0.Node(set_0)
    var_12 = node_12.__repr__()
    bst_13 = module_0.Bst(var_12)
    var_13 = node_12.__repr__()
    var_3.insert(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    str_0 = " \x0c^"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    node_1 = module_0.Node(bst_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_2 = module_0.Node(bytes_0)
    var_3 = node_2.__repr__()
    var_4 = var_3.__repr__()
    var_1.insert(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_1 = "7"
    node_3 = module_0.Node(str_1)
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_4 = module_0.Node(str_2)
    var_6 = node_4.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_10 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_9.__repr__()
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    int_0 = -1464
    var_12 = bst_6.insert(int_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_13 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_7.__repr__()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(var_13)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_15 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    var_17 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_16 = module_0.Bst(var_16)
    bst_17 = module_0.Bst()
    bst_18 = module_0.Bst()
    var_19 = bst_18.insert(bst_18)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = var_19.__repr__()
    node_9 = module_0.Node(bst_17)
    bst_19 = module_0.Bst()
    node_10 = module_0.Node(bst_19)
    var_21 = bst_19.insert(node_10)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_20)
    bst_20 = module_0.Bst()
    none_type_1 = None
    node_12 = module_0.Node(none_type_1)
    bool_0 = False
    var_22 = bst_20.insert(bool_0)
    assert (
        f"{type(bst_20.root).__module__}.{type(bst_20.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_16.insert(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    var_6 = node_4.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    node_6 = module_0.Node(node_4)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_7)
    int_0 = -1138
    node_9 = module_0.Node(int_0)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_0 = False
    var_8 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    none_type_3 = None
    node_11 = module_0.Node(none_type_3)
    var_11 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    none_type_4 = None
    node_12 = module_0.Node(none_type_4)
    bool_1 = False
    var_12 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_11 = module_0.Bst()
    tuple_0 = (node_12, var_12, var_13, var_13)
    node_13 = module_0.Node(tuple_0)
    var_1.insert(none_type_4)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_0.insert(var_0)


def test_case_1731():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    int_0 = 3317
    node_1 = module_0.Node(int_0)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_4)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    tuple_0 = (node_4, var_7, var_8, var_8)
    node_5 = module_0.Node(tuple_0)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    var_9 = bst_6.insert(node_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_8 = module_0.Bst()
    var_12 = var_10.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_0)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    var_13 = node_8.__repr__()
    var_14 = bst_9.insert(str_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bool_1 = False
    var_15 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bool_2 = False
    node_10 = module_0.Node(bool_2)
    node_11 = module_0.Node(node_10)
    bst_11 = module_0.Bst()
    var_17 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_18 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    node_12 = module_0.Node(var_18)
    var_20 = var_19.__repr__()
    str_1 = "7"
    node_13 = module_0.Node(str_1)
    with pytest.raises(TypeError):
        bst_2.insert(node_12)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    bytes_0 = b"\x849f\xc4\x94/\x12\x85\x98\x85\xfe\xcb\xec{0\x80\xee\xbb\x9d"
    tuple_0 = (bytes_0,)
    complex_0 = -909.3793 - 506.8717j
    bst_0 = module_0.Bst(complex_0)
    bst_0.insert(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    str_0 = ""
    bst_4 = module_0.Bst(str_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    none_type_1 = None
    bst_7 = module_0.Bst(none_type_1)
    str_1 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_8 = module_0.Bst(str_1)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_5 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_5 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_5.__repr__()
    bst_12 = module_0.Bst()
    node_6 = module_0.Node(var_5)
    var_7 = node_5.__repr__()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_7 = module_0.Node(set_0)
    var_8 = node_7.__repr__()
    node_8 = module_0.Node(var_8)
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_9 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_9.__repr__()
    bst_15 = module_0.Bst()
    node_10 = module_0.Node(bst_14)
    bst_16 = module_0.Bst()
    node_11 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_11 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_11.__repr__()
    bst_18 = module_0.Bst()
    node_12 = module_0.Node(bst_17)
    var_13 = var_12.__repr__()
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_3}
    node_13 = module_0.Node(set_1)
    var_14 = node_13.__repr__()
    bst_19 = module_0.Bst()
    var_15 = bst_19.insert(bst_19)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    var_17 = var_15.__repr__()
    var_18 = var_17.__repr__()
    var_16.insert(bst_3)


def test_case_1734():
    none_type_0 = None
    bst_0 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


def test_case_1735():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_0 = "7"
    node_3 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_6 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_6)
    str_1 = " 4'"
    node_6 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_7 = module_0.Node(set_0)
    var_7 = node_7.__repr__()
    node_8 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_9.__repr__()
    var_10 = var_8.__repr__()
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(bst_9)
    var_11 = bst_9.insert(node_10)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_11)
    bst_10 = module_0.Bst()
    none_type_0 = None
    node_12 = module_0.Node(none_type_0)
    var_12 = bst_10.insert(node_12)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    bst_12 = module_0.Bst()
    node_13 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_16 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = node_13.__repr__()
    bst_14 = module_0.Bst()
    node_14 = module_0.Node(bst_13)
    var_18 = var_17.__repr__()
    list_0 = []
    bst_15 = module_0.Bst()
    var_19 = bst_15.insert(list_0)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_15 = module_0.Node(var_19)
    bst_16 = module_0.Bst()
    var_20 = node_15.__repr__()
    with pytest.raises(TypeError):
        bst_13.insert(node_7)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_4 = node_1.__repr__()
    bst_3 = module_0.Bst(var_4)
    var_5 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_2.__repr__()
    var_8 = node_2.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_3 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    var_11 = bst_8.insert(node_4)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_10)
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_0 = False
    var_12 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_6.__repr__()
    str_1 = ""
    bst_10 = module_0.Bst(str_1)
    bst_11 = module_0.Bst()
    var_13.insert(var_10)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    str_0 = "w8<H^+~qIrArq]1_$"
    node_2 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    list_0 = []
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    var_0.insert(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    dict_0 = {var_1: node_0}
    var_0.insert(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    str_1 = ""
    bst_4 = module_0.Bst(str_1)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = ""
    bst_7 = module_0.Bst(str_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_6 = node_4.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(bst_8)
    var_7 = bst_8.insert(node_5)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    var_8 = bst_9.insert(node_6)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_8)
    var_9 = node_7.__repr__()
    var_10 = var_7.__repr__()
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_10 = module_0.Bst(set_0)
    bst_11 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_8.__repr__()
    bst_13 = module_0.Bst()
    node_9 = module_0.Node(bst_12)
    none_type_3 = None
    bst_14 = module_0.Bst(none_type_3)
    str_3 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_15 = module_0.Bst(str_3)
    bst_16 = module_0.Bst()
    var_3.insert(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_0 = module_0.Bst(str_0)
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst(var_5)
    var_3.insert(node_2)


def test_case_1741():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_0.__repr__()
    float_1 = 1992.7524
    complex_1 = 3567.8657 + 867j
    dict_1 = {float_1: float_1, float_1: complex_1}
    node_1 = module_0.Node(dict_1)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(bst_2)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_6 = node_5.__repr__()
    bst_5 = module_0.Bst(var_6)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_0)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    bst_8 = module_0.Bst()
    node_8 = module_0.Node(var_7)
    int_0 = 3317
    node_9 = module_0.Node(int_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_10 = module_0.Node(set_0)
    var_9 = node_10.__repr__()
    bst_9 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_3.insert(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = var_1.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    var_4 = node_2.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_3 = module_0.Node(dict_0)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_10 = module_0.Bst(var_9)
    str_1 = "\\g}_~\nC/\x0c5OF=a"
    var_5.insert(str_1)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_1 = node_1.__repr__()
    bst_1 = module_0.Bst(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    int_0 = -1464
    var_2 = bst_2.insert(int_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = " \x0c^"
    node_3 = module_0.Node(str_1)
    var_3 = node_3.__repr__()
    str_2 = " 4'"
    node_4 = module_0.Node(str_2)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_3}
    node_5 = module_0.Node(set_1)
    var_4 = node_5.__repr__()
    node_6 = module_0.Node(str_2)
    bst_3 = module_0.Bst()
    node_7 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_8.__repr__()
    str_4 = ""
    bst_5 = module_0.Bst(str_4)
    bst_6 = module_0.Bst()
    var_5.insert(node_6)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    bst_0 = module_0.Bst()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(var_0)
    var_2 = var_0.__repr__()
    list_0 = []
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_3)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_5 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_7 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_8 = node_6.__repr__()
    bst_8 = module_0.Bst(var_8)
    var_9 = node_6.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    var_10 = bst_9.insert(node_7)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_11 = module_0.Bst()
    var_13 = var_11.__repr__()
    bst_12 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bool_1 = False
    var_14 = bst_12.insert(bool_1)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_8.__repr__()
    str_1 = ""
    bst_13 = module_0.Bst(str_1)
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    bst_16 = module_0.Bst()
    var_16 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    node_9 = module_0.Node(bst_15)
    var_14.insert(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_3.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_3 = var_2.__repr__()
    str_0 = " 4'"
    node_5 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    var_4 = node_6.__repr__()
    node_7 = module_0.Node(str_0)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_8 = module_0.Node(set_1)
    var_5 = node_8.__repr__()
    var_2.insert(var_1)


def test_case_1746():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_2 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    str_1 = "{&:T\r/p-BHx9-lgMP"
    bst_4 = module_0.Bst(str_1)
    node_3 = module_0.Node(bst_4)
    list_0 = []
    node_4 = module_0.Node(list_0)
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_7 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_7)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    var_8 = bst_6.insert(node_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    with pytest.raises(TypeError):
        bst_6.insert(node_4)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    int_0 = -1138
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(bst_3)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_7 = node_4.__repr__()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    node_6 = module_0.Node(node_4)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_8.__repr__()
    node_9 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_10 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    var_11 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_10 = module_0.Node(var_11)
    var_13 = var_12.__repr__()
    str_2 = "7"
    node_11 = module_0.Node(str_2)
    str_3 = "(-+2Yj@U8NM6[+0S0o"
    node_12 = module_0.Node(str_3)
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_13 = module_0.Node(none_type_1)
    var_14 = node_13.__repr__()
    var_15 = bst_11.insert(str_3)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    none_type_2 = None
    node_14 = module_0.Node(none_type_2)
    var_16 = node_14.__repr__()
    var_14.insert(var_15)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_4 = var_3.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    var_7 = node_3.__repr__()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_8 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_5 = module_0.Node(str_0)
    var_10 = node_5.__repr__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bst_9 = module_0.Bst()
    var_13 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    bst_10 = module_0.Bst()
    var_16 = node_6.__repr__()
    var_17 = node_2.__repr__()
    var_17.insert(bst_10)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    str_1 = " 4'"
    node_4 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_5 = module_0.Node(set_0)
    var_4 = node_5.__repr__()
    node_6 = module_0.Node(str_1)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_7 = module_0.Node(var_6)
    var_8 = var_7.__repr__()
    str_3 = "7"
    node_8 = module_0.Node(str_3)
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    var_9 = node_9.__repr__()
    var_10 = var_9.__repr__()
    bst_7 = module_0.Bst()
    node_10 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_10.__repr__()
    bst_9 = module_0.Bst()
    node_11 = module_0.Node(var_11)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_13 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    var_15 = var_13.__repr__()
    var_16 = var_15.__repr__()
    bst_12 = module_0.Bst()
    var_17 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    var_19 = var_18.__repr__()
    bst_13 = module_0.Bst()
    node_12 = module_0.Node(bst_13)
    int_0 = -1464
    var_20 = bst_13.insert(int_0)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(var_17)
    bst_14 = module_0.Bst()
    node_14 = module_0.Node(bst_14)
    bst_15 = module_0.Bst()
    var_21 = bst_15.insert(bst_15)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_22 = node_14.__repr__()
    var_23 = var_21.__repr__()
    bst_16 = module_0.Bst()
    var_24 = bst_14.insert(bst_15)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_24.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    var_5 = bst_2.insert(bst_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_3 = module_0.Node(var_10)
    var_5.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_3.__repr__()
    bst_5 = module_0.Bst()
    str_0 = ""
    bst_6 = module_0.Bst(str_0)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_4 = module_0.Node(dict_0)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst()
    var_7 = var_5.__repr__()
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    bst_11 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bst_12 = module_0.Bst(bst_10)
    var_1.insert(bst_10)


def test_case_1752():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    node_2 = module_0.Node(bst_1)
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_0 = (dict_0, bool_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(tuple_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_5)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_9 = module_0.Bst()
    int_0 = 869
    node_7 = module_0.Node(int_0)
    bst_10 = module_0.Bst()
    float_1 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_1 = {float_1: float_1, float_1: complex_0}
    node_8 = module_0.Node(dict_1)
    with pytest.raises(TypeError):
        bst_0.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    var_3 = var_1.__repr__()
    var_1.insert(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    str_0 = " 4'"
    node_0 = module_0.Node(str_0)
    int_0 = -1138
    node_1 = module_0.Node(int_0)
    str_1 = " 4'"
    node_2 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_3 = module_0.Node(set_0)
    var_0 = node_3.__repr__()
    node_4 = module_0.Node(str_1)
    bst_0 = module_0.Bst()
    node_5 = module_0.Node(bst_0)
    var_1 = bst_0.insert(node_5)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_6 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    var_2 = bst_1.insert(node_7)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    node_8 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_8)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_9 = module_0.Node(bst_3)
    var_4 = bst_3.insert(node_9)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_4)
    var_5 = node_10.__repr__()
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    var_9 = var_8.__repr__()
    bst_5 = module_0.Bst()
    node_11 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_11.__repr__()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_12 = module_0.Node(none_type_1)
    bst_8 = module_0.Bst(bst_6)
    var_1.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    int_0 = -1464
    var_3 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    var_6 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_5.insert(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    object_0 = module_1.object()
    node_1 = module_0.Node(object_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_0 = node_2.__repr__()
    bst_0 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_3 = module_0.Node(set_1)
    var_1 = node_3.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(set_1)
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(var_4)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_2)
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_9.__repr__()
    node_10 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    bool_1 = False
    var_9 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(bst_9)
    var_9.insert(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_1 = module_0.Node(set_1)
    var_1 = node_1.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(set_1)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_5 = module_0.Bst()
    float_0 = -131.8
    bst_6 = module_0.Bst(float_0)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_9 = node_4.__repr__()
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(bst_8)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_2)
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    var_12 = node_7.__repr__()
    var_13 = bst_9.insert(str_2)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_0.insert(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_1 = module_0.Node(bytes_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is False
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_2.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_4.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_8 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_9 = module_0.Bst()
    tuple_0 = (node_6, var_8, var_9, var_9)
    node_7 = module_0.Node(tuple_0)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    var_10 = node_8.__repr__()
    bst_10 = module_0.Bst(var_10)
    var_1.insert(bst_7)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    var_2 = bst_2.insert(node_4)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    node_6 = module_0.Node(none_type_0)
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_5)
    bool_1 = True
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_9 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_9.__repr__()
    bst_8 = module_0.Bst()
    var_9 = var_7.__repr__()
    bst_9 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    bool_2 = False
    var_10 = bst_9.insert(bool_2)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    str_1 = ""
    bst_10 = module_0.Bst(str_1)
    var_12 = var_10.__repr__()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_11 = module_0.Node(str_2)
    var_11.insert(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    var_2 = node_1.__repr__()
    var_1.insert(int_0)


def test_case_1761():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(var_4)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_6 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_10 = module_0.Bst()
    node_5 = module_0.Node(var_7)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_1)
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    bst_12 = module_0.Bst()
    node_7 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_7.__repr__()
    var_13 = var_11.__repr__()
    bst_14 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_9.insert(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    node_0 = module_0.Node(bst_3)
    int_0 = -1464
    var_5 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_1 = module_0.Node(var_2)
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    var_6 = bst_4.insert(node_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_7 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_7)
    var_8 = node_4.__repr__()
    bst_6 = module_0.Bst(var_1)
    bst_6.insert(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    int_0 = -1138
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    bst_2 = module_0.Bst()
    bool_0 = True
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_5 = var_4.__repr__()
    bst_7 = module_0.Bst(bst_4)
    bst_8 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_1 = False
    var_6 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    int_1 = 3317
    node_5 = module_0.Node(int_1)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_10 = node_6.__repr__()
    bst_10 = module_0.Bst(var_10)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    var_0.insert(bst_5)


def test_case_1764():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_1 = module_0.Node(var_3)
    var_5 = var_3.__repr__()
    with pytest.raises(TypeError):
        bst_1.insert(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is False
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    var_4 = var_3.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_2.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_4.__repr__()
    node_5 = module_0.Node(bst_6)
    node_6 = module_0.Node(node_3)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    str_1 = " \x0c^"
    node_8 = module_0.Node(str_1)
    var_12 = node_8.__repr__()
    str_2 = ""
    bst_8 = module_0.Bst(str_2)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_3}
    node_9 = module_0.Node(set_0)
    var_13 = node_9.__repr__()
    var_7.insert(bst_7)


def test_case_1766():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    with pytest.raises(TypeError):
        bst_0.insert(bst_0)


def test_case_1767():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(var_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_0 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_0.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_6 = module_0.Bst(bst_4)
    list_0 = []
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(list_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_5)
    node_3 = module_0.Node(bst_7)
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_8 = module_0.Bst()
    tuple_0 = (bst_8,)
    tuple_1 = (dict_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    int_1 = 3317
    node_5 = module_0.Node(int_1)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_7 = module_0.Node(var_7)
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_8 = module_0.Node(bst_10)
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    var_10 = node_9.__repr__()
    bst_12 = module_0.Bst(var_10)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_0}
    node_10 = module_0.Node(set_1)
    bst_13 = module_0.Bst()
    var_11 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    node_11 = module_0.Node(bst_15)
    var_13 = bst_15.insert(node_11)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_13)
    bst_16 = module_0.Bst()
    none_type_3 = None
    node_13 = module_0.Node(none_type_3)
    var_14 = bst_16.insert(node_13)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    with pytest.raises(TypeError):
        bst_16.insert(none_type_3)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    var_1.insert(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(bst_0)
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_3 = module_0.Node(var_7)
    var_9 = var_7.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_4 = module_0.Node(set_1)
    var_10 = node_4.__repr__()
    bst_5 = module_0.Bst(var_10)
    var_11 = node_4.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_12 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_14 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_11 = module_0.Bst(var_13)
    bst_12 = module_0.Bst()
    var_16 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    node_5 = module_0.Node(var_17)
    var_5.insert(str_0)


def test_case_1770():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    int_0 = 869
    node_3 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_5 = module_0.Node(var_1)
    object_0 = module_1.object()
    node_6 = module_0.Node(object_0)
    var_2 = node_6.__repr__()
    dict_0 = {int_0: bst_1}
    with pytest.raises(TypeError):
        bst_1.insert(dict_0)


def test_case_1771():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_1 = module_0.Node(var_5)
    var_7 = var_6.__repr__()
    str_0 = "7"
    node_2 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_3.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(var_8)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    var_12 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_13 = module_0.Bst(var_11)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_1)
    bst_14 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_14 = bst_14.insert(bool_1)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    str_2 = ""
    bst_15 = module_0.Bst(str_2)
    var_16 = var_14.__repr__()
    with pytest.raises(TypeError):
        bst_14.insert(bst_14)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    var_1 = node_0.__repr__()
    var_1.insert(bst_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()
    bst_6 = module_0.Bst()
    var_5 = node_2.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    var_6 = node_4.__repr__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_5 = module_0.Node(var_10)
    var_3.insert(bst_5)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst(var_4)
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    str_0 = ""
    bst_10 = module_0.Bst(str_0)
    var_9 = var_7.__repr__()
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    var_12 = var_10.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_3 = module_0.Node(set_0)
    var_13 = node_3.__repr__()
    bst_12 = module_0.Bst(var_13)
    var_8.insert(node_3)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    int_0 = 869
    node_0 = module_0.Node(int_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = node_1.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_2 = module_0.Node(set_0)
    var_2 = node_2.__repr__()
    bst_3 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    var_0.insert(bst_2)


def test_case_1776():
    none_type_0 = None
    none_type_1 = None
    bst_0 = module_0.Bst(none_type_1)
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    str_0 = " 4'"
    node_0 = module_0.Node(str_0)
    int_0 = 2253
    node_1 = module_0.Node(int_0)
    str_1 = ""
    bst_0 = module_0.Bst(str_1)
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    var_2 = node_2.__repr__()
    node_3 = module_0.Node(var_1)
    var_3 = var_1.__repr__()
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(node_5)
    bst_3 = module_0.Bst(bool_0)
    bst_3.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = var_0.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    dict_0 = {node_2: none_type_1, node_2: none_type_1}
    bst_4 = module_0.Bst(dict_0)
    int_0 = 869
    node_3 = module_0.Node(int_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_4 = module_0.Node(set_0)
    var_4 = node_4.__repr__()
    node_5 = module_0.Node(var_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_6 = module_0.Node(set_1)
    node_7 = module_0.Node(bst_5)
    str_2 = "w8<H^+~qIrArq]1_$"
    node_8 = module_0.Node(str_2)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_8)
    var_3.insert(node_5)


def test_case_1779():
    none_type_0 = None
    bst_0 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_0 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_5 = node_2.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_2}
    node_3 = module_0.Node(set_1)
    node_4 = module_0.Node(bst_4)
    var_8 = var_6.__repr__()
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    list_0 = []
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(list_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_11)
    str_3 = " 4'"
    node_6 = module_0.Node(str_3)
    str_4 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_4}
    node_7 = module_0.Node(set_2)
    var_12 = node_7.__repr__()
    node_8 = module_0.Node(str_3)
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_8)
    var_13 = bst_8.insert(node_9)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(var_13)
    var_0.insert(bst_6)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    str_0 = "PQ8\t>QS,&s/yd:-J3%"
    set_0 = {str_0, str_0}
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    var_0.insert(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    str_0 = " 4'"
    node_0 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    node_2 = module_0.Node(str_0)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_2)
    var_0.insert(node_3)


def test_case_1783():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    list_0 = []
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    var_6 = node_5.__repr__()
    bst_4 = module_0.Bst(var_6)
    var_7 = node_5.__repr__()
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_8)
    list_1 = []
    bst_6 = module_0.Bst()
    var_9 = bst_6.insert(list_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_9)
    node_9 = module_0.Node(bst_6)
    with pytest.raises(TypeError):
        bst_5.insert(var_4)


def test_case_1784():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst(node_2)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    str_1 = ""
    bst_4 = module_0.Bst(str_1)
    var_4 = var_2.__repr__()
    bst_5 = module_0.Bst(node_2)
    with pytest.raises(TypeError):
        bst_5.insert(node_2)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    var_4 = node_2.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_0)
    var_5 = node_3.__repr__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    int_0 = 3317
    node_4 = module_0.Node(int_0)
    var_0.insert(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_2 = node_4.__repr__()
    var_3 = node_4.__repr__()
    list_0 = []
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(list_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    node_6 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    int_0 = -1464
    var_8 = bst_5.insert(int_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_5)
    var_6.insert(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    node_0 = module_0.Node(tuple_0)
    str_0 = "MzrK>|+_fza4.c|f"
    bst_0 = module_0.Bst(str_0)
    bst_0.insert(node_0)


def test_case_1788():
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_2 = node_1.__repr__()
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    var_6 = var_5.__repr__()
    bst_2 = module_0.Bst()
    var_7 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_10 = node_2.__repr__()
    var_11 = node_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_0 = False
    var_12 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_3.__repr__()
    node_4 = module_0.Node(bool_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    var_14 = node_5.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_6 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    list_0 = []
    bst_5 = module_0.Bst()
    var_15 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(var_15)
    bst_6 = module_0.Bst()
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    bst_7 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_9 = module_0.Node(set_0)
    var_16 = node_9.__repr__()
    bst_8 = module_0.Bst()
    var_17 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_9 = module_0.Bst()
    node_10 = module_0.Node(set_0)
    with pytest.raises(TypeError):
        bst_1.insert(node_5)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_3.__repr__()
    bst_3 = module_0.Bst()
    var_6 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_9 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_8.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_2 = module_0.Node(set_1)
    var_11 = node_2.__repr__()
    bst_5 = module_0.Bst(var_11)
    bst_6 = module_0.Bst()
    var_12 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    bst_7 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_3 = module_0.Node(set_2)
    node_4 = module_0.Node(bst_6)
    var_14 = var_12.__repr__()
    str_3 = "{&:T\r/p-BHx9-lgMP"
    bst_8 = module_0.Bst(str_3)
    node_5 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_15 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_6.__repr__()
    bst_11 = module_0.Bst()
    int_0 = 869
    node_7 = module_0.Node(int_0)
    bst_12 = module_0.Bst()
    int_1 = -2016
    list_0 = [int_1, int_1]
    node_8 = module_0.Node(list_0)
    var_8.insert(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    str_1 = ""
    bst_2 = module_0.Bst(str_1)
    var_2 = var_0.__repr__()
    int_0 = 869
    node_2 = module_0.Node(int_0)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_2)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    bst_7 = module_0.Bst()
    var_7 = var_5.__repr__()
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_7 = module_0.Node(bytes_0)
    var_8 = node_7.__repr__()
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bool_1 = False
    var_10 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_9 = module_0.Bst()
    var_12 = var_11.__repr__()
    var_13 = var_10.__repr__()
    bool_2 = False
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(node_9)
    var_14 = node_0.__repr__()
    var_14.insert(none_type_0)


def test_case_1791():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(none_type_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_1 = module_0.Bst(str_0)
    object_0 = module_1.object()
    node_2 = module_0.Node(object_0)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    int_0 = -1464
    var_3 = bst_3.insert(int_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_1 = " 4'"
    node_5 = module_0.Node(str_1)
    with pytest.raises(TypeError):
        bst_3.insert(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_2.__repr__()
    var_3 = var_1.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    node_5 = module_0.Node(bst_4)
    node_6 = module_0.Node(node_3)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_7 = module_0.Bst()
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_8 = module_0.Node(set_0)
    node_9 = module_0.Node(bst_6)
    var_5.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    str_0 = " 4'"
    node_1 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_2 = node_2.__repr__()
    node_3 = module_0.Node(str_0)
    str_2 = "{&:T\r/p-BHx9-lgMP"
    bst_1 = module_0.Bst(str_2)
    node_4 = module_0.Node(bst_1)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_5 = module_0.Node(bytes_0)
    var_3 = node_5.__repr__()
    var_4 = var_3.__repr__()
    node_6 = module_0.Node(node_4)
    bst_2 = module_0.Bst()
    node_7 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_5.data).__module__}.{type(var_5.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_5.left is None
    assert var_5.right is None
    assert var_5.parent is None
    var_6 = node_7.__repr__()
    bst_4 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bst_5 = module_0.Bst(bst_3)
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    dict_0 = {node_9: none_type_2, node_9: none_type_2}
    bst_6 = module_0.Bst(dict_0)
    var_6.insert(set_0)


def test_case_1794():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_2.__repr__()


@pytest.mark.xfail(strict=True)
def test_case_1795():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    var_4.insert(bst_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = node_0.__repr__()
    var_2 = node_0.__repr__()
    var_3 = var_0.__repr__()
    var_3.insert(bst_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    int_0 = -1464
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == -1464
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = ""
    bst_1 = module_0.Bst(str_0)
    int_1 = 3317
    node_1 = module_0.Node(int_1)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_1 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_3 = module_0.Node(var_2)
    none_type_1 = None
    bst_3 = module_0.Bst(none_type_1)
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    var_3 = node_4.__repr__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_2 = False
    var_6 = bst_4.insert(bool_2)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    node_6 = module_0.Node(bool_2)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    var_8 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_8)
    object_0 = module_1.object()
    node_9 = module_0.Node(object_0)
    var_9 = node_9.__repr__()
    var_2.insert(int_1)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    int_0 = 869
    node_1 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    object_0 = module_1.object()
    node_4 = module_0.Node(object_0)
    var_3 = node_4.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_5.__repr__()
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(var_4)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_6 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_7.__repr__()
    bst_12 = module_0.Bst()
    node_8 = module_0.Node(bst_11)
    var_8 = var_7.__repr__()
    bst_13 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_9 = module_0.Node(set_0)
    var_9 = node_9.__repr__()
    bst_14 = module_0.Bst()
    node_10 = module_0.Node(bst_14)
    var_10 = bst_14.insert(node_10)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_15 = module_0.Bst()
    node_11 = module_0.Node(bst_15)
    var_11 = bst_15.insert(node_11)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_12 = module_0.Node(var_11)
    var_12 = node_12.__repr__()
    var_13 = var_10.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_13 = module_0.Node(set_1)
    var_14 = node_13.__repr__()
    bst_16 = module_0.Bst(var_14)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_14 = module_0.Node(set_2)
    var_15 = node_14.__repr__()
    bst_17 = module_0.Bst()
    var_16 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_18 = module_0.Bst()
    node_15 = module_0.Node(set_2)
    bst_19 = module_0.Bst()
    var_18 = bst_19.insert(bst_19)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_16 = module_0.Node(bst_19)
    var_12.insert(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    var_3 = node_2.__repr__()
    node_3 = module_0.Node(var_2)
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst(bst_3)
    object_0 = module_1.object()
    node_6 = module_0.Node(object_0)
    var_7 = node_6.__repr__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    var_10 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_10)
    object_1 = module_1.object()
    node_9 = module_0.Node(object_1)
    var_11 = node_9.__repr__()
    bst_6.insert(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    var_3 = var_1.__repr__()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    var_4 = node_1.__repr__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bst_3 = module_0.Bst()
    var_7 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    bst_4 = module_0.Bst()
    var_10 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    var_11 = bst_6.insert(bool_1)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(var_12)
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_13 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    node_6 = module_0.Node(var_13)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_2 = False
    var_15 = bst_9.insert(bool_2)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_7.__repr__()
    node_8 = module_0.Node(bool_2)
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    bst_10 = module_0.Bst()
    var_17 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    var_19 = var_17.__repr__()
    bst_11 = module_0.Bst()
    var_20 = node_9.__repr__()
    bst_12 = module_0.Bst()
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    var_21 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10.insert(bst_9)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_1.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst(var_1)
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    var_3 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    str_0 = ""
    bst_6 = module_0.Bst(str_0)
    var_5 = var_3.__repr__()
    bst_7 = module_0.Bst()
    node_3 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_3.__repr__()
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    var_8 = var_7.__repr__()
    bst_10 = module_0.Bst()
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_9 = node_5.__repr__()
    bst_12 = module_0.Bst()
    node_6 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_10 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    bst_14 = module_0.Bst()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    bst_15 = module_0.Bst(bst_13)
    bst_16 = module_0.Bst()
    node_8 = module_0.Node(bst_16)
    var_12 = bst_16.insert(node_8)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_12)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_10 = module_0.Node(set_1)
    var_13 = node_10.__repr__()
    node_11 = module_0.Node(var_13)
    bst_17 = module_0.Bst()
    none_type_3 = None
    node_12 = module_0.Node(none_type_3)
    bool_2 = False
    var_14 = bst_17.insert(bool_2)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(bst_17)
    bst_18 = module_0.Bst()
    var_9.insert(bst_18)


def test_case_1802():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_2 = module_0.Node(var_4)
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_9 = node_4.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_0)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    node_7 = module_0.Node(bst_8)
    node_8 = module_0.Node(node_5)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_9 = module_0.Node(set_0)
    var_12 = node_9.__repr__()
    bst_9 = module_0.Bst(var_12)
    var_13 = node_9.__repr__()
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    var_14 = bst_10.insert(node_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_15 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = var_15.__repr__()
    bst_12 = module_0.Bst()
    var_17 = var_15.__repr__()
    node_11 = module_0.Node(var_17)
    bst_13 = module_0.Bst()
    var_18 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    var_19 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = var_19.__repr__()
    node_12 = module_0.Node(var_19)
    var_21 = var_20.__repr__()
    str_2 = "7"
    node_13 = module_0.Node(str_2)
    int_0 = 2253
    node_14 = module_0.Node(int_0)
    var_22 = node_14.__repr__()
    int_1 = 869
    node_15 = module_0.Node(int_1)
    bst_15 = module_0.Bst()
    none_type_2 = None
    node_16 = module_0.Node(none_type_2)
    bool_1 = False
    var_23 = bst_15.insert(bool_1)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_24 = node_16.__repr__()
    with pytest.raises(TypeError):
        bst_10.insert(node_7)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    bool_0 = True
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_1.insert(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    int_0 = 3820
    tuple_0 = (int_0,)
    node_0 = module_0.Node(tuple_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    dict_0 = {var_0: bst_0, tuple_0: bst_0, bst_0: tuple_0, int_0: node_0}
    var_0.insert(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst(var_1)
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(node_1)
    str_0 = "\tD\rb9y@AZRea"
    node_3 = module_0.Node(str_0)
    var_4 = node_3.__repr__()
    var_1.insert(node_1)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    var_2 = node_0.__repr__()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_3 = node_3.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_4 = module_0.Node(set_0)
    var_4 = node_4.__repr__()
    bst_2 = module_0.Bst(var_4)
    var_5 = node_4.__repr__()
    bst_3 = module_0.Bst()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_5.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst(var_6)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_6 = module_0.Node(dict_0)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    var_10 = var_8.__repr__()
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_0 = False
    var_11 = bst_9.insert(bool_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_10 = module_0.Bst()
    var_13 = var_12.__repr__()
    var_14 = var_11.__repr__()
    var_13.insert(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_1 = module_0.Node(bytes_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(node_0)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    var_2 = bst_1.insert(node_3)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    var_3 = bst_2.insert(node_4)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_3)
    var_4 = node_5.__repr__()
    bst_3 = module_0.Bst()
    node_6 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    bool_0 = False
    var_7 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_8.__repr__()
    str_1 = ""
    bst_7 = module_0.Bst(str_1)
    bst_8 = module_0.Bst()
    var_2.insert(var_8)


def test_case_1808():
    none_type_0 = None
    set_0 = set()
    bst_0 = module_0.Bst(set_0)
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(var_2)
    var_4 = node_4.__repr__()
    list_0 = []
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_5)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_1)
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_8.__repr__()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst(node_9)
    str_2 = " \x0c^"
    node_10 = module_0.Node(str_2)
    var_8 = node_10.__repr__()
    list_1 = []
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(list_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_11 = module_0.Node(var_9)
    bst_10 = module_0.Bst()
    var_10 = node_11.__repr__()
    bst_11 = module_0.Bst()
    node_12 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_12.__repr__()
    bst_13 = module_0.Bst()
    node_13 = module_0.Node(bst_12)
    var_0.insert(node_6)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    var_1 = node_1.__repr__()
    bool_0 = True
    set_1 = {bool_0, bool_0}
    bst_1 = module_0.Bst(set_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(var_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_2.__repr__()
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(var_5)
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    bst_9 = module_0.Bst()
    node_5 = module_0.Node(bst_9)
    var_0.insert(bst_7)


def test_case_1811():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_1 = False
    var_1 = bst_2.insert(bool_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_0.__repr__()
    node_1 = module_0.Node(bool_1)
    bst_3 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_2.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    int_0 = 2253
    node_1 = module_0.Node(int_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_1 = node_2.__repr__()
    bst_0 = module_0.Bst()
    var_2 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    var_4.insert(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_0 = module_0.Node(dict_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    var_2 = bst_0.insert(node_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_5 = bst_4.insert(bool_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(var_6)
    bst_6 = module_0.Bst()
    var_7 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    var_9 = var_7.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_4.__repr__()
    var_12 = node_4.__repr__()
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_5 = module_0.Node(bytes_0)
    var_13 = node_5.__repr__()
    var_14 = var_13.__repr__()
    str_0 = " 4'"
    node_6 = module_0.Node(str_0)
    var_0.insert(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(none_type_0)
    int_0 = 3317
    node_2 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_2 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_2 = False
    var_3 = bst_2.insert(bool_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst(node_7)
    bool_3 = True
    float_0 = -128.5329
    dict_0 = {bool_3: float_0}
    tuple_0 = (dict_0, bool_3)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(tuple_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_1.insert(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_0 = module_0.Bst(set_0)
    var_0 = node_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = False
    var_1 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data is False
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_2 = module_0.Bst()
    tuple_0 = (node_1, var_1, var_2, var_2)
    node_2 = module_0.Node(tuple_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_0}
    node_3 = module_0.Node(set_1)
    var_3 = node_3.__repr__()
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(set_1)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_6 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    node_7 = module_0.Node(bst_6)
    node_8 = module_0.Node(node_5)
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    bool_2 = False
    var_8 = bst_7.insert(bool_2)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_9.__repr__()
    node_10 = module_0.Node(none_type_1)
    bst_8 = module_0.Bst()
    node_11 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    node_12 = module_0.Node(bst_10)
    var_10 = bst_10.insert(node_12)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(var_10)
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_14 = module_0.Node(none_type_2)
    var_11 = bst_11.insert(node_14)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_2}
    node_15 = module_0.Node(set_2)
    var_12 = node_15.__repr__()
    bst_12 = module_0.Bst(var_12)
    int_0 = 1235
    dict_1 = {int_0: int_0, int_0: int_0}
    node_16 = module_0.Node(dict_1)
    var_13 = node_16.__repr__()
    var_14 = var_13.__repr__()
    var_8.insert(var_5)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    float_0 = -131.8
    bst_1 = module_0.Bst(float_0)
    list_0 = []
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(list_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    int_0 = 3317
    node_3 = module_0.Node(int_0)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_5 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    var_4 = bst_4.insert(node_6)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_5.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(var_2)
    var_4 = var_3.__repr__()
    str_1 = "7"
    node_2 = module_0.Node(str_1)
    var_3.insert(var_0)


def test_case_1818():
    int_0 = 869
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    str_0 = " 4'"
    node_2 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_3 = module_0.Node(set_0)
    var_2 = node_3.__repr__()
    node_4 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_3 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_5.__repr__()
    node_6 = module_0.Node(bool_1)
    str_2 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_2 = module_0.Bst(str_2)
    node_7 = module_0.Node(bst_2)
    str_3 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_3}
    node_8 = module_0.Node(set_1)
    var_5 = node_8.__repr__()
    node_9 = module_0.Node(var_5)
    str_4 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_4}
    node_10 = module_0.Node(set_2)
    var_6 = node_10.__repr__()
    int_1 = 3820
    tuple_0 = (int_1,)
    node_11 = module_0.Node(tuple_0)
    var_7 = node_11.__repr__()
    bst_3 = module_0.Bst()
    node_12 = module_0.Node(bst_3)
    var_8 = bst_3.insert(node_12)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    with pytest.raises(TypeError):
        bst_3.insert(var_8)


def test_case_1819():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_2 = module_0.Node(var_1)
    none_type_0 = None
    bst_2 = module_0.Bst(none_type_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_3 = module_0.Bst(str_0)
    bst_4 = module_0.Bst()
    int_1 = 3317
    node_3 = module_0.Node(int_1)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_5 = module_0.Node(var_3)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_6.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(var_4)
    var_6 = node_6.__repr__()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_8.__repr__()
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_10)
    var_9 = var_8.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_10 = module_0.Node(str_1)
    bst_12 = module_0.Bst()
    node_11 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_10 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_11.__repr__()
    node_12 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_12 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    node_13 = module_0.Node(var_12)
    none_type_2 = None
    bst_15 = module_0.Bst(none_type_2)
    list_0 = []
    bst_16 = module_0.Bst()
    var_14 = bst_16.insert(list_0)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_14 = module_0.Node(var_14)
    bst_17 = module_0.Bst()
    var_15 = node_14.__repr__()
    with pytest.raises(TypeError):
        bst_16.insert(var_14)


def test_case_1820():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    with pytest.raises(TypeError):
        bst_1.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_1.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_3)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_4 = module_0.Node(bst_5)
    var_6 = bst_5.insert(node_4)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_6)
    var_7 = node_5.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_6 = module_0.Node(set_0)
    var_8 = node_6.__repr__()
    bst_6 = module_0.Bst(var_8)
    var_4.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    int_0 = -2466
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bst_2 = module_0.Bst()
    tuple_0 = (bst_2,)
    tuple_1 = (dict_0, tuple_0)
    node_1 = module_0.Node(tuple_1)
    var_0.insert(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    int_0 = 869
    node_1 = module_0.Node(int_0)
    var_3 = var_0.__repr__()
    var_3.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    int_0 = 3317
    node_0 = module_0.Node(int_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_2 = module_0.Node(var_1)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_2 = node_3.__repr__()
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    var_3 = node_4.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_1)
    bst_1 = module_0.Bst()
    node_6 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_6.__repr__()
    node_7 = module_0.Node(bst_2)
    var_6 = node_5.__repr__()
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bool_2 = False
    var_7 = bst_3.insert(bool_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_8.__repr__()
    node_9 = module_0.Node(bool_2)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_10 = module_0.Node(bst_5)
    var_9 = bst_5.insert(node_10)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = var_10.__repr__()
    bst_7 = module_0.Bst()
    var_12 = var_10.__repr__()
    node_11 = module_0.Node(var_12)
    bst_8 = module_0.Bst()
    none_type_2 = None
    node_12 = module_0.Node(none_type_2)
    var_13 = node_12.__repr__()
    var_14 = var_13.__repr__()
    bool_3 = False
    node_13 = module_0.Node(bool_3)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_14 = module_0.Node(str_2)
    bst_9 = module_0.Bst()
    node_15 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_15 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_16 = node_15.__repr__()
    node_16 = module_0.Node(bst_10)
    node_17 = module_0.Node(node_14)
    bst_11 = module_0.Bst()
    none_type_3 = None
    node_18 = module_0.Node(none_type_3)
    bool_4 = False
    var_17 = bst_11.insert(bool_4)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_12 = module_0.Bst()
    var_19 = var_18.__repr__()
    var_20 = var_17.__repr__()
    bst_13 = module_0.Bst()
    node_19 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_21 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_22 = node_19.__repr__()
    bst_15 = module_0.Bst()
    node_20 = module_0.Node(var_21)
    var_23 = node_19.__repr__()
    bst_16 = module_0.Bst()
    var_19.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_4 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_7 = module_0.Bst()
    node_4 = module_0.Node(var_4)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_0)
    bst_10 = module_0.Bst()
    node_6 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_6 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    node_7 = module_0.Node(bst_11)
    node_8 = module_0.Node(node_5)
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_9 = module_0.Node(bytes_0)
    var_8 = node_9.__repr__()
    bst_12 = module_0.Bst()
    node_10 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_9 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_10.__repr__()
    bst_14 = module_0.Bst()
    node_11 = module_0.Node(var_9)
    bst_15 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_12 = module_0.Node(set_0)
    var_11 = node_12.__repr__()
    bool_1 = True
    node_13 = module_0.Node(bool_1)
    var_12 = node_13.__repr__()
    bst_16 = module_0.Bst()
    node_14 = module_0.Node(bst_16)
    bst_17 = module_0.Bst()
    var_13 = bst_17.insert(bst_17)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_14.__repr__()
    var_15 = var_13.__repr__()
    bst_18 = module_0.Bst()
    tuple_0 = (var_8, bst_2, var_3, var_10)
    var_1.insert(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_2 = module_0.Bst(str_0)
    node_1 = module_0.Node(bst_2)
    var_0.insert(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(bst_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    var_1 = bst_2.insert(node_1)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_2 = bst_3.insert(node_2)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_2)
    var_3 = node_3.__repr__()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_6 = var_4.__repr__()
    bst_5 = module_0.Bst()
    var_7 = node_4.__repr__()
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_8 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_5.__repr__()
    int_0 = 2253
    node_6 = module_0.Node(int_0)
    var_10 = node_6.__repr__()
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_7 = module_0.Node(var_12)
    node_8 = module_0.Node(node_7)
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_13 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_9.__repr__()
    bst_11 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    var_15 = var_14.__repr__()
    bst_12 = module_0.Bst()
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_0 = [bytes_0]
    node_11 = module_0.Node(list_0)
    var_0.insert(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    bytes_0 = b"~3\xe4"
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bytes_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == b"~3\xe4"
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    int_0 = -881
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(int_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_1.insert(var_0)


def test_case_1829():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_1 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(var_1)
    var_3 = node_1.__repr__()
    bst_5 = module_0.Bst(var_2)
    bst_6 = module_0.Bst()
    node_3 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_4 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    var_6 = var_4.__repr__()
    bst_8 = module_0.Bst()
    var_7 = bst_6.insert(bst_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_4 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_8 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_4.__repr__()
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst(var_8)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_5 = module_0.Node(set_0)
    var_10 = node_5.__repr__()
    bst_13 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    with pytest.raises(TypeError):
        bst_3.insert(bst_4)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    node_1 = module_0.Node(bst_0)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    var_1 = node_2.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    object_0 = module_1.object()
    node_3 = module_0.Node(object_0)
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_4.__repr__()
    var_6 = var_4.__repr__()
    bst_3 = module_0.Bst()
    var_2.insert(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    int_0 = -1138
    node_0 = module_0.Node(int_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    var_3 = bst_0.insert(node_2)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    bst_1 = module_0.Bst()
    var_4 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_2 = module_0.Bst()
    var_6 = var_4.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_3.__repr__()
    var_9 = node_3.__repr__()
    node_4 = module_0.Node(var_8)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_5 = module_0.Node(set_0)
    var_10 = node_5.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    node_7 = module_0.Node(node_5)
    list_0 = []
    bst_6 = module_0.Bst()
    var_11 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_11)
    bst_7 = module_0.Bst()
    var_12 = node_8.__repr__()
    bst_8 = module_0.Bst()
    var_13 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = var_13.__repr__()
    bst_9 = module_0.Bst()
    node_9 = module_0.Node(bst_9)
    var_10.insert(bst_1)


def test_case_1832():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_1 = module_0.Node(dict_0)
    var_1 = node_1.__repr__()
    var_2 = var_1.__repr__()
    int_1 = 3820
    tuple_0 = (int_1,)
    node_2 = module_0.Node(tuple_0)
    var_3 = node_2.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    var_4 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_4.data).__module__}.{type(var_4.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_4.left is None
    assert var_4.right is None
    assert var_4.parent is None
    var_5 = var_4.__repr__()
    node_3 = module_0.Node(bst_0)
    float_0 = -131.8
    bst_2 = module_0.Bst(float_0)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_6 = node_4.__repr__()
    bst_4 = module_0.Bst()
    node_5 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    var_9 = var_7.__repr__()
    with pytest.raises(TypeError):
        bst_5.insert(node_0)


def test_case_1833():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    var_0 = node_1.__repr__()
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(var_1)
    int_0 = 2253
    node_4 = module_0.Node(int_0)
    var_3 = node_4.__repr__()
    with pytest.raises(TypeError):
        bst_1.insert(int_0)


def test_case_1834():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    bst_0 = module_0.Bst(var_0)
    var_1 = node_1.__repr__()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_2 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    var_5 = var_3.__repr__()
    node_3 = module_0.Node(var_5)
    none_type_0 = None
    bst_4 = module_0.Bst(none_type_0)
    list_0 = []
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_6)
    var_7 = node_4.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_5 = module_0.Node(dict_0)
    bool_1 = True
    set_1 = {bool_1, bool_1}
    bst_6 = module_0.Bst(set_1)
    var_8 = node_5.__repr__()
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_9.__repr__()
    node_6 = module_0.Node(var_9)
    var_11 = var_9.__repr__()
    bst_8 = module_0.Bst()
    var_12 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = var_12.__repr__()
    var_14 = var_13.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_2 = {str_1}
    node_7 = module_0.Node(set_2)
    var_15 = node_7.__repr__()
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    node_9 = module_0.Node(node_7)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_10 = module_0.Node(str_2)
    int_0 = 3317
    node_11 = module_0.Node(int_0)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_12 = module_0.Node(none_type_2)
    bool_2 = False
    var_16 = bst_10.insert(bool_2)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    node_13 = module_0.Node(var_17)
    with pytest.raises(TypeError):
        bst_1.insert(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    str_0 = "w8<H^+~qIrArq]1_$"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_3 = module_0.Node(var_1)
    var_2 = node_3.__repr__()
    var_1.insert(node_1)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    var_1 = node_1.__repr__()
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    var_2 = bst_0.insert(bool_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data is False
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = var_2.__repr__()
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(var_3)
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_2 = False
    var_4 = bst_2.insert(bool_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(bst_2)
    var_1.insert(node_3)


def test_case_1837():
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_0 = module_0.Node(bytes_0)
    bst_0 = module_0.Bst()
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    var_1 = bst_5.insert(node_3)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_2 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    node_5 = module_0.Node(none_type_1)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_7 = module_0.Bst(str_0)
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_4 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_6.__repr__()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(var_4)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_9.insert(bst_11)


def test_case_1838():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(bool_0)
    var_2 = node_1.__repr__()
    var_3 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_4 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_1)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst(node_5)
    int_0 = 2253
    node_6 = module_0.Node(int_0)
    var_7 = node_6.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    var_9 = bst_6.insert(node_7)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_10)
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_9 = module_0.Bst(set_0)
    bst_10 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_10 = module_0.Node(str_1)
    bst_11 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    var_11 = node_11.__repr__()
    var_12 = bst_11.insert(str_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    node_12 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_13 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_12.__repr__()
    var_15 = node_12.__repr__()
    node_13 = module_0.Node(var_14)
    bool_2 = True
    var_12.insert(bool_2)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    var_1 = node_1.__repr__()
    list_0 = []
    bst_1 = module_0.Bst()
    var_2 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_2.data == []
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    node_2 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    int_0 = -2016
    list_1 = [int_0, int_0]
    node_3 = module_0.Node(list_1)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    object_0 = module_1.object()
    node_4 = module_0.Node(object_0)
    var_5 = node_4.__repr__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__repr__()
    dict_0 = {}
    node_5 = module_0.Node(dict_0)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_6.__repr__()
    var_10 = var_8.__repr__()
    bst_6 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_1)
    bst_7 = module_0.Bst()
    node_8 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_11 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_8.__repr__()
    node_9 = module_0.Node(bst_8)
    node_10 = module_0.Node(node_7)
    var_7.insert(node_8)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(var_3)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(bst_6)
    bst_8 = module_0.Bst()
    node_4 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    bst_10 = module_0.Bst()
    node_5 = module_0.Node(var_7)
    int_0 = -1138
    node_6 = module_0.Node(int_0)
    bst_11 = module_0.Bst()
    node_7 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_9 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_7.__repr__()
    bst_13 = module_0.Bst()
    bst_14 = module_0.Bst(var_9)
    list_0 = []
    bst_15 = module_0.Bst()
    var_11 = bst_15.insert(list_0)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_11)
    bst_16 = module_0.Bst()
    bst_17 = module_0.Bst()
    node_9 = module_0.Node(bst_17)
    bst_18 = module_0.Bst()
    var_12 = bst_18.insert(bst_18)
    assert (
        f"{type(bst_18.root).__module__}.{type(bst_18.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_9.__repr__()
    var_14 = node_9.__repr__()
    node_10 = module_0.Node(var_13)
    var_15 = var_13.__repr__()
    var_16 = bst_17.insert(node_9)
    assert (
        f"{type(bst_17.root).__module__}.{type(bst_17.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_19 = module_0.Bst()
    node_11 = module_0.Node(bst_19)
    bst_20 = module_0.Bst()
    var_17 = bst_20.insert(bst_20)
    assert (
        f"{type(bst_20.root).__module__}.{type(bst_20.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = node_11.__repr__()
    bst_21 = module_0.Bst()
    none_type_0 = None
    node_12 = module_0.Node(none_type_0)
    bst_22 = module_0.Bst(bst_20)
    float_1 = -131.8
    bst_23 = module_0.Bst(float_1)
    var_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    int_0 = 2253
    node_0 = module_0.Node(int_0)
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    bst_0 = module_0.Bst(var_0)
    var_1 = node_1.__repr__()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_2.__repr__()
    var_4 = var_2.__repr__()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_3 = module_0.Node(var_5)
    var_7 = var_5.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_4 = module_0.Node(set_1)
    var_8 = node_4.__repr__()
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    var_9 = node_5.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    bool_1 = False
    var_10 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_6.__repr__()
    node_7 = module_0.Node(bool_1)
    var_12 = node_7.__repr__()
    var_13 = var_10.__repr__()
    int_1 = 2253
    node_8 = module_0.Node(int_1)
    var_14 = node_8.__repr__()
    bst_5 = module_0.Bst(var_14)
    list_0 = []
    bst_6 = module_0.Bst()
    var_15 = bst_6.insert(list_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_15)
    var_7.insert(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(set_0)
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_3 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    node_3 = module_0.Node(bool_0)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    var_5 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    node_5 = module_0.Node(bool_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_2 = False
    var_7 = bst_5.insert(bool_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_6 = module_0.Bst()
    var_9 = var_8.__repr__()
    var_10 = var_7.__repr__()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    bst_7 = module_0.Bst()
    var_11 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    bst_8 = module_0.Bst()
    var_14 = node_7.__repr__()
    set_1 = set()
    node_8 = module_0.Node(set_1)
    var_4.insert(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_3 = bst_0.insert(bst_1)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_5 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_1 = module_0.Node(var_5)
    var_7 = var_6.__repr__()
    bst_5 = module_0.Bst()
    var_8 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    node_2 = module_0.Node(var_8)
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_10 = bst_6.insert(bool_0)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_3.__repr__()
    node_4 = module_0.Node(bool_0)
    var_12 = node_4.__repr__()
    var_13 = var_10.__repr__()
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_14 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_5.__repr__()
    bst_9 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    var_16 = var_15.__repr__()
    bst_10 = module_0.Bst()
    node_7 = module_0.Node(bst_10)
    var_17 = bst_10.insert(node_7)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_18 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = var_18.__repr__()
    bst_12 = module_0.Bst()
    bst_13 = module_0.Bst()
    var_16.insert(var_15)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    bool_0 = True
    float_0 = 3092.57
    list_0 = [bool_0, float_0]
    bytes_0 = b"\x8fO\xd7\x87*\xf7$fG"
    set_0 = {bytes_0}
    list_1 = [bytes_0, bytes_0, set_0]
    node_0 = module_0.Node(list_1)
    var_0 = node_0.__repr__()
    var_0.insert(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_1 = module_0.Node(set_0)
    var_3 = node_1.__repr__()
    node_2 = module_0.Node(var_3)
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_3.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst(bst_3)
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_5 = module_0.Node(list_0)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_7)
    bst_9 = module_0.Bst()
    var_8 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    float_0 = -1863.9
    var_7.insert(float_0)


def test_case_1847():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    with pytest.raises(TypeError):
        bst_0.insert(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    var_0 = node_1.__repr__()
    var_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    list_0 = []
    list_1 = [list_0, list_0]
    str_0 = "\\:tvR$J"
    dict_0 = {str_0: list_0, str_0: str_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    str_0 = "vOK:\\f"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    var_3 = var_0.__repr__()
    float_0 = -131.8
    bst_2 = module_0.Bst(float_0)
    var_1.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_1 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = node_3.__repr__()
    node_4 = module_0.Node(bst_5)
    bst_6 = module_0.Bst(node_4)
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_5 = module_0.Node(bytes_0)
    bst_7 = module_0.Bst()
    bool_0 = False
    node_6 = module_0.Node(bool_0)
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_3 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_7.__repr__()
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    var_5 = var_4.__repr__()
    bool_1 = True
    bst_11 = module_0.Bst()
    var_6 = bst_11.insert(bool_1)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bytes_1 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_9 = module_0.Node(bytes_1)
    var_7 = node_9.__repr__()
    var_8 = var_7.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_10 = module_0.Node(set_0)
    var_9 = node_10.__repr__()
    bst_12 = module_0.Bst(var_9)
    bool_2 = False
    node_11 = module_0.Node(bool_2)
    var_10 = node_11.__repr__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()
    var_2.insert(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    var_1 = bst_0.insert(str_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == "(-+2Yj@U8NM6[+0S0o"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_1)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    node_4 = module_0.Node(bst_2)
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_5 = module_0.Node(list_0)
    bst_3 = module_0.Bst()
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_1 = [bytes_0]
    node_6 = module_0.Node(list_1)
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_7.__repr__()
    var_7 = var_5.__repr__()
    bst_7 = module_0.Bst()
    var_8 = bst_5.insert(bst_6)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_8 = module_0.Node(set_0)
    bool_0 = False
    node_9 = module_0.Node(bool_0)
    var_9 = node_9.__repr__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__repr__()
    bst_8 = module_0.Bst()
    var_9.insert(bst_8)


def test_case_1853():
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_0 = module_0.Bst(str_0)
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_0 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_2 = module_0.Bst()
    var_1 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_3 = var_1.__repr__()
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_1 = module_0.Node(bytes_0)
    bst_4 = module_0.Bst()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_2 = module_0.Node(set_0)
    var_4 = node_2.__repr__()
    node_3 = module_0.Node(var_4)
    list_0 = []
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(var_5)
    node_5 = module_0.Node(bst_5)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_2)
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_7.__repr__()
    node_8 = module_0.Node(bst_7)
    node_9 = module_0.Node(node_6)
    str_3 = "w8<H^+~qIrArq]1_$"
    node_10 = module_0.Node(str_3)
    bst_8 = module_0.Bst()
    node_11 = module_0.Node(bst_8)
    var_8 = bst_8.insert(node_11)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_12 = module_0.Node(bst_9)
    var_9 = bst_9.insert(node_12)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_13 = module_0.Node(var_9)
    var_10 = node_13.__repr__()
    str_4 = "T|,^lMO1B//A{E;vjo"
    node_14 = module_0.Node(str_4)
    var_11 = node_14.__repr__()
    with pytest.raises(TypeError):
        bst_9.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    set_0 = {bst_1, str_0, bst_1}
    var_1.insert(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    var_1.insert(bst_1)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    var_3 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4.insert(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    complex_0 = 102.8 - 272.1151j
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(complex_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == (102.8 - 272.1151j)
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_2 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    node_1 = module_0.Node(var_5)
    var_7 = var_5.__repr__()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_8 = node_4.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_6 = module_0.Node(bytes_0)
    var_9 = node_6.__repr__()
    bst_5 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    var_10 = bst_5.insert(node_7)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_10)
    bst_6 = module_0.Bst()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    var_11 = bst_6.insert(node_9)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9.insert(node_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_3 = node_0.__repr__()
    bst_2 = module_0.Bst()
    list_0 = [bst_2, bst_2, bst_2]
    bool_0 = True
    tuple_0 = (bst_2, list_0, bool_0, bst_2)
    node_1 = module_0.Node(tuple_0)
    var_4 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bytes_0 = b"\xc0\xaaO\xeb\x031=\xe4Z\x0f*\x0e\xd3pNl"
    list_1 = [bytes_0]
    node_2 = module_0.Node(list_1)
    bst_3 = module_0.Bst()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    var_5 = bst_3.insert(bool_1)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_3.__repr__()
    node_4 = module_0.Node(bool_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    bool_2 = False
    var_7 = bst_5.insert(bool_2)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_6 = module_0.Bst()
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    bool_3 = False
    var_8 = bst_6.insert(bool_3)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_7 = module_0.Bst()
    var_10 = var_9.__repr__()
    bst_8 = module_0.Bst()
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    bool_4 = False
    var_11 = bst_8.insert(bool_4)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(bst_8)
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_9 = module_0.Node(dict_0)
    none_type_5 = None
    bst_9 = module_0.Bst(none_type_5)
    none_type_6 = None
    bst_10 = module_0.Bst(none_type_6)
    bst_11 = module_0.Bst(dict_0)
    var_12 = var_1.__repr__()
    var_12.insert(bst_9)


def test_case_1859():
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    bst_2 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    var_3 = var_2.__repr__()
    int_2 = -2016
    list_0 = [int_2, int_2]
    node_4 = module_0.Node(list_0)
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_0}
    node_5 = module_0.Node(set_1)
    var_4 = node_5.__repr__()
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    var_5 = node_6.__repr__()
    bst_4 = module_0.Bst()
    node_7 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_7.__repr__()
    bst_6 = module_0.Bst()
    float_0 = -131.8
    bst_7 = module_0.Bst(float_0)
    list_1 = []
    bst_8 = module_0.Bst()
    var_8 = bst_8.insert(list_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_8)
    int_3 = 869
    node_9 = module_0.Node(int_3)
    bst_9 = module_0.Bst()
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    bool_1 = False
    var_9 = bst_9.insert(bool_1)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_10.__repr__()
    with pytest.raises(TypeError):
        bst_9.insert(node_6)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    var_3 = var_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_4 = node_1.__repr__()
    var_5 = node_1.__repr__()
    str_0 = ""
    bst_3 = module_0.Bst(str_0)
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    var_6 = node_2.__repr__()
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_3 = module_0.Node(list_0)
    bst_4 = module_0.Bst()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_7 = node_4.__repr__()
    str_1 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    bool_2 = False
    node_6 = module_0.Node(bool_2)
    var_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    object_0 = module_1.object()
    str_0 = 'FW6tb\x0bTC2PT1-"'
    dict_0 = {str_0: str_0, str_0: str_0}
    float_0 = 2218.162
    bst_0 = module_0.Bst(float_0)
    bst_0.insert(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(var_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(var_2)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    var_4 = bst_6.insert(node_4)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    var_5 = bst_7.insert(node_5)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_5)
    var_6 = node_6.__repr__()
    var_7 = var_4.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(bst_8)
    var_8 = bst_8.insert(node_7)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_8)
    bst_9 = module_0.Bst()
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    var_9 = bst_9.insert(node_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    var_10 = node_10.__repr__()
    var_11 = node_10.__repr__()
    str_0 = "vOK:\\f"
    node_11 = module_0.Node(str_0)
    var_0.insert(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    complex_0 = 102.8 - 272.1151j
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(complex_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == (102.8 - 272.1151j)
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    var_2 = bst_1.insert(node_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_3 = module_0.Bst()
    var_5 = var_3.__repr__()
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_8 = var_6.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_9 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = var_8.__repr__()
    var_8.insert(var_9)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    str_0 = "q"
    object_0 = module_1.object()
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(object_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.object"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_0.insert(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    str_0 = "_u[2;8;@k@'7gQPJ"
    bool_0 = False
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    var_3.insert(str_0)


def test_case_1866():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    var_2 = var_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_1 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_5 = module_0.Bst()
    node_2 = module_0.Node(var_3)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    node_3 = module_0.Node(var_6)
    var_8 = var_7.__repr__()
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_4 = module_0.Node(list_0)
    bst_10 = module_0.Bst()
    bool_0 = True
    bst_11 = module_0.Bst()
    var_9 = bst_11.insert(bool_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    none_type_0 = None
    with pytest.raises(TypeError):
        bst_4.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = node_0.__repr__()
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_1 = module_0.Node(list_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_3.__repr__()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_4 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    node_5 = module_0.Node(bst_4)
    bst_6 = module_0.Bst()
    node_6 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_6 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    bst_8 = module_0.Bst()
    node_7 = module_0.Node(var_6)
    var_8 = node_6.__repr__()
    int_1 = 2029
    node_8 = module_0.Node(int_1)
    var_4.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_3.insert(bool_0)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_4 = module_0.Bst()
    node_2 = module_0.Node(var_5)
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_6 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_6)
    bool_1 = True
    set_0 = {bool_1, bool_1}
    bst_6 = module_0.Bst(set_0)
    bst_7 = module_0.Bst()
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    var_7 = bst_8.insert(node_6)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    var_8 = bst_9.insert(node_7)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_8 = module_0.Node(var_8)
    var_9 = node_8.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_9 = module_0.Node(str_0)
    bst_10 = module_0.Bst()
    node_10 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_10 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_10.__repr__()
    node_11 = module_0.Node(bst_11)
    node_12 = module_0.Node(node_9)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_13 = module_0.Node(str_1)
    bst_12 = module_0.Bst()
    node_14 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_12 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_14.__repr__()
    node_15 = module_0.Node(bst_13)
    bst_14 = module_0.Bst(node_15)
    bst_15 = module_0.Bst()
    node_16 = module_0.Node(bst_15)
    bst_16 = module_0.Bst()
    var_14 = bst_16.insert(bst_16)
    assert (
        f"{type(bst_16.root).__module__}.{type(bst_16.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_16.__repr__()
    bst_17 = module_0.Bst()
    node_17 = module_0.Node(var_14)
    var_16 = node_16.__repr__()
    bst_18 = module_0.Bst()
    complex_0 = 102.8 - 272.1151j
    bst_19 = module_0.Bst()
    var_17 = bst_19.insert(complex_0)
    assert (
        f"{type(bst_19.root).__module__}.{type(bst_19.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    bst_20 = module_0.Bst()
    none_type_2 = None
    node_18 = module_0.Node(none_type_2)
    bool_2 = False
    var_19 = bst_20.insert(bool_2)
    assert (
        f"{type(bst_20.root).__module__}.{type(bst_20.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_20 = node_18.__repr__()
    str_2 = ""
    bst_21 = module_0.Bst(str_2)
    bst_22 = module_0.Bst()
    var_0.insert(node_13)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    var_2 = node_2.__repr__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    node_3 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_5 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_4 = module_0.Bst()
    list_0 = []
    bst_5 = module_0.Bst()
    var_7 = bst_5.insert(list_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_7)
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_1 = False
    var_8 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = var_8.__repr__()
    bst_8 = module_0.Bst()
    var_10 = var_9.__repr__()
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_8 = module_0.Node(str_1)
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = node_9.__repr__()
    node_10 = module_0.Node(bst_12)
    int_0 = -2016
    list_1 = [int_0, int_0]
    node_11 = module_0.Node(list_1)
    var_8.insert(node_1)


def test_case_1870():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_2 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    node_5 = module_0.Node(bst_7)
    var_4 = bst_7.insert(node_5)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_8 = module_0.Bst()
    var_5 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_9 = module_0.Bst()
    var_7 = var_5.__repr__()
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_6 = module_0.Node(list_0)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    var_8 = node_7.__repr__()
    bst_10 = module_0.Bst(var_8)
    bst_11 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    var_9 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_1 = 869
    node_9 = module_0.Node(int_1)
    with pytest.raises(TypeError):
        bst_6.insert(bst_4)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    str_0 = "vOK:\\f"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    var_1 = node_1.__repr__()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_2 = module_0.Node(dict_0)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_1 = module_0.Bst(set_0)
    var_2 = node_2.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_1)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = node_4.__repr__()
    node_5 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_6 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    var_7 = node_6.__repr__()
    node_7 = module_0.Node(var_6)
    var_8 = var_6.__repr__()
    bst_7 = module_0.Bst()
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    bool_1 = False
    var_9 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    node_9 = module_0.Node(none_type_1)
    var_4.insert(bool_0)


def test_case_1872():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1873():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    bst_1 = module_0.Bst()
    node_3 = module_0.Node(bst_1)
    set_0 = {bst_1, node_3}
    bst_2 = module_0.Bst(set_0)
    var_0.insert(set_0)


def test_case_1874():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    node_0 = module_0.Node(bst_1)
    with pytest.raises(TypeError):
        bst_0.insert(bst_1)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bool_1 = True
    dict_0 = {node_0: node_0, bool_1: bool_1}
    bool_2 = True
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bool_2)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_1.insert(dict_0)


def test_case_1876():
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_0 = module_0.Node(bst_0)
    none_type_0 = None
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


def test_case_1877():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    int_0 = 869
    node_0 = module_0.Node(int_0)
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_1.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(var_3)
    with pytest.raises(TypeError):
        bst_0.insert(bst_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    str_0 = "UFO[|LK]k_j$\x0c=.rF{"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__repr__()
    var_0.insert(var_0)


def test_case_1879():
    int_0 = -1138
    node_0 = module_0.Node(int_0)
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_1 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_2.__repr__()
    node_3 = module_0.Node(bst_1)
    bst_2 = module_0.Bst(node_3)
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bst_3 = module_0.Bst(set_0)
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(node_5)
    var_2 = node_6.__repr__()
    with pytest.raises(TypeError):
        bst_2.insert(bst_1)


def test_case_1880():
    str_0 = "vOK:\\f"
    node_0 = module_0.Node(str_0)
    bool_0 = False
    bst_0 = module_0.Bst(bool_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_1 = module_0.Node(dict_0)
    none_type_0 = None
    bst_3 = module_0.Bst(none_type_0)
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_1)
    bst_4 = module_0.Bst()
    node_3 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_2 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    node_4 = module_0.Node(bst_5)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    dict_1 = {node_5: none_type_1, node_5: none_type_1}
    bst_6 = module_0.Bst(dict_1)
    bst_7 = module_0.Bst()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_1 = False
    var_4 = bst_7.insert(bool_1)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_6.__repr__()
    node_7 = module_0.Node(bool_1)
    bst_8 = module_0.Bst()
    bst_9 = module_0.Bst()
    node_8 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_6 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_8.__repr__()
    bst_11 = module_0.Bst()
    node_9 = module_0.Node(var_6)
    bst_12 = module_0.Bst()
    node_10 = module_0.Node(node_9)
    with pytest.raises(TypeError):
        bst_5.insert(bst_10)


def test_case_1881():
    bytes_0 = b"\xdd\xef\x7f\x86%\xdb\x8b\xad\x9fc:\xc4\xb7"
    node_0 = module_0.Node(bytes_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bool_0)
    var_2 = node_2.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_3 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    node_5 = module_0.Node(bst_2)
    bst_3 = module_0.Bst(node_5)
    bst_4 = module_0.Bst()
    node_6 = module_0.Node(bst_4)
    bst_5 = module_0.Bst()
    var_5 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_6.__repr__()
    bst_6 = module_0.Bst()
    node_7 = module_0.Node(bst_5)
    int_0 = 869
    node_8 = module_0.Node(int_0)
    bst_7 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_9.__repr__()
    bst_9 = module_0.Bst()
    int_1 = 869
    node_10 = module_0.Node(int_1)
    bst_10 = module_0.Bst()
    bytes_1 = b"<S\x0b\xb4A[\xb7\x02\xac\x90\xea'i"
    node_11 = module_0.Node(bytes_1)
    bst_11 = module_0.Bst()
    bst_12 = module_0.Bst()
    node_12 = module_0.Node(bst_12)
    bst_13 = module_0.Bst()
    var_9 = bst_13.insert(bst_13)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_12.__repr__()
    var_11 = node_12.__repr__()
    bst_14 = module_0.Bst()
    complex_0 = -1259.5016 - 4023.3606j
    with pytest.raises(TypeError):
        bst_5.insert(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    float_0 = 1992.7524
    complex_0 = 3567.8657 + 867j
    dict_0 = {float_0: float_0, float_0: complex_0}
    node_0 = module_0.Node(dict_0)
    str_0 = "{&:T\r/p-BHx9-lgMP"
    bst_0 = module_0.Bst(str_0)
    node_1 = module_0.Node(bst_0)
    bytes_0 = b"5\xf8\xfb\xa1T\x95\xa8~\xa1\xe7FW\xf3\x99"
    node_2 = module_0.Node(bytes_0)
    var_0 = node_2.__repr__()
    var_1 = var_0.__repr__()
    node_3 = module_0.Node(node_1)
    bst_1 = module_0.Bst()
    node_4 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_2.data).__module__}.{type(var_2.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.parent is None
    var_3 = node_4.__repr__()
    var_4 = node_4.__repr__()
    node_5 = module_0.Node(var_3)
    var_5 = var_3.__repr__()
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_6 = module_0.Node(list_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_7 = module_0.Node(set_0)
    var_6 = node_7.__repr__()
    bst_3 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    node_9 = module_0.Node(node_7)
    bool_0 = False
    node_10 = module_0.Node(bool_0)
    var_7 = node_10.__repr__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    int_1 = -2016
    list_1 = [int_1, int_1]
    node_11 = module_0.Node(list_1)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    node_12 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_10 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_12.__repr__()
    var_12 = node_12.__repr__()
    str_2 = "T|,^lMO1B//A{E;vjo"
    node_13 = module_0.Node(str_2)
    bst_7 = module_0.Bst()
    int_2 = 3820
    tuple_0 = (int_2,)
    node_14 = module_0.Node(tuple_0)
    var_13 = node_14.__repr__()
    var_6.insert(var_13)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    var_1.insert(var_0)


def test_case_1884():
    none_type_0 = None
    bytes_0 = b"\xd7\x1e\xb4\xa8\xdb\x94-\x8f-\x0c\x1f"
    bst_0 = module_0.Bst(bytes_0)
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    bst_0 = module_0.Bst()
    list_0 = []
    bst_1 = module_0.Bst(list_0)
    bst_1.insert(bst_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_2 = var_1.__repr__()
    node_0 = module_0.Node(var_1)
    var_3 = var_2.__repr__()
    str_0 = "7"
    node_1 = module_0.Node(str_0)
    var_4 = node_1.__repr__()
    var_4.insert(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    int_0 = -2016
    list_0 = [int_0, int_0]
    node_0 = module_0.Node(list_0)
    bst_0 = module_0.Bst()
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__repr__()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_4 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = node_2.__repr__()
    var_6 = node_2.__repr__()
    node_3 = module_0.Node(var_5)
    bst_4 = module_0.Bst()
    var_7 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_4 = module_0.Node(bst_4)
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    var_8 = node_5.__repr__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    node_6 = module_0.Node(var_8)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    bst_5 = module_0.Bst()
    var_11 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_14 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = node_8.__repr__()
    bst_8 = module_0.Bst()
    node_9 = module_0.Node(bst_7)
    var_16 = var_15.__repr__()
    bst_9 = module_0.Bst()
    var_17 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_18 = var_17.__repr__()
    node_10 = module_0.Node(var_18)
    node_11 = module_0.Node(node_10)
    var_10.insert(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    complex_0 = -2144 + 5311.8j
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    var_0 = node_1.__repr__()
    var_0.insert(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_2 = module_0.Bst()
    node_0 = module_0.Node(bst_2)
    var_4.insert(var_2)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_1 = module_0.Node(str_0)
    var_1 = node_1.__repr__()
    str_1 = " 4'"
    node_2 = module_0.Node(str_1)
    str_2 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_2}
    node_3 = module_0.Node(set_0)
    var_2 = node_3.__repr__()
    node_4 = module_0.Node(str_1)
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    bst_1 = module_0.Bst()
    node_7 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_7.__repr__()
    bst_3 = module_0.Bst()
    node_8 = module_0.Node(var_3)
    var_5 = node_7.__repr__()
    bst_4 = module_0.Bst()
    list_1 = []
    bst_5 = module_0.Bst()
    var_6 = bst_5.insert(list_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_6)
    node_10 = module_0.Node(bst_5)
    str_3 = "(-+2Yj@U8NM6[+0S0o"
    node_11 = module_0.Node(str_3)
    bst_6 = module_0.Bst()
    node_12 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_12.__repr__()
    node_13 = module_0.Node(bst_7)
    var_9 = node_11.__repr__()
    var_5.insert(node_6)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    var_0 = node_1.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    node_2 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    var_3 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = node_2.__repr__()
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(var_3)
    bst_4 = module_0.Bst()
    node_4 = module_0.Node(bst_4)
    var_5 = bst_4.insert(node_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    node_5 = module_0.Node(bst_5)
    var_6 = bst_5.insert(node_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_6)
    var_7 = node_6.__repr__()
    var_8 = var_5.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_7 = module_0.Node(set_1)
    var_9 = node_7.__repr__()
    bst_6 = module_0.Bst()
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    node_9 = module_0.Node(node_7)
    bst_7 = module_0.Bst()
    node_10 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_10 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_11 = node_10.__repr__()
    bst_9 = module_0.Bst()
    var_12 = node_10.__repr__()
    node_11 = module_0.Node(var_12)
    bst_10 = module_0.Bst()
    node_12 = module_0.Node(bst_10)
    var_13 = bst_10.insert(node_12)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_11 = module_0.Bst()
    var_14 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    bst_12 = module_0.Bst()
    var_16 = var_14.__repr__()
    var_9.insert(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    var_0 = node_2.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    var_3 = bst_1.insert(bool_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_3.data is False
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.parent is None
    var_4 = node_3.__repr__()
    str_2 = ""
    bst_2 = module_0.Bst(str_2)
    bst_3 = module_0.Bst()
    var_2.insert(str_1)


def test_case_1893():
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    tuple_0 = (node_1, var_0, var_1, var_1)
    node_2 = module_0.Node(tuple_0)
    bst_3 = module_0.Bst()
    node_3 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_3.__repr__()
    bst_5 = module_0.Bst()
    var_4 = var_2.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = node_4.__repr__()
    bst_8 = module_0.Bst()
    node_5 = module_0.Node(var_5)
    bst_9 = module_0.Bst()
    var_7 = var_6.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_6 = module_0.Node(str_1)
    bst_10 = module_0.Bst()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    bool_1 = False
    var_8 = bst_10.insert(bool_1)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_7.__repr__()
    node_8 = module_0.Node(none_type_1)
    bst_11 = module_0.Bst()
    list_0 = [bst_11, bst_11, bst_11]
    bool_2 = True
    tuple_1 = (bst_11, list_0, bool_2, bst_11)
    node_9 = module_0.Node(tuple_1)
    var_10 = bst_11.insert(bool_2)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_10 = module_0.Node(bst_12)
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_11 = module_0.Node(str_2)
    bst_13 = module_0.Bst()
    node_12 = module_0.Node(bst_13)
    bst_14 = module_0.Bst()
    var_12 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_13 = node_12.__repr__()
    node_13 = module_0.Node(bst_14)
    bool_3 = True
    node_14 = module_0.Node(bool_3)
    with pytest.raises(TypeError):
        bst_1.insert(var_11)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    var_1 = bst_0.insert(str_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == "(-+2Yj@U8NM6[+0S0o"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_0.insert(bst_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst(bst_1)
    object_0 = module_1.object()
    node_2 = module_0.Node(object_0)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_3 = module_0.Node(var_3)
    var_3.insert(node_3)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    object_0 = module_1.object()
    node_0 = module_0.Node(object_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    var_3 = node_1.__repr__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    bst_0 = module_0.Bst()
    node_2 = module_0.Node(bst_0)
    var_6 = bst_0.insert(node_2)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_6.data).__module__}.{type(var_6.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_6.left is None
    assert var_6.right is None
    assert var_6.parent is None
    bst_1 = module_0.Bst()
    var_7 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    bst_2 = module_0.Bst()
    var_9 = var_7.__repr__()
    node_3 = module_0.Node(var_9)
    var_7.insert(var_3)


def test_case_1897():
    int_0 = 189
    int_1 = 943
    set_0 = {int_0, int_1}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    node_1 = module_0.Node(var_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_1 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = node_2.__repr__()
    bst_5 = module_0.Bst()
    node_3 = module_0.Node(var_1)
    bst_6 = module_0.Bst()
    bool_0 = True
    bst_7 = module_0.Bst()
    var_3 = bst_7.insert(bool_0)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    int_2 = 3317
    node_4 = module_0.Node(int_2)
    with pytest.raises(TypeError):
        bst_7.insert(bst_1)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_0 = module_0.Node(var_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_1 = module_0.Bst(str_0)
    node_1 = module_0.Node(bst_1)
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    var_1 = bst_2.insert(node_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    var_4 = node_3.__repr__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()
    bytes_0 = b"\x06JG&\x15\xad\xefYH_\x8eA\xe7h"
    node_4 = module_0.Node(bytes_0)
    var_7 = node_4.__repr__()
    bst_1.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    bst_0 = module_0.Bst()
    tuple_0 = (bst_0,)
    node_0 = module_0.Node(tuple_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_1.insert(bool_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_3)
    var_5 = var_4.__repr__()
    str_0 = "7"
    node_3 = module_0.Node(str_0)
    bool_1 = True
    float_0 = -128.5329
    dict_0 = {bool_1: float_0}
    tuple_1 = (dict_0, bool_1)
    bst_4 = module_0.Bst()
    var_6 = bst_4.insert(tuple_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_4.__repr__()
    var_9 = var_7.__repr__()
    var_0.insert(var_8)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    str_0 = "j*$X\x0b]iq&cxlet)C/F^"
    bst_1 = module_0.Bst(str_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    node_0 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_0 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_5 = module_0.Bst()
    node_1 = module_0.Node(bst_4)
    var_2 = var_1.__repr__()
    bst_6 = module_0.Bst(bst_3)
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(node_3)
    bst_7 = module_0.Bst()
    var_3 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_5 = module_0.Node(str_1)
    bst_8 = module_0.Bst()
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    var_6 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = node_6.__repr__()
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    node_8 = module_0.Node(bst_10)
    bst_11 = module_0.Bst()
    var_8 = bst_11.insert(bst_11)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_9 = node_8.__repr__()
    bst_12 = module_0.Bst()
    node_9 = module_0.Node(var_8)
    bst_13 = module_0.Bst()
    var_10 = var_9.__repr__()
    bool_1 = False
    node_10 = module_0.Node(bool_1)
    var_11 = node_10.__repr__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__repr__()
    bst_14 = module_0.Bst()
    var_14 = bst_14.insert(bst_14)
    assert (
        f"{type(bst_14.root).__module__}.{type(bst_14.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_15 = var_14.__repr__()
    node_11 = module_0.Node(var_14)
    var_16 = var_14.__repr__()
    var_14.insert(node_7)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    bool_0 = True
    float_0 = -128.5329
    dict_0 = {bool_0: float_0}
    tuple_0 = (dict_0, bool_0)
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(tuple_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_0.data) == 2
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_1 = node_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_0)
    str_1 = "T|,^lMO1B//A{E;vjo"
    node_3 = module_0.Node(str_1)
    var_2 = node_3.__repr__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_5 = node_4.__repr__()
    bst_2 = module_0.Bst()
    list_0 = [bst_2, bst_2, bst_2]
    bool_1 = True
    tuple_1 = (bst_2, list_0, bool_1, bst_2)
    node_5 = module_0.Node(tuple_1)
    var_4.insert(node_3)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    bst_0 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is False
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_1 = module_0.Bst()
    var_2 = var_1.__repr__()
    var_3 = var_0.__repr__()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    var_3.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(node_1)
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_3 = module_0.Node(dict_0)
    var_2 = node_3.__repr__()
    var_3 = var_2.__repr__()
    node_4 = module_0.Node(node_3)
    list_0 = []
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(list_0)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_4)
    node_6 = module_0.Node(bst_4)
    var_2.insert(bst_1)


def test_case_1904():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    set_0 = {bst_0, node_0}
    bst_1 = module_0.Bst(set_0)
    bst_2 = module_0.Bst()
    var_0 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_0}
    node_1 = module_0.Node(set_1)
    node_2 = module_0.Node(bst_2)
    var_2 = var_0.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    var_3 = bst_5.insert(bst_5)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_3.__repr__()
    bst_6 = module_0.Bst()
    bst_7 = module_0.Bst()
    var_5 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_8 = module_0.Bst(var_4)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_9 = module_0.Bst()
    var_7 = bst_9.insert(bst_9)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_4 = module_0.Node(var_7)
    var_9 = var_7.__repr__()
    with pytest.raises(TypeError):
        bst_2.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_0 = module_0.Node(str_0)
    bst_0 = module_0.Bst()
    node_1 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_1.__repr__()
    node_2 = module_0.Node(bst_1)
    node_3 = module_0.Node(node_0)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_4.__repr__()
    var_4 = var_2.__repr__()
    bst_4 = module_0.Bst()
    var_5 = bst_2.insert(bst_3)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_5 = module_0.Node(var_5)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_6 = module_0.Node(set_0)
    var_6 = node_6.__repr__()
    bst_5 = module_0.Bst(var_6)
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    dict_0 = {node_7: none_type_0, node_7: none_type_0}
    bst_6 = module_0.Bst(dict_0)
    var_4.insert(var_2)


def test_case_1906():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst()
    node_2 = module_0.Node(bst_3)
    bst_4 = module_0.Bst()
    var_3 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_2.__repr__()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bst_6 = module_0.Bst()
    var_5 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    bst_7 = module_0.Bst()
    var_8 = node_3.__repr__()
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    var_9 = bst_8.insert(bool_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_4.__repr__()
    with pytest.raises(TypeError):
        bst_8.insert(bst_7)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    bool_0 = True
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bool_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_1 = node_0.__repr__()
    node_1 = module_0.Node(var_1)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    node_2 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = node_2.__repr__()
    var_4 = node_2.__repr__()
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_1 = False
    var_5 = bst_5.insert(bool_1)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_6 = var_5.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(var_6)
    object_0 = module_1.object()
    node_5 = module_0.Node(object_0)
    bst_7 = module_0.Bst()
    node_6 = module_0.Node(bst_7)
    bst_8 = module_0.Bst()
    var_7 = bst_8.insert(bst_8)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_6.__repr__()
    var_9 = node_6.__repr__()
    node_7 = module_0.Node(var_8)
    var_10 = var_8.__repr__()
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_1 = {str_1}
    node_8 = module_0.Node(set_1)
    var_11 = node_8.__repr__()
    bst_9 = module_0.Bst()
    var_10.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    int_0 = -1138
    node_0 = module_0.Node(int_0)
    none_type_0 = None
    bst_0 = module_0.Bst(none_type_0)
    list_0 = []
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(list_0)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    var_1 = node_1.__repr__()
    str_0 = "(-+2Yj@U8NM6[+0S0o"
    node_2 = module_0.Node(str_0)
    str_1 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_1)
    bool_0 = True
    bst_2 = module_0.Bst()
    var_2 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_3 = module_0.Bst()
    node_4 = module_0.Node(bst_3)
    var_3 = bst_3.insert(node_4)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_4 = module_0.Bst()
    var_4 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    var_2.insert(var_4)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    float_0 = -26.29
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_0.insert(float_0)


def test_case_1910():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    var_2 = node_0.__repr__()
    bst_3 = module_0.Bst(var_1)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    var_3 = node_2.__repr__()
    bst_4 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_4 = node_3.__repr__()
    var_5 = node_3.__repr__()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_6 = node_4.__repr__()
    bst_5 = module_0.Bst(var_6)
    bst_6 = module_0.Bst()
    node_5 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_7 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_5.__repr__()
    bst_8 = module_0.Bst()
    list_0 = []
    bst_9 = module_0.Bst()
    var_9 = bst_9.insert(list_0)
    assert (
        f"{type(bst_9.root).__module__}.{type(bst_9.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(var_9)
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    var_10 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_9 = module_0.Node(var_10)
    int_0 = 3317
    node_10 = module_0.Node(int_0)
    bst_11 = module_0.Bst()
    none_type_3 = None
    node_11 = module_0.Node(none_type_3)
    bool_0 = False
    var_11 = bst_11.insert(bool_0)
    assert (
        f"{type(bst_11.root).__module__}.{type(bst_11.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    node_12 = module_0.Node(var_12)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_13 = module_0.Node(set_0)
    var_13 = node_13.__repr__()
    str_2 = "(-+2Yj@U8NM6[+0S0o"
    node_14 = module_0.Node(str_2)
    with pytest.raises(TypeError):
        bst_10.insert(var_6)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_2 = var_1.__repr__()
    bst_3 = module_0.Bst()
    var_1.insert(node_1)


def test_case_1912():
    none_type_0 = None
    bst_0 = module_0.Bst()
    with pytest.raises(TypeError):
        bst_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    str_0 = " 4'"
    node_0 = module_0.Node(str_0)
    str_1 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_1}
    node_1 = module_0.Node(set_0)
    var_0 = node_1.__repr__()
    node_2 = module_0.Node(str_0)
    list_0 = []
    bst_0 = module_0.Bst()
    var_1 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_1.data == []
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    node_3 = module_0.Node(var_1)
    var_2 = var_1.__repr__()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_3 = node_4.__repr__()
    str_2 = "w8<H^+~qIrArq]1_$"
    node_5 = module_0.Node(str_2)
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst()
    var_4 = bst_2.insert(bst_2)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_0.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_3 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = var_2.__repr__()
    bst_2 = module_0.Bst()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = False
    var_5 = bst_2.insert(bool_0)
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(bst_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_6 = node_3.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_4 = module_0.Node(str_0)
    bst_3 = module_0.Bst()
    int_0 = 3317
    node_5 = module_0.Node(int_0)
    bst_4 = module_0.Bst()
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    bool_1 = False
    var_7 = bst_4.insert(bool_1)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = var_7.__repr__()
    node_7 = module_0.Node(var_8)
    bst_5 = module_0.Bst()
    bst_6 = module_0.Bst()
    node_8 = module_0.Node(bst_6)
    bst_7 = module_0.Bst()
    var_9 = bst_7.insert(bst_7)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_10 = node_8.__repr__()
    var_11 = node_8.__repr__()
    bst_8 = module_0.Bst()
    set_0 = set()
    node_9 = module_0.Node(set_0)
    var_7.insert(var_9)


def test_case_1915():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1916():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(node_2)
    var_0.insert(var_0)


def test_case_1917():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_1 = bst_1.insert(node_2)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    var_2 = node_4.__repr__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    bst_2 = module_0.Bst()
    str_1 = "vOK:\\f"
    node_5 = module_0.Node(str_1)
    str_2 = ""
    bst_3 = module_0.Bst(str_2)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    dict_0 = {node_6: none_type_1, node_6: none_type_1}
    bst_4 = module_0.Bst(dict_0)
    dict_1 = {}
    bst_5 = module_0.Bst(dict_1)
    with pytest.raises(TypeError):
        bst_1.insert(dict_0)


def test_case_1918():
    bst_0 = module_0.Bst()


@pytest.mark.xfail(strict=True)
def test_case_1919():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    var_2 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    node_1 = module_0.Node(bst_2)
    str_0 = "T|,^lMO1B//A{E;vjo"
    node_2 = module_0.Node(str_0)
    bst_4 = module_0.Bst()
    bst_5 = module_0.Bst()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_0 = False
    var_4 = bst_5.insert(bool_0)
    assert (
        f"{type(bst_5.root).__module__}.{type(bst_5.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_5 = var_4.__repr__()
    bst_6 = module_0.Bst()
    node_4 = module_0.Node(var_5)
    dict_0 = {}
    bst_7 = module_0.Bst(dict_0)
    bst_8 = module_0.Bst()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = False
    var_6 = bst_8.insert(bool_1)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_6 = module_0.Node(bst_8)
    bst_9 = module_0.Bst()
    node_7 = module_0.Node(bst_9)
    bst_10 = module_0.Bst()
    var_7 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_8 = node_7.__repr__()
    var_9 = var_7.__repr__()
    bst_11 = module_0.Bst()
    int_0 = 2253
    node_8 = module_0.Node(int_0)
    int_1 = 2253
    node_9 = module_0.Node(int_1)
    var_10 = node_9.__repr__()
    bst_12 = module_0.Bst()
    var_11 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_13 = module_0.Bst()
    node_10 = module_0.Node(bst_13)
    var_12 = bst_13.insert(node_10)
    assert (
        f"{type(bst_13.root).__module__}.{type(bst_13.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bst_14 = module_0.Bst()
    bst_15 = module_0.Bst()
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    bool_2 = False
    var_13 = bst_15.insert(bool_2)
    assert (
        f"{type(bst_15.root).__module__}.{type(bst_15.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_14 = node_11.__repr__()
    node_12 = module_0.Node(bool_2)
    var_15 = node_12.__repr__()
    node_13 = module_0.Node(node_12)
    var_1.insert(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    list_0 = []
    bst_0 = module_0.Bst()
    var_0 = bst_0.insert(list_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.data == []
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    node_1 = module_0.Node(var_0)
    bst_1 = module_0.Bst()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bst_2 = module_0.Bst()
    bst_3 = module_0.Bst()
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_3 = module_0.Node(set_0)
    var_1 = node_3.__repr__()
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_4 = module_0.Node(dict_0)
    var_2 = node_4.__repr__()
    var_3 = var_2.__repr__()
    node_5 = module_0.Node(node_4)
    var_1.insert(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    var_0 = bst_0.insert(node_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    bst_1 = module_0.Bst()
    node_1 = module_0.Node(bst_1)
    var_1 = bst_1.insert(node_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    node_2 = module_0.Node(var_1)
    var_2 = node_2.__repr__()
    str_0 = "w8<H^+~qIrArq]1_$"
    node_3 = module_0.Node(str_0)
    int_0 = -1138
    node_4 = module_0.Node(int_0)
    bool_0 = False
    node_5 = module_0.Node(bool_0)
    bst_2 = module_0.Bst()
    node_6 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    str_1 = "(-+2Yj@U8NM6[+0S0o"
    node_7 = module_0.Node(str_1)
    bst_5 = module_0.Bst()
    node_8 = module_0.Node(bst_5)
    bst_6 = module_0.Bst()
    var_3 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_8.__repr__()
    node_9 = module_0.Node(bst_6)
    bst_7 = module_0.Bst(node_9)
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    var_5 = node_10.__repr__()
    complex_0 = 102.8 - 272.1151j
    bst_8 = module_0.Bst()
    var_6 = bst_8.insert(complex_0)
    assert (
        f"{type(bst_8.root).__module__}.{type(bst_8.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_7 = var_6.__repr__()
    var_7.insert(bst_1)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    node_1 = module_0.Node(var_0)
    bst_3 = module_0.Bst()
    bst_4 = module_0.Bst()
    var_1.insert(bst_2)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    str_0 = '^ n*j8"KTldS,<rdr4DR'
    set_0 = {str_0}
    node_0 = module_0.Node(set_0)
    var_0 = node_0.__repr__()
    bst_0 = module_0.Bst(var_0)
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    bst_1 = module_0.Bst()
    var_1 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.parent is None
    var_2 = var_1.__repr__()
    node_3 = module_0.Node(var_2)
    bst_2 = module_0.Bst()
    node_4 = module_0.Node(bst_2)
    bst_3 = module_0.Bst()
    var_3 = bst_3.insert(bst_3)
    assert (
        f"{type(bst_3.root).__module__}.{type(bst_3.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_4 = node_4.__repr__()
    var_5 = node_4.__repr__()
    int_0 = 1235
    dict_0 = {int_0: int_0, int_0: int_0}
    node_5 = module_0.Node(dict_0)
    var_6 = node_5.__repr__()
    var_7 = var_6.__repr__()
    node_6 = module_0.Node(node_5)
    bst_4 = module_0.Bst(var_6)
    bool_1 = False
    node_7 = module_0.Node(bool_1)
    var_8 = node_7.__repr__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    node_8 = module_0.Node(var_8)
    bool_2 = True
    set_1 = {bool_2, bool_2}
    bst_5 = module_0.Bst(set_1)
    bst_6 = module_0.Bst()
    var_11 = bst_6.insert(bst_6)
    assert (
        f"{type(bst_6.root).__module__}.{type(bst_6.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_12 = var_11.__repr__()
    bst_7 = module_0.Bst()
    var_13 = bst_7.insert(var_12)
    assert (
        f"{type(bst_7.root).__module__}.{type(bst_7.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    bool_3 = False
    node_9 = module_0.Node(bool_3)
    var_14 = node_9.__repr__()
    int_1 = 2253
    node_10 = module_0.Node(int_1)
    var_15 = node_10.__repr__()
    bst_8 = module_0.Bst(var_15)
    bst_9 = module_0.Bst()
    bst_10 = module_0.Bst()
    var_16 = bst_10.insert(bst_10)
    assert (
        f"{type(bst_10.root).__module__}.{type(bst_10.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_17 = var_16.__repr__()
    bst_11 = module_0.Bst()
    node_11 = module_0.Node(bst_11)
    bst_12 = module_0.Bst()
    var_18 = bst_12.insert(bst_12)
    assert (
        f"{type(bst_12.root).__module__}.{type(bst_12.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_19 = node_11.__repr__()
    bst_13 = module_0.Bst()
    var_20 = node_11.__repr__()
    node_12 = module_0.Node(var_20)
    node_13 = module_0.Node(var_18)
    var_2.insert(node_12)


def test_case_1924():
    bst_0 = module_0.Bst()
    node_0 = module_0.Node(bst_0)
    bst_1 = module_0.Bst()
    var_0 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binarySearchTree4.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "binarySearchTree4.Bst"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.parent is None
    var_1 = node_0.__repr__()
    bst_2 = module_0.Bst()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bst_3 = module_0.Bst(bst_1)
    bst_4 = module_0.Bst()
    var_2 = bst_4.insert(bst_4)
    assert (
        f"{type(bst_4.root).__module__}.{type(bst_4.root).__qualname__}"
        == "binarySearchTree4.Node"
    )
    var_3 = var_2.__repr__()
    var_4 = var_3.__repr__()
    node_2 = module_0.Node(var_2)
    with pytest.raises(TypeError):
        bst_1.insert(var_0)
