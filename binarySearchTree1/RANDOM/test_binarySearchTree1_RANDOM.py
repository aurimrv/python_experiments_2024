#Pyguin test cases converted from /home/auri/temp/lucca/python_experiments/binarySearchTree1/RANDOM/test_binarySearchTree1.py
import pytest
import binarySearchTree1 as module_0
import builtins as module_1

def test_case_0():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)

def test_case_2():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()

def test_case_3():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_2)
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_4 = var_1.__repr__()

def test_case_4():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)

def test_case_5():
    binary_tree_0 = module_0.BinaryTree()

def test_case_6():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()

def test_case_7():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_2)
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()

def test_case_8():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_3)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__repr__()
    assert var_5 == 'binary:()'

def test_case_9():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    none_type_3 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:(L: None R:)'

def test_case_10():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()

def test_case_11():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    none_type_3 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_4)
    none_type_5 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(binary_node_2)

def test_case_12():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()

def test_case_13():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_3)
    none_type_4 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_4)
    none_type_5 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    var_9 = var_3.__repr__()

def test_case_14():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = binary_tree_3.__iter__()

def test_case_15():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    var_6 = var_1.__repr__()

def test_case_16():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()

def test_case_17():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_2.__repr__()

def test_case_18():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_4)
    none_type_5 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    none_type_6 = None
    binary_tree_13 = module_0.BinaryTree()
    var_9 = binary_tree_13.add(none_type_6)
    none_type_7 = None
    binary_tree_14 = module_0.BinaryTree()
    var_10 = binary_tree_14.add(none_type_7)
    binary_node_3 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    var_11 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()

def test_case_19():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_2)
    binary_tree_4 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    none_type_4 = None
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(none_type_4)
    none_type_5 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    var_9 = binary_tree_5.getMax()

def test_case_20():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)

def test_case_21():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_2)
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    none_type_4 = None
    binary_tree_14 = module_0.BinaryTree()
    var_11 = binary_tree_14.add(none_type_4)
    none_type_5 = None
    binary_tree_15 = module_0.BinaryTree()
    var_12 = binary_tree_15.add(none_type_5)
    binary_node_3 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()

def test_case_22():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_1)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(none_type_3)
    none_type_4 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    none_type_5 = None
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.add(none_type_5)
    var_10 = var_1.__iter__()

def test_case_23():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__iter__()
    none_type_4 = None
    binary_tree_14 = module_0.BinaryTree()
    var_11 = binary_tree_14.add(none_type_4)
    none_type_5 = None
    binary_tree_15 = module_0.BinaryTree()
    var_12 = binary_tree_15.add(none_type_5)
    binary_node_3 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    var_13 = binary_tree_10.__contains__(var_6)
    assert var_13 is False

def test_case_24():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(none_type_3)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_9 = binary_tree_13.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    var_10 = var_3.__repr__()

def test_case_25():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()

def test_case_26():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_node_2 = module_0.BinaryNode(var_4)

def test_case_27():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.add(none_type_2)
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_9.__repr__()
    assert var_10 == 'binary:()'

def test_case_28():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_6.__iter__()

def test_case_29():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_3)
    none_type_4 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_4)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    none_type_5 = None
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.add(none_type_5)
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    none_type_6 = None
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.add(none_type_6)
    none_type_7 = None
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.add(none_type_7)
    binary_node_4 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_16 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_17 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_21 = module_0.BinaryTree()

def test_case_30():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(none_type_4)
    none_type_5 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_11 = binary_tree_14.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_15 = module_0.BinaryTree()
    var_12 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()

def test_case_31():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_3)
    none_type_4 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_4)
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    none_type_5 = None
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_15 = binary_tree_17.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_18 = module_0.BinaryTree()
    var_16 = var_2.__repr__()

def test_case_32():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    none_type_5 = None
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.add(none_type_5)
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_16 = binary_tree_17.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    none_type_6 = None
    binary_tree_18 = module_0.BinaryTree()
    var_17 = binary_tree_18.add(none_type_6)
    none_type_7 = None
    binary_tree_19 = module_0.BinaryTree()
    var_18 = binary_tree_19.add(none_type_7)
    binary_node_4 = module_0.BinaryNode(binary_tree_19)
    binary_tree_20 = module_0.BinaryTree()
    var_19 = binary_tree_1.__iter__()

def test_case_33():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_5 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_6 = binary_tree_10.add(none_type_2)
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_7 = binary_tree_11.add(none_type_3)
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_8 = binary_tree_12.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_9 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_10 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_12 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    none_type_5 = None
    binary_tree_18 = module_0.BinaryTree()
    var_16 = binary_tree_18.add(none_type_5)
    binary_node_3 = module_0.BinaryNode(binary_tree_18)
    var_17 = binary_tree_8.add(var_16)

def test_case_34():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_2)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.add(none_type_4)
    none_type_5 = None
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    none_type_6 = None
    binary_tree_14 = module_0.BinaryTree()
    var_10 = binary_tree_14.add(none_type_6)
    binary_node_3 = module_0.BinaryNode(binary_tree_14)
    none_type_7 = None
    binary_tree_15 = module_0.BinaryTree()
    var_11 = binary_tree_15.add(none_type_7)
    binary_tree_16 = module_0.BinaryTree()
    var_12 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_14 = binary_tree_19.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    var_15 = binary_tree_9.__iter__()

def test_case_35():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'

def test_case_36():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False

def test_case_37():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_4.__contains__(binary_tree_6)
    assert var_7 is False
    binary_tree_8 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_2)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    none_type_4 = None
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.add(none_type_4)
    none_type_5 = None
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    none_type_6 = None
    binary_tree_18 = module_0.BinaryTree()
    var_16 = binary_tree_18.add(none_type_6)
    binary_tree_19 = module_0.BinaryTree()
    var_17 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_19 = binary_tree_21.__iter__()
    var_20 = binary_tree_4.__iter__()

def test_case_38():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    none_type_3 = None
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.add(none_type_3)
    none_type_4 = None
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    var_16 = var_12.__repr__()
    var_17 = var_16.__repr__()

def test_case_39():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(none_type_3)
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.add(none_type_4)
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = binary_tree_15.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    binary_tree_16 = module_0.BinaryTree()
    var_15 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_17 = binary_tree_15.__contains__(binary_tree_17)
    assert var_17 is False
    var_18 = var_7.__repr__()

def test_case_40():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()

def test_case_41():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__iter__()
    var_11 = binary_tree_12.__repr__()
    assert var_11 == 'binary:(L: None R:)'

def test_case_42():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_1)
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_14 = module_0.BinaryTree()
    var_11 = binary_tree_14.add(none_type_4)
    none_type_5 = None
    binary_tree_15 = module_0.BinaryTree()
    var_12 = binary_tree_15.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    var_13 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()

def test_case_43():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()

def test_case_44():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    var_8 = binary_node_1.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_2.__repr__()

def test_case_45():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    var_6 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_4.__contains__(binary_tree_6)
    assert var_10 is False
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_1)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.add(none_type_3)
    none_type_4 = None
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    none_type_5 = None
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_16)
    none_type_6 = None
    binary_tree_17 = module_0.BinaryTree()
    var_18 = binary_tree_17.add(none_type_6)
    none_type_7 = None
    binary_tree_18 = module_0.BinaryTree()
    var_19 = binary_tree_18.add(none_type_7)
    binary_node_5 = module_0.BinaryNode(binary_tree_18)
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_20 = binary_tree_20.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    binary_tree_23 = module_0.BinaryTree()
    var_22 = binary_tree_23.__iter__()
    binary_node_6 = module_0.BinaryNode(var_21)
    var_23 = binary_node_6.__repr__()

def test_case_46():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    var_12 = binary_node_2.inorder()
    binary_tree_12 = module_0.BinaryTree()

def test_case_47():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()

def test_case_48():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_2.__contains__(binary_tree_4)
    assert var_5 is False
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_1)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = binary_tree_13.__contains__(binary_tree_0)

def test_case_49():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    set_0 = set()
    binary_node_0 = module_0.BinaryNode(set_0)

def test_case_50():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(none_type_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_6 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_11 = module_0.BinaryTree()
    var_7 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_9 = binary_tree_10.__contains__(binary_tree_12)
    assert var_9 is False
    binary_tree_14 = module_0.BinaryTree()
    var_10 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    none_type_3 = None
    binary_tree_16 = module_0.BinaryTree()
    var_12 = binary_tree_16.add(none_type_3)
    none_type_4 = None
    binary_tree_17 = module_0.BinaryTree()
    var_13 = binary_tree_17.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    none_type_5 = None
    binary_tree_19 = module_0.BinaryTree()
    var_14 = binary_tree_19.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_19)
    var_15 = binary_tree_9.__iter__()

def test_case_51():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    var_4 = var_1.__repr__()

def test_case_52():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    var_6 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_2)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(none_type_4)
    none_type_5 = None
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.add(none_type_5)
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_11 = binary_tree_15.__iter__()
    none_type_6 = None
    binary_tree_16 = module_0.BinaryTree()
    var_12 = binary_tree_16.add(none_type_6)
    none_type_7 = None
    binary_tree_17 = module_0.BinaryTree()
    var_13 = binary_tree_17.add(none_type_7)
    binary_node_4 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    var_14 = binary_tree_18.__iter__()
    var_15 = binary_tree_10.closest(binary_tree_16)

def test_case_53():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()

def test_case_54():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_10.__contains__(binary_tree_12)
    assert var_13 is False
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_tree_16.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_16)
    var_19 = binary_node_1.inorder()

def test_case_55():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    dict_0 = {binary_tree_5: binary_node_0, var_1: binary_tree_0, binary_tree_0: none_type_2, binary_node_1: var_0}
    binary_node_2 = module_0.BinaryNode(dict_0)

def test_case_56():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()

def test_case_57():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_0 = module_0.BinaryNode(var_13)
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_9.__contains__(binary_tree_11)
    assert var_16 is False
    var_17 = binary_tree_8.__contains__(dict_0)

def test_case_58():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_2.__contains__(binary_tree_4)
    assert var_5 is False
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_1)
    var_7 = binary_tree_0.__contains__(var_2)

def test_case_59():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()

def test_case_60():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()

def test_case_61():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(dict_0)
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    dict_1 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(dict_1)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    binary_node_3 = module_0.BinaryNode(dict_0)

def test_case_62():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_9.__contains__(binary_tree_11)
    assert var_11 is False
    dict_0 = {}
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    dict_1 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.add(dict_1)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = binary_tree_8.add(var_4)

def test_case_63():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_1.__contains__(binary_tree_3)
    assert var_4 is False
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_15 = binary_tree_16.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    var_16 = var_11.__repr__()

def test_case_64():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_0)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_2)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(none_type_4)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    var_15 = binary_node_2.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    none_type_5 = None
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.add(none_type_5)
    binary_node_3 = module_0.BinaryNode(binary_tree_16)
    var_20 = binary_tree_10.__repr__()
    assert var_20 == 'binary:(L: None R:)'

def test_case_65():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()

def test_case_66():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_6)
    var_7 = var_0.__repr__()

def test_case_67():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    dict_1 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.add(dict_1)
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_24 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_24.__repr__()
    var_27 = var_25.__iter__()

def test_case_68():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    dict_0 = {}
    binary_tree_17 = module_0.BinaryTree()
    var_16 = binary_tree_17.add(dict_0)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    binary_tree_18 = module_0.BinaryTree()

def test_case_69():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_2)
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.add(dict_0)
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    var_13 = binary_node_3.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    none_type_4 = None
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.add(none_type_4)
    none_type_5 = None
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    binary_tree_19 = module_0.BinaryTree()
    var_20 = binary_tree_19.__iter__()
    binary_node_5 = module_0.BinaryNode(var_20)
    binary_tree_20 = module_0.BinaryTree()
    var_21 = binary_tree_20.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_23 = binary_tree_19.__contains__(binary_tree_21)
    assert var_23 is False
    binary_tree_23 = module_0.BinaryTree()
    var_24 = binary_tree_23.__iter__()
    binary_node_6 = module_0.BinaryNode(var_24)
    var_25 = binary_tree_11.add(binary_tree_0)

def test_case_70():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()

def test_case_71():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_7.__iter__()
    var_12 = binary_tree_0.__iter__()

def test_case_72():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_1)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    bytes_0 = b'\xecWG\xe2>Mo\x05\xc6g?{\xa1\xfc\x02-u'
    dict_0 = {binary_tree_5: binary_tree_10, var_0: bytes_0, binary_tree_5: binary_tree_6, binary_tree_11: binary_node_1}
    var_14 = binary_tree_4.closest(dict_0)

def test_case_73():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.add(none_type_3)
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()

def test_case_74():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_13.__iter__()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.add(none_type_2)
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__iter__()
    binary_node_3 = module_0.BinaryNode(var_20)
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_23 = binary_tree_15.__contains__(binary_tree_17)
    assert var_23 is False
    binary_tree_19 = module_0.BinaryTree()
    var_24 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_24.__repr__()
    binary_tree_21 = module_0.BinaryTree()
    var_27 = binary_tree_21.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_28.__repr__()
    var_30 = var_29.__iter__()
    var_31 = binary_tree_14.__repr__()
    assert var_31 == 'binary:()'

def test_case_75():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_8)
    var_9 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.add(none_type_0)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_8.__repr__()

def test_case_76():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)

def test_case_77():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()

def test_case_78():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = binary_tree_0.__repr__()
    assert var_15 == 'binary:()'

def test_case_79():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_8.__repr__()

def test_case_80():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()

def test_case_81():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_1.__repr__()

def test_case_82():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    var_5 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_1)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_17.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    binary_tree_20 = module_0.BinaryTree()
    var_21 = binary_tree_20.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_22 = binary_tree_21.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_23 = module_0.BinaryTree()
    binary_tree_24 = module_0.BinaryTree()

def test_case_83():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(dict_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(none_type_2)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    var_19 = var_15.__iter__()
    none_type_4 = None
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.add(none_type_4)
    none_type_5 = None
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_6)

def test_case_84():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(dict_0)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.__iter__()
    binary_node_3 = module_0.BinaryNode(var_22)
    var_24 = binary_tree_5.remove(var_11)

def test_case_85():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_2.__contains__(binary_tree_4)
    assert var_8 is False
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(dict_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = binary_tree_7.add(var_0)

def test_case_86():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(dict_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_node_2 = module_0.BinaryNode(none_type_0)

def test_case_87():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)

def test_case_88():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)

def test_case_89():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()

def test_case_90():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(dict_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_8 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_15)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.add(none_type_2)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_node_0)

def test_case_91():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()

def test_case_92():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()

def test_case_93():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = var_4.__repr__()

def test_case_94():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_2)
    var_5 = binary_tree_4.remove(var_3)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_6.__contains__(binary_tree_8)
    assert var_9 is False
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(dict_0)
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.add(none_type_3)
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    dict_1 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.add(dict_1)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_node_4 = module_0.BinaryNode(none_type_4)

def test_case_95():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_3.__contains__(binary_tree_5)
    assert var_6 is False
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    var_14 = binary_node_4.inorder()
    none_type_3 = None
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.add(none_type_3)
    var_16 = binary_tree_14.remove(var_14)
    dict_0 = {}
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.add(dict_0)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_17)
    var_22 = binary_node_5.inorder()
    binary_tree_18 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_18)
    var_23 = binary_tree_3.__repr__()
    assert var_23 == 'binary:()'

def test_case_96():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)

def test_case_97():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_98():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    var_4 = binary_tree_5.closest(var_3)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_3)
    none_type_4 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_4)
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()

def test_case_99():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_14)
    var_13 = binary_node_0.inorder()

def test_case_100():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    var_8 = binary_node_0.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    var_10 = var_6.__contains__(var_6)

def test_case_101():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_0)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_2.__contains__(binary_tree_3)
    assert var_11 is False

def test_case_102():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.add(none_type_3)
    binary_node_5 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_4.__iter__()

def test_case_103():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    var_18 = binary_node_1.inorder()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_11 = module_0.BinaryTree()

def test_case_104():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    var_11 = binary_node_4.inorder()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.add(none_type_2)
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.add(none_type_3)
    binary_node_5 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_14 = binary_tree_16.__iter__()
    binary_node_6 = module_0.BinaryNode(var_14)
    binary_tree_17 = module_0.BinaryTree()
    var_15 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    binary_tree_19 = module_0.BinaryTree()
    var_18 = binary_tree_4.__repr__()
    assert var_18 == 'binary:()'

def test_case_105():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()

def test_case_106():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    none_type_2 = None
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.add(none_type_2)
    none_type_3 = None
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_24 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_24.__repr__()
    var_27 = var_5.__iter__()

def test_case_107():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    var_4 = binary_tree_5.closest(var_3)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'

def test_case_108():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_13.closest(var_2)

def test_case_109():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()

def test_case_110():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_2)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_3.inorder()
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_17 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()

def test_case_111():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.add(none_type_0)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.add(none_type_1)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = var_0.__iter__()

def test_case_112():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(dict_0)
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_13)
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    var_15 = binary_tree_7.closest(var_14)
    var_16 = var_13.__iter__()
    binary_tree_8 = module_0.BinaryTree()

def test_case_113():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_2)
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    var_8 = binary_node_3.inorder()
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_3)
    var_10 = binary_tree_7.remove(var_8)
    none_type_4 = None
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(none_type_4)
    binary_node_4 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    var_13 = binary_tree_11.closest(var_12)
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    var_19 = var_15.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_17.__iter__()
    binary_node_6 = module_0.BinaryNode(var_21)
    binary_tree_18 = module_0.BinaryTree()

def test_case_114():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(var_1)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_115():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    none_type_4 = None
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.add(none_type_4)
    none_type_5 = None
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_11 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_5 = module_0.BinaryNode(bytes_0)
    var_13 = binary_tree_9.__contains__(binary_tree_15)
    assert var_13 is False

def test_case_116():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    var_7 = binary_node_1.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_18 = module_0.BinaryTree()
    var_20 = binary_tree_18.add(none_type_2)
    binary_tree_19 = module_0.BinaryTree()
    var_21 = binary_tree_19.__iter__()
    binary_node_2 = module_0.BinaryNode(var_21)
    var_22 = binary_node_2.inorder()

def test_case_117():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_4 = module_0.BinaryNode(set_1)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_9 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.add(none_type_4)
    none_type_5 = None
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.add(none_type_5)
    binary_node_7 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_12 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_6.__iter__()

def test_case_118():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    var_2 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_9.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    var_18 = binary_tree_12.closest(var_17)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    dict_0 = {}
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.add(dict_0)
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = binary_node_4.inorder()

def test_case_119():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    var_8 = binary_tree_6.closest(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    var_13 = binary_node_1.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    binary_tree_17 = module_0.BinaryTree()
    var_18 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_20 = binary_tree_16.__contains__(binary_tree_18)
    assert var_20 is False
    binary_tree_20 = module_0.BinaryTree()
    var_21 = binary_tree_6.closest(binary_tree_18)

def test_case_120():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()

def test_case_121():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(dict_0)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_11.__repr__()

def test_case_122():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_1.add(var_7)

def test_case_123():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_3.closest(var_7)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_5.__repr__()

def test_case_124():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    var_7 = binary_tree_7.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = binary_tree_15.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    binary_tree_16 = module_0.BinaryTree()
    var_15 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_18)
    var_20 = binary_node_3.inorder()

def test_case_125():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)

def test_case_126():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_6 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    var_11 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.add(none_type_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = binary_tree_11.remove(var_11)
    binary_node_3 = module_0.BinaryNode(binary_tree_2)

def test_case_127():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    var_7 = binary_node_2.inorder()
    var_8 = binary_tree_1.__contains__(binary_node_0)
    assert var_8 is False

def test_case_128():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    dict_0 = {}
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.add(dict_0)
    assert f'{type(binary_tree_15.root).__module__}.{type(binary_tree_15.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    binary_tree_16 = module_0.BinaryTree()

def test_case_129():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_20.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_14)
    var_23 = binary_node_2.inorder()
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.__iter__()
    var_25 = binary_tree_15.closest(var_24)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_26 = var_24.__repr__()

def test_case_130():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    var_13 = binary_tree_5.add(var_1)

def test_case_131():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_5.__repr__()

def test_case_132():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_node_2 = module_0.BinaryNode(dict_0)

def test_case_133():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    var_9 = binary_tree_9.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    var_12 = binary_tree_10.closest(var_11)
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_5.__repr__()
    binary_node_4 = module_0.BinaryNode(var_17)

def test_case_134():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_12)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(none_type_0)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(none_type_2)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()

def test_case_135():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    var_12 = binary_node_4.inorder()
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.add(none_type_1)
    var_14 = binary_tree_12.remove(var_12)
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__iter__()
    binary_node_5 = module_0.BinaryNode(var_15)
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.__iter__()
    var_17 = binary_tree_15.closest(var_16)
    var_18 = var_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = binary_tree_10.__repr__()
    assert var_21 == 'binary:()'

def test_case_136():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(dict_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_3.remove(var_6)

def test_case_137():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_1.__contains__(binary_tree_3)
    assert var_4 is False
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_5 = module_0.BinaryNode(set_1)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_19 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    binary_tree_21 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(var_16)

def test_case_138():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    var_7 = binary_tree_2.closest(var_6)
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_9)
    binary_node_1 = module_0.BinaryNode(var_1)

def test_case_139():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_2)
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_3)
    none_type_4 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_4)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    var_6 = binary_node_0.removeFromParent(none_type_2, binary_node_1)
    var_7 = var_6.__repr__()

def test_case_140():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    var_6 = binary_node_1.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    var_9 = binary_tree_10.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    var_12 = var_4.__repr__()

def test_case_141():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'

def test_case_142():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_1.remove(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__repr__()
    assert var_10 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_10)
    assert binary_node_2.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_18)
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_10.__contains__(binary_tree_12)
    assert var_21 is False
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_17.__iter__()
    binary_node_4 = module_0.BinaryNode(var_23)
    none_type_1 = None
    binary_tree_18 = module_0.BinaryTree()
    var_25 = binary_tree_18.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_18)
    binary_tree_19 = module_0.BinaryTree()
    var_26 = binary_tree_14.add(binary_tree_4)

def test_case_143():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_1)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_3)
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(dict_0)
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    binary_tree_10 = module_0.BinaryTree()

def test_case_144():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = binary_tree_4.add(var_1)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_145():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    var_5 = binary_tree_1.closest(var_4)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_6)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_0)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    var_15 = binary_node_2.inorder()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(none_type_2)
    var_17 = binary_tree_11.remove(var_15)
    binary_tree_13 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    var_18 = binary_tree_7.remove(binary_tree_2)

def test_case_146():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    var_6 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = binary_tree_2.remove(var_6)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__repr__()
    assert var_17 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_17)
    assert binary_node_2.value == 'binary:()'
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_19)
    none_type_4 = None
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.add(none_type_4)
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()
    binary_tree_16 = module_0.BinaryTree()

def test_case_147():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_5.__repr__()

def test_case_148():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()

def test_case_149():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    var_11 = binary_node_0.inorder()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_13.__iter__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_2.closest(none_type_0)

def test_case_150():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    var_12 = binary_tree_10.closest(var_11)
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__repr__()
    assert var_13 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_13)
    assert binary_node_4.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_0.add(binary_tree_13)

def test_case_151():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b''
    tuple_0 = (dict_0, bytes_0, bool_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(tuple_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.remove(tuple_0)
    assert binary_tree_0.root is None
    bytes_1 = b'\xfeL7\xf6\x02\x03\xaa\xd3'
    tuple_1 = (var_0, var_1, bytes_1, var_1)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.closest(tuple_1)

def test_case_152():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(dict_0)
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_6.__iter__()

def test_case_153():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()

def test_case_154():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    var_9 = var_3.__repr__()

def test_case_155():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    bool_0 = True
    var_12 = binary_tree_9.__contains__(bool_0)
    assert var_12 is False

def test_case_156():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    var_6 = binary_tree_5.closest(var_5)
    var_7 = var_4.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    var_9 = var_0.__repr__()

def test_case_157():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    var_10 = binary_tree_5.closest(var_9)
    var_11 = var_8.__iter__()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    var_17 = binary_node_2.inorder()
    binary_tree_8 = module_0.BinaryTree()

def test_case_158():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    var_6 = binary_node_2.inorder()
    var_7 = var_4.__iter__()
    var_8 = var_7.__iter__()

def test_case_159():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()

def test_case_160():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    var_12 = binary_tree_5.closest(var_11)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(none_type_0)
    binary_node_0 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    var_15 = binary_tree_3.remove(var_4)

def test_case_161():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_tree_1.__repr__()
    assert var_5 == 'binary:()'

def test_case_162():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    var_12 = binary_node_0.inorder()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    var_14 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = binary_tree_9.remove(var_14)
    var_17 = binary_tree_0.remove(var_4)

def test_case_163():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__repr__()
    assert var_2 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_2)
    assert binary_node_4.value == 'binary:()'
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(dict_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    var_9 = binary_node_5.inorder()
    binary_tree_7 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_15)
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_10.__contains__(binary_tree_12)
    assert var_18 is False
    var_19 = binary_tree_6.__repr__()
    assert var_19 == 'binary:()'

def test_case_164():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_node_2 = module_0.BinaryNode(var_15)
    var_16 = binary_node_2.inorder()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    binary_node_5 = module_0.BinaryNode(binary_node_1)

def test_case_165():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(dict_0)
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_10 = binary_node_3.inorder()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_8)
    var_11 = binary_node_5.inorder()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    var_13 = binary_tree_10.closest(var_12)
    binary_tree_11 = module_0.BinaryTree()

def test_case_166():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_9 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(dict_0)
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.__iter__()
    var_21 = binary_tree_13.closest(var_20)
    var_22 = var_8.__iter__()

def test_case_167():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_1.__contains__(binary_tree_3)
    assert var_4 is False
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    var_12 = binary_tree_8.closest(var_11)
    var_13 = var_10.__iter__()
    var_14 = binary_node_1.__repr__()

def test_case_168():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_16 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    binary_tree_8 = module_0.BinaryTree()

def test_case_169():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()

def test_case_170():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.add(none_type_0)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(var_2)

def test_case_171():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(none_type_1)

def test_case_172():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_3.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_6)
    var_8 = binary_node_0.inorder()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_7.__contains__(binary_tree_9)
    assert var_12 is False
    var_13 = binary_tree_10.remove(binary_node_2)

def test_case_173():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(dict_0)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_13)
    var_14 = binary_node_2.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_18)
    var_19 = binary_node_4.inorder()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()

def test_case_174():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_11.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_13.__contains__(binary_tree_15)
    assert var_19 is False
    binary_tree_17 = module_0.BinaryTree()
    var_20 = binary_tree_17.__iter__()
    binary_node_4 = module_0.BinaryNode(var_20)
    binary_tree_18 = module_0.BinaryTree()
    var_21 = binary_tree_18.__iter__()
    var_22 = binary_tree_18.closest(var_21)
    var_23 = var_20.__iter__()
    var_24 = var_0.__iter__()

def test_case_175():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    var_6 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_7.__contains__(binary_tree_9)
    assert var_13 is False
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_node_1.inorder()

def test_case_176():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(var_4)

def test_case_177():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()

def test_case_178():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_5.__contains__(binary_tree_7)
    assert var_9 is False
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(dict_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    var_17 = binary_tree_12.closest(var_16)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_20.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_12)

def test_case_179():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = var_0.__iter__()

def test_case_180():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(none_type_2)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    none_type_4 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_4)
    none_type_5 = None
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_10 = binary_node_3.inorder()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_14 = binary_tree_13.__contains__(binary_tree_15)
    assert var_14 is False
    binary_tree_17 = module_0.BinaryTree()
    var_15 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_18 = binary_tree_20.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    binary_tree_23 = module_0.BinaryTree()
    var_20 = binary_tree_23.__iter__()
    binary_node_5 = module_0.BinaryNode(var_19)
    binary_tree_24 = module_0.BinaryTree()
    var_21 = binary_tree_24.__iter__()
    binary_tree_25 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()
    var_24 = var_21.__iter__()
    binary_tree_26 = module_0.BinaryTree()
    var_25 = binary_tree_26.__iter__()
    binary_node_6 = module_0.BinaryNode(var_25)
    binary_tree_27 = module_0.BinaryTree()
    var_26 = binary_tree_27.__iter__()
    var_27 = binary_tree_27.closest(var_26)
    var_28 = var_25.__iter__()
    binary_node_7 = module_0.BinaryNode(binary_node_6)

def test_case_181():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_182():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()

def test_case_183():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    var_4 = binary_node_4.inorder()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_7)
    var_6 = binary_node_4.addToSubTree(var_2, var_4)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree1.BinaryNode'
    assert f'{type(var_6.value).__module__}.{type(var_6.value).__qualname__}' == 'builtins.generator'
    assert var_6.left is None
    assert var_6.right is None

def test_case_184():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    var_3 = binary_tree_4.closest(var_2)
    var_4 = var_3.__repr__()

def test_case_185():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_7 = var_5.__repr__()

def test_case_186():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_4)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_node_7 = module_0.BinaryNode(binary_tree_5)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_2)
    var_6 = var_5.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_11.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_node_5.inorder()

def test_case_187():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()

def test_case_188():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_4.__contains__(binary_tree_6)
    assert var_6 is False
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_node_6 = module_0.BinaryNode(var_1)

def test_case_189():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(dict_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_9 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_2)
    binary_tree_11 = module_0.BinaryTree()

def test_case_190():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_2)
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    var_14 = binary_node_3.inorder()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_15)
    var_15 = binary_node_4.inorder()
    binary_tree_16 = module_0.BinaryTree()
    var_16 = binary_tree_16.__iter__()
    binary_node_5 = module_0.BinaryNode(var_16)
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_17.__iter__()
    var_18 = binary_tree_17.closest(var_17)
    var_19 = var_16.__iter__()
    var_20 = var_19.__repr__()

def test_case_191():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()

def test_case_192():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    var_5 = binary_tree_6.closest(var_4)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_6.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_11 = binary_node_2.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    var_14 = binary_tree_10.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = var_13.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_17)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_14)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    var_18 = var_16.__repr__()

def test_case_193():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_2.__contains__(binary_tree_4)
    assert var_7 is False
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_9.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_14 = binary_node_2.inorder()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_17.__iter__()
    binary_node_6 = module_0.BinaryNode(var_23)
    none_type_0 = None
    binary_tree_18 = module_0.BinaryTree()
    var_25 = binary_tree_18.add(none_type_0)
    assert f'{type(binary_tree_18.root).__module__}.{type(binary_tree_18.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_7 = module_0.BinaryNode(binary_tree_18)
    none_type_1 = None
    binary_tree_19 = module_0.BinaryTree()
    var_26 = binary_tree_19.add(none_type_1)
    var_27 = var_26.__repr__()
    binary_tree_20 = module_0.BinaryTree()

def test_case_194():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_9)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    var_11 = binary_tree_5.closest(var_10)
    var_12 = var_9.__iter__()
    var_13 = var_10.__repr__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(none_type_1)
    var_16 = var_15.__repr__()
    binary_node_2 = module_0.BinaryNode(var_4)

def test_case_195():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    var_4 = binary_node_2.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_5 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_7 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    binary_tree_13 = module_0.BinaryTree()
    var_8 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_8)
    binary_tree_14 = module_0.BinaryTree()
    var_9 = binary_tree_14.__iter__()
    var_10 = binary_tree_14.closest(var_9)
    var_11 = var_8.__iter__()
    var_12 = var_9.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.__iter__()
    binary_node_6 = module_0.BinaryNode(var_18)
    binary_tree_19 = module_0.BinaryTree()
    var_19 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_21 = binary_tree_18.__contains__(binary_tree_20)
    assert var_21 is False
    binary_tree_22 = module_0.BinaryTree()
    var_22 = binary_tree_22.__iter__()
    binary_node_7 = module_0.BinaryNode(var_22)
    var_23 = binary_node_7.inorder()
    none_type_0 = None
    binary_tree_23 = module_0.BinaryTree()
    var_24 = binary_tree_23.add(none_type_0)
    assert f'{type(binary_tree_23.root).__module__}.{type(binary_tree_23.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_25 = binary_tree_22.remove(var_23)
    var_26 = var_0.__repr__()

def test_case_196():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_1.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_18)
    var_19 = var_0.__repr__()

def test_case_197():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_2 = binary_tree_6.add(none_type_2)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_3 = binary_tree_7.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_4 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_4.__repr__()
    dict_0 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.add(dict_0)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_14)
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    var_16 = binary_tree_13.closest(var_15)
    var_17 = var_14.__iter__()
    var_18 = var_15.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_node_6.__repr__()
    assert var_19 == '(L: (L: {1379} R:) R:)'

def test_case_198():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__repr__()
    assert var_6 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_6)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    var_20 = var_16.__iter__()
    binary_tree_14 = module_0.BinaryTree()

def test_case_199():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(dict_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_17)
    var_18 = binary_node_3.inorder()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_21 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()
    none_type_0 = None
    binary_tree_19 = module_0.BinaryTree()
    var_24 = binary_tree_19.add(none_type_0)
    binary_node_4 = module_0.BinaryNode(binary_tree_19)
    none_type_1 = None
    binary_tree_20 = module_0.BinaryTree()
    var_25 = binary_tree_20.add(none_type_1)
    var_26 = var_25.__repr__()
    var_27 = binary_node_2.inorder()

def test_case_200():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_0)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    var_13 = binary_node_3.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)

def test_case_201():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()

def test_case_202():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    dict_1 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.add(dict_1)
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_14 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.add(none_type_0)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_5 = module_0.BinaryNode(set_1)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    var_19 = binary_node_5.inorder()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_13)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    var_20 = binary_tree_13.__iter__()

def test_case_203():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_node_2.inorder()

def test_case_204():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    var_16 = binary_tree_8.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_19)
    var_20 = binary_node_2.inorder()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.add(none_type_2)
    var_22 = binary_tree_10.remove(var_20)
    binary_tree_12 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    var_23 = var_17.__repr__()

def test_case_205():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_10 = var_1.__repr__()

def test_case_206():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()

def test_case_207():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_12.__repr__()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.add(none_type_2)
    var_19 = var_18.__repr__()
    var_20 = var_13.__repr__()

def test_case_208():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    var_6 = binary_tree_6.closest(var_5)
    var_7 = var_4.__iter__()
    var_8 = var_5.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(dict_0)
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_6)

def test_case_209():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()

def test_case_210():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_2)
    var_5 = binary_tree_4.getMax()
    var_6 = binary_tree_0.__iter__()

def test_case_211():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()

def test_case_212():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = binary_tree_3.__repr__()
    assert var_8 == 'binary:()'

def test_case_213():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_5 = binary_node_2.inorder()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_6 = binary_tree_10.add(none_type_2)
    var_7 = binary_tree_10.getMax()
    var_8 = binary_tree_5.add(var_3)

def test_case_214():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_8)
    assert binary_node_0.value == 'binary:()'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = var_8.__repr__()
    assert var_18 == "'binary:()'"

def test_case_215():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_2)
    var_6 = binary_tree_4.getMax()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_0.__contains__(binary_tree_4)
    assert var_9 is False
    binary_node_1 = module_0.BinaryNode(var_9)

def test_case_216():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)

def test_case_217():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_3 = binary_node_1.inorder()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(dict_0)
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    var_9 = binary_node_3.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_11 = binary_node_4.inorder()
    var_12 = binary_node_3.inorder()

def test_case_218():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_7.__contains__(binary_tree_9)
    assert var_7 is False
    var_8 = binary_tree_8.__repr__()
    assert var_8 == 'binary:()'

def test_case_219():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_node_2 = module_0.BinaryNode(var_18)
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_21 = binary_tree_17.__iter__()
    binary_node_3 = module_0.BinaryNode(var_20)
    binary_tree_18 = module_0.BinaryTree()
    var_22 = binary_tree_18.__iter__()
    binary_node_4 = module_0.BinaryNode(var_22)
    binary_tree_19 = module_0.BinaryTree()
    var_23 = binary_tree_19.__iter__()
    var_24 = binary_tree_19.closest(var_23)
    var_25 = var_22.__iter__()
    var_26 = var_23.__repr__()
    binary_tree_20 = module_0.BinaryTree()
    var_27 = binary_tree_20.__repr__()
    assert var_27 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_27)
    assert binary_node_5.value == 'binary:()'
    var_28 = binary_node_2.inorder()

def test_case_220():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_7 = module_0.BinaryTree()

def test_case_221():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(dict_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_9.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_14 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.add(none_type_2)
    var_18 = binary_tree_8.getMax()
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.add(none_type_3)
    none_type_4 = None
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.add(none_type_4)
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_23.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_26 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_28 = binary_tree_18.__iter__()
    binary_node_2 = module_0.BinaryNode(var_27)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_29 = binary_node_3.inorder()
    binary_tree_19 = module_0.BinaryTree()
    var_30 = binary_tree_11.__repr__()
    assert var_30 == 'binary:()'

def test_case_222():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    var_6 = binary_tree_7.closest(var_5)
    var_7 = var_4.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()
    var_22 = var_18.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_23.__repr__()
    var_26 = binary_tree_14.add(none_type_0)

def test_case_223():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_2)
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_7 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    none_type_4 = None
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    var_13 = var_5.__repr__()

def test_case_224():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    var_4 = binary_node_3.inorder()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_8)
    binary_tree_10 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_6 = module_0.BinaryNode(set_1)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    var_19 = var_15.__iter__()
    var_20 = binary_node_6.removeFromParent(var_5, binary_tree_5)

def test_case_225():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    var_2 = binary_tree_2.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__repr__()

def test_case_226():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_8)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_0)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_2)
    var_12 = var_11.__repr__()
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(none_type_3)
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_3)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_14 = binary_node_4.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    var_17 = binary_tree_12.closest(var_16)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_node_6 = module_0.BinaryNode(var_18)
    var_19 = binary_node_6.inorder()
    none_type_4 = None
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.add(none_type_4)
    var_21 = binary_tree_13.remove(var_19)
    binary_node_7 = module_0.BinaryNode(var_11)

def test_case_227():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__repr__()
    assert var_7 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_7)
    assert binary_node_0.value == 'binary:()'
    var_8 = var_7.__repr__()
    assert var_8 == "'binary:()'"

def test_case_228():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_3)
    none_type_4 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_4)
    binary_node_6 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_2.closest(set_0)

def test_case_229():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()

def test_case_230():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_1)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.add(none_type_2)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_5 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_15 = module_0.BinaryTree()
    var_14 = binary_tree_15.__iter__()
    var_15 = binary_tree_15.closest(var_14)
    var_16 = var_13.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_17)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_node_6 = module_0.BinaryNode(none_type_1)

def test_case_231():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    var_8 = binary_node_0.inorder()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_1)
    var_10 = binary_tree_3.remove(var_8)
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_17)
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    var_19 = binary_tree_9.closest(var_18)
    var_20 = var_17.__iter__()
    var_21 = var_18.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_27 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_28.__repr__()
    var_30 = var_29.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)

def test_case_232():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_3 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_4 = binary_tree_8.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_5 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_9 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_14 = binary_tree_16.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    var_15 = binary_node_5.inorder()
    none_type_2 = None
    binary_tree_17 = module_0.BinaryTree()
    var_16 = binary_tree_17.add(none_type_2)
    var_17 = binary_tree_16.remove(var_15)
    var_18 = var_17.__repr__()

def test_case_233():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_2)
    var_6 = binary_tree_2.remove(var_4)
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_3)
    none_type_4 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    none_type_5 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_5)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    var_14 = binary_node_3.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    none_type_6 = None
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.add(none_type_6)
    binary_node_4 = module_0.BinaryNode(binary_tree_15)
    var_19 = binary_node_1.inorder()

def test_case_234():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_3 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    var_10 = binary_tree_7.closest(var_9)
    var_11 = var_8.__iter__()
    var_12 = var_9.__repr__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_node_5 = module_0.BinaryNode(var_11)

def test_case_235():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_7)
    var_10 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_0)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_node_2 = module_0.BinaryNode(var_13)
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    var_15 = binary_tree_13.closest(var_14)
    var_16 = var_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_19.__iter__()
    var_22 = var_18.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.__iter__()
    binary_node_3 = module_0.BinaryNode(var_23)
    var_24 = binary_node_3.inorder()
    none_type_2 = None
    binary_tree_17 = module_0.BinaryTree()
    var_25 = binary_tree_17.add(none_type_2)
    var_26 = binary_tree_16.remove(var_24)
    binary_tree_18 = module_0.BinaryTree()
    var_27 = binary_tree_18.__iter__()
    binary_node_4 = module_0.BinaryNode(var_27)
    binary_tree_19 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_20 = module_0.BinaryTree()
    var_28 = binary_tree_20.add(none_type_3)
    var_29 = binary_tree_2.__repr__()
    assert var_29 == 'binary:(L: {} R:)'

def test_case_236():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_8.getMax()
    list_0 = [binary_tree_6]
    binary_node_2 = module_0.BinaryNode(list_0)

def test_case_237():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = var_6.__repr__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_2)
    var_13 = binary_tree_8.getMax()
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.add(dict_0)
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()

def test_case_238():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_3.closest(var_3)
    var_5 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_2)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_2)
    binary_node_5 = module_0.BinaryNode(none_type_0)

def test_case_239():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    var_7 = var_4.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = binary_tree_4.getMax()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__repr__()
    assert var_10 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_10)
    assert binary_node_1.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_9.__contains__(binary_tree_11)
    assert var_19 is False
    binary_tree_13 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    var_20 = var_17.__iter__()

def test_case_240():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'

def test_case_241():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_3.__repr__()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_1)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(var_15)
    var_16 = binary_tree_5.__repr__()
    assert var_16 == 'binary:()'

def test_case_242():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    var_13 = binary_tree_7.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(none_type_0)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__repr__()
    assert var_17 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_17)
    assert binary_node_6.value == 'binary:()'
    var_18 = binary_node_6.__repr__()
    assert var_18 == '(L: binary:() R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_19 = var_2.__repr__()

def test_case_243():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_3)
    assert binary_node_0.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_9 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    var_8 = binary_tree_6.add(var_1)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_244():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_2)
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__repr__()
    assert var_8 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_8)
    assert binary_node_4.value == 'binary:()'
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(dict_0)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(var_8)
    assert binary_node_5.value == 'binary:()'

def test_case_245():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()

def test_case_246():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    var_7 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = binary_tree_5.remove(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    dict_0 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.add(dict_0)
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    var_23 = binary_tree_3.add(binary_node_1)

def test_case_247():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False

def test_case_248():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"

def test_case_249():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    var_10 = binary_tree_8.closest(var_9)
    var_11 = var_8.__iter__()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)

def test_case_250():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_16 = binary_tree_16.__iter__()
    binary_node_5 = module_0.BinaryNode(var_16)
    var_17 = binary_node_5.inorder()
    binary_tree_17 = module_0.BinaryTree()
    var_18 = binary_tree_17.__iter__()
    binary_node_6 = module_0.BinaryNode(var_18)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_15)

def test_case_251():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_node_1.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_9)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_1)
    binary_node_7 = module_0.BinaryNode(binary_tree_10)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(none_type_2)
    var_13 = var_12.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    binary_node_8 = module_0.BinaryNode(var_19)
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.__iter__()
    var_21 = binary_tree_16.closest(var_20)
    var_22 = var_19.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_16.__iter__()
    var_24 = binary_tree_3.__iter__()

def test_case_252():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.closest(var_3)
    var_5 = var_2.__iter__()
    var_6 = var_3.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_2.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.add(none_type_1)
    binary_tree_12 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_1)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__repr__()
    assert var_18 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_18)
    assert binary_node_4.value == 'binary:()'
    var_19 = var_6.__repr__()

def test_case_253():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_0 = module_0.BinaryNode(var_13)
    var_14 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = binary_tree_10.remove(var_14)
    var_17 = var_5.__repr__()

def test_case_254():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    var_9 = binary_tree_7.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = var_12.__repr__()

def test_case_255():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_2.__contains__(binary_tree_4)
    assert var_7 is False
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_14)
    var_15 = binary_node_4.inorder()
    binary_tree_11 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(dict_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    dict_1 = {}
    var_20 = binary_tree_1.__contains__(dict_1)

def test_case_256():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)

def test_case_257():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    var_2 = binary_tree_0.closest(var_1)
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'

def test_case_258():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_4.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    var_9 = binary_node_6.inorder()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_10)
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_10.__contains__(binary_tree_12)
    assert var_13 is False
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    binary_node_8 = module_0.BinaryNode(var_14)
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.__iter__()
    var_16 = binary_tree_15.closest(var_15)
    var_17 = var_14.__iter__()
    var_18 = var_15.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.__repr__()
    assert var_19 == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_19)
    assert binary_node_9.value == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    var_20 = binary_tree_17.__iter__()
    binary_node_10 = module_0.BinaryNode(var_20)
    var_21 = binary_node_10.inorder()
    var_22 = binary_tree_16.remove(var_19)
    binary_tree_18 = module_0.BinaryTree()

def test_case_259():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)

def test_case_260():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.add(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    var_23 = var_20.__iter__()
    var_24 = var_20.__repr__()
    var_25 = var_22.__iter__()

def test_case_261():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_5 = binary_node_2.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_4.__contains__(binary_tree_6)
    assert var_9 is False
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__repr__()
    assert var_10 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_10)
    assert binary_node_5.value == 'binary:()'
    var_11 = binary_node_5.__repr__()
    assert var_11 == '(L: binary:() R:)'
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_14)
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_node_7 = module_0.BinaryNode(var_17)
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    var_19 = binary_tree_15.closest(var_18)
    var_20 = var_17.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_16)
    var_21 = binary_node_8.inorder()
    var_22 = binary_tree_2.__iter__()

def test_case_262():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_7)
    assert binary_node_1.value == 'binary:()'
    var_8 = binary_node_1.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(var_2)

def test_case_263():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()

def test_case_264():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    float_0 = 3187.7408
    var_4 = binary_tree_3.__contains__(float_0)
    assert var_4 is False

def test_case_265():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    var_2 = binary_tree_2.__contains__(binary_tree_2)
    assert var_2 is False
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_8)
    assert binary_node_2.value == 'binary:()'
    var_9 = binary_node_2.__repr__()
    assert var_9 == '(L: binary:() R:)'
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    var_13 = binary_tree_7.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(var_20)

def test_case_266():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = binary_node_0.inorder()

def test_case_267():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_0)
    var_9 = binary_tree_5.getMax()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    var_11 = binary_node_1.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.add(none_type_1)
    binary_tree_10 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    var_15 = binary_tree_0.closest(none_type_1)

def test_case_268():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    var_9 = binary_tree_5.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    var_15 = binary_node_2.inorder()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_2)
    var_17 = binary_tree_10.remove(var_15)
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__repr__()
    assert var_18 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_18)
    assert binary_node_3.value == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_19)
    var_20 = binary_node_4.inorder()
    var_21 = binary_tree_12.remove(var_18)
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.__iter__()
    binary_node_5 = module_0.BinaryNode(var_22)
    binary_tree_15 = module_0.BinaryTree()
    var_23 = binary_tree_15.__iter__()
    var_24 = binary_tree_15.closest(var_23)
    var_25 = var_22.__iter__()
    var_26 = var_23.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_27 = binary_tree_16.__iter__()
    var_28 = binary_tree_16.closest(var_27)
    var_29 = var_18.__repr__()
    assert var_29 == "'binary:()'"

def test_case_269():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    var_8 = binary_tree_4.__contains__(none_type_1)
    assert var_8 is False

def test_case_270():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'

def test_case_271():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_7 = binary_node_2.inorder()
    var_8 = binary_tree_1.remove(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_17 = binary_node_3.inorder()
    binary_tree_8 = module_0.BinaryTree()

def test_case_272():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == 'binary:()'
    var_7 = binary_node_2.__repr__()
    assert var_7 == '(L: binary:() R:)'
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(none_type_1)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.add(none_type_3)
    binary_node_5 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__repr__()
    assert var_17 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_17)
    assert binary_node_6.value == 'binary:()'
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_tree_16.__iter__()
    binary_node_7 = module_0.BinaryNode(var_18)
    var_19 = binary_node_7.inorder()
    var_20 = binary_tree_15.remove(var_17)
    binary_tree_17 = module_0.BinaryTree()

def test_case_273():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_5 = binary_node_0.inorder()
    binary_node_2 = module_0.BinaryNode(var_1)

def test_case_274():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.add(dict_0)
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_20)
    var_21 = binary_node_2.inorder()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_tree_10.add(none_type_2)
    var_23 = binary_tree_9.remove(var_21)
    var_24 = var_4.__iter__()

def test_case_275():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    var_1 = binary_node_3.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    var_3 = binary_tree_1.remove(var_2)

def test_case_276():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_2)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    var_12 = binary_node_4.inorder()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_16 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_21 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()

def test_case_277():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()

def test_case_278():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    var_2 = var_0.__repr__()

def test_case_279():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_1)
    assert binary_node_0.value == 'binary:()'
    var_2 = binary_node_0.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_1)
    var_9 = var_8.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    var_12 = binary_tree_10.closest(var_11)
    var_13 = var_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_14)
    var_15 = binary_node_4.inorder()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_16)
    var_17 = binary_node_5.inorder()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.add(none_type_2)
    var_19 = binary_tree_13.remove(var_17)
    bytes_0 = b'\n\xb9\x8ba}\xb2\xcf\xe2a"\xcc\x82\xa0\xbd\xb7\xed'
    var_20 = binary_tree_11.remove(bytes_0)

def test_case_280():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_1.getMax()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(dict_0)
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    dict_1 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(dict_1)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = var_17.__repr__()

def test_case_281():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    var_5 = binary_tree_5.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    var_8 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_1)
    var_11 = var_10.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    var_14 = binary_tree_10.closest(var_13)
    var_15 = var_12.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    var_18 = binary_tree_12.closest(var_17)
    var_19 = var_0.__repr__()

def test_case_282():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__repr__()
    assert var_4 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_4)
    assert binary_node_3.value == 'binary:()'
    var_5 = binary_node_3.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = binary_node_3.inorder()

def test_case_283():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_2 = module_0.BinaryNode(set_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_0 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_4)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_1 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_2 = binary_tree_6.add(none_type_2)
    binary_node_7 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_3 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_6 = binary_tree_11.add(dict_0)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    binary_node_8 = module_0.BinaryNode(binary_tree_9)

def test_case_284():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_4 = module_0.BinaryNode(var_7)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    var_9 = binary_tree_4.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    var_13 = binary_tree_6.closest(var_12)
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = binary_tree_10.__repr__()
    assert var_19 == 'binary:()'

def test_case_285():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)

def test_case_286():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    var_6 = binary_node_2.inorder()
    var_7 = binary_tree_3.__contains__(var_5)
    assert var_7 is False

def test_case_287():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    var_10 = binary_tree_5.closest(var_9)
    var_11 = var_8.__iter__()
    var_12 = var_9.__repr__()
    var_13 = var_7.__iter__()

def test_case_288():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_289():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    var_7 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = binary_tree_3.remove(var_7)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__repr__()
    assert var_13 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_13)
    assert binary_node_3.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_14)
    var_15 = binary_node_4.inorder()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    binary_node_5 = module_0.BinaryNode(var_19)
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_22 = binary_tree_15.__contains__(binary_tree_17)
    assert var_22 is False
    binary_tree_19 = module_0.BinaryTree()

def test_case_290():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = binary_tree_4.getMax()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_node_2 = module_0.BinaryNode(var_2)

def test_case_291():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_5 = binary_node_2.inorder()
    var_6 = var_3.__repr__()
    assert var_6 == "'(L: binary:() R:)'"

def test_case_292():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_node_1.__repr__()
    assert var_2 == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_1)
    var_5 = var_4.__repr__()
    binary_tree_5 = module_0.BinaryTree()

def test_case_293():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_1.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__repr__()
    assert var_6 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_6)
    assert binary_node_3.value == 'binary:()'
    var_7 = binary_tree_4.__iter__()

def test_case_294():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    var_12 = binary_tree_7.closest(var_11)
    var_13 = var_10.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    var_16 = binary_tree_9.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_11)
    var_19 = binary_node_6.inorder()
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.add(none_type_1)
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.add(none_type_2)
    binary_node_7 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_node_4.__repr__()
    assert var_22 == '(L: b"rj\\xfb\\x1e:\\x89\\r{\\xd3\'\\xeaZek\\xcbA\\xb7\\x88\\xaf" R:)'

def test_case_295():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_1 = module_0.BinaryTree()

def test_case_296():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_2.__contains__(binary_tree_4)
    assert var_8 is False
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = binary_tree_2.__contains__(none_type_0)

def test_case_297():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    var_7 = var_4.__iter__()
    var_8 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_9)
    assert binary_node_3.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    var_10 = binary_node_4.inorder()
    binary_node_5 = module_0.BinaryNode(binary_tree_5)
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    var_15 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(var_17)
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_node_7 = module_0.BinaryNode(var_19)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_node_8 = module_0.BinaryNode(var_20)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__iter__()
    binary_node_9 = module_0.BinaryNode(var_21)
    var_22 = binary_node_9.inorder()
    var_23 = binary_tree_13.__contains__(binary_tree_3)
    assert var_23 is False

def test_case_298():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_4.__contains__(binary_tree_6)
    assert var_6 is False
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(dict_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__repr__()
    assert var_12 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_12)
    assert binary_node_2.value == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__repr__()
    assert var_13 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_13)
    assert binary_node_3.value == 'binary:()'
    var_14 = binary_node_3.__repr__()
    assert var_14 == '(L: binary:() R:)'
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(none_type_0)
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    var_17 = binary_tree_5.add(binary_node_3)

def test_case_299():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()

def test_case_300():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_0)
    assert binary_node_2.value == 'binary:()'
    var_1 = binary_node_2.__repr__()
    assert var_1 == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_3.__repr__()

def test_case_301():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    var_4 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_node_2 = module_0.BinaryNode(var_13)
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_16 = binary_tree_13.__contains__(binary_tree_15)
    assert var_16 is False
    binary_node_3 = module_0.BinaryNode(var_9)

def test_case_302():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()

def test_case_303():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_10 = binary_node_3.inorder()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_12 = binary_tree_9.remove(var_10)
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_2)
    var_15 = var_14.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    var_21 = var_17.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.__iter__()
    binary_node_5 = module_0.BinaryNode(var_22)
    var_23 = binary_node_5.inorder()
    binary_tree_16 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_17.add(dict_0)
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    var_27 = var_26.__iter__()
    var_28 = binary_tree_17.__iter__()
    binary_node_6 = module_0.BinaryNode(var_10)

def test_case_304():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_7)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    var_9 = binary_node_3.inorder()
    var_10 = binary_tree_4.remove(var_7)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_14 = binary_node_4.inorder()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    var_15 = binary_tree_8.__iter__()

def test_case_305():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_2.__contains__(binary_tree_4)
    assert var_6 is False
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()

def test_case_306():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)

def test_case_307():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    var_8 = binary_tree_7.__contains__(binary_tree_7)
    var_9 = binary_node_0.inorder()

def test_case_308():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_7.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__repr__()
    assert var_17 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_17)
    assert binary_node_1.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_18)
    var_19 = binary_node_2.inorder()
    var_20 = binary_tree_9.remove(var_17)
    var_21 = var_19.__repr__()

def test_case_309():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(dict_0)
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    var_11 = binary_tree_5.closest(var_10)
    var_12 = var_9.__iter__()
    var_13 = var_10.__repr__()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(none_type_2)
    var_16 = var_15.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_18)
    var_20 = binary_node_3.removeFromParent(binary_tree_8, var_19)
    dict_1 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.add(dict_1)
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__iter__()
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_25 = binary_tree_13.add(none_type_3)
    binary_tree_14 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_3)
    binary_tree_15 = module_0.BinaryTree()
    var_26 = binary_tree_15.__repr__()
    assert var_26 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_26)
    assert binary_node_5.value == 'binary:()'
    var_27 = binary_tree_15.__repr__()
    assert var_27 == 'binary:()'

def test_case_310():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_1)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.add(none_type_2)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_17)
    var_18 = binary_node_2.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_19)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__repr__()
    assert var_20 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_20)
    assert binary_node_4.value == 'binary:()'
    var_21 = binary_node_4.__repr__()
    assert var_21 == '(L: binary:() R:)'
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_24 = binary_tree_19.__iter__()
    binary_node_5 = module_0.BinaryNode(var_23)
    var_25 = binary_node_5.removeFromParent(binary_tree_16, var_24)
    binary_tree_20 = module_0.BinaryTree()
    var_26 = binary_tree_20.__repr__()
    assert var_26 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_26)
    assert binary_node_6.value == 'binary:()'
    var_27 = binary_node_6.__repr__()
    assert var_27 == '(L: binary:() R:)'
    var_28 = var_26.__repr__()
    assert var_28 == "'binary:()'"
    var_29 = binary_tree_16.__iter__()

def test_case_311():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    var_8 = binary_node_2.removeFromParent(binary_tree_6, var_7)
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_4.closest(var_9)

def test_case_312():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    var_3 = var_2.__contains__(var_2)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_4 = binary_node_3.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_5 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_5.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = binary_tree_4.remove(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_6 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.add(none_type_1)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_2)
    binary_node_7 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_node_8 = module_0.BinaryNode(var_17)
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    var_19 = binary_tree_15.closest(var_18)
    var_20 = var_17.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    var_22 = binary_tree_2.closest(var_16)

def test_case_313():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)

def test_case_314():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    var_9 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    var_11 = binary_tree_6.__contains__(binary_tree_6)
    assert var_11 is False
    binary_tree_7 = module_0.BinaryTree()

def test_case_315():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    var_5 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(var_3)

def test_case_316():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    var_7 = binary_node_1.inorder()
    var_8 = binary_tree_2.remove(var_5)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    var_13 = binary_node_3.inorder()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.add(none_type_2)
    var_15 = binary_tree_7.remove(var_13)
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    var_17 = binary_node_4.inorder()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_11 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(var_1)

def test_case_317():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_node_0 = module_0.BinaryNode(var_16)
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()
    var_22 = var_18.__repr__()
    binary_tree_14 = module_0.BinaryTree()

def test_case_318():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()

def test_case_319():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_9.__contains__(binary_tree_11)
    assert var_12 is False
    dict_0 = {}
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.add(dict_0)
    assert f'{type(binary_tree_13.root).__module__}.{type(binary_tree_13.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_14)
    var_17 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()
    var_22 = var_20.__iter__()
    var_23 = var_13.__repr__()

def test_case_320():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_node_1.__repr__()
    assert var_5 == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    var_8 = binary_tree_4.closest(var_7)
    var_9 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    var_13 = binary_tree_7.closest(var_12)
    var_14 = var_11.__iter__()
    var_15 = var_12.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.add(none_type_1)
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    var_22 = var_19.__repr__()

def test_case_321():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_8.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    var_13 = binary_node_1.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = binary_tree_7.remove(binary_tree_7)

def test_case_322():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()

def test_case_323():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(none_type_1)
    var_13 = var_12.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    var_15 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    var_20 = var_18.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_21)
    var_22 = var_14.__repr__()
    assert var_22 == "'binary:()'"

def test_case_324():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    dict_1 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(dict_1)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    var_14 = binary_tree_7.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = var_13.__repr__()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.add(none_type_3)
    var_19 = var_18.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()
    var_25 = var_23.__iter__()
    binary_tree_12 = module_0.BinaryTree()

def test_case_325():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_2)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__repr__()
    assert var_5 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_5)
    assert binary_node_3.value == 'binary:()'
    var_6 = binary_node_3.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = binary_tree_5.add(none_type_2)

def test_case_326():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()

def test_case_327():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)

def test_case_328():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    var_7 = binary_node_0.removeFromParent(binary_tree_2, var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__repr__()
    assert var_8 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__repr__()
    assert var_11 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_11)
    assert binary_node_2.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    var_13 = binary_node_3.inorder()
    var_14 = binary_tree_9.remove(var_11)
    binary_tree_11 = module_0.BinaryTree()

def test_case_329():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_4 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    var_6 = binary_node_2.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_9)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_4.__repr__()

def test_case_330():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_1.getMin()

def test_case_331():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_2 = var_1.__contains__(var_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_8.__contains__(binary_tree_10)
    assert var_9 is False
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.add(none_type_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_tree_13.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_16)
    var_12 = binary_tree_15.add(var_9)

def test_case_332():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_3 = binary_node_1.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_20)
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_9.__contains__(binary_tree_11)
    assert var_23 is False
    var_24 = var_4.__repr__()

def test_case_333():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_0.__iter__()

def test_case_334():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)

def test_case_335():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    var_6 = binary_node_3.inorder()
    var_7 = binary_tree_4.add(binary_tree_3)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_336():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_node_2 = module_0.BinaryNode(bytes_0)

def test_case_337():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()

def test_case_338():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'

def test_case_339():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = binary_tree_6.closest(var_9)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    var_18 = var_14.__repr__()
    var_19 = binary_tree_10.__repr__()
    assert var_19 == 'binary:()'

def test_case_340():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == 'binary:()'
    var_9 = binary_node_1.__repr__()
    assert var_9 == '(L: binary:() R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    var_13 = binary_tree_3.add(var_7)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_341():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    var_4 = binary_tree_4.closest(var_3)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()

def test_case_342():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    var_6 = var_5.__contains__(var_5)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__repr__()
    assert var_7 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_7)
    assert binary_node_3.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    var_9 = binary_node_4.inorder()
    var_10 = binary_tree_7.remove(var_7)
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.add(none_type_1)
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_16)
    var_21 = binary_node_6.inorder()
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_17.__repr__()
    assert var_22 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_16)

def test_case_343():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    var_2 = binary_tree_0.closest(var_1)
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = binary_tree_2.remove(binary_tree_1)

def test_case_344():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_3 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    var_7 = binary_tree_7.__contains__(binary_tree_7)
    assert var_7 is False
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_8.__contains__(binary_tree_10)
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_12)
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    var_14 = binary_tree_13.closest(var_13)
    var_15 = var_12.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    none_type_3 = None
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.add(none_type_3)
    binary_tree_16 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(none_type_3)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_7 = module_0.BinaryNode(set_0)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    var_18 = var_2.__repr__()

def test_case_345():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()

def test_case_346():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    var_8 = var_6.__repr__()

def test_case_347():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_2)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_10.__contains__(binary_tree_12)
    assert var_13 is False
    binary_tree_14 = module_0.BinaryTree()

def test_case_348():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    var_4 = binary_node_1.__repr__()
    assert var_4 == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    var_7 = binary_tree_5.__contains__(binary_tree_5)
    assert var_7 is False
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_19)
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = binary_tree_11.closest(var_21)
    binary_tree_13 = module_0.BinaryTree()
    var_25 = binary_tree_13.__repr__()
    assert var_25 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_25)
    assert binary_node_4.value == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_14)
    var_26 = var_25.__contains__(var_25)
    var_27 = var_26.__repr__()

def test_case_349():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()

def test_case_350():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    var_5 = binary_tree_5.closest(var_4)
    var_6 = var_3.__iter__()
    var_7 = binary_node_2.inorder()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(dict_0)
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__repr__()
    assert var_20 == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_node_5 = module_0.BinaryNode(var_4)

def test_case_351():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)

def test_case_352():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_6)
    assert binary_node_0.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    var_8 = binary_tree_5.closest(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    var_11 = binary_tree_7.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    var_15 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_17 = binary_tree_9.remove(var_15)
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_18)
    var_19 = var_7.__iter__()
    var_20 = var_19.__repr__()

def test_case_353():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    var_3 = binary_tree_3.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_node_2.__repr__()
    assert var_8 == '(L: ((),) R:)'
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = binary_tree_6.getMax()
    var_11 = binary_tree_3.__contains__(var_8)
    assert var_11 is False

def test_case_354():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    var_4 = binary_tree_5.closest(var_3)
    var_5 = var_2.__iter__()
    var_6 = var_3.__repr__()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(dict_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    var_12 = binary_node_3.inorder()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_14)
    var_16 = binary_node_4.removeFromParent(binary_tree_10, var_15)
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__iter__()
    var_21 = var_19.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    var_25 = var_22.__iter__()
    var_26 = var_22.__repr__()
    var_27 = binary_tree_7.__contains__(binary_tree_3)
    assert var_27 is False

def test_case_355():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(none_type_2)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_6 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_13 = module_0.BinaryTree()
    var_7 = binary_tree_13.add(none_type_4)
    binary_tree_14 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_4)
    binary_tree_15 = module_0.BinaryTree()
    var_8 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_10.__iter__()
    none_type_5 = None
    binary_tree_17 = module_0.BinaryTree()
    var_13 = binary_tree_17.add(none_type_5)
    binary_tree_18 = module_0.BinaryTree()

def test_case_356():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_node_0 = module_0.BinaryNode(var_14)
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    var_16 = binary_tree_9.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_18)
    var_19 = binary_node_1.inorder()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_node_2 = module_0.BinaryNode(var_20)
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    var_22 = binary_tree_13.closest(var_21)
    var_23 = var_20.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(binary_tree_12)

def test_case_357():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_1)
    var_5 = var_4.__repr__()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_2)
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    var_9 = binary_node_2.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__repr__()
    assert var_10 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    var_11 = var_10.__contains__(var_10)
    var_12 = binary_tree_4.__repr__()
    assert var_12 == 'binary:(L: None R:)'

def test_case_358():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    var_6 = binary_node_0.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_1)
    var_10 = var_9.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    var_16 = binary_tree_10.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    var_19 = var_14.__iter__()

def test_case_359():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__repr__()
    assert var_13 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_13)
    assert binary_node_0.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__repr__()
    assert var_16 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_16)
    assert binary_node_2.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_17)
    var_18 = binary_node_3.inorder()
    var_19 = binary_tree_8.remove(var_16)
    var_20 = binary_tree_9.__iter__()

def test_case_360():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    var_9 = binary_tree_6.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = var_8.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_node_1.inorder()

def test_case_361():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_2.__contains__(binary_tree_4)
    assert var_3 is False
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    var_8 = binary_tree_9.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = var_7.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_node_4 = module_0.BinaryNode(var_20)
    var_21 = binary_node_4.inorder()
    none_type_0 = None
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.add(none_type_0)
    assert f'{type(binary_tree_15.root).__module__}.{type(binary_tree_15.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_23 = binary_tree_14.remove(var_21)
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__repr__()
    assert var_24 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_24)
    assert binary_node_5.value == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_17)
    var_25 = var_24.__contains__(var_24)
    binary_tree_18 = module_0.BinaryTree()
    var_26 = binary_tree_18.__iter__()
    binary_node_7 = module_0.BinaryNode(var_26)
    binary_tree_19 = module_0.BinaryTree()
    var_27 = binary_tree_19.__iter__()
    binary_node_8 = module_0.BinaryNode(var_21)

def test_case_362():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    var_5 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    var_7 = binary_node_4.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = binary_tree_4.remove(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_10)
    var_11 = binary_node_5.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_8)
    var_12 = binary_node_6.inorder()
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__repr__()
    assert var_17 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_17)
    assert binary_node_7.value == 'binary:()'
    var_18 = binary_node_7.__repr__()
    assert var_18 == '(L: binary:() R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__repr__()
    assert var_19 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()

def test_case_363():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    var_8 = binary_tree_6.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = binary_node_2.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    var_12 = binary_tree_7.__contains__(binary_tree_7)
    assert var_12 is False
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    var_16 = binary_node_3.removeFromParent(binary_tree_8, var_15)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__repr__()
    assert var_17 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_17)
    assert binary_node_4.value == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_13)
    var_18 = var_17.__contains__(var_17)
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    var_22 = var_19.__iter__()
    var_23 = binary_node_4.__repr__()
    assert var_23 == '(L: binary:() R:)'

def test_case_364():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_2.inorder()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_2)
    var_6 = binary_tree_5.remove(var_4)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__repr__()
    assert var_7 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_7)
    assert binary_node_3.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    var_8 = var_7.__contains__(var_7)
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_10)
    var_12 = binary_node_5.removeFromParent(binary_tree_9, var_11)
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__iter__()
    binary_node_6 = module_0.BinaryNode(var_17)
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_tree_16.__iter__()
    var_19 = binary_tree_16.closest(var_18)
    var_20 = var_17.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_21 = binary_tree_16.__iter__()
    var_22 = binary_tree_2.__iter__()

def test_case_365():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_6 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_3)
    var_11 = var_10.__repr__()
    none_type_4 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_4)
    var_13 = binary_node_0.removeFromParent(none_type_0, var_10)

def test_case_366():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.closest(var_3)
    var_5 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    var_7 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_4)
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    var_14 = binary_tree_6.closest(var_13)
    binary_tree_7 = module_0.BinaryTree()

def test_case_367():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_3.__contains__(binary_tree_5)
    assert var_8 is False
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    var_9 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_13.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__repr__()
    assert var_18 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_18)
    assert binary_node_6.value == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_15)
    var_19 = var_18.__contains__(var_18)
    var_20 = binary_tree_4.__iter__()

def test_case_368():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__repr__()
    assert var_8 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    var_10 = binary_node_2.inorder()
    var_11 = binary_tree_3.remove(var_8)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    var_12 = binary_node_3.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    var_16 = binary_tree_9.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = var_5.__repr__()

def test_case_369():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_node_4 = module_0.BinaryNode(binary_node_2)

def test_case_370():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_1.__repr__()

def test_case_371():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    var_18 = var_14.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_19)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__repr__()
    assert var_20 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_20)
    assert binary_node_2.value == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_21)
    var_22 = binary_node_3.inorder()
    var_23 = binary_tree_12.remove(var_20)
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__repr__()
    assert var_24 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_24)
    assert binary_node_4.value == 'binary:()'
    var_25 = binary_node_4.__repr__()
    assert var_25 == '(L: binary:() R:)'
    var_26 = var_24.__repr__()
    assert var_26 == "'binary:()'"
    binary_tree_15 = module_0.BinaryTree()

def test_case_372():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(dict_0)
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_9.__repr__()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.add(none_type_2)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    var_16 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_5 = module_0.BinaryNode(bytes_0)
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    binary_node_6 = module_0.BinaryNode(var_21)
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.__iter__()
    var_23 = binary_tree_16.closest(var_22)
    var_24 = var_21.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_25 = binary_tree_16.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_26 = binary_tree_18.__iter__()
    binary_node_7 = module_0.BinaryNode(var_26)
    var_27 = binary_node_7.inorder()
    none_type_4 = None
    binary_tree_19 = module_0.BinaryTree()
    var_28 = binary_tree_19.add(none_type_4)
    var_29 = binary_tree_18.remove(var_27)
    binary_tree_20 = module_0.BinaryTree()
    var_30 = binary_tree_20.__iter__()

def test_case_373():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()

def test_case_374():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    var_4 = binary_tree_4.remove(var_3)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_0.add(binary_tree_2)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_375():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_7.__repr__()

def test_case_376():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_4 = module_0.BinaryTree()

def test_case_377():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_3 = var_2.__contains__(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__repr__()
    assert var_4 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == 'binary:()'
    var_5 = binary_node_2.__repr__()
    assert var_5 == '(L: binary:() R:)'
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_4.closest(var_7)
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    none_type_0 = None
    var_16 = binary_tree_1.remove(none_type_0)

def test_case_378():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_3.closest(var_3)
    var_5 = var_2.__iter__()
    var_6 = var_3.__repr__()
    var_7 = var_4.__repr__()

def test_case_379():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_7 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__repr__()
    assert var_8 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_8)
    assert binary_node_3.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    var_9 = var_8.__contains__(var_8)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = binary_tree_8.getMax()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__repr__()
    assert var_12 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_12)
    assert binary_node_6.value == 'binary:()'
    var_13 = binary_node_6.__repr__()
    assert var_13 == '(L: binary:() R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__repr__()
    assert var_14 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_14)
    assert binary_node_7.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_node_8 = module_0.BinaryNode(var_15)
    var_16 = binary_node_8.inorder()
    var_17 = binary_tree_11.remove(var_14)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_23.__iter__()
    var_26 = var_24.__iter__()
    var_27 = binary_tree_10.__iter__()

def test_case_380():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_5 = binary_node_2.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    var_9 = binary_node_4.inorder()
    binary_tree_5 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.add(none_type_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_node_7 = module_0.BinaryNode(var_12)
    binary_tree_12 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_6)

def test_case_381():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_2)
    var_7 = binary_tree_3.remove(var_5)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__repr__()
    assert var_10 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    var_11 = var_10.__contains__(var_10)
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_12.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.add(none_type_3)
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_24.__repr__()
    var_27 = binary_tree_8.__contains__(var_21)
    assert var_27 is False

def test_case_382():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_17 = binary_tree_7.getMax()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_8 = module_0.BinaryTree()

def test_case_383():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_2 = binary_node_2.inorder()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_11 = binary_node_3.removeFromParent(binary_tree_4, var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    var_15 = binary_node_5.inorder()
    binary_tree_12 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_6 = module_0.BinaryNode(set_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_node_1)

def test_case_384():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    var_3 = binary_tree_2.remove(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_2.inorder()
    var_6 = binary_tree_1.add(binary_tree_3)

def test_case_385():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    var_7 = binary_node_2.inorder()
    var_8 = binary_tree_3.remove(var_5)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_10 = binary_node_3.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.add(none_type_1)
    var_18 = var_17.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(var_19)
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    var_21 = binary_tree_11.closest(var_20)
    var_22 = var_19.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_24 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_27.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_29 = binary_tree_12.closest(var_28)

def test_case_386():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__repr__()
    assert var_1 == 'binary:()'
    var_2 = binary_node_1.__repr__()
    assert var_2 == '(L: ((),) R:)'
    var_3 = binary_node_0.__repr__()
    assert var_3 == '(L: None R:)'
    var_4 = var_3.__iter__()

def test_case_387():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_node_1.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_tree_4.remove(var_7)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_12.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_node_2 = module_0.BinaryNode(var_18)
    var_20 = binary_node_2.removeFromParent(binary_tree_9, var_19)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(var_0)

def test_case_388():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    var_2 = binary_tree_1.remove(var_1)
    str_0 = "^Tu\x0c\t\\d'i"
    binary_node_1 = module_0.BinaryNode(str_0)
    var_3 = binary_node_1.removeFromParent(binary_tree_1, binary_node_0)

def test_case_389():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    var_8 = binary_tree_4.closest(var_7)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_9 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == 'binary:()'
    var_11 = binary_tree_0.add(var_8)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_390():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_4.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__repr__()
    assert var_12 == 'binary:()'
    var_13 = binary_node_1.__repr__()
    assert var_13 == '(L: ((),) R:)'
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    var_15 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_17 = binary_tree_10.remove(var_15)
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.add(none_type_1)
    binary_tree_13 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_1)
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.add(none_type_2)
    none_type_3 = None
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_5 = module_0.BinaryNode(tuple_3)
    binary_node_6 = module_0.BinaryNode(var_19)

def test_case_391():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = binary_tree_3.__iter__()

def test_case_392():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = binary_node_0.inorder()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_14 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()

def test_case_393():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(dict_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_3)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_3)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    var_9 = binary_node_3.inorder()
    binary_tree_9 = module_0.BinaryTree()

def test_case_394():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'

def test_case_395():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_9)
    var_11 = binary_node_4.removeFromParent(binary_tree_7, var_10)
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    none_type_0 = None
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.add(none_type_0)
    assert f'{type(binary_tree_13.root).__module__}.{type(binary_tree_13.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    var_16 = var_12.__repr__()

def test_case_396():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    var_5 = binary_tree_4.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_7)
    assert binary_node_4.value == 'binary:()'
    var_8 = binary_node_4.__repr__()
    assert var_8 == '(L: binary:() R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()

def test_case_397():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_3 = module_0.BinaryNode(set_1)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    var_2 = binary_tree_0.closest(var_1)
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_2.closest(var_8)
    var_12 = var_4.__repr__()

def test_case_398():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    var_16 = binary_node_1.removeFromParent(binary_tree_6, var_15)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_17)
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    var_19 = binary_tree_11.closest(var_18)
    var_20 = var_17.__iter__()
    var_21 = var_18.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()

def test_case_399():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__iter__()
    binary_node_0 = module_0.BinaryNode(var_18)
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()
    var_20 = binary_tree_9.closest(var_19)
    var_21 = var_18.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    var_25 = var_22.__iter__()
    var_26 = var_24.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_27 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_28.__repr__()
    var_30 = var_29.__iter__()
    var_31 = var_30.__repr__()
    binary_tree_15 = module_0.BinaryTree()

def test_case_400():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_2.__repr__()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_15)
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(none_type_0)
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(none_type_1)
    var_18 = var_17.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()

def test_case_401():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_8)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    var_10 = binary_tree_7.closest(var_9)
    var_11 = var_8.__iter__()
    var_12 = binary_node_0.inorder()
    var_13 = var_3.__repr__()

def test_case_402():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_2.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_node_2.inorder()

def test_case_403():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_1 = binary_node_1.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_7)
    assert binary_node_3.value == 'binary:()'
    var_8 = binary_node_3.__repr__()
    assert var_8 == '(L: binary:() R:)'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    var_9 = binary_node_4.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    var_12 = binary_tree_7.closest(var_11)
    var_13 = var_10.__iter__()
    var_14 = var_11.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = binary_tree_8.closest(var_16)
    var_20 = binary_tree_5.__iter__()

def test_case_404():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    var_13 = binary_node_1.removeFromParent(binary_tree_5, var_12)
    binary_node_2 = module_0.BinaryNode(var_3)

def test_case_405():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_4.__iter__()
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_8.__repr__()
    binary_node_1 = module_0.BinaryNode(var_8)

def test_case_406():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_14 = binary_tree_8.getMax()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    var_18 = binary_node_2.removeFromParent(binary_tree_9, var_17)
    binary_tree_13 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    var_19 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_14)
    var_20 = binary_node_5.inorder()
    var_21 = var_19.__repr__()

def test_case_407():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__repr__()
    assert var_8 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == 'binary:()'
    var_9 = binary_node_1.__repr__()
    assert var_9 == '(L: binary:() R:)'
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    var_12 = var_8.__repr__()
    assert var_12 == "'binary:()'"

def test_case_408():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_2.__contains__(binary_tree_4)
    assert var_8 is False
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    var_9 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    var_12 = binary_tree_8.closest(var_11)
    var_13 = var_10.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.add(none_type_2)
    var_19 = binary_tree_13.getMax()
    binary_tree_14 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.add(dict_0)
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_25 = binary_tree_16.__iter__()
    binary_node_6 = module_0.BinaryNode(var_25)
    var_26 = binary_tree_15.getMin()

def test_case_409():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_3 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()

def test_case_410():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == 'binary:()'
    var_7 = binary_node_2.__repr__()
    assert var_7 == '(L: binary:() R:)'
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = binary_tree_4.closest(var_10)
    var_14 = var_8.__repr__()
    assert var_14 == '"\'binary:()\'"'

def test_case_411():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'

def test_case_412():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__repr__()
    assert var_0 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_0)
    assert binary_node_2.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    var_1 = var_0.__contains__(var_0)
    var_2 = binary_node_2.add(var_0)
    assert f'{type(binary_node_2.left).__module__}.{type(binary_node_2.left).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_413():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    var_10 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_0)
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(none_type_1)
    var_13 = binary_tree_7.getMax()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    var_15 = binary_tree_8.closest(var_14)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__repr__()
    assert var_21 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_21)
    assert binary_node_3.value == 'binary:()'
    var_22 = binary_node_3.__repr__()
    assert var_22 == '(L: binary:() R:)'
    binary_tree_13 = module_0.BinaryTree()

def test_case_414():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_3.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    var_10 = binary_tree_8.closest(var_9)
    var_11 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_15)
    var_21 = binary_node_4.inorder()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.__iter__()
    binary_node_5 = module_0.BinaryNode(var_22)
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_17.__iter__()
    var_24 = binary_tree_17.closest(var_23)
    var_25 = var_22.__iter__()
    none_type_2 = None
    binary_tree_18 = module_0.BinaryTree()
    var_26 = binary_tree_18.add(none_type_2)
    var_27 = var_6.__iter__()

def test_case_415():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_0.remove(var_7)
    var_11 = var_10.__repr__()
    var_12 = var_11.__repr__()

def test_case_416():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    var_6 = binary_node_1.removeFromParent(binary_tree_3, var_5)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(var_11)

def test_case_417():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    var_0 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_1)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = binary_tree_2.__iter__()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_4 = module_0.BinaryNode(set_1)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_6 = binary_node_4.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_6 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_3.__contains__(binary_tree_5)
    assert var_10 is False
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()

def test_case_418():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    var_4 = binary_tree_1.remove(var_3)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    set_0 = {binary_node_2, binary_node_2, var_5}
    var_7 = binary_tree_2.remove(set_0)

def test_case_419():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    var_6 = binary_tree_5.closest(var_5)
    var_7 = var_4.__iter__()
    var_8 = var_6.__repr__()

def test_case_420():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.closest(var_3)
    var_5 = var_2.__iter__()
    var_6 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_3.__contains__(binary_tree_3)
    assert var_8 is False
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__repr__()
    assert var_15 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_15)
    assert binary_node_3.value == 'binary:()'
    var_16 = binary_node_3.__repr__()
    assert var_16 == '(L: binary:() R:)'
    var_17 = var_15.__repr__()
    assert var_17 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_16)
    assert binary_node_4.value == '(L: binary:() R:)'
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_node_3.__repr__()
    assert var_19 == '(L: binary:() R:)'

def test_case_421():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    var_5 = binary_tree_5.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_tree_7.remove(var_7)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    var_12 = binary_node_2.removeFromParent(binary_tree_8, var_11)
    str_0 = 'zd,F(|4$'
    binary_node_3 = module_0.BinaryNode(str_0)

def test_case_422():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    var_6 = binary_node_2.removeFromParent(binary_tree_4, var_5)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    var_14 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__repr__()
    assert var_15 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_15)
    assert binary_node_5.value == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = binary_node_0.inorder()

def test_case_423():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'

def test_case_424():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_5 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_4.closest(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    var_13 = binary_tree_6.closest(var_12)
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    var_15 = binary_node_1.inorder()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    var_17 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_19 = binary_tree_9.remove(var_17)
    binary_tree_11 = module_0.BinaryTree()

def test_case_425():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    var_4 = binary_node_1.removeFromParent(binary_tree_1, var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.add(none_type_1)
    var_10 = var_9.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__repr__()
    assert var_11 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_11)
    assert binary_node_3.value == 'binary:()'
    var_12 = binary_node_3.__repr__()
    assert var_12 == '(L: binary:() R:)'
    var_13 = var_11.__repr__()
    assert var_13 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_12)
    assert binary_node_4.value == '(L: binary:() R:)'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_2)
    var_15 = binary_tree_12.getMax()
    var_16 = var_3.__repr__()

def test_case_426():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = binary_tree_4.getMax()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_12 = var_9.__repr__()

def test_case_427():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_3 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_1)

def test_case_428():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'

def test_case_429():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_0.inorder()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_1)
    var_5 = binary_tree_1.remove(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_7 = binary_node_1.inorder()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(dict_0)
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    var_14 = binary_tree_7.closest(var_13)
    var_15 = var_12.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    var_21 = var_12.__repr__()
    var_22 = var_21.__repr__()

def test_case_430():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_0 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__repr__()
    assert var_3 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_3)
    assert binary_node_3.value == 'binary:()'
    var_4 = binary_node_3.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_2)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = binary_tree_15.__repr__()
    assert var_14 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_14)
    assert binary_node_6.value == 'binary:()'
    var_15 = binary_tree_12.__repr__()
    assert var_15 == 'binary:()'
    var_16 = binary_tree_7.__iter__()
    var_17 = binary_node_0.removeFromParent(binary_tree_5, var_16)

def test_case_431():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = binary_tree_6.closest(var_10)
    var_14 = var_8.__repr__()

def test_case_432():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    var_9 = var_5.__repr__()

def test_case_433():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    var_7 = binary_tree_7.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    var_11 = binary_tree_9.closest(var_10)
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_14)
    var_15 = var_4.__repr__()

def test_case_434():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    var_5 = binary_tree_5.closest(var_4)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__repr__()
    assert var_6 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == 'binary:()'
    var_7 = binary_node_2.__repr__()
    assert var_7 == '(L: binary:() R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_9 = binary_node_3.inorder()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = binary_tree_8.remove(var_9)
    binary_node_4 = module_0.BinaryNode(binary_tree_8)

def test_case_435():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    var_5 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = binary_tree_4.remove(var_5)
    var_8 = binary_node_0.inorder()

def test_case_436():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()

def test_case_437():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)

def test_case_438():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = var_2.__repr__()
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_9)
    var_10 = binary_node_5.inorder()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_8)
    var_11 = binary_node_6.inorder()
    binary_node_7 = module_0.BinaryNode(binary_tree_8)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_3)
    var_13 = binary_tree_9.getMax()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    var_15 = binary_tree_10.__contains__(binary_tree_10)
    assert var_15 is False
    var_16 = binary_node_7.inorder()

def test_case_439():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_3.inorder()
    var_4 = binary_tree_4.remove(var_1)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__repr__()
    assert var_5 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_5)
    assert binary_node_4.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__repr__()
    assert var_6 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_6)
    assert binary_node_5.value == 'binary:()'
    var_7 = binary_node_5.__repr__()
    assert var_7 == '(L: binary:() R:)'
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    binary_node_6 = module_0.BinaryNode(var_7)
    assert binary_node_6.value == '(L: binary:() R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = binary_tree_8.closest(var_10)
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    var_15 = binary_tree_10.closest(var_14)
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_7 = module_0.BinaryNode(tuple_1)
    dict_0 = {}
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.add(dict_0)
    assert f'{type(binary_tree_13.root).__module__}.{type(binary_tree_13.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__iter__()
    var_22 = binary_tree_13.__iter__()
    var_23 = var_11.__repr__()

def test_case_440():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    var_5 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_8.__iter__()
    var_11 = binary_tree_5.__repr__()
    assert var_11 == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__repr__()
    assert var_12 == 'binary:()'
    var_13 = binary_node_4.__repr__()
    assert var_13 == '(L: ((),) R:)'
    var_14 = binary_tree_2.closest(binary_tree_6)

def test_case_441():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == 'binary:()'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_8 = binary_node_4.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_4.add(var_0)

def test_case_442():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    var_9 = binary_node_0.removeFromParent(binary_tree_2, var_8)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__repr__()
    assert var_10 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_10)
    assert binary_node_2.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__repr__()
    assert var_11 == 'binary:()'
    var_12 = binary_tree_7.remove(var_11)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_6 = module_0.BinaryNode(tuple_3)
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__repr__()
    assert var_14 == 'binary:()'
    var_15 = binary_node_6.__repr__()
    assert var_15 == '(L: ((),) R:)'
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__repr__()
    assert var_16 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_16)
    assert binary_node_7.value == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()

def test_case_443():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == '(L: binary:() R:)'
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()

def test_case_444():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()

def test_case_445():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_3.closest(var_3)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_0.__iter__()

def test_case_446():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    var_9 = binary_tree_5.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    var_13 = binary_node_1.inorder()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_1)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_1)
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    var_18 = binary_node_3.removeFromParent(binary_tree_9, var_17)
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_23 = binary_tree_15.__repr__()
    assert var_23 == 'binary:()'
    binary_tree_16 = module_0.BinaryTree()

def test_case_447():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    var_4 = var_3.__repr__()
    assert var_4 == "'binary:()'"

def test_case_448():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_11.__contains__(binary_tree_13)
    assert var_14 is False
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_15 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.__iter__()
    binary_node_3 = module_0.BinaryNode(var_18)
    binary_tree_19 = module_0.BinaryTree()
    var_19 = binary_tree_19.__iter__()
    var_20 = binary_tree_19.closest(var_19)
    var_21 = var_18.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    binary_tree_21 = module_0.BinaryTree()
    var_22 = binary_tree_21.__iter__()
    var_23 = binary_tree_21.closest(var_22)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    bool_0 = True
    binary_node_5 = module_0.BinaryNode(bool_0)

def test_case_449():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    binary_tree_6 = module_0.BinaryTree()

def test_case_450():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    var_6 = binary_node_0.removeFromParent(binary_tree_2, var_5)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__repr__()
    assert var_7 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_7)
    assert binary_node_1.value == 'binary:()'
    var_8 = binary_node_1.__repr__()
    assert var_8 == '(L: binary:() R:)'
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_10.__contains__(binary_tree_12)
    assert var_17 is False
    none_type_0 = None
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.add(none_type_0)
    assert f'{type(binary_tree_14.root).__module__}.{type(binary_tree_14.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_19 = binary_tree_14.getMax()
    none_type_1 = None
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__iter__()
    var_22 = binary_tree_16.__contains__(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    var_27 = var_25.__iter__()
    var_28 = var_26.__iter__()
    var_29 = var_11.__repr__()

def test_case_451():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__repr__()
    assert var_8 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_8)
    assert binary_node_2.value == 'binary:()'
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    var_12 = binary_tree_11.closest(var_11)
    var_13 = var_10.__iter__()
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_1)
    var_15 = binary_tree_12.getMax()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_13)
    var_16 = binary_node_4.inorder()
    binary_node_5 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_node_6 = module_0.BinaryNode(var_18)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_19 = binary_tree_18.__iter__()
    binary_node_7 = module_0.BinaryNode(var_19)
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_20)
    binary_tree_21 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_22 = module_0.BinaryTree()
    var_20 = binary_tree_22.add(none_type_2)
    binary_node_9 = module_0.BinaryNode(binary_tree_22)
    none_type_3 = None
    binary_tree_23 = module_0.BinaryTree()
    var_21 = binary_tree_23.add(none_type_3)
    var_22 = var_21.__repr__()
    var_23 = binary_tree_6.closest(var_6)

def test_case_452():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__repr__()
    assert var_0 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_0)
    assert binary_node_2.value == 'binary:()'
    var_1 = binary_node_2.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__repr__()
    assert var_3 == '"\'binary:()\'"'

def test_case_453():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_1)
    var_4 = binary_tree_5.getMax()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_4.inorder()
    var_7 = binary_tree_0.getMin()
    var_8 = var_7.__repr__()

def test_case_454():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()

def test_case_455():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)

def test_case_456():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(none_type_0)

def test_case_457():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_6)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    var_8 = binary_node_1.inorder()
    var_9 = binary_tree_2.remove(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    var_12 = binary_tree_5.closest(var_11)
    var_13 = var_10.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_17)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    none_type_3 = None
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_17.add(none_type_3)
    binary_tree_18 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(none_type_3)
    var_24 = binary_tree_4.__iter__()

def test_case_458():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_6.__repr__()

def test_case_459():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    var_9 = binary_node_0.removeFromParent(binary_tree_4, var_8)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    var_16 = binary_tree_10.closest(var_15)
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_node_1 = module_0.BinaryNode(var_18)
    binary_tree_15 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_15)
    var_20 = binary_node_2.inorder()
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_23.__iter__()
    var_26 = var_24.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_27 = binary_tree_18.__iter__()
    binary_node_3 = module_0.BinaryNode(var_27)
    binary_tree_19 = module_0.BinaryTree()
    var_28 = binary_tree_19.__iter__()
    var_29 = binary_tree_19.closest(var_28)
    var_30 = var_27.__iter__()
    var_31 = var_28.__repr__()
    binary_tree_20 = module_0.BinaryTree()
    var_32 = binary_tree_20.__iter__()
    binary_node_4 = module_0.BinaryNode(var_32)
    binary_tree_21 = module_0.BinaryTree()
    var_33 = binary_tree_21.__iter__()
    var_34 = binary_tree_21.closest(var_33)
    var_35 = var_32.__iter__()
    var_36 = var_12.__repr__()

def test_case_460():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    var_2 = binary_node_2.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    var_7 = binary_node_3.removeFromParent(binary_tree_1, var_6)
    var_8 = binary_tree_2.remove(binary_tree_4)

def test_case_461():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_2)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_2)
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__repr__()
    assert var_11 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_11)
    assert binary_node_3.value == 'binary:()'
    var_12 = binary_node_3.__repr__()
    assert var_12 == '(L: binary:() R:)'
    var_13 = var_11.__repr__()
    assert var_13 == "'binary:()'"
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_15)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_16 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_18 = binary_tree_20.__iter__()
    binary_node_7 = module_0.BinaryNode(var_17)
    binary_tree_21 = module_0.BinaryTree()
    var_19 = binary_tree_21.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_23 = module_0.BinaryTree()
    binary_tree_24 = module_0.BinaryTree()
    var_21 = binary_tree_24.__iter__()
    binary_node_8 = module_0.BinaryNode(var_20)
    var_22 = binary_node_8.removeFromParent(binary_tree_21, var_21)
    var_23 = binary_tree_19.add(var_22)

def test_case_462():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    var_6 = var_5.__contains__(var_5)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = binary_tree_4.getMax()
    var_9 = binary_tree_3.closest(var_7)

def test_case_463():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_2)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__repr__()
    assert var_4 == 'binary:()'
    var_5 = binary_tree_5.remove(var_4)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_7 = binary_node_2.inorder()
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_3)
    var_9 = binary_tree_6.remove(var_7)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    var_15 = binary_node_3.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    var_19 = var_3.__repr__()

def test_case_464():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_5.__repr__()

def test_case_465():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_node_2.removeFromParent(binary_tree_3, int_0)

def test_case_466():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    var_8 = binary_node_0.removeFromParent(binary_tree_2, var_7)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    var_13 = binary_tree_10.__contains__(binary_tree_10)
    assert var_13 is False
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    var_16 = binary_tree_12.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    binary_node_6 = module_0.BinaryNode(var_9)

def test_case_467():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()

def test_case_468():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_3.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = binary_node_2.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    var_13 = binary_tree_5.closest(var_12)
    var_14 = var_11.__iter__()
    var_15 = var_12.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_16 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    var_17 = binary_node_4.inorder()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.add(none_type_0)
    var_19 = binary_tree_6.remove(var_17)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_20 = binary_tree_8.add(none_type_1)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_21 = binary_tree_9.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_22)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    var_23 = binary_tree_14.remove(binary_tree_7)

def test_case_469():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'

def test_case_470():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__repr__()
    assert var_17 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_17)
    assert binary_node_4.value == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    var_19 = binary_node_5.inorder()
    var_20 = binary_tree_14.remove(var_17)
    none_type_0 = None
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.add(none_type_0)
    assert f'{type(binary_tree_16.root).__module__}.{type(binary_tree_16.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_6 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_10.__iter__()

def test_case_471():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__repr__()
    assert var_2 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_2)
    assert binary_node_3.value == 'binary:()'
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_9)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_11)
    var_10 = binary_node_5.inorder()
    var_11 = var_10.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__repr__()
    assert var_18 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_18)
    assert binary_node_6.value == 'binary:()'
    var_19 = binary_node_6.__repr__()
    assert var_19 == '(L: binary:() R:)'
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__repr__()
    assert var_20 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_20)
    assert binary_node_7.value == 'binary:()'
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__repr__()
    assert var_21 == 'binary:()'
    var_22 = binary_tree_16.remove(var_21)
    none_type_0 = None
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_17.add(none_type_0)
    assert f'{type(binary_tree_17.root).__module__}.{type(binary_tree_17.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_18 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(none_type_0)
    var_24 = binary_tree_14.add(var_10)

def test_case_472():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_1.__repr__()

def test_case_473():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    var_6 = binary_tree_4.closest(var_5)
    var_7 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.add(none_type_2)
    none_type_3 = None
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_tree_15.add(none_type_3)
    binary_node_5 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_14 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_16 = binary_tree_20.__iter__()
    binary_node_6 = module_0.BinaryNode(var_15)
    binary_tree_21 = module_0.BinaryTree()
    var_17 = binary_tree_21.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    binary_tree_23 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_23)
    var_21 = binary_node_7.inorder()
    var_22 = var_21.__repr__()
    none_type_4 = None
    binary_tree_24 = module_0.BinaryTree()
    var_23 = binary_tree_24.add(none_type_4)
    var_24 = binary_tree_24.getMax()
    var_25 = binary_tree_2.__iter__()

def test_case_474():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_1 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    var_2 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_3 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_4 = binary_tree_12.__repr__()
    assert var_4 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_4)
    assert binary_node_6.value == 'binary:()'
    var_5 = binary_tree_9.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_6 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    none_type_1 = None
    binary_tree_15 = module_0.BinaryTree()
    var_10 = binary_tree_15.add(none_type_1)
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_11 = binary_tree_16.add(none_type_2)
    binary_node_7 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    var_12 = binary_tree_17.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_8 = module_0.BinaryNode(tuple_1)
    binary_tree_18 = module_0.BinaryTree()
    var_13 = binary_tree_18.__repr__()
    assert var_13 == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_13)
    assert binary_node_9.value == 'binary:()'
    var_14 = binary_tree_12.__repr__()
    assert var_14 == 'binary:()'

def test_case_475():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.add(none_type_0)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_2)
    var_8 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_20.__iter__()
    var_23 = var_21.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_24 = binary_tree_10.__repr__()
    assert var_24 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_24)
    assert binary_node_1.value == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_25 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_25)
    var_26 = binary_node_2.inorder()
    var_27 = binary_tree_10.remove(var_24)
    binary_tree_12 = module_0.BinaryTree()
    var_28 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_23)

def test_case_476():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_3 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_9.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    var_15 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_node_2)

def test_case_477():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_17)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_15)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_16 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_16)
    var_18 = binary_node_7.inorder()
    binary_tree_17 = module_0.BinaryTree()
    var_19 = binary_tree_17.__iter__()
    binary_node_8 = module_0.BinaryNode(var_19)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    binary_node_9 = module_0.BinaryNode(binary_tree_19)
    binary_tree_20 = module_0.BinaryTree()
    binary_tree_21 = module_0.BinaryTree()
    var_20 = binary_tree_21.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    binary_tree_23 = module_0.BinaryTree()
    var_23 = binary_tree_8.__iter__()

def test_case_478():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    var_9 = binary_tree_8.__contains__(binary_tree_8)
    assert var_9 is False
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_13.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__repr__()
    assert var_17 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_17)
    assert binary_node_3.value == 'binary:()'
    var_18 = binary_tree_11.__repr__()
    assert var_18 == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    binary_node_4 = module_0.BinaryNode(var_19)
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.__iter__()
    var_21 = binary_tree_16.closest(var_20)
    var_22 = var_19.__iter__()
    var_23 = var_20.__repr__()
    var_24 = binary_tree_3.closest(var_4)

def test_case_479():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    var_9 = binary_node_3.inorder()
    var_10 = binary_tree_2.__contains__(var_4)
    assert var_10 is False

def test_case_480():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    var_8 = binary_node_3.removeFromParent(binary_tree_4, var_7)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_11.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_node_5 = module_0.BinaryNode(var_16)
    var_17 = binary_node_5.inorder()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_22 = binary_tree_18.__repr__()
    assert var_22 == 'binary:()'
    var_23 = binary_tree_18.remove(var_22)
    binary_tree_19 = module_0.BinaryTree()

def test_case_481():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = binary_tree_1.getMax()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_3 = binary_node_0.inorder()
    var_4 = var_3.__repr__()
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_2)
    var_7 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_11 = binary_node_2.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    var_18 = binary_node_4.inorder()
    binary_node_5 = module_0.BinaryNode(var_11)

def test_case_482():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_node_4 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_4.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_5 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_3 = binary_tree_7.__repr__()
    assert var_3 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_3)
    assert binary_node_6.value == 'binary:()'
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    var_5 = binary_tree_2.add(binary_node_5)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_483():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    var_13 = binary_tree_6.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_6.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    var_20 = var_18.__iter__()
    var_21 = binary_tree_10.__repr__()
    assert var_21 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.add(none_type_0)
    assert f'{type(binary_tree_13.root).__module__}.{type(binary_tree_13.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()

def test_case_484():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    var_6 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = binary_tree_3.remove(var_6)
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(dict_0)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_13 = binary_tree_5.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.add(none_type_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_25 = binary_tree_16.__repr__()
    assert var_25 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_25)
    assert binary_node_3.value == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    var_26 = binary_tree_17.__repr__()
    assert var_26 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_26)
    assert binary_node_4.value == 'binary:()'
    var_27 = binary_node_4.__repr__()
    assert var_27 == '(L: binary:() R:)'
    var_28 = var_26.__repr__()
    assert var_28 == "'binary:()'"
    binary_tree_18 = module_0.BinaryTree()
    var_29 = binary_tree_18.remove(none_type_0)

def test_case_485():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_2.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    var_9 = binary_tree_7.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__repr__()
    assert var_12 == 'binary:()'
    var_13 = binary_tree_10.remove(var_12)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = binary_tree_13.closest(var_20)
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.__iter__()
    binary_node_3 = module_0.BinaryNode(var_24)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_19 = module_0.BinaryTree()
    var_25 = binary_tree_19.add(dict_0)
    assert f'{type(binary_tree_19.root).__module__}.{type(binary_tree_19.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_27.__iter__()
    var_29 = var_28.__repr__()
    binary_tree_20 = module_0.BinaryTree()
    var_30 = binary_tree_20.__iter__()
    binary_node_5 = module_0.BinaryNode(var_30)
    binary_tree_21 = module_0.BinaryTree()
    var_31 = binary_tree_21.__iter__()
    var_32 = binary_tree_21.closest(var_31)
    var_33 = var_30.__iter__()
    var_34 = binary_node_5.inorder()
    binary_node_6 = module_0.BinaryNode(binary_tree_7)

def test_case_486():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()

def test_case_487():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    var_11 = binary_tree_11.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_1.closest(var_11)

def test_case_488():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_6 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__repr__()
    assert var_7 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_7)
    assert binary_node_1.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    var_9 = binary_node_2.inorder()
    var_10 = binary_tree_3.remove(var_7)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_21 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_21)
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_node_4.__repr__()

def test_case_489():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_2.inorder()
    var_1 = var_0.__repr__()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.add(none_type_0)
    binary_node_3 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_1)
    var_9 = var_8.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    var_14 = var_12.__iter__()
    var_15 = binary_tree_4.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__repr__()
    assert var_16 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_16)
    assert binary_node_5.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_node_6 = module_0.BinaryNode(var_17)
    var_18 = binary_node_6.inorder()
    var_19 = binary_tree_7.remove(var_16)
    var_20 = var_3.__repr__()

def test_case_490():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    var_6 = binary_tree_2.closest(var_5)
    var_7 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    var_11 = binary_tree_5.__contains__(binary_tree_5)
    assert var_11 is False
    var_12 = binary_tree_0.__iter__()

def test_case_491():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_8)
    binary_node_1 = module_0.BinaryNode(none_type_0)

def test_case_492():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_7 = module_0.BinaryTree()
    var_2 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_5 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_5)
    binary_tree_10 = module_0.BinaryTree()
    var_6 = binary_tree_10.__iter__()
    var_7 = binary_tree_10.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_9)
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_tree_13.remove(var_10)
    var_12 = binary_tree_8.closest(none_type_0)

def test_case_493():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()

def test_case_494():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: binary:() R:)'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_node_2.__repr__()
    assert var_6 == '(L: ((),) R:)'
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__iter__()
    var_10 = binary_tree_11.closest(var_9)
    var_11 = var_8.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = var_11.__iter__()

def test_case_495():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__repr__()
    assert var_10 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == 'binary:()'
    var_11 = binary_tree_7.__repr__()
    assert var_11 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()

def test_case_496():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_1.getMax()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_4)
    var_6 = var_4.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__repr__()
    assert var_10 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_10)
    assert binary_node_0.value == 'binary:()'
    var_11 = binary_node_0.__repr__()
    assert var_11 == '(L: binary:() R:)'
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = binary_tree_8.closest(var_14)
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_18)
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    var_20 = binary_tree_11.closest(var_19)
    var_21 = var_18.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__iter__()
    binary_node_2 = module_0.BinaryNode(var_23)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__repr__()
    assert var_24 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_24)
    assert binary_node_3.value == 'binary:()'
    var_25 = binary_tree_13.__repr__()
    assert var_25 == 'binary:()'
    var_26 = binary_node_3.addToSubTree(binary_tree_9, var_3)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    assert f'{type(var_26).__module__}.{type(var_26).__qualname__}' == 'binarySearchTree1.BinaryTree'
    assert f'{type(var_26.root).__module__}.{type(var_26.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_497():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == 'binary:()'
    var_3 = binary_node_2.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_3)
    assert binary_node_3.value == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_5 = module_0.BinaryNode(var_10)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_11.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = binary_tree_10.closest(var_17)
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_26 = binary_tree_14.__repr__()
    assert var_26 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_26)
    assert binary_node_6.value == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    var_27 = binary_tree_15.__iter__()
    binary_node_7 = module_0.BinaryNode(var_27)
    binary_tree_16 = module_0.BinaryTree()
    var_28 = binary_tree_16.__iter__()
    var_29 = binary_tree_16.closest(var_28)
    binary_node_8 = module_0.BinaryNode(var_28)
    binary_node_9 = module_0.BinaryNode(var_28)

def test_case_498():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_6.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_5.__repr__()

def test_case_499():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_node_1.inorder()
    var_5 = var_4.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_6)
    assert binary_node_4.value == 'binary:()'
    var_7 = binary_node_4.__repr__()
    assert var_7 == '(L: binary:() R:)'
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_5 = module_0.BinaryNode(var_9)
    var_10 = binary_node_5.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_6 = module_0.BinaryNode(var_16)
    var_17 = binary_node_6.inorder()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_19 = binary_tree_9.remove(var_17)
    binary_tree_11 = module_0.BinaryTree()

def test_case_500():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    var_8 = var_7.__repr__()

def test_case_501():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_2 = binary_node_2.inorder()
    binary_tree_3 = module_0.BinaryTree()

def test_case_502():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_4)
    var_6 = var_3.__iter__()
    var_7 = binary_node_1.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__repr__()
    assert var_9 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_9)
    assert binary_node_5.value == 'binary:()'
    var_10 = binary_tree_4.__repr__()
    assert var_10 == 'binary:()'
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_6 = module_0.BinaryNode(set_1)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_node_8 = module_0.BinaryNode(var_14)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__iter__()
    binary_node_9 = module_0.BinaryNode(var_15)
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_18 = binary_tree_14.__contains__(binary_tree_16)
    assert var_18 is False
    binary_node_10 = module_0.BinaryNode(var_11)

def test_case_503():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    var_6 = binary_node_3.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_7 = var_3.__repr__()

def test_case_504():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"

def test_case_505():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_tree_4.remove(var_7)
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_3 = module_0.BinaryNode(set_1)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_12.__iter__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(none_type_0)
    binary_node_5 = module_0.BinaryNode(binary_tree_7)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.add(none_type_1)
    var_17 = var_16.__repr__()
    var_18 = binary_tree_5.remove(var_16)

def test_case_506():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_7.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    var_13 = binary_tree_10.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_12)
    var_15 = binary_node_1.inorder()
    var_16 = var_15.__repr__()
    var_17 = var_4.__repr__()

def test_case_507():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = binary_tree_5.closest(var_11)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    var_15 = binary_node_3.inorder()
    var_16 = var_15.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_17.__repr__()
    var_22 = binary_tree_10.closest(dict_0)

def test_case_508():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_509():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_5 = binary_node_0.inorder()
    var_6 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_7)
    assert binary_node_1.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()

def test_case_510():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(dict_0)
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    var_6 = binary_tree_4.__iter__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.add(none_type_4)
    none_type_5 = None
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.add(none_type_5)
    binary_node_6 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    tuple_0 = (var_9,)
    binary_node_7 = module_0.BinaryNode(tuple_0)

def test_case_511():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    var_13 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_node_3 = module_0.BinaryNode(var_6)

def test_case_512():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_4.__repr__()

def test_case_513():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(dict_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_13 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    binary_tree_8 = module_0.BinaryTree()

def test_case_514():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_4.closest(var_8)
    var_12 = binary_tree_3.__iter__()

def test_case_515():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    var_2 = var_1.__contains__(var_1)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_5 = module_0.BinaryNode(bytes_0)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_8)
    var_5 = binary_node_6.inorder()
    var_6 = var_5.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_9.closest(var_8)
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    var_13 = binary_tree_11.__contains__(binary_tree_11)
    assert var_13 is False
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_node_7 = module_0.BinaryNode(var_14)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.__repr__()
    assert var_15 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_15)
    assert binary_node_8.value == 'binary:()'
    var_16 = binary_tree_12.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_19.__iter__()
    var_22 = var_20.__iter__()
    var_23 = binary_tree_12.__iter__()

def test_case_516():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_4 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_1)
    binary_node_6 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_3.remove(binary_node_1)

def test_case_517():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_5 = binary_node_0.inorder()
    var_6 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__repr__()
    assert var_11 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_11)
    assert binary_node_1.value == 'binary:()'
    var_12 = binary_node_1.__repr__()
    assert var_12 == '(L: binary:() R:)'
    var_13 = var_11.__repr__()
    assert var_13 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_12)
    assert binary_node_2.value == '(L: binary:() R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    var_24 = var_1.__repr__()

def test_case_518():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_2.inorder()
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.closest(var_3)
    var_5 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_0)
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'

def test_case_519():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_5 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_6 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_node_6.__repr__()
    assert var_7 == '(L: ((),) R:)'
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__repr__()
    assert var_8 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_8)
    assert binary_node_7.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_8 = module_0.BinaryNode(var_9)
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_9 = module_0.BinaryNode(binary_tree_9)
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_1)
    var_12 = var_11.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_node_10 = module_0.BinaryNode(var_13)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__repr__()
    assert var_14 == 'binary:()'
    binary_node_11 = module_0.BinaryNode(var_14)
    assert binary_node_11.value == 'binary:()'
    var_15 = binary_tree_11.__repr__()
    assert var_15 == 'binary:()'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_12 = module_0.BinaryNode(tuple_3)
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.__repr__()
    assert var_16 == 'binary:()'
    binary_node_13 = module_0.BinaryNode(var_16)
    assert binary_node_13.value == 'binary:()'
    var_17 = binary_tree_9.__iter__()

def test_case_520():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()

def test_case_521():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_3.__repr__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = binary_tree_6.getMax()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_1)
    var_11 = binary_tree_7.getMax()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    var_13 = binary_tree_8.closest(var_12)
    var_14 = var_12.__repr__()
    binary_tree_9 = module_0.BinaryTree()

def test_case_522():
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_523():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_0.__iter__()

def test_case_524():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()

def test_case_525():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()

def test_case_526():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()

def test_case_527():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.add(binary_node_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_528():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    var_4 = binary_node_1.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_6.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    bool_0 = True
    binary_node_5 = module_0.BinaryNode(bool_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    var_11 = binary_node_1.inorder()

def test_case_529():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    var_6 = var_3.__repr__()

def test_case_530():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    var_6 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_1)
    var_9 = var_8.__repr__()
    var_10 = binary_tree_5.__iter__()

def test_case_531():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_3 = binary_tree_7.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    var_12 = binary_tree_11.closest(var_11)
    var_13 = var_10.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    var_17 = binary_tree_14.closest(var_16)
    var_18 = var_15.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_4.__repr__()
    assert var_23 == "'binary:()'"

def test_case_532():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    var_9 = binary_tree_4.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_13)
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_4.__iter__()

def test_case_533():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:(L: None R:)'

def test_case_534():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_1.remove(var_7)

def test_case_535():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_1.inorder()
    var_5 = binary_tree_2.remove(var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    var_9 = binary_node_2.removeFromParent(binary_tree_4, var_8)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_node_3.__repr__()
    assert var_11 == '(L: ((),) R:)'
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_node_4.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    none_type_0 = None
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.add(none_type_0)
    assert f'{type(binary_tree_16.root).__module__}.{type(binary_tree_16.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_17.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    var_25 = binary_tree_16.__repr__()
    assert var_25 == 'binary:(L: None R:)'

def test_case_536():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    var_4 = binary_node_1.removeFromParent(binary_tree_2, var_3)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_5.__repr__()
    bool_0 = True
    binary_node_2 = module_0.BinaryNode(bool_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_11 = binary_tree_14.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_14)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_6 = module_0.BinaryNode(set_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_15 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_16 = module_0.BinaryTree()
    var_12 = binary_tree_16.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_16 = binary_tree_17.__iter__()
    binary_node_8 = module_0.BinaryNode(var_16)
    var_17 = binary_tree_1.closest(none_type_0)

def test_case_537():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()

def test_case_538():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.remove(none_type_1)

def test_case_539():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: ((),) R:)'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(dict_0)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()

def test_case_540():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    var_6 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_8 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_9 = var_5.__iter__()

def test_case_541():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = binary_tree_6.getMax()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    var_10 = binary_tree_7.closest(var_9)
    var_11 = var_9.__repr__()
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_1)
    binary_tree_9 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_1)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__iter__()
    var_18 = binary_tree_15.closest(var_17)
    binary_node_3 = module_0.BinaryNode(var_17)
    var_19 = binary_tree_15.__iter__()

def test_case_542():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_10 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_12 = binary_tree_17.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    var_13 = binary_node_5.removeFromParent(binary_tree_14, var_12)
    binary_tree_18 = module_0.BinaryTree()
    var_14 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    binary_tree_21 = module_0.BinaryTree()
    var_19 = binary_tree_21.__iter__()
    binary_node_6 = module_0.BinaryNode(var_19)
    binary_tree_22 = module_0.BinaryTree()
    binary_tree_23 = module_0.BinaryTree()
    var_20 = binary_node_6.inorder()
    binary_tree_24 = module_0.BinaryTree()

def test_case_543():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(dict_0)
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_6 = module_0.BinaryNode(var_13)
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    var_15 = binary_tree_10.closest(var_14)
    var_16 = var_13.__iter__()
    var_17 = binary_node_6.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    binary_node_7 = module_0.BinaryNode(var_21)
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_13.__contains__(binary_tree_15)
    assert var_24 is False
    var_25 = var_11.__repr__()

def test_case_544():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_2)
    var_4 = var_3.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_9.__iter__()
    var_14 = var_11.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_node_3.inorder()
    var_17 = binary_tree_7.add(binary_node_3)
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.add(dict_0)
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_22)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_23 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    var_27 = var_25.__iter__()
    var_28 = var_26.__iter__()
    var_29 = binary_tree_15.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_30 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_31 = var_30.__iter__()
    var_32 = var_31.__repr__()
    var_33 = var_32.__iter__()
    var_34 = binary_tree_8.remove(var_26)

def test_case_545():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_4 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_0.__iter__()

def test_case_546():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    var_7 = binary_node_2.inorder()
    var_8 = binary_tree_2.remove(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    var_15 = var_12.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_6 = module_0.BinaryTree()
    var_16 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    var_20 = var_16.__repr__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_21 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_9 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_tree_10.add(none_type_1)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_23 = binary_tree_11.add(none_type_2)
    binary_node_7 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__iter__()
    binary_node_8 = module_0.BinaryNode(var_24)
    binary_tree_15 = module_0.BinaryTree()
    var_25 = binary_tree_15.__iter__()
    var_26 = binary_tree_15.closest(var_25)
    var_27 = var_24.__iter__()
    binary_node_9 = module_0.BinaryNode(binary_tree_14)

def test_case_547():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.add(binary_node_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_5.__contains__(binary_tree_7)
    assert var_9 is False
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_tree_13.add(none_type_0)
    binary_tree_14 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_tree_15 = module_0.BinaryTree()
    var_12 = binary_tree_15.__iter__()
    var_13 = binary_tree_15.closest(var_12)
    binary_tree_16 = module_0.BinaryTree()
    var_14 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    binary_tree_20 = module_0.BinaryTree()
    var_21 = var_2.__repr__()

def test_case_548():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_6 = var_5.__contains__(var_5)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_1)
    var_9 = var_8.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    var_10 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__repr__()
    assert var_11 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_11)
    assert binary_node_6.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__repr__()
    assert var_12 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_12)
    assert binary_node_7.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_8 = module_0.BinaryNode(var_13)
    var_14 = binary_node_8.inorder()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_2)
    var_16 = binary_tree_10.remove(var_14)
    var_17 = binary_tree_6.getMin()

def test_case_549():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    var_5 = binary_tree_5.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_8.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    var_15 = binary_tree_10.closest(var_14)
    var_16 = var_13.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_5 = module_0.BinaryNode(bytes_1)
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.add(none_type_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_13 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(none_type_0)
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_10.__repr__()

def test_case_550():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_5.getMax()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    var_11 = binary_tree_10.__contains__(binary_tree_10)
    assert var_11 is False
    var_12 = var_9.__iter__()

def test_case_551():
    binary_tree_0 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    var_5 = binary_node_1.removeFromParent(binary_tree_2, var_4)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__repr__()
    assert var_6 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == 'binary:()'
    var_7 = binary_node_2.__repr__()
    assert var_7 == '(L: binary:() R:)'
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    var_10 = binary_tree_8.closest(var_9)
    binary_node_4 = module_0.BinaryNode(var_9)
    binary_node_5 = module_0.BinaryNode(binary_tree_6)

def test_case_552():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_12.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_17)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_18)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()

def test_case_553():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_3.__repr__()

def test_case_554():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    var_11 = var_8.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_12)
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_4.__contains__(binary_tree_6)
    assert var_15 is False
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_16)
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    var_18 = binary_tree_9.closest(var_17)
    var_19 = var_16.__iter__()
    var_20 = var_17.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_21)
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__iter__()
    var_23 = binary_tree_11.closest(var_22)
    var_24 = var_21.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_25 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_25)
    binary_tree_14 = module_0.BinaryTree()
    var_26 = binary_tree_14.__iter__()
    var_27 = binary_tree_14.closest(var_26)
    var_28 = var_25.__iter__()
    var_29 = binary_node_3.inorder()
    binary_tree_15 = module_0.BinaryTree()
    var_30 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_31 = var_30.__iter__()
    binary_tree_17 = module_0.BinaryTree()

def test_case_555():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    var_1 = binary_tree_1.__contains__(binary_tree_1)
    assert var_1 is False
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_2.getMax()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_3.__contains__(binary_tree_5)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    var_11 = binary_node_2.inorder()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_1)
    var_13 = binary_tree_9.remove(var_11)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__repr__()
    assert var_14 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_14)
    assert binary_node_3.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()

def test_case_556():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    var_15 = var_12.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_9 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_17)
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    var_19 = binary_tree_12.closest(var_18)
    var_20 = var_17.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_12.__iter__()
    binary_tree_14 = module_0.BinaryTree()

def test_case_557():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    var_3 = var_1.__repr__()

def test_case_558():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_15.__iter__()
    var_18 = binary_tree_10.__repr__()
    assert var_18 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.__repr__()
    assert var_23 == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.__iter__()
    binary_node_3 = module_0.BinaryNode(var_24)
    var_25 = binary_node_3.inorder()
    var_26 = var_24.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_27 = binary_tree_16.__repr__()
    assert var_27 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_27)
    assert binary_node_4.value == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    var_28 = binary_tree_17.__iter__()
    binary_node_5 = module_0.BinaryNode(var_28)
    var_29 = binary_node_5.inorder()
    var_30 = binary_tree_16.remove(var_27)
    binary_tree_18 = module_0.BinaryTree()
    var_31 = binary_tree_18.__iter__()
    var_32 = binary_tree_18.closest(var_31)
    binary_tree_19 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_19)
    var_33 = binary_node_6.inorder()
    var_34 = var_24.__repr__()

def test_case_559():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_2.closest(var_8)
    var_12 = binary_node_0.addToSubTree(binary_tree_0, var_9)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'binarySearchTree1.BinaryTree'
    assert f'{type(var_12.root).__module__}.{type(var_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_560():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_tree_7.remove(var_9)
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_9)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    var_17 = binary_tree_13.closest(var_16)
    var_18 = var_15.__iter__()
    var_19 = binary_node_4.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)

def test_case_561():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_3)
    assert binary_node_0.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_4 = var_3.__contains__(var_3)
    binary_tree_3 = module_0.BinaryTree()

def test_case_562():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    var_4 = binary_tree_4.closest(var_3)
    var_5 = var_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_node_2.__repr__()
    assert var_7 == '(L: ((),) R:)'
    var_8 = var_7.__repr__()
    assert var_8 == "'(L: ((),) R:)'"

def test_case_563():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_6.__iter__()
    var_9 = binary_tree_1.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    var_14 = binary_tree_6.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = var_13.__repr__()
    binary_tree_7 = module_0.BinaryTree()

def test_case_564():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_1.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_6 = binary_node_3.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(var_15)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__repr__()
    assert var_16 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_16)
    assert binary_node_6.value == 'binary:()'
    var_17 = binary_tree_10.__repr__()
    assert var_17 == 'binary:()'
    var_18 = binary_node_1.inorder()

def test_case_565():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_8)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_9.__repr__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.add(none_type_1)
    var_16 = var_15.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__repr__()
    assert var_17 == 'binary:()'
    var_18 = binary_tree_10.remove(var_17)
    var_19 = var_17.__repr__()
    assert var_19 == "'binary:()'"
    binary_tree_11 = module_0.BinaryTree()

def test_case_566():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    var_3 = binary_tree_4.closest(var_2)
    var_4 = var_1.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    var_6 = binary_tree_5.remove(binary_tree_2)

def test_case_567():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_3 = module_0.BinaryNode(tuple_3)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_node_3.__repr__()
    assert var_7 == '(L: ((),) R:)'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    var_9 = binary_node_2.inorder()

def test_case_568():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    var_6 = binary_tree_4.closest(var_5)
    binary_node_4 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_5 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_node_5.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_12.__iter__()
    var_15 = binary_tree_7.remove(var_7)

def test_case_569():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_node_1.addToSubTree(var_2, var_3)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree1.BinaryNode'
    assert var_4.value is None
    assert var_4.left is None
    assert var_4.right is None

def test_case_570():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_node_0.inorder()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = binary_tree_4.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_0)
    var_10 = binary_tree_0.__iter__()

def test_case_571():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    var_3 = var_2.__contains__(var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    var_5 = binary_node_0.addToSubTree(binary_tree_0, binary_tree_1)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree1.BinaryTree'
    assert f'{type(var_5.root).__module__}.{type(var_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_572():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = var_11.__iter__()

def test_case_573():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    var_7 = binary_tree_7.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_18 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_20 = binary_tree_20.__iter__()
    binary_node_5 = module_0.BinaryNode(var_19)
    binary_tree_21 = module_0.BinaryTree()
    var_21 = binary_tree_21.__iter__()
    var_22 = binary_tree_16.remove(var_11)

def test_case_574():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    var_4 = binary_node_1.__repr__()
    assert var_4 == '(L: binary:() R:)'
    binary_tree_5 = module_0.BinaryTree()

def test_case_575():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_2 = var_1.__contains__(var_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_3.inorder()
    var_6 = var_4.__repr__()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'

def test_case_576():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_tree_1.remove(var_2)

def test_case_577():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    var_3 = binary_tree_4.closest(var_2)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_2)
    var_5 = binary_tree_5.getMax()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    var_7 = binary_tree_6.closest(var_6)
    var_8 = var_6.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    var_14 = binary_tree_10.closest(var_13)
    binary_node_4 = module_0.BinaryNode(var_13)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__repr__()
    assert var_15 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_15)
    assert binary_node_5.value == 'binary:()'
    var_16 = binary_node_5.__repr__()
    assert var_16 == '(L: binary:() R:)'
    var_17 = var_15.__repr__()
    assert var_17 == "'binary:()'"

def test_case_578():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = binary_tree_2.remove(var_3)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_6.closest(var_7)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_1)
    var_12 = var_11.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__repr__()
    assert var_13 == 'binary:()'
    var_14 = binary_tree_9.remove(var_13)
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_15)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_node_9 = module_0.BinaryNode(var_11)

def test_case_579():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)

def test_case_580():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    var_1 = binary_node_0.removeFromParent(var_0, none_type_0)

def test_case_581():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)

def test_case_582():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = binary_tree_2.add(var_0)

def test_case_583():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_tree_1.remove(var_2)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    var_6 = binary_node_1.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = binary_tree_1.__iter__()

def test_case_584():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_node_0.inorder()
    var_5 = binary_tree_4.add(binary_node_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_7.__contains__(binary_tree_9)
    assert var_9 is False
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    var_17 = binary_node_2.inorder()
    var_18 = var_16.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__repr__()
    assert var_19 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_19)
    assert binary_node_3.value == 'binary:()'
    var_20 = binary_node_3.__repr__()
    assert var_20 == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.add(none_type_0)
    binary_tree_17 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_node_5 = module_0.BinaryNode(var_21)
    var_22 = binary_tree_10.__contains__(binary_tree_17)

def test_case_585():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_5 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(dict_0)
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_6 = module_0.BinaryNode(tuple_1)
    var_12 = binary_tree_2.remove(binary_tree_7)

def test_case_586():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_5 = binary_node_1.inorder()
    var_6 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    var_14 = binary_node_4.inorder()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = binary_tree_10.remove(var_14)
    binary_node_5 = module_0.BinaryNode(var_8)

def test_case_587():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    var_4 = binary_node_3.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    var_7 = binary_tree_9.closest(var_6)
    binary_node_5 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    bool_0 = True
    binary_node_6 = module_0.BinaryNode(bool_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.add(none_type_1)
    var_11 = binary_tree_11.getMax()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    var_13 = binary_tree_12.closest(var_12)
    var_14 = var_12.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_node_8 = module_0.BinaryNode(var_15)
    assert f'{type(binary_node_8.value).__module__}.{type(binary_node_8.value).__qualname__}' == 'builtins.generator'
    var_16 = binary_node_8.inorder()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.add(none_type_2)
    var_18 = binary_tree_13.remove(var_16)
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__repr__()
    assert var_19 == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_19)
    assert binary_node_9.value == 'binary:()'
    var_20 = binary_node_9.__repr__()
    assert var_20 == '(L: binary:() R:)'
    var_21 = var_19.__repr__()
    assert var_21 == "'binary:()'"
    binary_node_10 = module_0.BinaryNode(binary_node_0)

def test_case_588():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()

def test_case_589():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    var_3 = binary_node_0.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_8.__iter__()
    var_11 = binary_tree_4.__repr__()
    assert var_11 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_12.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.add(none_type_1)
    var_18 = binary_tree_8.getMax()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()
    var_20 = binary_tree_9.closest(var_19)
    var_21 = var_19.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    var_25 = var_22.__iter__()
    var_26 = var_24.__iter__()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_27 = binary_tree_12.add(none_type_2)
    binary_tree_13 = module_0.BinaryTree()
    var_28 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_29 = var_28.__iter__()
    var_30 = binary_tree_14.add(var_27)
    binary_tree_15 = module_0.BinaryTree()
    var_31 = binary_tree_15.__iter__()
    binary_node_4 = module_0.BinaryNode(var_31)
    binary_tree_16 = module_0.BinaryTree()
    var_32 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()

def test_case_590():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = binary_tree_2.add(var_0)
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(dict_0)
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__repr__()
    assert var_18 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_node_1 = module_0.BinaryNode(var_19)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()
    var_25 = var_23.__iter__()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)

def test_case_591():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.add(binary_node_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_3.__contains__(binary_tree_5)
    assert var_6 is False
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    var_8 = binary_tree_7.closest(var_7)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_node_2.__repr__()
    assert var_10 == '(L: ((),) R:)'
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    var_12 = binary_node_3.inorder()
    binary_tree_10 = module_0.BinaryTree()

def test_case_592():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    var_5 = binary_tree_5.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    var_9 = binary_tree_7.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = binary_tree_7.remove(var_9)
    bool_0 = True
    binary_node_2 = module_0.BinaryNode(bool_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    var_13 = binary_node_4.inorder()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    var_18 = var_16.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__repr__()
    assert var_19 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_19)
    assert binary_node_6.value == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.__iter__()
    var_21 = binary_tree_13.__contains__(binary_tree_13)
    assert var_21 is False
    var_22 = binary_tree_3.__iter__()

def test_case_593():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_tree_1.remove(var_2)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__repr__()
    assert var_10 == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    var_11 = binary_node_4.inorder()
    var_12 = var_11.__repr__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_0)
    binary_node_6 = module_0.BinaryNode(var_13)
    var_14 = binary_node_5.removeFromParent(var_13, none_type_0)
    var_15 = binary_node_5.__repr__()
    assert var_15 == '(L: None R:)'

def test_case_594():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    var_2 = binary_tree_1.remove(var_1)
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_2)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_node_3.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.__iter__()
    var_13 = binary_tree_13.closest(var_12)
    var_14 = var_11.__iter__()
    var_15 = var_12.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    var_21 = var_19.__iter__()
    var_22 = binary_tree_14.__iter__()
    var_23 = binary_tree_7.__repr__()
    assert var_23 == 'binary:(L: None R:)'

def test_case_595():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(dict_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__repr__()
    assert var_10 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_10)
    assert binary_node_1.value == 'binary:()'
    var_11 = binary_node_1.__repr__()
    assert var_11 == '(L: binary:() R:)'
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_13)
    binary_tree_8 = module_0.BinaryTree()
    dict_1 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.add(dict_1)
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    var_19 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_node_5 = module_0.BinaryNode(var_17)

def test_case_596():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    var_7 = binary_node_3.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_9.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_node_5 = module_0.BinaryNode(var_14)
    var_15 = binary_node_4.removeFromParent(var_14, none_type_0)
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_node_6 = module_0.BinaryNode(var_17)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__repr__()
    assert var_18 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.__repr__()
    assert var_22 == 'binary:()'
    var_23 = binary_tree_15.remove(var_22)
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__repr__()
    assert var_24 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_24)
    assert binary_node_7.value == 'binary:()'
    var_25 = binary_node_7.__repr__()
    assert var_25 == '(L: binary:() R:)'
    var_26 = var_24.__repr__()
    assert var_26 == "'binary:()'"
    binary_node_8 = module_0.BinaryNode(var_25)
    assert binary_node_8.value == '(L: binary:() R:)'
    binary_node_9 = module_0.BinaryNode(var_8)

def test_case_597():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_14 = module_0.BinaryTree()

def test_case_598():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_1)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_1)
    binary_node_2 = module_0.BinaryNode(var_7)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.add(none_type_3)
    var_10 = var_9.__repr__()
    var_11 = var_6.__repr__()

def test_case_599():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_2.getMax()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_4.__repr__()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_node_2.__repr__()
    assert var_11 == '(L: ((),) R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    var_16 = var_15.__iter__()

def test_case_600():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = binary_tree_2.getMax()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_11 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_1)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_12)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    var_14 = binary_tree_7.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = binary_node_5.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_node_6 = module_0.BinaryNode(var_17)
    var_18 = binary_node_6.inorder()
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.add(none_type_1)
    var_20 = binary_tree_8.remove(var_18)
    binary_tree_10 = module_0.BinaryTree()

def test_case_601():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    var_2 = binary_node_2.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = binary_node_0.add(tuple_0)
    assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_602():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()

def test_case_603():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_10.__iter__()
    var_13 = binary_tree_7.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(none_type_2)
    var_15 = binary_tree_10.getMax()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    var_17 = binary_tree_11.closest(var_16)
    var_18 = var_16.__repr__()
    var_19 = var_16.__repr__()

def test_case_604():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.closest(var_3)
    var_5 = var_2.__iter__()
    var_6 = binary_tree_2.remove(var_4)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_tree_3.remove(var_7)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    var_9 = binary_node_3.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    var_12 = binary_node_4.inorder()
    var_13 = var_11.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_12.closest(binary_tree_13)

def test_case_605():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    var_3 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__repr__()
    assert var_6 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_6)
    assert binary_node_3.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    var_7 = var_6.__contains__(var_6)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_node_7 = module_0.BinaryNode(var_19)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.__iter__()
    binary_node_8 = module_0.BinaryNode(var_20)
    var_21 = binary_node_8.inorder()
    binary_tree_17 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_9 = module_0.BinaryNode(tuple_1)
    binary_tree_18 = module_0.BinaryTree()
    var_22 = binary_tree_18.__repr__()
    assert var_22 == 'binary:()'
    var_23 = binary_node_9.__repr__()
    assert var_23 == '(L: ((),) R:)'
    binary_node_10 = module_0.BinaryNode(int_0)

def test_case_606():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_7.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_node_0 = module_0.BinaryNode(var_16)
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_node_1 = module_0.BinaryNode(var_18)
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    var_20 = binary_tree_15.closest(var_19)
    var_21 = var_18.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_15.__iter__()
    dict_0 = {}
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_17.add(dict_0)
    assert f'{type(binary_tree_17.root).__module__}.{type(binary_tree_17.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_25.__iter__()
    none_type_0 = None
    binary_tree_18 = module_0.BinaryTree()
    var_27 = binary_tree_18.add(none_type_0)
    binary_tree_19 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_tree_20 = module_0.BinaryTree()
    var_28 = binary_tree_20.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_29 = var_28.__iter__()
    var_30 = var_29.__repr__()
    var_31 = var_30.__iter__()
    var_32 = var_30.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_33 = binary_tree_22.__iter__()
    binary_tree_23 = module_0.BinaryTree()
    var_34 = var_33.__iter__()
    var_35 = var_33.__repr__()
    var_36 = binary_tree_17.getMin()

def test_case_607():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)

def test_case_608():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    var_8 = binary_tree_5.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    var_16 = binary_tree_6.__repr__()
    assert var_16 == 'binary:()'
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_26 = binary_tree_15.__iter__()
    binary_node_1 = module_0.BinaryNode(var_26)
    binary_tree_16 = module_0.BinaryTree()
    var_27 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_29 = binary_tree_15.__contains__(binary_tree_17)
    assert var_29 is False
    none_type_1 = None
    binary_tree_19 = module_0.BinaryTree()
    var_30 = binary_tree_19.add(none_type_1)
    var_31 = binary_tree_19.getMax()
    var_32 = binary_tree_16.__contains__(var_14)

def test_case_609():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_13.__iter__()
    var_18 = var_15.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__repr__()
    assert var_24 == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    var_25 = binary_tree_15.__iter__()
    binary_node_2 = module_0.BinaryNode(var_25)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_18 = module_0.BinaryTree()
    var_26 = binary_tree_18.add(none_type_2)
    none_type_3 = None
    binary_tree_19 = module_0.BinaryTree()
    var_27 = binary_tree_19.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_19)
    binary_tree_20 = module_0.BinaryTree()
    binary_tree_21 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_22 = module_0.BinaryTree()
    var_28 = binary_tree_22.add(dict_0)
    var_29 = var_28.__repr__()
    var_30 = var_29.__iter__()
    var_31 = var_30.__iter__()
    var_32 = var_31.__repr__()
    binary_tree_23 = module_0.BinaryTree()
    var_33 = binary_tree_23.__iter__()
    binary_node_4 = module_0.BinaryNode(var_33)
    binary_tree_24 = module_0.BinaryTree()
    var_34 = binary_tree_24.__iter__()
    var_35 = binary_tree_24.closest(var_34)
    var_36 = var_33.__iter__()
    var_37 = binary_node_4.inorder()
    binary_tree_25 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_25)
    var_38 = binary_node_5.inorder()
    binary_node_6 = module_0.BinaryNode(binary_tree_25)
    binary_tree_26 = module_0.BinaryTree()

def test_case_610():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = binary_tree_3.closest(var_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_8 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_node_2.inorder()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    var_11 = binary_node_3.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_12.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    var_19 = binary_tree_12.closest(var_18)
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.__repr__()
    assert var_20 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_node_6 = module_0.BinaryNode(var_21)
    var_22 = binary_node_6.inorder()
    var_23 = var_21.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_7 = module_0.BinaryNode(set_0)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    var_24 = binary_node_7.inorder()
    var_25 = binary_tree_9.add(var_14)

def test_case_611():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    var_13 = binary_tree_12.closest(var_12)
    var_14 = var_11.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_6 = module_0.BinaryNode(set_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__repr__()
    assert var_15 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_15)
    assert binary_node_8.value == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_node_9 = module_0.BinaryNode(var_16)
    var_17 = binary_node_9.inorder()
    var_18 = binary_tree_13.remove(var_15)
    none_type_2 = None
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.add(none_type_2)
    binary_node_10 = module_0.BinaryNode(binary_tree_15)
    none_type_3 = None
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.add(none_type_3)
    var_21 = var_20.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_17.__repr__()
    assert var_22 == 'binary:()'
    var_23 = binary_tree_17.remove(var_22)
    var_24 = var_5.__iter__()

def test_case_612():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_node_3 = module_0.BinaryNode(var_1)
    var_2 = binary_node_2.removeFromParent(var_1, none_type_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_3)
    assert binary_node_5.value == 'binary:()'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_6 = module_0.BinaryNode(tuple_3)
    var_4 = var_1.__repr__()

def test_case_613():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    var_2 = binary_node_0.__repr__()
    assert var_2 == '(L: ((),) R:)'
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_2.getMax()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    var_7 = var_5.__repr__()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_1)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_1)
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    var_13 = binary_node_3.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    var_19 = var_15.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    var_20 = binary_tree_8.__contains__(binary_node_1)
    assert var_20 is False

def test_case_614():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_4.__contains__(binary_tree_6)
    assert var_7 is False
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    var_10 = binary_tree_9.closest(var_9)
    binary_node_5 = module_0.BinaryNode(var_9)
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__repr__()
    assert var_11 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_11)
    assert binary_node_6.value == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_node_7 = module_0.BinaryNode(var_12)
    var_13 = binary_node_7.inorder()
    var_14 = binary_tree_10.remove(var_11)
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_tree_16.__iter__()
    binary_node_8 = module_0.BinaryNode(var_17)
    binary_tree_17 = module_0.BinaryTree()
    var_19 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = binary_node_5.removeFromParent(var_10, binary_tree_18)

def test_case_615():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.add(binary_node_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_3)
    assert binary_node_3.value == 'binary:()'
    var_4 = binary_node_3.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_6 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    var_9 = binary_tree_9.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = var_8.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_14.__iter__()
    var_17 = binary_tree_10.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_9)

def test_case_616():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_1 = module_0.BinaryTree()
    bool_0 = True
    binary_node_3 = module_0.BinaryNode(bool_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_2)
    var_2 = binary_node_5.inorder()
    binary_node_6 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_3.__contains__(binary_tree_3)
    assert var_4 is False
    var_5 = var_0.__repr__()

def test_case_617():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    var_4 = binary_node_0.removeFromParent(binary_tree_1, var_3)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__repr__()
    assert var_6 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_6)
    assert binary_node_3.value == 'binary:()'
    var_7 = binary_node_3.__repr__()
    assert var_7 == '(L: binary:() R:)'
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_7)
    assert binary_node_4.value == '(L: binary:() R:)'
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_9)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_0.remove(binary_node_6)

def test_case_618():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()

def test_case_619():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_tree_10.remove(var_10)
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    var_13 = binary_tree_9.closest(var_1)

def test_case_620():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_2)
    assert binary_node_3.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    var_4 = binary_tree_3.remove(var_3)
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_6.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_6 = module_0.BinaryNode(var_11)
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    var_13 = binary_tree_9.closest(var_12)
    var_14 = var_11.__iter__()
    var_15 = binary_node_6.inorder()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_16)
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    var_18 = binary_tree_11.closest(var_17)
    binary_node_8 = module_0.BinaryNode(var_17)
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.add(dict_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    var_27 = binary_tree_13.closest(var_24)
    var_28 = var_10.__iter__()

def test_case_621():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_10 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    var_18 = var_16.__iter__()
    var_19 = binary_tree_10.__repr__()
    assert var_19 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_14)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__repr__()
    assert var_20 == 'binary:()'
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__iter__()
    binary_node_8 = module_0.BinaryNode(var_21)
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    binary_node_9 = module_0.BinaryNode(binary_tree_19)
    var_22 = binary_node_9.inorder()
    var_23 = var_22.__repr__()
    var_24 = binary_tree_0.__iter__()

def test_case_622():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_8.__repr__()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__repr__()
    assert var_16 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_16)
    assert binary_node_3.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__repr__()
    assert var_20 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_21)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_24.__repr__()
    binary_tree_19 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_20 = module_0.BinaryTree()
    var_27 = binary_tree_20.add(none_type_3)
    binary_tree_21 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_3)
    binary_node_6 = module_0.BinaryNode(var_24)

def test_case_623():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    var_5 = binary_tree_5.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    var_7 = binary_node_3.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__repr__()
    assert var_8 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_8)
    assert binary_node_4.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_8)
    var_9 = var_8.__contains__(var_8)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__repr__()
    assert var_10 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_10)
    assert binary_node_6.value == 'binary:()'
    var_11 = binary_node_6.__repr__()
    assert var_11 == '(L: binary:() R:)'
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    binary_node_7 = module_0.BinaryNode(var_11)
    assert binary_node_7.value == '(L: binary:() R:)'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_8 = module_0.BinaryNode(tuple_1)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__repr__()
    assert var_13 == 'binary:()'
    var_14 = binary_node_8.__repr__()
    assert var_14 == '(L: ((),) R:)'
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = var_15.__repr__()
    none_type_0 = None
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.add(none_type_0)
    assert f'{type(binary_tree_15.root).__module__}.{type(binary_tree_15.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_16 = module_0.BinaryTree()
    binary_node_9 = module_0.BinaryNode(none_type_0)
    binary_node_10 = module_0.BinaryNode(var_19)
    var_20 = binary_tree_0.__contains__(binary_node_0)
    assert var_20 is False

def test_case_624():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_9.__iter__()

def test_case_625():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_node_3.inorder()
    var_3 = binary_tree_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_12)
    binary_node_6 = module_0.BinaryNode(var_14)

def test_case_626():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_1)

def test_case_627():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()

def test_case_628():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_tree_5.remove(var_6)
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    var_9 = var_2.__repr__()

def test_case_629():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.add(none_type_1)
    var_10 = var_9.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__repr__()
    assert var_11 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_11)
    assert binary_node_4.value == 'binary:()'
    var_12 = binary_node_4.__repr__()
    assert var_12 == '(L: binary:() R:)'
    var_13 = var_11.__repr__()
    assert var_13 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_12)
    assert binary_node_5.value == '(L: binary:() R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_6 = module_0.BinaryNode(var_14)
    var_15 = binary_node_6.inorder()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(none_type_2)
    var_17 = binary_tree_11.remove(var_15)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_13.__repr__()
    assert var_21 == '"\'binary:()\'"'

def test_case_630():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    var_8 = binary_node_0.removeFromParent(binary_tree_3, var_7)
    var_9 = var_6.__iter__()

def test_case_631():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)

def test_case_632():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    var_7 = binary_tree_2.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = binary_tree_2.remove(var_7)
    binary_node_1 = module_0.BinaryNode(dict_0)

def test_case_633():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_5.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_9.__contains__(binary_tree_11)
    assert var_12 is False
    var_13 = binary_tree_10.__iter__()

def test_case_634():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    var_5 = binary_tree_4.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    var_11 = binary_node_2.removeFromParent(binary_tree_6, var_10)
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__repr__()
    assert var_12 == 'binary:()'
    var_13 = binary_tree_11.remove(var_12)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    var_14 = binary_node_4.inorder()
    binary_node_5 = module_0.BinaryNode(bytes_0)

def test_case_635():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_0.__iter__()

def test_case_636():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_5 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = binary_tree_8.closest(var_9)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_node_5.inorder()
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.add(none_type_1)
    var_16 = binary_tree_13.getMax()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_node_6 = module_0.BinaryNode(var_17)
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    var_19 = binary_tree_15.closest(var_18)
    binary_node_7 = module_0.BinaryNode(var_18)
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()
    var_25 = var_21.__iter__()
    var_26 = var_23.__repr__()
    none_type_2 = None
    binary_tree_18 = module_0.BinaryTree()
    var_27 = binary_tree_18.add(none_type_2)
    var_28 = var_27.__repr__()
    var_29 = var_7.__repr__()

def test_case_637():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__repr__()
    assert var_8 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_8)
    assert binary_node_2.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_9.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    var_16 = binary_tree_13.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    var_20 = binary_tree_15.closest(var_19)
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__repr__()
    assert var_21 == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_17.__iter__()
    binary_node_4 = module_0.BinaryNode(var_22)
    var_23 = binary_node_4.inorder()
    var_24 = var_22.__repr__()
    binary_tree_18 = module_0.BinaryTree()
    var_25 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    var_27 = var_26.__repr__()
    var_28 = var_27.__iter__()
    var_29 = var_27.__iter__()
    var_30 = var_26.__iter__()
    var_31 = binary_tree_0.__contains__(binary_tree_6)
    assert var_31 is False

def test_case_638():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    var_2 = binary_node_2.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_2)
    assert binary_node_3.value == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_2)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_7 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_7.value).__module__}.{type(binary_node_7.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_node_7.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_8 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_8.value).__module__}.{type(binary_node_8.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_9 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_10 = module_0.BinaryNode(binary_tree_10)
    var_7 = binary_node_10.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__repr__()
    assert var_8 == 'binary:()'
    binary_node_11 = module_0.BinaryNode(var_8)
    assert binary_node_11.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__iter__()
    binary_node_12 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_12.value).__module__}.{type(binary_node_12.value).__qualname__}' == 'builtins.generator'
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_node_13 = module_0.BinaryNode(binary_tree_17)
    binary_node_14 = module_0.BinaryNode(binary_node_13)
    binary_tree_18 = module_0.BinaryTree()
    var_11 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    binary_node_15 = module_0.BinaryNode(binary_tree_12)

def test_case_639():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__repr__()
    assert var_11 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_12)
    var_13 = binary_node_0.inorder()
    var_14 = var_12.__repr__()
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(dict_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = binary_tree_8.closest(var_20)
    dict_1 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_24 = binary_tree_10.add(dict_1)
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    var_27 = var_26.__iter__()
    var_28 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_29 = binary_tree_11.__iter__()
    binary_node_1 = module_0.BinaryNode(var_29)
    var_30 = binary_tree_10.__repr__()
    assert var_30 == 'binary:(L: {} R:)'

def test_case_640():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_8)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    var_10 = binary_tree_4.closest(var_9)
    var_11 = var_8.__iter__()
    var_12 = binary_node_0.inorder()
    bool_0 = True
    binary_node_1 = module_0.BinaryNode(bool_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    var_15 = binary_tree_6.closest(var_14)
    var_16 = var_13.__iter__()
    var_17 = var_14.__repr__()
    binary_node_4 = module_0.BinaryNode(binary_node_2)
    var_18 = binary_node_4.__repr__()
    assert var_18 == '(L: (L: (L: True R:) R:) R:)'

def test_case_641():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_2 = module_0.BinaryNode(tuple_3)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_1.__repr__()
    var_6 = var_5.__iter__()

def test_case_642():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    var_2 = binary_tree_4.__contains__(binary_tree_4)
    assert var_2 is False
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_node_4.inorder()
    var_5 = binary_tree_5.__iter__()
    bool_0 = True
    binary_node_5 = module_0.BinaryNode(bool_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(none_type_1)
    var_7 = binary_tree_8.getMax()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    var_9 = binary_tree_9.closest(var_8)
    var_10 = var_8.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_7 = module_0.BinaryNode(set_0)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    var_11 = binary_node_7.inorder()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__repr__()
    assert var_12 == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_12)
    assert binary_node_9.value == 'binary:()'
    var_13 = binary_node_9.__repr__()
    assert var_13 == '(L: binary:() R:)'
    binary_node_10 = module_0.BinaryNode(var_12)
    assert binary_node_10.value == 'binary:()'

def test_case_643():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__repr__()
    assert var_2 == 'binary:()'
    var_3 = binary_tree_4.remove(var_2)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_2)
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_2)
    binary_node_2 = module_0.BinaryNode(var_4)
    var_5 = binary_node_1.removeFromParent(var_4, none_type_2)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    var_12 = binary_node_3.inorder()
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.add(none_type_3)
    var_14 = binary_tree_10.remove(var_12)
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    var_18 = binary_node_4.removeFromParent(binary_tree_12, var_17)
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.__iter__()
    binary_node_5 = module_0.BinaryNode(var_19)
    binary_tree_17 = module_0.BinaryTree()
    var_20 = binary_tree_17.__iter__()
    var_21 = binary_tree_17.closest(var_20)
    binary_node_6 = module_0.BinaryNode(var_20)
    var_22 = binary_node_3.__repr__()

def test_case_644():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()

def test_case_645():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__repr__()
    assert var_10 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == 'binary:()'
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_4 = module_0.BinaryNode(set_1)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"

def test_case_646():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_6)
    assert binary_node_0.value == 'binary:()'
    var_7 = binary_node_0.__repr__()
    assert var_7 == '(L: binary:() R:)'
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    var_10 = var_1.__repr__()

def test_case_647():
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)

def test_case_648():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    var_9 = binary_node_1.inorder()
    var_10 = var_8.__repr__()
    var_11 = binary_tree_3.__contains__(var_4)
    assert var_11 is False

def test_case_649():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_node_0.inorder()

def test_case_650():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__repr__()
    assert var_5 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_5)
    assert binary_node_5.value == 'binary:()'
    var_6 = binary_node_5.__repr__()
    assert var_6 == '(L: binary:() R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_15.__iter__()
    var_18 = binary_tree_11.__iter__()
    binary_node_6 = module_0.BinaryNode(binary_tree_2)

def test_case_651():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = binary_tree_3.closest(var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    var_9 = binary_node_3.inorder()
    none_type_0 = None
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    var_12 = binary_tree_10.closest(var_11)
    var_13 = var_10.__iter__()
    var_14 = binary_tree_10.remove(var_12)
    var_15 = binary_tree_10.__iter__()

def test_case_652():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_node_3 = module_0.BinaryNode(var_4)

def test_case_653():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_5 = binary_tree_0.closest(var_3)

def test_case_654():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    bool_0 = True
    binary_node_1 = module_0.BinaryNode(bool_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_node_4 = module_0.BinaryNode(var_0)
    var_1 = binary_node_3.removeFromParent(var_0, none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_2)
    assert binary_node_5.value == 'binary:()'
    var_3 = binary_node_5.__repr__()
    assert var_3 == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_4.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_6 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_node_6.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__repr__()
    assert var_12 == 'binary:()'
    var_13 = binary_tree_2.add(var_12)

def test_case_655():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_1.closest(var_1)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_16.__iter__()
    var_19 = binary_tree_8.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()
    var_25 = var_21.__iter__()
    var_26 = var_23.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_27 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_27.__repr__()
    var_30 = var_27.__iter__()
    var_31 = var_29.__iter__()
    var_32 = binary_tree_12.__repr__()
    assert var_32 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_15 = module_0.BinaryTree()
    var_33 = binary_tree_15.add(none_type_2)
    var_34 = binary_tree_15.getMax()
    binary_tree_16 = module_0.BinaryTree()
    var_35 = binary_tree_16.__iter__()
    var_36 = binary_tree_16.closest(var_35)
    var_37 = var_35.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    var_38 = binary_tree_17.__iter__()
    binary_node_3 = module_0.BinaryNode(var_38)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_19)
    binary_tree_20 = module_0.BinaryTree()
    var_39 = binary_tree_10.remove(var_8)

def test_case_656():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    var_9 = binary_tree_6.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = var_8.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(var_10)

def test_case_657():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_2.__repr__()
    assert var_1 == '(L: ((),) R:)'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_3 = module_0.BinaryNode(tuple_3)
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__repr__()
    assert var_2 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_2)
    assert binary_node_4.value == 'binary:()'
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_3.__repr__()

def test_case_658():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()

def test_case_659():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    var_4 = binary_tree_4.remove(var_3)
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_node_0.inorder()
    var_8 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    var_9 = binary_node_2.inorder()
    binary_tree_9 = module_0.BinaryTree()

def test_case_660():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_5)
    var_6 = binary_node_0.removeFromParent(var_5, none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_9.__iter__()
    var_12 = binary_tree_4.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    var_22 = binary_tree_5.__iter__()

def test_case_661():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_node_1.inorder()
    var_4 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(dict_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)

def test_case_662():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_1)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_node_4.__repr__()
    assert var_11 == '(L: ((),) R:)'
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__repr__()
    assert var_12 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_12)
    assert binary_node_5.value == 'binary:()'
    var_13 = binary_node_5.__repr__()
    assert var_13 == '(L: binary:() R:)'
    var_14 = var_12.__repr__()
    assert var_14 == "'binary:()'"
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_node_6 = module_0.BinaryNode(var_15)
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    var_17 = binary_tree_14.closest(var_16)
    var_18 = var_15.__iter__()
    var_19 = binary_tree_14.remove(var_17)
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__iter__()
    binary_node_7 = module_0.BinaryNode(var_20)
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__iter__()
    var_22 = binary_tree_16.closest(var_21)
    var_23 = var_20.__iter__()
    var_24 = binary_node_7.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_8 = module_0.BinaryNode(set_0)
    binary_node_9 = module_0.BinaryNode(binary_node_8)
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()

def test_case_663():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    var_6 = binary_node_0.__repr__()
    assert var_6 == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__repr__()
    assert var_7 == 'binary:()'
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    var_12 = binary_node_3.inorder()
    binary_tree_10 = module_0.BinaryTree()

def test_case_664():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    var_6 = binary_node_0.__repr__()
    assert var_6 == '(L: binary:() R:)'
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_3.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()

def test_case_665():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__repr__()
    assert var_6 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == 'binary:()'
    var_7 = binary_tree_3.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__repr__()
    assert var_8 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_8)
    assert binary_node_3.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    var_9 = var_8.__contains__(var_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_16.__iter__()
    none_type_0 = None
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.add(none_type_0)
    assert f'{type(binary_tree_16.root).__module__}.{type(binary_tree_16.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_17 = module_0.BinaryTree()
    var_20 = binary_tree_17.add(none_type_1)
    binary_node_7 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    var_21 = binary_tree_18.__iter__()
    var_22 = binary_node_2.inorder()

def test_case_666():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_3.inorder()
    var_6 = binary_tree_1.remove(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__repr__()
    assert var_11 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_11)
    assert binary_node_4.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = var_1.__iter__()

def test_case_667():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_node_2.inorder()
    var_2 = binary_tree_1.add(var_1)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_668():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_node_0.inorder()
    var_4 = binary_tree_1.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_6.closest(var_6)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_node_4.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_12)
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    var_14 = binary_tree_12.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = binary_tree_12.remove(var_14)
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.add(none_type_1)
    var_18 = binary_tree_13.getMax()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    var_20 = binary_tree_14.closest(var_19)
    var_21 = var_19.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.__iter__()
    binary_node_6 = module_0.BinaryNode(var_22)
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.__iter__()
    var_24 = binary_tree_16.closest(var_23)
    var_25 = var_22.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_26 = binary_tree_11.remove(var_5)

def test_case_669():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_1 = binary_tree_0.getMin()

def test_case_670():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    var_6 = binary_node_1.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == '(L: binary:() R:)'
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    var_16 = binary_tree_11.closest(var_15)
    var_17 = var_14.__iter__()
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.add(none_type_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_node_4 = module_0.BinaryNode(none_type_1)
    var_19 = var_3.__repr__()

def test_case_671():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_node_2.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(dict_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__repr__()
    assert var_20 == 'binary:()'
    var_21 = binary_node_3.__repr__()
    assert var_21 == '(L: ((),) R:)'
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.add(none_type_0)
    var_23 = var_22.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_24 = binary_tree_13.add(none_type_1)
    binary_tree_14 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_1)
    binary_node_5 = module_0.BinaryNode(var_24)
    var_25 = binary_node_4.removeFromParent(var_24, none_type_1)
    binary_tree_15 = module_0.BinaryTree()

def test_case_672():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_1 = binary_node_1.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    var_3 = binary_tree_0.__contains__(binary_tree_0)
    assert var_3 is False
    bool_0 = True
    binary_node_3 = module_0.BinaryNode(bool_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_4 = var_2.__repr__()

def test_case_673():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_9.__iter__()
    var_12 = binary_tree_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_13 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_20.__repr__()

def test_case_674():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = binary_tree_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_0)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_9 = binary_tree_3.getMin()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__repr__()
    assert var_10 == 'binary:()'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_1)
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_1)
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    var_13 = binary_node_3.inorder()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.add(none_type_2)
    var_15 = binary_tree_7.remove(var_13)
    var_16 = binary_tree_7.__iter__()

def test_case_675():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_node_2.inorder()
    var_5 = binary_tree_3.add(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__repr__()
    assert var_7 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_7)
    assert binary_node_4.value == 'binary:()'
    var_8 = binary_tree_6.__repr__()
    assert var_8 == 'binary:()'
    var_9 = var_3.__iter__()

def test_case_676():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_4.getMax()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    var_6 = binary_tree_5.closest(var_5)
    var_7 = var_5.__repr__()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_1)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_13.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_13)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.add(none_type_2)
    binary_tree_15 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_2)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_19 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_24 = binary_tree_20.__repr__()
    assert var_24 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_24)
    assert binary_node_7.value == 'binary:()'
    var_25 = binary_node_7.__repr__()
    assert var_25 == '(L: binary:() R:)'
    var_26 = var_24.__repr__()
    assert var_26 == "'binary:()'"
    binary_tree_21 = module_0.BinaryTree()

def test_case_677():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()

def test_case_678():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_15)
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    var_17 = binary_tree_8.closest(var_16)
    var_18 = var_15.__iter__()
    var_19 = var_16.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__repr__()
    assert var_20 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_20)
    assert binary_node_3.value == 'binary:()'
    var_21 = binary_node_3.__repr__()
    assert var_21 == '(L: binary:() R:)'
    var_22 = var_20.__repr__()
    assert var_22 == "'binary:()'"
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_tree_10 = module_0.BinaryTree()
    var_23 = binary_tree_10.__repr__()
    assert var_23 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_23)
    assert binary_node_5.value == 'binary:()'
    var_24 = binary_node_5.__repr__()
    assert var_24 == '(L: binary:() R:)'
    var_25 = var_23.__repr__()
    assert var_25 == "'binary:()'"
    binary_node_6 = module_0.BinaryNode(var_24)
    assert binary_node_6.value == '(L: binary:() R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_26 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_26.__repr__()
    var_29 = var_26.__iter__()
    var_30 = var_28.__iter__()
    var_31 = binary_tree_11.__repr__()
    assert var_31 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_32 = binary_tree_14.__repr__()
    assert var_32 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_32)
    assert binary_node_7.value == 'binary:()'
    bytes_1 = b'\xe3\xd1'
    var_33 = binary_tree_2.closest(bytes_1)

def test_case_679():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_3.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    var_12 = binary_tree_9.closest(var_11)
    var_13 = var_10.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_node_4 = module_0.BinaryNode(var_19)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    var_20 = binary_tree_18.__iter__()
    var_21 = binary_tree_18.__contains__(binary_tree_18)
    assert var_21 is False
    binary_tree_19 = module_0.BinaryTree()
    var_22 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    var_25 = var_22.__iter__()
    var_26 = var_24.__iter__()
    var_27 = binary_tree_17.__repr__()
    assert var_27 == 'binary:()'

def test_case_680():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_node_2.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    var_8 = binary_tree_7.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = binary_tree_7.remove(var_8)
    binary_tree_8 = module_0.BinaryTree()

def test_case_681():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_4 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    var_6 = binary_node_2.__repr__()
    assert var_6 == '(L: binary:() R:)'
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_7)
    assert binary_node_3.value == 'binary:()'
    var_8 = binary_node_3.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.add(none_type_0)
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.add(none_type_1)
    var_12 = var_11.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.add(none_type_2)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(none_type_3)
    binary_node_6 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_7 = module_0.BinaryNode(var_16)
    assert f'{type(binary_node_7.value).__module__}.{type(binary_node_7.value).__qualname__}' == 'builtins.generator'
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    var_18 = binary_tree_10.closest(var_17)
    var_19 = var_16.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    var_21 = binary_tree_3.getMax()

def test_case_682():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    var_4 = binary_node_1.removeFromParent(binary_tree_2, var_3)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_6.closest(none_type_0)

def test_case_683():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_0.__repr__()
    assert var_6 == "'binary:()'"

def test_case_684():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__repr__()
    assert var_2 == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_0.__repr__()

def test_case_685():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_node_2.inorder()
    var_9 = binary_tree_8.add(binary_node_2)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_node_3.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_17.add(none_type_0)
    none_type_1 = None
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_18)
    binary_tree_19 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_20 = module_0.BinaryTree()
    var_19 = binary_tree_20.add(none_type_2)
    binary_tree_21 = module_0.BinaryTree()
    var_20 = binary_tree_21.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = binary_tree_22.add(var_19)
    binary_tree_23 = module_0.BinaryTree()
    var_23 = binary_tree_23.__iter__()
    binary_node_5 = module_0.BinaryNode(var_23)
    binary_tree_24 = module_0.BinaryTree()
    var_24 = binary_tree_18.getMin()

def test_case_686():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_tree_5.remove(var_10)
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    var_15 = binary_tree_7.closest(var_14)
    var_16 = var_13.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = var_14.__repr__()

def test_case_687():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_1.__contains__(binary_tree_3)
    assert var_3 is False
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_10.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_15)
    binary_tree_10 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(dict_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_20 = var_14.__repr__()

def test_case_688():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    var_9 = binary_node_0.removeFromParent(binary_tree_3, var_8)
    binary_tree_7 = module_0.BinaryTree()

def test_case_689():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_2.inorder()
    var_6 = binary_tree_1.remove(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_7.__repr__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_node_4 = module_0.BinaryNode(var_12)
    var_13 = binary_node_3.removeFromParent(var_12, none_type_0)
    var_14 = var_10.__repr__()

def test_case_690():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_1.__repr__()
    assert var_6 == 'binary:()'

def test_case_691():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(binary_tree_0)
    assert var_0 is False

def test_case_692():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_6 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__contains__(binary_tree_6)
    assert var_12 is False
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    var_18 = binary_node_4.inorder()
    none_type_0 = None
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.add(none_type_0)
    assert f'{type(binary_tree_14.root).__module__}.{type(binary_tree_14.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_20 = binary_tree_13.remove(var_18)
    bool_0 = True
    binary_node_5 = module_0.BinaryNode(bool_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    var_21 = binary_tree_2.__iter__()

def test_case_693():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = binary_tree_4.getMax()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    var_7 = binary_node_1.inorder()
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_1)
    var_9 = binary_tree_7.remove(var_7)
    var_10 = binary_node_1.removeFromParent(binary_tree_3, var_8)

def test_case_694():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_4.remove(var_5)
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_2)
    var_9 = var_8.__repr__()
    var_10 = binary_tree_2.__contains__(none_type_0)
    assert var_10 is False

def test_case_695():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)

def test_case_696():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    var_6 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_node_0.inorder()
    var_9 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_10)
    assert binary_node_2.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    var_11 = var_10.__contains__(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    var_14 = binary_tree_8.closest(var_13)
    var_15 = var_12.__iter__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_5 = module_0.BinaryNode(binary_tree_9)
    var_17 = binary_tree_9.getMin()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_6 = module_0.BinaryNode(set_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_10 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.add(none_type_1)
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.add(none_type_2)
    binary_node_8 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    none_type_3 = None
    binary_node_9 = module_0.BinaryNode(none_type_3)
    none_type_4 = None
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.add(none_type_4)
    var_22 = binary_tree_14.getMax()
    binary_node_10 = module_0.BinaryNode(binary_tree_6)

def test_case_697():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_node_2 = module_0.BinaryNode(var_0)
    assert binary_node_2.value == 'binary:()'

def test_case_698():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = binary_tree_2.add(var_0)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    var_6 = binary_tree_4.closest(var_5)
    var_7 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'

def test_case_699():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.add(binary_node_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_4.__iter__()
    var_9 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_tree_5.remove(var_10)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__repr__()
    assert var_12 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_12)
    assert binary_node_1.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    binary_tree_9 = module_0.BinaryTree()

def test_case_700():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_5 = binary_tree_2.getMin()
    var_6 = binary_tree_0.remove(binary_node_2)

def test_case_701():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_tree_2.getMin()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    var_5 = binary_node_1.inorder()
    var_6 = var_5.__repr__()
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:(L: None R:)'

def test_case_702():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == '(L: binary:() R:)'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    var_8 = binary_node_3.removeFromParent(binary_tree_5, var_7)
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_10)
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    var_12 = binary_tree_12.closest(var_11)
    var_13 = var_10.__iter__()
    var_14 = var_11.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_node_6 = module_0.BinaryNode(var_15)
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    var_17 = binary_node_1.__repr__()
    assert var_17 == '(L: binary:() R:)'

def test_case_703():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_node_0.remove(var_0)

def test_case_704():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__repr__()
    assert var_8 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_8)
    assert binary_node_0.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    var_9 = var_8.__contains__(var_8)
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(dict_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.add(none_type_0)
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__repr__()
    assert var_17 == 'binary:()'
    var_18 = binary_node_5.__repr__()
    assert var_18 == '(L: ((),) R:)'
    var_19 = binary_tree_0.add(var_16)

def test_case_705():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(none_type_0)
    assert var_0 is False
    var_1 = var_0.__repr__()

def test_case_706():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_4 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    var_3 = binary_tree_3.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = binary_tree_3.remove(var_3)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__repr__()
    assert var_11 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_11)
    assert binary_node_5.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_6 = module_0.BinaryNode(var_12)
    var_13 = binary_node_6.inorder()
    var_14 = binary_tree_6.remove(var_11)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_17.__iter__()
    var_20 = binary_tree_8.__repr__()
    assert var_20 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_7 = module_0.BinaryNode(set_0)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    binary_node_9 = module_0.BinaryNode(var_21)
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.__iter__()
    var_23 = binary_tree_12.closest(var_22)
    var_24 = var_21.__iter__()
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_25 = binary_tree_13.add(none_type_1)
    binary_node_10 = module_0.BinaryNode(binary_tree_13)
    var_26 = binary_tree_13.getMin()
    binary_tree_14 = module_0.BinaryTree()
    var_27 = binary_tree_14.__repr__()
    assert var_27 == 'binary:()'
    var_28 = binary_tree_14.remove(var_27)
    var_29 = var_25.__repr__()

def test_case_707():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    none_type_0 = None
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_node_2.inorder()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    var_14 = binary_tree_6.getMin()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__repr__()
    assert var_17 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_17)
    assert binary_node_5.value == 'binary:()'
    var_18 = binary_node_5.__repr__()
    assert var_18 == '(L: binary:() R:)'
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_19)
    var_20 = binary_node_6.inorder()
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.add(none_type_2)
    binary_tree_14 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(none_type_2)
    var_22 = var_17.__iter__()

def test_case_708():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.closest(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_7 = binary_node_1.inorder()
    var_8 = var_6.__repr__()
    var_9 = binary_tree_2.closest(var_0)

def test_case_709():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_4.getMin()

def test_case_710():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_3.__repr__()
    bool_0 = True
    binary_node_2 = module_0.BinaryNode(bool_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    var_9 = binary_node_4.inorder()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = binary_tree_7.remove(var_9)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_1)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    binary_node_6 = module_0.BinaryNode(binary_node_3)

def test_case_711():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__iter__()

def test_case_712():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_3.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_12.__iter__()
    var_15 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)

def test_case_713():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_3)
    none_type_4 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_4)
    binary_node_5 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(var_3)

def test_case_714():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_node_2.__repr__()
    assert var_7 == '(L: binary:(L: None R:) R:)'

def test_case_715():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_4.add(var_6)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    var_12 = binary_tree_6.closest(var_11)
    var_13 = var_10.__iter__()
    var_14 = binary_tree_6.remove(var_12)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(none_type_1)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_15.__repr__()

def test_case_716():
    binary_tree_0 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__contains__(binary_tree_1)
    assert var_0 is False
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_2.inorder()
    var_4 = var_2.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_1)
    var_7 = var_6.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_10.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_14.__iter__()
    var_17 = binary_tree_8.__repr__()
    assert var_17 == 'binary:()'
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    var_19 = binary_tree_10.getMin()
    var_20 = var_18.__repr__()

def test_case_717():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_6.getMax()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_1)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_1)
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_node_4 = module_0.BinaryNode(var_6)

def test_case_718():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_6)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = binary_tree_7.getMax()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    var_12 = binary_tree_8.closest(var_11)
    var_13 = var_11.__repr__()
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.add(none_type_1)
    var_15 = var_14.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    var_16 = binary_node_2.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_22)
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.__iter__()
    var_24 = binary_node_0.addToSubTree(var_10, var_20)
    assert f'{type(var_24).__module__}.{type(var_24).__qualname__}' == 'binarySearchTree1.BinaryNode'
    assert f'{type(var_24.value).__module__}.{type(var_24.value).__qualname__}' == 'builtins.str_iterator'
    assert var_24.left is None
    assert var_24.right is None

def test_case_719():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()

def test_case_720():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    var_4 = binary_tree_0.__iter__()

def test_case_721():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_4.__repr__()
    assert var_14 == 'binary:()'
    var_15 = binary_tree_5.__repr__()
    assert var_15 == 'binary:()'
    var_16 = binary_node_2.inorder()

def test_case_722():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_node_0 = module_0.BinaryNode(var_2)

def test_case_723():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    var_0 = binary_node_0.inorder()

def test_case_724():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_3 = binary_node_0.inorder()
    var_4 = var_3.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__repr__()
    assert var_11 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_11)
    assert binary_node_2.value == 'binary:()'
    var_12 = binary_node_2.__repr__()
    assert var_12 == '(L: binary:() R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(none_type_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    var_24 = var_20.__iter__()
    var_25 = var_22.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_17)

def test_case_725():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_9.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = var_15.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__repr__()
    assert var_17 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_17)
    assert binary_node_2.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__repr__()
    assert var_18 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_19)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_6.__repr__()
    assert var_20 == 'binary:()'

def test_case_726():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_node_3.inorder()
    var_3 = binary_tree_3.__iter__()
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    binary_node_5 = module_0.BinaryNode(binary_tree_4)

def test_case_727():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_node_2.inorder()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()

def test_case_728():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_node_0.inorder()
    var_7 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_8 = var_0.__repr__()

def test_case_729():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    var_4 = var_2.__repr__()
    assert var_4 == '"\'binary:()\'"'

def test_case_730():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_11.__repr__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    var_17 = binary_tree_7.getMin()
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_18)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.add(none_type_1)
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_20)
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    var_22 = binary_tree_11.closest(var_21)
    var_23 = var_20.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_24 = binary_tree_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_25 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_25)
    binary_tree_14 = module_0.BinaryTree()
    var_26 = var_12.__repr__()

def test_case_731():
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_4 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()

def test_case_732():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()

def test_case_733():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(binary_tree_0)
    assert var_0 is False
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    var_6 = var_4.__iter__()
    var_7 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(binary_node_1)

def test_case_734():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    var_7 = binary_node_2.inorder()
    var_8 = var_6.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__repr__()
    assert var_15 == 'binary:()'
    var_16 = binary_node_5.__repr__()
    assert var_16 == '(L: ((),) R:)'
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_6 = module_0.BinaryNode(binary_tree_8)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.add(none_type_1)
    var_19 = var_18.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_20)
    var_21 = binary_node_7.inorder()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.__iter__()
    binary_node_8 = module_0.BinaryNode(var_22)
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__iter__()
    var_24 = binary_tree_13.closest(var_23)
    var_25 = var_22.__iter__()
    bool_0 = True
    binary_node_9 = module_0.BinaryNode(bool_0)
    binary_node_10 = module_0.BinaryNode(binary_node_9)
    binary_node_11 = module_0.BinaryNode(var_22)

def test_case_735():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_7.__repr__()

def test_case_736():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    var_6 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_2.closest(var_8)
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_17 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_17)
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.__iter__()
    var_19 = binary_tree_7.closest(var_18)
    var_20 = var_17.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_21 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_22 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_23 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_25 = binary_tree_13.__iter__()
    var_26 = binary_tree_13.closest(var_25)
    none_type_1 = None
    binary_tree_14 = module_0.BinaryTree()
    var_27 = binary_tree_14.add(none_type_1)
    var_28 = binary_tree_14.getMax()
    binary_tree_15 = module_0.BinaryTree()
    var_29 = binary_tree_15.__iter__()
    var_30 = binary_tree_15.closest(var_29)
    var_31 = var_29.__repr__()
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_32 = binary_tree_16.add(none_type_2)
    binary_tree_17 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_2)
    binary_node_3 = module_0.BinaryNode(var_32)
    var_33 = binary_node_2.removeFromParent(var_32, none_type_2)
    var_34 = binary_tree_14.getMax()

def test_case_737():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    var_7 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = binary_tree_2.remove(var_7)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    var_23 = var_20.__iter__()
    var_24 = var_22.__iter__()
    var_25 = binary_tree_10.__repr__()
    assert var_25 == 'binary:()'
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_26 = binary_tree_12.add(none_type_1)
    var_27 = binary_tree_12.getMax()
    binary_tree_13 = module_0.BinaryTree()
    var_28 = binary_tree_13.__iter__()
    var_29 = binary_tree_13.closest(var_28)
    var_30 = var_28.__repr__()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_31 = binary_tree_14.add(none_type_2)
    var_32 = binary_tree_14.getMax()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_15)

def test_case_738():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_tree_4.remove(var_6)
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_9 = binary_node_1.inorder()
    var_10 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()

def test_case_739():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_node_0.inorder()

def test_case_740():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    var_9 = binary_tree_6.__contains__(binary_tree_6)
    assert var_9 is False
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__repr__()
    assert var_10 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_10)
    assert binary_node_1.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    var_12 = binary_node_2.inorder()
    var_13 = binary_tree_7.remove(var_10)
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    var_16 = binary_node_3.inorder()
    var_17 = var_15.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_18)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_node_4.inorder()
    var_20 = binary_tree_11.add(binary_node_4)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_14 = module_0.BinaryTree()

def test_case_741():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    var_3 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_2.inorder()
    var_7 = binary_tree_2.remove(var_4)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_node_3.inorder()
    var_10 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(binary_tree_4)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_6 = module_0.BinaryNode(set_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    var_16 = binary_tree_8.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_node_8 = module_0.BinaryNode(var_17)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_node_8.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_node_8.inorder()
    var_20 = binary_tree_2.__iter__()

def test_case_742():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_3.__repr__()
    assert var_8 == 'binary:()'
    none_type_0 = None
    binary_node_2 = module_0.BinaryNode(none_type_0)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_1)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_1)
    binary_node_4 = module_0.BinaryNode(var_9)
    var_10 = binary_node_3.removeFromParent(var_9, none_type_1)
    binary_tree_7 = module_0.BinaryTree()

def test_case_743():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()

def test_case_744():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_4.__iter__()
    var_9 = var_6.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    var_16 = binary_tree_4.remove(binary_tree_5)

def test_case_745():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    var_1 = binary_tree_0.__repr__()
    assert var_1 == 'binary:()'

def test_case_746():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_node_0.inorder()
    var_8 = binary_tree_7.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_12 = var_9.__repr__()
    none_type_0 = None
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.add(none_type_0)
    assert f'{type(binary_tree_14.root).__module__}.{type(binary_tree_14.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_14 = var_13.__repr__()
    binary_node_1 = module_0.BinaryNode(none_type_0)

def test_case_747():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    var_7 = binary_node_0.inorder()
    var_8 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_9 = binary_node_1.inorder()
    var_10 = var_9.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    var_11 = binary_node_2.inorder()
    var_12 = var_11.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    var_14 = binary_tree_6.closest(var_13)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__repr__()
    assert var_15 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_15)
    assert binary_node_4.value == 'binary:()'
    var_16 = binary_tree_6.add(var_10)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_748():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_11 = binary_node_3.inorder()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = binary_tree_6.__iter__()
    var_17 = var_1.__iter__()
    var_18 = var_17.__repr__()

def test_case_749():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_1.inorder()
    var_6 = var_4.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = binary_tree_10.getMax()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    var_13 = binary_tree_11.closest(var_12)
    var_14 = var_12.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    var_17 = binary_tree_13.closest(var_16)
    var_18 = var_15.__iter__()
    var_19 = var_16.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__repr__()
    assert var_20 == 'binary:()'
    var_21 = var_14.__repr__()

def test_case_750():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_3.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_tree_4.__repr__()
    assert var_11 == 'binary:()'
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__contains__(none_type_0)
    assert var_12 is False
    var_13 = var_12.__repr__()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_19 = binary_tree_7.__repr__()
    assert var_19 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_19)
    assert binary_node_2.value == 'binary:()'
    var_20 = binary_node_2.__repr__()
    assert var_20 == '(L: binary:() R:)'
    var_21 = var_19.__repr__()
    assert var_21 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_20)
    assert binary_node_3.value == '(L: binary:() R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_22 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_22)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_23 = binary_node_4.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_24 = binary_tree_11.__repr__()
    assert var_24 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_24)
    assert binary_node_5.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_25 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_25)
    var_26 = binary_node_6.inorder()
    var_27 = binary_tree_11.remove(var_24)
    binary_tree_13 = module_0.BinaryTree()
    var_28 = binary_tree_13.__iter__()
    binary_node_7 = module_0.BinaryNode(var_28)
    var_29 = binary_node_7.inorder()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()

def test_case_751():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_2.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    bool_0 = True
    binary_node_3 = module_0.BinaryNode(bool_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_12)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_node_5.inorder()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_14 = binary_tree_17.__iter__()
    var_15 = binary_tree_17.closest(var_14)
    var_16 = var_0.__repr__()
    var_17 = var_16.__repr__()

def test_case_752():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(dict_0)
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__repr__()
    assert var_7 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_7)
    assert binary_node_3.value == 'binary:()'
    var_8 = binary_tree_3.__repr__()
    assert var_8 == 'binary:()'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__contains__(none_type_1)
    assert var_9 is False
    var_10 = var_9.__repr__()
    var_11 = binary_tree_6.closest(binary_node_0)

def test_case_753():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_4)
    assert binary_node_0.value == 'binary:()'
    var_5 = binary_node_0.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    var_8 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = binary_tree_3.remove(var_8)
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.add(none_type_1)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__repr__()
    assert var_18 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_18)
    assert binary_node_3.value == 'binary:()'
    var_19 = binary_node_3.__repr__()
    assert var_19 == '(L: binary:() R:)'
    var_20 = var_18.__repr__()
    assert var_20 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_19)
    assert binary_node_4.value == '(L: binary:() R:)'
    var_21 = var_18.__contains__(var_18)
    var_22 = var_20.__repr__()
    assert var_22 == '"\'binary:()\'"'
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_25 = binary_tree_15.__iter__()
    binary_node_5 = module_0.BinaryNode(var_24)
    var_26 = binary_node_5.removeFromParent(binary_tree_12, var_25)
    none_type_3 = None
    binary_tree_16 = module_0.BinaryTree()
    var_27 = binary_tree_16.add(none_type_3)
    none_type_4 = None
    binary_tree_17 = module_0.BinaryTree()
    var_28 = binary_tree_17.add(none_type_4)
    binary_node_6 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    var_29 = binary_tree_18.__iter__()
    var_30 = var_8.__repr__()
    var_31 = var_30.__iter__()

def test_case_754():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_6.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_node_2.__repr__()
    assert var_10 == '(L: ((),) R:)'
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__contains__(binary_tree_8)
    assert var_18 is False
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_19)
    var_20 = var_9.__repr__()
    assert var_20 == "'binary:()'"

def test_case_755():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__contains__(none_type_0)
    assert var_5 is False
    var_6 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_3.closest(var_8)
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(none_type_1)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__repr__()
    assert var_17 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_17)
    assert binary_node_1.value == 'binary:()'
    var_18 = binary_node_1.__repr__()
    assert var_18 == '(L: binary:() R:)'
    var_19 = var_17.__repr__()
    assert var_19 == "'binary:()'"
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()
    var_25 = var_23.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_26 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_27.__repr__()
    var_29 = var_28.__iter__()
    var_30 = var_29.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_31 = binary_node_2.inorder()
    var_32 = binary_node_1.__repr__()
    assert var_32 == '(L: binary:() R:)'

def test_case_756():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    var_8 = binary_node_1.removeFromParent(binary_tree_2, var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_6.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__contains__(none_type_0)
    assert var_15 is False
    var_16 = var_15.__repr__()
    var_17 = binary_tree_0.__iter__()

def test_case_757():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()

def test_case_758():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    var_3 = binary_tree_4.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__repr__()
    assert var_10 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_10)
    assert binary_node_4.value == 'binary:()'
    var_11 = binary_tree_8.__repr__()
    assert var_11 == 'binary:()'
    var_12 = binary_tree_11.add(var_8)

def test_case_759():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_node_1.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_node_1.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_17)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_20.__iter__()
    var_23 = var_21.__iter__()
    var_24 = binary_tree_15.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_25 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    var_27 = var_26.__repr__()
    var_28 = var_27.__iter__()
    var_29 = var_27.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_30 = binary_tree_20.__repr__()
    assert var_30 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_30)
    assert binary_node_6.value == 'binary:()'
    var_31 = binary_node_6.__repr__()
    assert var_31 == '(L: binary:() R:)'
    var_32 = var_30.__repr__()
    assert var_32 == "'binary:()'"
    binary_node_7 = module_0.BinaryNode(var_31)
    assert binary_node_7.value == '(L: binary:() R:)'
    var_33 = var_30.__contains__(var_30)
    var_34 = var_33.__repr__()

def test_case_760():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    var_3 = binary_tree_3.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = binary_node_2.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    var_8 = binary_node_3.inorder()
    var_9 = var_7.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_6.__contains__(binary_tree_8)
    assert var_13 is False
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(var_14)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__repr__()
    assert var_15 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_15)
    assert binary_node_7.value == 'binary:()'
    var_16 = binary_tree_10.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_node_8 = module_0.BinaryNode(var_17)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_node_8.inorder()
    binary_tree_17 = module_0.BinaryTree()
    var_19 = binary_node_8.inorder()
    none_type_1 = None
    binary_tree_18 = module_0.BinaryTree()
    var_20 = binary_tree_18.add(none_type_1)
    binary_tree_19 = module_0.BinaryTree()
    binary_node_9 = module_0.BinaryNode(none_type_1)
    binary_tree_20 = module_0.BinaryTree()
    binary_node_10 = module_0.BinaryNode(binary_tree_20)
    var_21 = binary_node_10.inorder()
    binary_node_11 = module_0.BinaryNode(binary_tree_20)
    var_22 = binary_tree_12.__contains__(binary_tree_3)

def test_case_761():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_node_2 = module_0.BinaryNode(var_10)
    var_13 = binary_tree_2.add(var_11)

def test_case_762():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_5 = var_2.__contains__(var_2)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_node_5 = module_0.BinaryNode(var_6)
    var_7 = var_6.__repr__()

def test_case_763():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_15)
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_17)
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    var_19 = binary_tree_10.closest(var_18)
    var_20 = var_17.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_23.__iter__()
    var_26 = var_24.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_27 = binary_tree_14.__repr__()
    assert var_27 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_27)
    assert binary_node_3.value == 'binary:()'
    var_28 = binary_node_3.__repr__()
    assert var_28 == '(L: binary:() R:)'
    var_29 = var_27.__repr__()
    assert var_29 == "'binary:()'"
    var_30 = var_20.__iter__()

def test_case_764():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = binary_tree_3.getMax()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_tree_5.remove(var_7)
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__repr__()
    assert var_9 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_9)
    assert binary_node_4.value == 'binary:()'
    var_10 = binary_node_4.__repr__()
    assert var_10 == '(L: binary:() R:)'
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_10)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_12 = var_9.__contains__(var_9)
    var_13 = var_11.__repr__()
    assert var_13 == '"\'binary:()\'"'
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_node_6 = module_0.BinaryNode(var_14)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_node_6.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_node_6.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_19.__iter__()
    var_22 = var_18.__iter__()
    binary_tree_14 = module_0.BinaryTree()

def test_case_765():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_1.__contains__(var_0)

def test_case_766():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_7)
    assert binary_node_0.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_8 = var_7.__contains__(var_7)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(dict_0)
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_node_5 = module_0.BinaryNode(var_13)
    binary_node_6 = module_0.BinaryNode(var_5)

def test_case_767():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()

def test_case_768():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    var_6 = binary_tree_6.closest(var_5)
    var_7 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()

def test_case_769():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(none_type_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_4.__iter__()
    var_7 = binary_tree_1.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_8)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_node_0.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(var_3)

def test_case_770():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_node_2.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_node_2.inorder()
    var_3 = binary_tree_1.__iter__()

def test_case_771():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_8.remove(var_5)
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_node_2.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_node_2.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_10 = binary_node_3.inorder()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_13)
    var_11 = binary_node_5.inorder()
    var_12 = var_11.__repr__()
    var_13 = binary_tree_4.remove(var_6)

def test_case_772():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_7)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    var_9 = binary_tree_4.closest(binary_tree_1)

def test_case_773():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_2.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    none_type_0 = None
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_node_3 = module_0.BinaryNode(var_3)

def test_case_774():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    binary_node_0 = module_0.BinaryNode(none_type_0)

def test_case_775():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    var_10 = binary_node_3.inorder()
    var_11 = var_10.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    var_15 = binary_node_4.removeFromParent(binary_tree_8, var_14)
    var_16 = var_6.__iter__()

def test_case_776():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__contains__(none_type_0)
    var_3 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    binary_node_1 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    var_9 = binary_tree_5.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    var_12 = var_10.__repr__()

def test_case_777():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    var_6 = var_3.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    var_11 = binary_tree_7.closest(var_10)
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_14.__iter__()
    var_17 = binary_tree_8.__repr__()
    assert var_17 == 'binary:()'
    var_18 = binary_tree_9.__repr__()
    assert var_18 == 'binary:()'
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.add(dict_0)
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_23 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    var_27 = var_25.__iter__()
    var_28 = var_24.__iter__()
    binary_node_3 = module_0.BinaryNode(var_24)
    binary_tree_13 = module_0.BinaryTree()
    var_29 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_29)
    var_30 = binary_node_4.inorder()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_31 = binary_tree_14.add(none_type_2)
    binary_tree_15 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_2)
    binary_node_6 = module_0.BinaryNode(var_31)
    var_32 = binary_node_5.removeFromParent(var_31, none_type_2)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_7 = module_0.BinaryNode(bytes_0)
    binary_tree_16 = module_0.BinaryTree()

def test_case_778():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()

def test_case_779():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    binary_tree_0 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_1)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.remove(bytes_0)

def test_case_780():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_4)
    assert binary_node_4.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_6)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__repr__()
    assert var_8 == 'binary:()'
    var_9 = binary_tree_9.remove(var_8)
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__repr__()
    assert var_11 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_11)
    assert binary_node_6.value == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_11)
    var_12 = var_11.__contains__(var_11)
    var_13 = var_10.__repr__()
    assert var_13 == '"\'binary:()\'"'

def test_case_781():
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_1)
    var_1 = binary_node_3.inorder()
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__contains__(binary_tree_5)
    assert var_8 is False
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    var_9 = binary_node_6.inorder()
    var_10 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_7 = module_0.BinaryNode(var_11)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_node_7.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__repr__()
    assert var_13 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_13)
    assert binary_node_8.value == 'binary:()'
    var_14 = binary_node_8.__repr__()
    assert var_14 == '(L: binary:() R:)'
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    binary_node_9 = module_0.BinaryNode(binary_tree_0)

def test_case_782():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(none_type_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_2 = binary_node_0.inorder()
    var_3 = var_2.__repr__()
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.add(none_type_1)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    bool_0 = True
    binary_node_1 = module_0.BinaryNode(bool_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_2)
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_3)
    var_7 = binary_tree_4.getMax()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    var_9 = binary_tree_5.closest(var_8)
    var_10 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    var_12 = binary_tree_6.__contains__(binary_tree_6)
    none_type_4 = None
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(none_type_4)
    var_14 = binary_tree_7.getMax()
    binary_node_4 = module_0.BinaryNode(var_1)

def test_case_783():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()

def test_case_784():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_node_0.__repr__()
    assert var_6 == '(L: ((),) R:)'
    var_7 = binary_tree_1.__contains__(binary_tree_0)
    assert var_7 is False

def test_case_785():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_7.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_24 = binary_tree_11.__repr__()
    assert var_24 == 'binary:()'

def test_case_786():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_2.__contains__(binary_tree_4)
    assert var_8 is False
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    none_type_1 = None
    binary_node_3 = module_0.BinaryNode(none_type_1)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_node_4.__repr__()
    assert var_11 == '(L: ((),) R:)'
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = binary_tree_15.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    binary_tree_16 = module_0.BinaryTree()
    var_15 = binary_tree_16.__iter__()
    binary_node_6 = module_0.BinaryNode(var_15)
    var_16 = binary_node_6.inorder()
    none_type_2 = None
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_17.add(none_type_2)
    var_18 = binary_tree_16.remove(var_16)
    binary_tree_18 = module_0.BinaryTree()

def test_case_787():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_3)
    assert binary_node_4.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_5 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_11)
    var_12 = binary_node_7.inorder()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.add(none_type_0)
    assert f'{type(binary_tree_13.root).__module__}.{type(binary_tree_13.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_14 = binary_tree_13.getMax()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__iter__()
    var_16 = binary_tree_14.closest(var_15)
    var_17 = var_15.__repr__()
    none_type_1 = None
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.add(none_type_1)
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.add(none_type_2)
    binary_node_8 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    binary_node_9 = module_0.BinaryNode(binary_tree_18)
    var_20 = binary_node_9.inorder()
    var_21 = var_20.__repr__()
    var_22 = binary_tree_5.closest(var_3)

def test_case_788():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == 'binary:()'
    var_9 = binary_node_1.__repr__()
    assert var_9 == '(L: binary:() R:)'
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_11 = var_8.__contains__(var_8)
    var_12 = binary_tree_5.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(none_type_2)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__repr__()
    assert var_16 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_16)
    assert binary_node_4.value == 'binary:()'
    var_17 = binary_node_4.__repr__()
    assert var_17 == '(L: binary:() R:)'
    var_18 = var_16.__repr__()
    assert var_18 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_17)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_19 = var_16.__contains__(var_16)
    var_20 = var_18.__repr__()
    assert var_20 == '"\'binary:()\'"'
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_21 = binary_tree_8.add(dict_0)
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_25 = binary_tree_9.__iter__()
    binary_node_6 = module_0.BinaryNode(var_25)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_26 = binary_tree_12.__repr__()
    assert var_26 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_26)
    assert binary_node_7.value == 'binary:()'
    var_27 = binary_tree_9.__repr__()
    assert var_27 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_28 = binary_tree_13.__iter__()
    binary_node_8 = module_0.BinaryNode(var_28)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_29 = binary_node_8.inorder()
    binary_tree_16 = module_0.BinaryTree()
    binary_node_9 = module_0.BinaryNode(binary_tree_16)
    var_30 = binary_node_9.inorder()
    var_31 = var_30.__repr__()
    binary_tree_17 = module_0.BinaryTree()

def test_case_789():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    var_2 = binary_node_0.__repr__()

def test_case_790():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = var_6.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    var_10 = binary_node_1.inorder()
    var_11 = var_10.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_12.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_17 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_20 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()
    var_25 = var_21.__iter__()
    var_26 = var_23.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    var_27 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_28 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_28)
    binary_tree_12 = module_0.BinaryTree()
    var_29 = binary_tree_12.__iter__()
    none_type_1 = None
    binary_node_5 = module_0.BinaryNode(none_type_1)
    var_30 = binary_tree_12.remove(binary_tree_6)

def test_case_791():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_1.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_8.__iter__()
    var_11 = binary_tree_6.__repr__()
    assert var_11 == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    var_12 = binary_tree_1.add(binary_tree_5)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_792():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(none_type_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = var_13.__repr__()
    dict_1 = {}
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.add(dict_1)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_21 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_23.__iter__()
    var_26 = var_24.__iter__()
    var_27 = binary_tree_17.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_28 = binary_tree_19.__repr__()
    assert var_28 == 'binary:()'
    var_29 = var_7.__repr__()

def test_case_793():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    var_3 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    var_11 = binary_node_2.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_15.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__repr__()
    assert var_18 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(binary_tree_11)

def test_case_794():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    var_2 = binary_node_2.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_2)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_4 = var_1.__contains__(var_1)
    var_5 = var_3.__repr__()
    assert var_5 == '"\'binary:()\'"'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    var_10 = binary_tree_4.closest(var_9)
    var_11 = var_9.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__repr__()
    assert var_12 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_12)
    assert binary_node_5.value == 'binary:()'
    var_13 = binary_node_5.__repr__()
    assert var_13 == '(L: binary:() R:)'
    var_14 = var_12.__repr__()
    assert var_14 == "'binary:()'"
    binary_node_6 = module_0.BinaryNode(var_13)
    assert binary_node_6.value == '(L: binary:() R:)'
    var_15 = var_12.__contains__(var_12)
    binary_tree_6 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    var_20 = binary_tree_1.__repr__()
    assert var_20 == 'binary:()'

def test_case_795():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_node_2 = module_0.BinaryNode(var_3)
    var_4 = binary_tree_5.remove(binary_node_2)

def test_case_796():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_0.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()

def test_case_797():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()

def test_case_798():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_1 = binary_node_1.inorder()
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:(L: None R:)'

def test_case_799():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__repr__()
    assert var_6 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_6)
    assert binary_node_1.value == 'binary:()'
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_node_2.inorder()
    var_10 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_4 = module_0.BinaryNode(binary_tree_9)
    var_12 = binary_tree_9.getMin()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__contains__(binary_tree_10)
    assert var_13 is False
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_node_7 = module_0.BinaryNode(var_15)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_8 = module_0.BinaryNode(bytes_0)
    var_17 = binary_node_8.inorder()
    var_18 = var_17.__repr__()
    var_19 = binary_tree_10.closest(binary_tree_11)

def test_case_800():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__iter__()
    var_9 = binary_tree_11.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = binary_tree_11.remove(var_9)
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    dict_0 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.add(dict_0)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_20 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__repr__()
    assert var_21 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_21)
    assert binary_node_4.value == 'binary:()'
    var_22 = binary_node_4.__repr__()
    assert var_22 == '(L: binary:() R:)'
    var_23 = var_21.__repr__()
    assert var_23 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_22)
    assert binary_node_5.value == '(L: binary:() R:)'
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_26.__iter__()
    var_29 = var_25.__iter__()
    binary_node_6 = module_0.BinaryNode(var_25)
    binary_tree_18 = module_0.BinaryTree()
    var_30 = binary_tree_18.__iter__()
    binary_node_7 = module_0.BinaryNode(var_30)
    binary_tree_19 = module_0.BinaryTree()
    var_31 = binary_tree_19.__iter__()
    var_32 = binary_tree_19.closest(var_31)
    var_33 = var_30.__iter__()
    var_34 = binary_node_7.inorder()
    none_type_1 = None
    binary_tree_20 = module_0.BinaryTree()
    var_35 = binary_tree_20.add(none_type_1)
    var_36 = binary_tree_20.getMax()
    var_37 = var_33.__repr__()

def test_case_801():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_node_2.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__repr__()
    assert var_2 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_2)
    assert binary_node_3.value == 'binary:()'
    var_3 = binary_node_3.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_6)
    var_8 = binary_node_7.removeFromParent(binary_tree_7, var_7)
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__contains__(none_type_0)
    assert var_9 is False
    var_10 = var_9.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__repr__()
    assert var_11 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.__iter__()
    binary_node_8 = module_0.BinaryNode(var_12)
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__iter__()
    var_14 = binary_tree_14.closest(var_13)
    var_15 = var_12.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_node_9 = module_0.BinaryNode(none_type_0)

def test_case_802():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_3.__contains__(binary_tree_5)
    assert var_9 is False
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_13.__iter__()
    var_16 = binary_tree_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_17)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_node_2.inorder()
    var_19 = binary_tree_9.add(binary_node_2)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    binary_node_3 = module_0.BinaryNode(var_5)

def test_case_803():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__iter__()
    var_14 = binary_tree_14.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = binary_node_3.inorder()
    var_17 = binary_tree_8.__contains__(var_14)
    assert var_17 is False

def test_case_804():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    var_12 = binary_node_3.removeFromParent(binary_tree_6, var_11)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    var_13 = binary_node_4.inorder()
    var_14 = var_13.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    var_15 = binary_node_5.inorder()
    var_16 = var_15.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_6 = module_0.BinaryNode(set_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__contains__(binary_tree_11)
    assert var_17 is False
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__repr__()
    assert var_18 == 'binary:()'
    var_19 = binary_tree_12.remove(var_18)
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.__repr__()
    assert var_20 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_20)
    assert binary_node_8.value == 'binary:()'
    var_21 = binary_node_8.__repr__()
    assert var_21 == '(L: binary:() R:)'
    var_22 = var_20.__repr__()
    assert var_22 == "'binary:()'"
    binary_node_9 = module_0.BinaryNode(var_21)
    assert binary_node_9.value == '(L: binary:() R:)'
    var_23 = var_20.__contains__(var_20)
    var_24 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_25 = binary_tree_14.__iter__()
    binary_node_10 = module_0.BinaryNode(var_25)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_26 = binary_node_10.inorder()
    var_27 = binary_tree_14.__iter__()
    binary_node_11 = module_0.BinaryNode(binary_tree_14)
    var_28 = var_25.__repr__()

def test_case_805():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_node_0.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_7.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_11.__repr__()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    binary_node_1 = module_0.BinaryNode(var_17)

def test_case_806():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_14 = binary_tree_5.__repr__()
    assert var_14 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_14)
    assert binary_node_0.value == 'binary:()'
    var_15 = binary_node_0.__repr__()
    assert var_15 == '(L: binary:() R:)'
    var_16 = var_14.__repr__()
    assert var_16 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_15)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_17 = var_14.__contains__(var_14)
    var_18 = binary_tree_5.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_19 = binary_tree_6.__repr__()
    assert var_19 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_19)
    assert binary_node_3.value == 'binary:()'
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_20 = binary_tree_7.add(none_type_0)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_21 = binary_tree_8.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_23)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__iter__()
    binary_node_6 = module_0.BinaryNode(var_24)
    binary_tree_15 = module_0.BinaryTree()
    var_25 = binary_tree_15.__iter__()
    var_26 = binary_tree_15.closest(var_25)
    var_27 = var_24.__iter__()
    var_28 = var_25.__repr__()
    binary_node_7 = module_0.BinaryNode(var_25)

def test_case_807():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    var_5 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    var_9 = binary_node_2.inorder()
    var_10 = binary_tree_6.__repr__()
    assert var_10 == 'binary:(L: None R:)'
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    var_17 = binary_node_3.removeFromParent(binary_tree_10, var_16)
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_node_4 = module_0.BinaryNode(var_18)
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.__iter__()
    binary_node_5 = module_0.BinaryNode(var_20)
    binary_tree_17 = module_0.BinaryTree()
    var_21 = binary_tree_17.__iter__()
    var_22 = binary_tree_17.closest(var_21)
    var_23 = var_20.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_24 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_24.__repr__()
    var_27 = var_26.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_28 = binary_tree_21.__repr__()
    assert var_28 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_28)
    assert binary_node_6.value == 'binary:()'
    var_29 = binary_node_6.__repr__()
    assert var_29 == '(L: binary:() R:)'
    var_30 = var_28.__repr__()
    assert var_30 == "'binary:()'"
    binary_node_7 = module_0.BinaryNode(var_29)
    assert binary_node_7.value == '(L: binary:() R:)'
    var_31 = var_28.__contains__(var_28)
    binary_tree_22 = module_0.BinaryTree()

def test_case_808():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_3.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__contains__(binary_tree_6)
    assert var_8 is False
    var_9 = var_1.__iter__()

def test_case_809():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    var_8 = var_5.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    var_11 = binary_tree_7.closest(var_10)
    var_12 = var_9.__iter__()
    var_13 = binary_node_2.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_14)
    assert binary_node_3.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_node_4.inorder()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_12)
    var_17 = binary_node_5.inorder()
    binary_node_6 = module_0.BinaryNode(var_12)

def test_case_810():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    var_9 = binary_tree_4.closest(var_8)
    var_10 = var_8.__repr__()
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    var_11 = binary_node_2.inorder()
    var_12 = var_11.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    var_16 = binary_node_3.removeFromParent(binary_tree_6, var_15)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__repr__()
    assert var_17 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_17)
    assert binary_node_4.value == 'binary:()'
    var_18 = binary_node_4.__repr__()
    assert var_18 == '(L: binary:() R:)'
    var_19 = var_17.__repr__()
    assert var_19 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_18)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_20 = var_17.__contains__(var_17)
    var_21 = var_19.__repr__()
    assert var_21 == '"\'binary:()\'"'
    var_22 = binary_tree_9.closest(var_18)

def test_case_811():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    var_11 = binary_tree_3.add(binary_tree_0)

def test_case_812():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_7 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_node_3.inorder()
    var_10 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    var_11 = var_9.__iter__()

def test_case_813():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_2 = binary_tree_6.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    var_3 = binary_tree_6.remove(none_type_0)

def test_case_814():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    var_4 = binary_node_2.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_4)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_6 = var_3.__contains__(var_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(none_type_0)
    var_13 = binary_tree_7.getMax()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_7 = module_0.BinaryNode(tuple_1)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.add(none_type_1)
    var_15 = binary_tree_8.getMax()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    var_17 = binary_tree_9.closest(var_16)
    var_18 = var_16.__repr__()
    var_19 = var_11.__repr__()

def test_case_815():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_1.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == 'binary:()'
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_node_3 = module_0.BinaryNode(var_9)
    var_10 = binary_node_2.removeFromParent(var_9, none_type_0)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(none_type_1)
    var_14 = binary_node_3.inorder()

def test_case_816():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_node_2 = module_0.BinaryNode(var_12)
    var_13 = binary_node_1.removeFromParent(var_12, none_type_0)
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__repr__()
    assert var_14 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_14)
    assert binary_node_3.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    var_16 = binary_node_4.inorder()
    var_17 = binary_tree_6.remove(var_14)
    binary_tree_8 = module_0.BinaryTree()

def test_case_817():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_6.__repr__()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__contains__(none_type_2)
    assert var_10 is False
    var_11 = var_10.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    var_12 = binary_node_3.inorder()
    var_13 = var_12.__repr__()
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.add(none_type_3)
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    var_17 = binary_tree_13.closest(var_16)
    var_18 = var_15.__iter__()
    var_19 = binary_tree_13.remove(var_17)
    var_20 = binary_node_0.removeFromParent(var_10, var_1)

def test_case_818():
    bool_0 = False
    binary_node_0 = module_0.BinaryNode(bool_0)

def test_case_819():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    var_1 = binary_tree_1.__contains__(binary_tree_1)
    assert var_1 is False
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_3.closest(var_3)
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    var_9 = binary_node_3.inorder()
    var_10 = var_8.__repr__()
    var_11 = binary_tree_7.add(var_7)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_820():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_3)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_3)
    binary_node_3 = module_0.BinaryNode(var_3)
    var_4 = binary_node_2.removeFromParent(var_3, none_type_3)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.add(none_type_4)
    none_type_5 = None
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.add(none_type_5)
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_8 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_10 = binary_tree_16.__iter__()
    binary_node_6 = module_0.BinaryNode(var_9)
    var_11 = binary_node_6.removeFromParent(binary_tree_13, var_10)
    binary_tree_17 = module_0.BinaryTree()

def test_case_821():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    var_2 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    var_4 = binary_node_1.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_6 = var_3.__contains__(var_3)
    var_7 = var_5.__repr__()
    assert var_7 == '"\'binary:()\'"'
    binary_tree_2 = module_0.BinaryTree()
    var_8 = binary_tree_2.__repr__()
    assert var_8 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_8)
    assert binary_node_3.value == 'binary:()'
    var_9 = binary_node_3.__repr__()
    assert var_9 == '(L: binary:() R:)'
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_9)
    assert binary_node_4.value == '(L: binary:() R:)'
    var_11 = var_8.__contains__(var_8)
    var_12 = binary_tree_1.__contains__(var_3)
    assert var_12 is False

def test_case_822():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    var_8 = binary_node_2.inorder()
    var_9 = var_7.__repr__()

def test_case_823():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    var_6 = binary_node_0.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_6)
    assert binary_node_1.value == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    var_8 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_14 = binary_tree_5.__repr__()
    assert var_14 == 'binary:()'
    var_15 = binary_tree_5.remove(var_14)
    var_16 = var_14.__repr__()
    assert var_16 == "'binary:()'"
    binary_tree_6 = module_0.BinaryTree()
    var_17 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.__iter__()
    var_19 = binary_tree_7.__contains__(binary_tree_7)
    assert var_19 is False
    binary_tree_8 = module_0.BinaryTree()
    var_20 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_20)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_21)
    var_22 = binary_node_6.inorder()
    binary_node_7 = module_0.BinaryNode(var_14)
    assert binary_node_7.value == 'binary:()'

def test_case_824():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(dict_0)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    var_11 = binary_node_5.inorder()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = binary_tree_3.add(binary_node_1)

def test_case_825():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_0.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_7)
    assert binary_node_1.value == 'binary:()'
    var_8 = binary_tree_2.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    var_17 = binary_tree_10.closest(var_16)
    var_18 = var_15.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_20)
    var_21 = binary_node_4.inorder()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_node_3)

def test_case_826():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__repr__()
    assert var_4 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == 'binary:()'
    var_5 = binary_node_2.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_5)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_7 = var_4.__contains__(var_4)
    var_8 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_9 = binary_tree_2.__iter__()
    binary_node_4 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_node_4.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_node_4.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_12)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_14.__iter__()
    var_19 = var_16.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_6 = module_0.BinaryNode(tuple_1)
    var_20 = binary_node_6.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_21 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_21.__repr__()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_26 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_12 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(none_type_0)
    binary_tree_13 = module_0.BinaryTree()
    var_27 = binary_tree_13.__iter__()
    binary_node_8 = module_0.BinaryNode(var_27)
    binary_tree_14 = module_0.BinaryTree()
    var_28 = binary_tree_14.__iter__()
    var_29 = binary_tree_14.closest(var_28)
    var_30 = var_27.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_31 = binary_tree_14.__iter__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_9 = module_0.BinaryNode(tuple_3)
    binary_tree_16 = module_0.BinaryTree()
    var_32 = binary_tree_16.__repr__()
    assert var_32 == 'binary:()'
    var_33 = binary_node_9.__repr__()
    assert var_33 == '(L: ((),) R:)'
    var_34 = binary_tree_15.__contains__(binary_node_0)
    assert var_34 is False

def test_case_827():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_node_1.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    var_16 = var_13.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_17)
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__iter__()
    var_19 = binary_tree_8.closest(var_18)
    var_20 = var_17.__iter__()
    var_21 = binary_tree_8.remove(var_19)
    binary_tree_9 = module_0.BinaryTree()
    var_22 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_22.__repr__()
    var_27 = var_14.__iter__()

def test_case_828():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_3.__repr__()

def test_case_829():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_1)
    assert binary_node_0.value == 'binary:()'
    var_2 = binary_node_0.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_4 = var_1.__contains__(var_1)
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_9.__repr__()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    var_15 = binary_node_3.inorder()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    var_16 = binary_node_4.inorder()
    binary_node_5 = module_0.BinaryNode(binary_tree_8)
    binary_node_6 = module_0.BinaryNode(binary_tree_1)

def test_case_830():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    var_10 = binary_node_2.inorder()
    var_11 = binary_tree_5.remove(var_8)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    var_14 = binary_node_5.inorder()
    var_15 = binary_tree_8.__repr__()
    assert var_15 == 'binary:(L: None R:)'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    var_16 = binary_node_6.inorder()
    var_17 = var_16.__repr__()
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.add(none_type_3)
    binary_node_7 = module_0.BinaryNode(binary_tree_10)
    var_19 = binary_tree_10.getMin()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_23 = var_2.__repr__()

def test_case_831():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    var_2 = binary_node_2.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_2)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_4 = var_1.__contains__(var_1)
    var_5 = var_3.__repr__()
    assert var_5 == '"\'binary:()\'"'
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_node_4.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_node_4.inorder()
    binary_tree_9 = module_0.BinaryTree()

def test_case_832():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_1.inorder()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.remove(var_1)

def test_case_833():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_1.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_5.__contains__(binary_tree_7)
    assert var_7 is False
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    var_11 = binary_tree_11.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()

def test_case_834():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    var_7 = binary_node_2.removeFromParent(binary_tree_1, var_6)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    var_9 = binary_tree_5.remove(var_8)
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    var_10 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    var_13 = binary_tree_8.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    var_21 = var_17.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.__iter__()
    var_23 = binary_tree_13.__contains__(binary_tree_13)
    assert var_23 is False
    none_type_0 = None
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__contains__(none_type_0)
    var_25 = var_24.__repr__()
    var_26 = var_25.__repr__()

def test_case_835():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_10)
    assert binary_node_1.value == 'binary:()'
    var_11 = binary_node_1.__repr__()
    assert var_11 == '(L: binary:() R:)'
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    var_14 = binary_node_4.inorder()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_5 = module_0.BinaryNode(tuple_3)
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__repr__()
    assert var_15 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_15)
    assert binary_node_6.value == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_node_7 = module_0.BinaryNode(var_21)
    var_22 = binary_node_7.inorder()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(var_19)

def test_case_836():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    var_4 = binary_tree_2.add(var_1)

def test_case_837():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    var_16 = binary_tree_6.__repr__()
    assert var_16 == 'binary:()'
    var_17 = binary_tree_7.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_18)
    var_19 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_21 = binary_tree_8.remove(var_19)
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_tree_10.__repr__()
    assert var_22 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_22)
    assert binary_node_3.value == 'binary:()'
    var_23 = binary_node_3.__repr__()
    assert var_23 == '(L: binary:() R:)'
    var_24 = var_22.__repr__()
    assert var_24 == "'binary:()'"
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_4 = module_0.BinaryNode(tuple_3)
    binary_tree_11 = module_0.BinaryTree()
    var_25 = binary_tree_4.__iter__()

def test_case_838():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_6.add(var_6)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_node_2.inorder()
    var_12 = binary_tree_7.__iter__()
    bool_0 = True
    binary_node_3 = module_0.BinaryNode(bool_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    var_14 = binary_node_5.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    var_20 = var_16.__iter__()
    var_21 = var_18.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    var_25 = var_22.__iter__()
    var_26 = var_24.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_27 = binary_tree_15.__repr__()
    assert var_27 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_27)
    assert binary_node_6.value == 'binary:()'
    var_28 = binary_node_6.__repr__()
    assert var_28 == '(L: binary:() R:)'
    var_29 = var_27.__repr__()
    assert var_29 == "'binary:()'"
    binary_node_7 = module_0.BinaryNode(var_28)
    assert binary_node_7.value == '(L: binary:() R:)'
    var_30 = var_27.__contains__(var_27)
    binary_tree_16 = module_0.BinaryTree()
    var_31 = binary_tree_16.__iter__()
    binary_node_8 = module_0.BinaryNode(var_31)
    binary_tree_17 = module_0.BinaryTree()
    var_32 = binary_tree_17.__iter__()
    var_33 = binary_tree_17.closest(var_32)
    var_34 = var_31.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_35 = binary_tree_9.__contains__(binary_node_0)
    assert var_35 is False

def test_case_839():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_2.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    var_4 = binary_tree_4.closest(var_3)
    var_5 = var_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = var_3.__repr__()

def test_case_840():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_5 = binary_node_1.inorder()
    bool_0 = True
    binary_node_3 = module_0.BinaryNode(bool_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_6 = binary_node_3.inorder()

def test_case_841():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_9.__iter__()
    var_14 = var_11.__repr__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_15 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_node_2 = module_0.BinaryNode(var_15)
    var_16 = binary_node_1.removeFromParent(var_15, none_type_0)
    var_17 = binary_tree_1.__iter__()

def test_case_842():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_1.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_node_4 = module_0.BinaryNode(var_7)
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_8)
    var_9 = binary_node_5.inorder()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_6 = module_0.BinaryNode(set_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.__contains__(binary_tree_18)
    assert var_18 is False
    var_19 = binary_tree_6.__contains__(var_1)

def test_case_843():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__repr__()
    assert var_14 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_14)
    assert binary_node_2.value == 'binary:()'
    var_15 = binary_tree_7.__repr__()
    assert var_15 == 'binary:()'
    var_16 = binary_tree_5.add(binary_tree_6)

def test_case_844():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_5 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    var_11 = binary_tree_10.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_13.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()
    var_22 = var_20.__iter__()
    var_23 = binary_tree_13.__repr__()
    assert var_23 == 'binary:()'
    var_24 = binary_tree_14.__repr__()
    assert var_24 == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    var_25 = binary_tree_15.__iter__()
    binary_node_6 = module_0.BinaryNode(var_25)
    binary_tree_16 = module_0.BinaryTree()
    var_26 = binary_tree_16.__iter__()
    var_27 = binary_tree_16.closest(var_26)
    binary_node_7 = module_0.BinaryNode(var_26)
    none_type_3 = None
    binary_tree_17 = module_0.BinaryTree()
    var_28 = binary_tree_17.add(none_type_3)
    none_type_4 = None
    binary_tree_18 = module_0.BinaryTree()
    var_29 = binary_tree_18.add(none_type_4)
    binary_node_8 = module_0.BinaryNode(binary_tree_18)
    binary_tree_19 = module_0.BinaryTree()
    var_30 = binary_tree_18.__iter__()

def test_case_845():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_5.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_9.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_15)
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_17)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_node_3.inorder()
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.__repr__()
    assert var_19 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_19)
    assert binary_node_4.value == 'binary:()'
    var_20 = binary_node_4.__repr__()
    assert var_20 == '(L: binary:() R:)'
    var_21 = var_19.__repr__()
    assert var_21 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_20)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_22 = var_19.__contains__(var_19)
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    var_27 = var_25.__iter__()
    var_28 = var_24.__iter__()
    binary_node_6 = module_0.BinaryNode(var_24)
    none_type_2 = None
    binary_tree_19 = module_0.BinaryTree()
    var_29 = binary_tree_19.add(none_type_2)
    var_30 = binary_tree_19.getMax()
    binary_tree_20 = module_0.BinaryTree()
    var_31 = binary_tree_20.__iter__()
    var_32 = binary_tree_20.closest(var_31)
    var_33 = var_31.__repr__()
    set_0 = {binary_tree_4, var_8, var_5}
    binary_node_7 = module_0.BinaryNode(set_0)

def test_case_846():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    var_6 = binary_tree_4.closest(var_5)
    var_7 = var_5.__repr__()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_1)
    var_9 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_10.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    var_15 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    var_21 = var_19.__iter__()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.add(none_type_2)
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = binary_tree_13.add(var_22)
    binary_tree_14 = module_0.BinaryTree()
    var_26 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_27.__repr__()
    var_29 = var_28.__iter__()
    var_30 = var_29.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_31 = binary_tree_12.__contains__(var_18)
    assert var_31 is False

def test_case_847():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.closest(var_3)
    var_5 = var_2.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_6 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_7 = module_0.BinaryNode(var_12)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_node_7.inorder()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__repr__()
    assert var_14 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_14)
    assert binary_node_8.value == 'binary:()'
    var_15 = binary_node_8.__repr__()
    assert var_15 == '(L: binary:() R:)'
    var_16 = var_14.__repr__()
    assert var_16 == "'binary:()'"
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_9 = module_0.BinaryNode(tuple_3)
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_1.__iter__()

def test_case_848():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_6)
    assert binary_node_0.value == 'binary:()'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    var_9 = binary_tree_6.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_1.remove(binary_tree_7)

def test_case_849():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    var_6 = binary_tree_5.closest(var_5)
    var_7 = var_4.__iter__()
    var_8 = var_5.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_9.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_14)
    assert binary_node_3.value == 'binary:()'
    var_15 = binary_node_3.__repr__()
    assert var_15 == '(L: binary:() R:)'
    var_16 = var_14.__repr__()
    assert var_16 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_15)
    assert binary_node_4.value == '(L: binary:() R:)'
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_9)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_6 = module_0.BinaryNode(tuple_1)
    var_18 = binary_node_6.inorder()
    var_19 = binary_tree_9.__repr__()
    assert var_19 == 'binary:(L: None R:)'
    var_20 = binary_tree_3.remove(var_1)

def test_case_850():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    var_8 = binary_node_0.inorder()
    var_9 = var_8.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_6 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_node_6.inorder()
    var_12 = binary_tree_9.__iter__()
    binary_node_7 = module_0.BinaryNode(binary_tree_9)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_8 = module_0.BinaryNode(set_0)
    binary_node_9 = module_0.BinaryNode(binary_node_8)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_14.__iter__()
    binary_node_10 = module_0.BinaryNode(var_14)

def test_case_851():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    var_1 = binary_node_0.inorder()
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    var_16 = binary_tree_8.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    var_17 = binary_tree_9.__iter__()

def test_case_852():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    var_4 = binary_node_1.removeFromParent(binary_tree_0, var_3)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_4 = module_0.BinaryNode(tuple_3)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__repr__()
    assert var_7 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_7)
    assert binary_node_5.value == 'binary:()'
    var_8 = binary_tree_8.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()

def test_case_853():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_3 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.__contains__(binary_tree_3)
    assert var_5 is False
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_9.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_6 = module_0.BinaryNode(tuple_1)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__repr__()
    assert var_12 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_12)
    assert binary_node_7.value == 'binary:()'
    var_13 = binary_tree_3.remove(tuple_0)

def test_case_854():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_2.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    var_7 = binary_tree_6.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = binary_node_3.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    var_12 = binary_tree_8.closest(var_11)
    var_13 = var_10.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__repr__()
    assert var_15 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_15)
    assert binary_node_5.value == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_11)
    var_16 = var_15.__contains__(var_15)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = binary_tree_13.__contains__(binary_tree_8)
    assert var_20 is False

def test_case_855():
    binary_tree_0 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    var_4 = binary_node_1.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_6 = var_3.__contains__(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_8 = binary_node_3.inorder()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_2)
    var_10 = binary_tree_6.getMax()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    var_13 = binary_tree_8.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    var_15 = binary_node_5.inorder()
    var_16 = var_15.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_12)
    binary_node_9 = module_0.BinaryNode(binary_node_8)
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.add(none_type_3)
    binary_node_10 = module_0.BinaryNode(binary_tree_13)
    none_type_4 = None
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.add(none_type_4)
    var_19 = var_18.__repr__()
    var_20 = binary_node_2.inorder()

def test_case_856():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()

def test_case_857():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_3.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_19)
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    var_21 = binary_tree_11.closest(var_20)
    var_22 = var_19.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__repr__()
    assert var_23 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_23)
    assert binary_node_4.value == 'binary:()'
    var_24 = binary_tree_13.__repr__()
    assert var_24 == 'binary:()'
    none_type_1 = None
    binary_tree_14 = module_0.BinaryTree()
    var_25 = binary_tree_14.add(none_type_1)
    assert f'{type(binary_tree_14.root).__module__}.{type(binary_tree_14.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_26 = binary_tree_14.getMax()
    binary_tree_15 = module_0.BinaryTree()
    var_27 = binary_tree_15.__iter__()
    var_28 = binary_tree_15.closest(var_27)
    var_29 = var_27.__repr__()
    var_30 = binary_tree_11.__iter__()

def test_case_858():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    var_4 = var_3.__repr__()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_2)
    var_6 = var_5.__repr__()
    var_7 = var_1.__iter__()
    var_8 = var_7.__iter__()

def test_case_859():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.__contains__(binary_tree_2)
    assert var_5 is False
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_6.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    var_16 = var_5.__repr__()

def test_case_860():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    var_4 = var_2.__repr__()
    assert var_4 == '"\'binary:()\'"'
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    var_6 = binary_node_2.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_6)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_8 = var_5.__contains__(var_5)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_9 = binary_tree_2.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_node_4.__repr__()
    assert var_10 == '(L: ((),) R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_11 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    var_16 = binary_tree_3.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_17 = binary_tree_6.__repr__()
    assert var_17 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_17)
    assert binary_node_5.value == 'binary:()'
    var_18 = binary_node_5.__repr__()
    assert var_18 == '(L: binary:() R:)'
    var_19 = var_17.__repr__()
    assert var_19 == "'binary:()'"
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_6 = module_0.BinaryNode(tuple_3)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_20 = binary_tree_8.__iter__()
    binary_node_7 = module_0.BinaryNode(var_20)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_node_7.inorder()
    binary_tree_11 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.add(none_type_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = binary_tree_5.remove(binary_tree_9)

def test_case_861():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_node_2 = module_0.BinaryNode(binary_node_0)

def test_case_862():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    var_6 = var_3.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_7)
    var_8 = binary_node_0.removeFromParent(var_7, none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__contains__(none_type_1)
    assert var_10 is False
    var_11 = var_10.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_9)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(none_type_3)
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.add(none_type_4)
    binary_node_5 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(var_10)

def test_case_863():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_7 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(var_0)

def test_case_864():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    var_5 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    var_6 = binary_node_2.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    var_9 = var_5.__iter__()

def test_case_865():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    var_1 = binary_tree_0.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(binary_node_0)

def test_case_866():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    var_12 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    var_13 = binary_tree_0.remove(binary_tree_4)

def test_case_867():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_4)
    assert binary_node_0.value == 'binary:()'
    var_5 = binary_node_0.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_7 = var_4.__contains__(var_4)
    var_8 = binary_tree_2.__iter__()

def test_case_868():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_node_3 = module_0.BinaryNode(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_4 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_4.inorder()
    binary_tree_3 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    var_6 = var_2.__repr__()

def test_case_869():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    var_1 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__repr__()
    assert var_14 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_14)
    assert binary_node_4.value == 'binary:()'
    var_15 = binary_node_4.__repr__()
    assert var_15 == '(L: binary:() R:)'
    var_16 = var_14.__repr__()
    assert var_16 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_15)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_17 = var_14.__contains__(var_14)
    var_18 = var_16.__repr__()
    assert var_18 == '"\'binary:()\'"'
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_node_6 = module_0.BinaryNode(var_19)
    var_20 = binary_node_6.inorder()
    none_type_0 = None
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.add(none_type_0)
    assert f'{type(binary_tree_15.root).__module__}.{type(binary_tree_15.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_22 = binary_tree_14.remove(var_20)
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_23.__repr__()
    var_26 = var_23.__iter__()
    var_27 = var_23.__repr__()
    binary_tree_18 = module_0.BinaryTree()

def test_case_870():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_8)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_15)
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_19.__iter__()
    var_22 = var_18.__iter__()
    var_23 = var_20.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_13)
    var_24 = binary_node_2.inorder()
    var_25 = var_24.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_26 = binary_tree_14.__iter__()
    binary_node_3 = module_0.BinaryNode(var_26)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_27 = binary_tree_17.__repr__()
    assert var_27 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_27)
    assert binary_node_4.value == 'binary:()'
    var_28 = binary_tree_14.__repr__()
    assert var_28 == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    var_29 = binary_node_5.inorder()
    binary_node_7 = module_0.BinaryNode(int_0)

def test_case_871():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_node_0.inorder()
    var_4 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_5 = var_0.__iter__()

def test_case_872():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.__contains__(binary_tree_3)
    assert var_5 is False
    var_6 = var_1.__repr__()

def test_case_873():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_6 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_7)
    assert binary_node_4.value == 'binary:()'
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    var_9 = binary_tree_0.__repr__()
    assert var_9 == 'binary:(L: None R:)'

def test_case_874():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_2.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_node_3 = module_0.BinaryNode(binary_tree_0)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    var_4 = binary_tree_3.remove(var_3)
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    var_6 = binary_tree_0.__iter__()

def test_case_875():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)

def test_case_876():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    var_10 = var_9.__repr__()

def test_case_877():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = binary_tree_1.getMax()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.add(dict_0)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_node_1 = module_0.BinaryNode(var_18)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.add(none_type_1)
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()

def test_case_878():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_3 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    var_9 = binary_tree_3.__contains__(binary_tree_3)
    assert var_9 is False
    var_10 = var_2.__iter__()

def test_case_879():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_2.getMax()
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_1)
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(dict_0)
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_4.__iter__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_3)
    var_12 = var_11.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__repr__()
    assert var_18 == 'binary:()'
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.add(none_type_4)
    binary_tree_12 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_4)
    binary_node_4 = module_0.BinaryNode(var_19)
    var_20 = binary_node_3.removeFromParent(var_19, none_type_4)
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__repr__()
    assert var_21 == 'binary:()'
    var_22 = binary_tree_13.remove(var_21)
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.__iter__()
    binary_node_5 = module_0.BinaryNode(var_23)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = var_3.__repr__()
    var_25 = var_24.__repr__()

def test_case_880():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    var_1 = binary_node_0.removeFromParent(var_0, none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_2.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_7)
    assert binary_node_2.value == 'binary:()'
    var_8 = binary_node_2.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    var_13 = binary_node_4.removeFromParent(binary_tree_6, var_12)
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_16)
    var_17 = binary_node_6.inorder()
    var_18 = var_16.__repr__()
    binary_tree_13 = module_0.BinaryTree()

def test_case_881():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_1.__repr__()

def test_case_882():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_4)
    var_5 = binary_node_0.removeFromParent(var_4, none_type_0)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_node_4.inorder()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_node_4.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__contains__(binary_tree_14)
    assert var_18 is False
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    binary_node_7 = module_0.BinaryNode(var_19)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_20 = binary_node_7.inorder()
    var_21 = binary_tree_15.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_8 = module_0.BinaryNode(bytes_0)
    var_22 = binary_node_8.inorder()
    binary_tree_18 = module_0.BinaryTree()
    var_23 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    dict_0 = {}
    var_27 = binary_tree_15.closest(dict_0)

def test_case_883():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_1 = binary_node_1.inorder()
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:(L: None R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_4.__iter__()
    var_9 = var_6.__repr__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_2 = module_0.BinaryNode(tuple_3)
    var_10 = binary_node_2.inorder()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_3 = module_0.BinaryTree()
    var_11 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_16 = binary_tree_4.remove(binary_node_1)

def test_case_884():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_3)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    var_5 = binary_node_1.inorder()
    var_6 = binary_tree_2.remove(var_3)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_14)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_node_4.inorder()
    binary_tree_16 = module_0.BinaryTree()
    var_16 = binary_node_4.inorder()
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_17.__repr__()
    assert var_17 == 'binary:()'
    dict_0 = {}
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.add(dict_0)
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    binary_node_5 = module_0.BinaryNode(var_20)
    binary_tree_19 = module_0.BinaryTree()
    var_23 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_23.__repr__()
    var_26 = var_23.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_27 = binary_tree_21.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_27.__repr__()
    binary_tree_23 = module_0.BinaryTree()
    var_30 = binary_tree_3.__contains__(var_9)
    assert var_30 is False

def test_case_885():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_3 = module_0.BinaryNode(tuple_3)
    var_4 = binary_node_3.inorder()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:(L: None R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    none_type_1 = None
    binary_node_4 = module_0.BinaryNode(none_type_1)
    bool_0 = True
    binary_node_5 = module_0.BinaryNode(bool_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    tuple_4 = ()
    tuple_5 = (tuple_4,)
    binary_node_7 = module_0.BinaryNode(tuple_5)
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__repr__()
    assert var_11 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_11)
    assert binary_node_8.value == 'binary:()'
    var_12 = binary_tree_5.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_node_9 = module_0.BinaryNode(var_16)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_node_9.inorder()
    var_18 = binary_tree_8.__iter__()
    binary_node_10 = module_0.BinaryNode(binary_tree_8)
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_node_11 = module_0.BinaryNode(var_19)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_node_11.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_node_11.inorder()
    binary_node_12 = module_0.BinaryNode(var_20)

def test_case_886():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'

def test_case_887():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_2)
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_2)
    binary_node_5 = module_0.BinaryNode(var_8)
    var_9 = var_3.__repr__()

def test_case_888():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    var_2 = var_1.__repr__()

def test_case_889():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    var_6 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__contains__(binary_tree_5)
    assert var_7 is False
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(dict_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    var_20 = var_16.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    binary_node_6 = module_0.BinaryNode(var_21)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_node_5.removeFromParent(dict_0, var_2)

def test_case_890():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    var_3 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    var_10 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_node_1.inorder()
    var_13 = binary_tree_4.add(binary_node_1)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    bool_0 = True
    var_14 = binary_tree_2.add(bool_0)

def test_case_891():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    var_3 = binary_node_0.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_5 = var_2.__contains__(var_2)
    var_6 = var_4.__repr__()
    assert var_6 == '"\'binary:()\'"'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_node_2.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_node_2.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    var_16 = var_13.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_22)
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.__iter__()
    var_24 = binary_tree_12.closest(var_23)
    var_25 = var_22.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_26 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_28 = binary_tree_18.__iter__()
    binary_node_6 = module_0.BinaryNode(var_27)
    var_29 = binary_node_2.inorder()

def test_case_892():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    var_4 = binary_tree_2.closest(binary_tree_0)

def test_case_893():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_2)

def test_case_894():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = binary_tree_1.remove(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_3.closest(var_7)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_1)
    var_12 = binary_tree_5.getMax()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    var_14 = binary_tree_6.closest(var_13)
    var_15 = var_13.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    var_16 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_17)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_1)
    var_21 = binary_node_6.inorder()
    var_22 = var_21.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_23 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_23.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    var_26 = var_23.__repr__()
    var_27 = binary_tree_16.closest(binary_tree_14)
    var_28 = var_2.__iter__()

def test_case_895():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_7)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_9 = binary_node_1.inorder()
    var_10 = binary_tree_7.__repr__()
    assert var_10 == 'binary:(L: None R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    var_16 = binary_tree_10.closest(var_13)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_2 = module_0.BinaryNode(tuple_3)
    var_17 = binary_node_2.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_16)
    none_type_2 = None
    binary_tree_17 = module_0.BinaryTree()
    var_19 = binary_tree_17.add(none_type_2)
    binary_tree_18 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(none_type_2)
    var_20 = binary_tree_9.__contains__(var_16)
    assert var_20 is False
    var_21 = var_20.__repr__()

def test_case_896():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_6.__contains__(binary_tree_8)
    assert var_6 is False
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    var_7 = binary_node_3.inorder()
    var_8 = var_7.__repr__()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    binary_tree_14 = module_0.BinaryTree()
    var_11 = binary_tree_14.__repr__()
    assert var_11 == 'binary:()'
    var_12 = binary_node_5.__repr__()
    assert var_12 == '(L: ((),) R:)'
    none_type_2 = None
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_tree_15.add(none_type_2)
    binary_node_6 = module_0.BinaryNode(binary_tree_15)
    var_14 = var_2.__repr__()

def test_case_897():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    var_3 = binary_node_0.inorder()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_1 = module_0.BinaryNode(tuple_3)
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__repr__()
    assert var_4 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == 'binary:()'
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_node_4 = module_0.BinaryNode(var_5)
    var_6 = binary_node_3.removeFromParent(var_5, none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_7)
    assert binary_node_5.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_6 = module_0.BinaryNode(var_12)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    var_14 = binary_tree_8.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = binary_tree_8.remove(var_14)
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_node_7 = module_0.BinaryNode(var_17)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_node_7.inorder()
    var_19 = binary_tree_9.__iter__()
    binary_node_8 = module_0.BinaryNode(binary_tree_9)
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.add(none_type_1)
    var_21 = binary_tree_12.getMax()
    var_22 = binary_tree_0.remove(binary_node_4)

def test_case_898():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_tree_1.remove(var_2)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_2.remove(var_5)
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    var_8 = binary_tree_2.__repr__()
    assert var_8 == 'binary:()'

def test_case_899():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__repr__()
    assert var_0 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_0)
    assert binary_node_4.value == 'binary:()'
    var_1 = binary_tree_2.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_5 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_3 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_6 = var_3.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_7 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_9.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_tree_13.__iter__()
    binary_node_7 = module_0.BinaryNode(var_11)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_12 = binary_node_7.inorder()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_13 = binary_tree_17.__iter__()
    binary_node_8 = module_0.BinaryNode(var_13)
    var_14 = binary_node_8.inorder()
    binary_tree_18 = module_0.BinaryTree()
    var_15 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_5.__iter__()

def test_case_900():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_4)
    var_5 = binary_node_0.removeFromParent(var_4, none_type_0)
    bool_0 = True
    binary_node_2 = module_0.BinaryNode(bool_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(dict_0)
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.add(none_type_1)
    binary_tree_12 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(none_type_1)
    binary_node_7 = module_0.BinaryNode(var_18)
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_node_8 = module_0.BinaryNode(var_19)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.__repr__()
    assert var_20 == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_20)
    assert binary_node_9.value == 'binary:()'
    var_21 = binary_tree_13.__repr__()
    assert var_21 == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    binary_node_10 = module_0.BinaryNode(binary_tree_17)
    var_22 = binary_node_10.inorder()
    var_23 = var_22.__repr__()
    binary_node_11 = module_0.BinaryNode(var_4)

def test_case_901():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    var_3 = binary_node_0.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_5 = var_2.__contains__(var_2)
    var_6 = var_4.__repr__()
    assert var_6 == '"\'binary:()\'"'
    var_7 = var_2.__contains__(var_3)

def test_case_902():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_8.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_17.__iter__()
    var_20 = binary_tree_13.__repr__()
    assert var_20 == 'binary:()'
    var_21 = binary_tree_14.__repr__()
    assert var_21 == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.__repr__()
    assert var_22 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_22)
    assert binary_node_1.value == 'binary:()'
    var_23 = binary_node_1.__repr__()
    assert var_23 == '(L: binary:() R:)'
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__repr__()
    assert var_24 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_24)
    assert binary_node_2.value == 'binary:()'
    var_25 = binary_node_2.__repr__()
    assert var_25 == '(L: binary:() R:)'
    var_26 = var_24.__repr__()
    assert var_26 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_25)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_27 = var_24.__contains__(var_24)
    var_28 = binary_tree_16.__iter__()
    dict_0 = {}
    binary_tree_17 = module_0.BinaryTree()
    var_29 = binary_tree_17.add(dict_0)
    assert f'{type(binary_tree_17.root).__module__}.{type(binary_tree_17.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_30 = var_29.__repr__()
    var_31 = var_30.__iter__()
    var_32 = var_31.__iter__()
    var_33 = binary_tree_17.__iter__()
    none_type_0 = None
    binary_tree_18 = module_0.BinaryTree()
    var_34 = binary_tree_18.add(none_type_0)
    var_35 = var_34.__repr__()
    binary_tree_19 = module_0.BinaryTree()
    var_36 = binary_tree_0.__contains__(var_33)
    assert var_36 is False

def test_case_903():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__repr__()
    assert var_4 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_4)
    assert binary_node_3.value == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_4)
    assert binary_node_4.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = var_10.__repr__()

def test_case_904():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_6.__iter__()

def test_case_905():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    var_6 = var_0.__contains__(var_2)

def test_case_906():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    var_4 = binary_tree_1.__contains__(binary_tree_1)
    assert var_4 is False
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    var_6 = var_5.__contains__(var_5)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_8)
    assert binary_node_5.value == 'binary:()'
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(var_19)
    binary_tree_11 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.add(dict_0)
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_21.__repr__()

def test_case_907():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_1.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_7)
    assert binary_node_0.value == 'binary:()'
    var_8 = binary_node_0.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_10 = var_7.__contains__(var_7)
    var_11 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_12 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    binary_tree_4 = module_0.BinaryTree()
    var_13 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_3.__contains__(binary_tree_5)
    assert var_15 is False
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.add(dict_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_node_3 = module_0.BinaryNode(var_18)
    binary_tree_8 = module_0.BinaryTree()
    var_21 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_21)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_node_4.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_23 = binary_node_4.inorder()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_12)
    var_24 = binary_node_5.inorder()
    var_25 = var_24.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_26 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_26.__repr__()
    var_29 = var_26.__iter__()
    var_30 = binary_tree_6.__contains__(var_19)

def test_case_908():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_3 = binary_node_1.inorder()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = binary_tree_2.remove(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    var_12 = binary_node_3.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    var_13 = binary_node_4.inorder()
    binary_node_5 = module_0.BinaryNode(binary_tree_7)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.add(none_type_1)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.add(none_type_2)
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_node_7 = module_0.BinaryNode(var_16)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    var_18 = binary_tree_12.closest(var_17)
    binary_node_8 = module_0.BinaryNode(var_17)
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.add(none_type_3)
    var_20 = binary_tree_13.getMax()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    var_22 = binary_tree_14.closest(var_21)
    var_23 = var_21.__repr__()
    binary_node_9 = module_0.BinaryNode(none_type_0)

def test_case_909():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_tree_5.remove(var_9)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__repr__()
    assert var_11 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_11)
    assert binary_node_2.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    var_13 = binary_node_3.inorder()
    var_14 = binary_tree_6.remove(var_11)
    binary_tree_8 = module_0.BinaryTree()

def test_case_910():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    var_4 = binary_node_1.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == '(L: binary:() R:)'
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    var_8 = binary_tree_5.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = binary_tree_5.remove(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    var_13 = binary_tree_5.__contains__(binary_tree_9)
    assert var_13 is False

def test_case_911():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = binary_tree_6.add(var_3)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    var_7 = binary_node_2.inorder()
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_1)
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_11 = binary_node_3.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__repr__()
    assert var_12 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_12)
    assert binary_node_5.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(var_13)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    var_15 = binary_tree_11.closest(var_14)
    binary_node_7 = module_0.BinaryNode(var_14)
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__repr__()
    assert var_16 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_16)
    assert binary_node_8.value == 'binary:()'
    var_17 = binary_node_8.__repr__()
    assert var_17 == '(L: binary:() R:)'
    var_18 = var_16.__repr__()
    assert var_18 == "'binary:()'"
    binary_node_9 = module_0.BinaryNode(var_17)
    assert binary_node_9.value == '(L: binary:() R:)'
    var_19 = var_16.__contains__(var_16)
    var_20 = binary_tree_3.__iter__()

def test_case_912():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    var_14 = var_12.__iter__()
    var_15 = binary_tree_5.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(var_12)

def test_case_913():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(var_1)
    assert binary_node_3.value == '(L: binary:() R:)'

def test_case_914():
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_7 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_7.value).__module__}.{type(binary_node_7.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    var_9 = binary_tree_9.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__repr__()
    assert var_12 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_12)
    assert binary_node_8.value == 'binary:()'
    var_13 = binary_node_8.__repr__()
    assert var_13 == '(L: binary:() R:)'
    var_14 = var_12.__repr__()
    assert var_14 == "'binary:()'"
    binary_node_9 = module_0.BinaryNode(var_13)
    assert binary_node_9.value == '(L: binary:() R:)'
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__repr__()
    assert var_15 == 'binary:()'
    binary_node_10 = module_0.BinaryNode(var_15)
    assert binary_node_10.value == 'binary:()'
    var_16 = binary_node_10.__repr__()
    assert var_16 == '(L: binary:() R:)'
    var_17 = var_15.__repr__()
    assert var_17 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_11 = module_0.BinaryNode(tuple_1)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_2.closest(var_17)

def test_case_915():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_node_3.inorder()
    var_3 = binary_tree_3.__iter__()
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_0)
    binary_node_6 = module_0.BinaryNode(var_4)
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = binary_tree_0.remove(var_6)

def test_case_916():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    var_1 = binary_node_0.removeFromParent(var_0, none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_4.remove(var_2)

def test_case_917():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_3.inorder()
    var_4 = binary_tree_2.remove(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    var_11 = binary_node_4.inorder()
    var_12 = var_10.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    var_15 = binary_tree_9.closest(var_14)
    var_16 = var_13.__iter__()
    var_17 = binary_node_5.inorder()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_10)
    var_18 = binary_node_6.inorder()
    binary_node_7 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    var_24 = var_20.__iter__()
    binary_node_8 = module_0.BinaryNode(var_20)
    none_type_0 = None
    binary_tree_13 = module_0.BinaryTree()
    var_25 = binary_tree_13.add(none_type_0)
    assert f'{type(binary_tree_13.root).__module__}.{type(binary_tree_13.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_14 = module_0.BinaryTree()
    var_26 = binary_tree_14.add(none_type_1)
    binary_node_9 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    var_27 = binary_node_7.inorder()

def test_case_918():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_8.__iter__()
    var_10 = binary_node_0.__repr__()

def test_case_919():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_1.inorder()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    var_8 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    var_10 = binary_tree_6.__contains__(binary_tree_6)
    assert var_10 is False
    var_11 = var_10.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_6 = module_0.BinaryNode(tuple_1)
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__repr__()
    assert var_12 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_12)
    assert binary_node_7.value == 'binary:()'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_8 = module_0.BinaryNode(tuple_3)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__repr__()
    assert var_13 == 'binary:()'
    var_14 = binary_node_8.__repr__()
    assert var_14 == '(L: ((),) R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_node_9 = module_0.BinaryNode(var_15)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_7.__repr__()
    assert var_16 == 'binary:()'
    var_17 = var_16.__repr__()
    assert var_17 == "'binary:()'"

def test_case_920():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_1 = binary_node_1.inorder()
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:(L: None R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_2 = module_0.BinaryNode(tuple_3)
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(dict_0)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_10)
    assert binary_node_4.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__repr__()
    assert var_11 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_11)
    assert binary_node_5.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_7)
    var_12 = var_11.__contains__(var_11)
    dict_1 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(dict_1)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__repr__()
    assert var_18 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_18)
    assert binary_node_7.value == 'binary:()'
    var_19 = binary_node_7.__repr__()
    assert var_19 == '(L: binary:() R:)'
    var_20 = binary_tree_3.__repr__()
    assert var_20 == 'binary:()'

def test_case_921():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    var_3 = binary_node_0.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == '(L: binary:() R:)'
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    var_6 = binary_node_2.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_4.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_6 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(dict_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    var_19 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_20 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()
    var_25 = var_23.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_26 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_26.__repr__()
    var_29 = var_26.__iter__()
    var_30 = var_28.__iter__()
    var_31 = binary_tree_10.__repr__()
    assert var_31 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_32 = binary_tree_13.__repr__()
    assert var_32 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_32)
    assert binary_node_6.value == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_32)
    assert binary_node_7.value == 'binary:()'
    var_33 = var_27.__repr__()

def test_case_922():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_1)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_1)
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(dict_0)
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(none_type_4)
    var_12 = binary_tree_9.getMax()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    var_14 = binary_tree_10.closest(var_13)
    var_15 = var_13.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__repr__()
    assert var_16 == 'binary:()'
    var_17 = binary_node_3.__repr__()
    assert var_17 == '(L: ((),) R:)'
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__repr__()
    assert var_18 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_18)
    assert binary_node_4.value == 'binary:()'
    var_19 = binary_node_4.__repr__()
    assert var_19 == '(L: binary:() R:)'
    var_20 = var_18.__repr__()
    assert var_20 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_19)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_21 = var_18.__contains__(var_18)
    var_22 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_14)

def test_case_923():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_node_1.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    var_6 = binary_node_2.inorder()
    var_7 = var_6.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_8.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(dict_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_17)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_node_5.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    var_22 = var_19.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.__iter__()
    binary_node_6 = module_0.BinaryNode(var_23)
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_26 = binary_tree_16.__contains__(binary_tree_18)
    assert var_26 is False
    list_0 = []
    var_27 = binary_tree_11.add(list_0)

def test_case_924():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    var_2 = binary_tree_3.closest(var_1)
    binary_node_3 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    var_14 = binary_node_5.inorder()
    var_15 = binary_tree_8.add(var_7)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_925():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_node_1.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_7 = var_4.__contains__(var_4)
    var_8 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_1)

def test_case_926():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.add(none_type_1)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(none_type_3)
    none_type_4 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_4)
    binary_node_5 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_8 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_7)
    var_9 = binary_node_6.removeFromParent(binary_tree_9, var_8)
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__iter__()
    binary_node_7 = module_0.BinaryNode(var_10)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_11 = binary_node_7.inorder()
    none_type_5 = None
    binary_tree_16 = module_0.BinaryTree()
    var_12 = binary_tree_16.add(none_type_5)
    binary_tree_17 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(none_type_5)
    binary_node_9 = module_0.BinaryNode(var_12)
    binary_tree_18 = module_0.BinaryTree()
    var_13 = binary_tree_18.__iter__()
    binary_node_10 = module_0.BinaryNode(var_13)
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_14 = binary_node_10.inorder()
    binary_tree_21 = module_0.BinaryTree()
    var_15 = binary_node_10.inorder()
    binary_tree_22 = module_0.BinaryTree()
    var_16 = binary_tree_22.__iter__()
    binary_tree_23 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_tree_24 = module_0.BinaryTree()
    binary_tree_25 = module_0.BinaryTree()
    var_21 = binary_tree_25.__iter__()
    binary_node_11 = module_0.BinaryNode(var_21)
    binary_tree_26 = module_0.BinaryTree()
    binary_tree_27 = module_0.BinaryTree()
    binary_tree_28 = module_0.BinaryTree()
    var_22 = var_8.__repr__()

def test_case_927():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    bool_0 = True
    binary_node_1 = module_0.BinaryNode(bool_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__repr__()
    assert var_1 == 'binary:()'
    var_2 = binary_tree_2.remove(var_1)
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_6.__iter__()
    var_9 = binary_tree_3.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_tree_4.__repr__()
    assert var_10 == 'binary:()'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_1)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__repr__()
    assert var_20 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_21)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.__iter__()
    binary_node_4 = module_0.BinaryNode(var_22)
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_17.__iter__()
    var_24 = binary_tree_17.closest(var_23)
    var_25 = var_22.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()

def test_case_928():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_0)
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    var_14 = var_12.__iter__()
    var_15 = binary_tree_7.__repr__()
    assert var_15 == 'binary:()'
    var_16 = binary_tree_6.__iter__()

def test_case_929():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    var_1 = binary_tree_0.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    var_2 = binary_node_2.inorder()
    var_3 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    var_7 = var_4.__iter__()
    var_8 = var_5.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_node_5 = module_0.BinaryNode(var_14)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_node_8 = module_0.BinaryNode(var_17)
    var_18 = binary_node_8.inorder()
    var_19 = binary_node_0.__repr__()
    assert var_19 == '(L: ((),) R:)'

def test_case_930():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(binary_tree_0)
    assert var_0 is False
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_3 = module_0.BinaryNode(set_1)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_5)
    assert binary_node_5.value == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_5)
    assert binary_node_6.value == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_7 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__repr__()
    assert var_6 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_6)
    assert binary_node_8.value == 'binary:()'
    binary_node_9 = module_0.BinaryNode(binary_node_7)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_7.__repr__()
    var_11 = binary_tree_8.closest(binary_tree_6)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_node_10 = module_0.BinaryNode(var_12)
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    var_14 = binary_tree_11.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = var_13.__repr__()
    var_17 = var_1.__repr__()

def test_case_931():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_5 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_11 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_6 = binary_tree_12.add(none_type_2)
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_7 = binary_tree_13.add(none_type_3)
    binary_node_7 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_8 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_9 = binary_tree_15.__repr__()
    assert var_9 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_9)
    assert binary_node_8.value == 'binary:()'
    var_10 = binary_node_8.__repr__()
    assert var_10 == '(L: binary:() R:)'
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"
    binary_tree_16 = module_0.BinaryTree()
    binary_node_9 = module_0.BinaryNode(binary_tree_16)
    var_12 = binary_node_9.inorder()
    var_13 = var_12.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    var_14 = binary_tree_17.__iter__()
    binary_node_10 = module_0.BinaryNode(var_14)
    assert f'{type(binary_node_10.value).__module__}.{type(binary_node_10.value).__qualname__}' == 'builtins.generator'
    binary_tree_18 = module_0.BinaryTree()
    var_15 = binary_tree_18.__iter__()
    var_16 = binary_tree_18.closest(var_15)
    var_17 = var_14.__iter__()
    var_18 = binary_node_10.inorder()
    binary_tree_19 = module_0.BinaryTree()

def test_case_932():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_3.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_8)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_10 = binary_node_3.inorder()
    var_11 = binary_tree_4.remove(var_8)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_4 = module_0.BinaryNode(tuple_3)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_7)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(dict_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__contains__(var_9)
    assert var_16 is False

def test_case_933():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    var_3 = binary_tree_3.closest(var_2)
    var_4 = var_1.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    var_6 = binary_node_3.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    var_7 = binary_node_4.inorder()
    binary_node_5 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_8.__repr__()
    var_12 = binary_tree_8.closest(binary_tree_6)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_6 = module_0.BinaryNode(tuple_1)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__repr__()
    assert var_13 == 'binary:()'
    var_14 = binary_node_6.__repr__()
    assert var_14 == '(L: ((),) R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = binary_tree_11.closest(var_16)
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.add(none_type_1)
    binary_tree_14 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(none_type_1)
    binary_node_8 = module_0.BinaryNode(var_20)
    var_21 = binary_node_7.removeFromParent(var_20, none_type_1)
    binary_tree_15 = module_0.BinaryTree()

def test_case_934():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_0 = binary_node_1.inorder()
    var_1 = var_0.__repr__()

def test_case_935():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_7)
    assert binary_node_2.value == 'binary:()'
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    bool_0 = True
    binary_node_3 = module_0.BinaryNode(bool_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_8)
    var_12 = binary_node_6.inorder()
    var_13 = var_12.__repr__()
    var_14 = var_5.__iter__()

def test_case_936():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_6.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_10 = binary_node_0.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_7.__contains__(binary_tree_9)
    assert var_14 is False
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_20.__iter__()
    var_23 = binary_tree_13.__contains__(var_21)

def test_case_937():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_1 = binary_tree_0.getMin()
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_node_2.inorder()
    var_6 = binary_tree_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    var_7 = binary_node_3.inorder()
    var_8 = var_7.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    var_18 = binary_tree_13.__contains__(binary_tree_13)
    assert var_18 is False
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    var_22 = var_19.__repr__()
    var_23 = binary_tree_16.closest(binary_tree_14)
    binary_node_5 = module_0.BinaryNode(none_type_0)

def test_case_938():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_1.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_2.__iter__()

def test_case_939():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    var_4 = var_2.__repr__()
    assert var_4 == '"\'binary:()\'"'
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_1.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_tree_2.__repr__()
    assert var_11 == 'binary:()'
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_12 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_17 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_20 = binary_tree_6.add(none_type_0)
    var_21 = binary_tree_6.getMax()
    binary_tree_7 = module_0.BinaryTree()
    var_22 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_23 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_25 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()

def test_case_940():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_2.getMax()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    var_7 = var_5.__repr__()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    var_9 = binary_node_3.inorder()
    var_10 = binary_tree_4.__repr__()
    assert var_10 == 'binary:(L: None R:)'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    var_11 = binary_node_4.inorder()
    var_12 = var_11.__repr__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_5 = module_0.BinaryNode(tuple_3)
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__repr__()
    assert var_13 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_13)
    assert binary_node_6.value == 'binary:()'
    binary_node_7 = module_0.BinaryNode(binary_node_5)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_2)
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__repr__()
    assert var_17 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_17)
    assert binary_node_8.value == 'binary:()'
    var_18 = binary_node_8.__repr__()
    assert var_18 == '(L: binary:() R:)'
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()
    binary_node_9 = module_0.BinaryNode(var_19)
    assert f'{type(binary_node_9.value).__module__}.{type(binary_node_9.value).__qualname__}' == 'builtins.generator'
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    var_21 = binary_tree_10.closest(var_20)
    var_22 = var_19.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    none_type_3 = None
    binary_node_10 = module_0.BinaryNode(none_type_3)
    var_23 = binary_tree_3.__iter__()

def test_case_941():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    var_2 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_4.remove(var_4)

def test_case_942():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_4 = binary_tree_4.getMin()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_node_3.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_node_3.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    binary_tree_10 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.add(none_type_1)
    var_10 = binary_tree_11.getMax()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    var_12 = binary_tree_12.closest(var_11)
    var_13 = var_11.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__repr__()
    assert var_14 == 'binary:()'
    var_15 = binary_tree_13.remove(var_14)
    var_16 = binary_tree_11.__iter__()

def test_case_943():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    var_1 = binary_node_0.removeFromParent(var_0, none_type_0)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_1)
    binary_node_3 = module_0.BinaryNode(var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_9.__iter__()
    var_12 = binary_tree_6.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__repr__()
    assert var_18 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_19)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    var_20 = binary_node_5.inorder()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_23.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_18)
    binary_node_8 = module_0.BinaryNode(binary_tree_4)

def test_case_944():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_node_1.__repr__()
    assert var_5 == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_node_4 = module_0.BinaryNode(var_5)
    assert binary_node_4.value == '(L: binary:() R:)'
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_node_0.inorder()

def test_case_945():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'

def test_case_946():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.add(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_3.closest(var_7)
    var_9 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    var_13 = binary_tree_6.closest(var_12)
    var_14 = var_11.__iter__()
    var_15 = binary_tree_6.remove(var_13)
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    var_17 = var_4.__repr__()

def test_case_947():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_0)
    assert binary_node_2.value == 'binary:()'
    var_1 = binary_node_2.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_3)
    assert binary_node_4.value == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_3)
    assert binary_node_5.value == 'binary:()'
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    none_type_0 = None
    binary_node_6 = module_0.BinaryNode(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_7 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_7.value).__module__}.{type(binary_node_7.value).__qualname__}' == 'builtins.generator'
    var_10 = binary_node_7.inorder()
    var_11 = var_9.__repr__()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__contains__(none_type_1)
    assert var_12 is False
    var_13 = var_12.__repr__()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_2)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(none_type_2)
    var_15 = binary_tree_7.getMin()

def test_case_948():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_node_0 = module_0.BinaryNode(var_2)

def test_case_949():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(dict_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    var_9 = binary_tree_5.__contains__(binary_tree_5)
    assert var_9 is False
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_10.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__repr__()
    assert var_14 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_14)
    assert binary_node_1.value == 'binary:()'
    var_15 = binary_node_1.__repr__()
    assert var_15 == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_node_4 = module_0.BinaryNode(var_15)
    assert binary_node_4.value == '(L: binary:() R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    float_0 = -674.1
    var_19 = binary_tree_6.closest(float_0)

def test_case_950():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    var_6 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_1)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_9.add(var_8)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_2)
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__repr__()
    assert var_14 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_14)
    assert binary_node_5.value == 'binary:()'
    var_15 = binary_node_5.__repr__()
    assert var_15 == '(L: binary:() R:)'
    var_16 = var_14.__repr__()
    assert var_16 == "'binary:()'"
    binary_node_6 = module_0.BinaryNode(var_15)
    assert binary_node_6.value == '(L: binary:() R:)'
    var_17 = var_14.__contains__(var_14)
    var_18 = binary_tree_13.remove(none_type_0)

def test_case_951():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_0 = module_0.BinaryTree()
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_1)
    var_0 = binary_node_4.inorder()
    var_1 = var_0.__repr__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_5 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_6 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    var_6 = binary_tree_6.closest(var_5)
    binary_node_7 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_7.value).__module__}.{type(binary_node_7.value).__qualname__}' == 'builtins.generator'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_1)
    binary_node_8 = module_0.BinaryNode(binary_tree_7)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_9 = module_0.BinaryNode(tuple_1)
    var_8 = binary_node_9.inorder()
    var_9 = binary_tree_7.__repr__()
    assert var_9 == 'binary:(L: None R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = binary_tree_8.closest(var_11)
    var_15 = var_13.__repr__()

def test_case_952():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    bool_0 = False
    binary_node_1 = module_0.BinaryNode(bool_0)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    var_7 = binary_node_3.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    var_10 = binary_tree_9.closest(var_9)
    var_11 = var_8.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_14.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    var_17 = binary_tree_12.closest(var_14)
    binary_tree_13 = module_0.BinaryTree()

def test_case_953():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_node_2 = module_0.BinaryNode(binary_node_0)
    var_1 = var_0.__iter__()

def test_case_954():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    var_3 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)

def test_case_955():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()

def test_case_956():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_1.inorder()
    var_6 = var_4.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_node_2.inorder()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.__iter__()
    var_11 = binary_tree_12.closest(var_10)
    var_12 = var_9.__iter__()
    var_13 = binary_tree_12.remove(var_11)
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__repr__()
    assert var_14 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_14)
    assert binary_node_4.value == 'binary:()'
    var_15 = binary_node_4.__repr__()
    assert var_15 == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_node_7 = module_0.BinaryNode(var_15)
    assert binary_node_7.value == '(L: binary:() R:)'
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_18.__iter__()
    var_20 = binary_tree_0.__repr__()
    assert var_20 == 'binary:()'

def test_case_957():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(var_1)
    assert binary_node_3.value == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    var_11 = binary_tree_5.getMin()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_6)
    var_12 = binary_node_5.inorder()
    var_13 = var_12.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    var_15 = binary_tree_7.__contains__(binary_tree_7)
    assert var_15 is False
    var_16 = var_15.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_node_8 = module_0.BinaryNode(var_18)
    dict_0 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.add(dict_0)
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_8.__repr__()

def test_case_958():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    var_5 = binary_tree_5.__contains__(binary_tree_5)
    assert var_5 is False
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_6)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_7 = binary_node_1.inorder()
    var_8 = binary_tree_6.__repr__()
    assert var_8 == 'binary:(L: None R:)'
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    var_15 = var_0.__iter__()

def test_case_959():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_1.add(binary_node_1)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    var_5 = var_4.__contains__(var_4)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_tree_6.remove(var_6)
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_10.__iter__()

def test_case_960():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_1)
    assert binary_node_4.value == 'binary:()'
    var_2 = binary_node_4.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_2)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_4 = var_1.__contains__(var_1)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_6 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_5)
    assert binary_node_7.value == 'binary:()'
    binary_node_8 = module_0.BinaryNode(binary_node_6)
    var_6 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_12.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_9 = module_0.BinaryNode(set_0)
    binary_node_10 = module_0.BinaryNode(binary_node_9)
    binary_tree_7 = module_0.BinaryTree()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_11 = module_0.BinaryNode(tuple_3)
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_12 = module_0.BinaryNode(bytes_1)
    var_14 = binary_node_12.inorder()
    var_15 = var_14.__repr__()
    var_16 = var_11.__repr__()

def test_case_961():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_tree_1.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_node_0.__repr__()
    assert var_6 == '(L: ((),) R:)'

def test_case_962():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_node_1.__repr__()
    assert var_5 == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    var_9 = binary_node_4.inorder()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:(L: None R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    var_12 = binary_tree_6.__contains__(binary_tree_6)
    assert var_12 is False
    var_13 = var_12.__repr__()
    binary_node_5 = module_0.BinaryNode(var_13)

def test_case_963():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_5.__repr__()
    var_9 = binary_tree_4.closest(binary_tree_2)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    var_12 = binary_node_1.inorder()
    var_13 = var_11.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_node_2.inorder()
    var_16 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_19.__iter__()
    var_22 = var_20.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__repr__()
    assert var_23 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_23)
    assert binary_node_4.value == 'binary:()'
    var_24 = var_7.__repr__()

def test_case_964():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_3.closest(var_3)
    var_5 = var_2.__iter__()
    var_6 = var_3.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    var_8 = binary_tree_4.closest(var_7)
    binary_node_2 = module_0.BinaryNode(var_6)

def test_case_965():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    var_5 = binary_tree_4.remove(var_4)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_7.add(var_6)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_15 = binary_tree_16.__repr__()
    assert var_15 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_15)
    assert binary_node_1.value == 'binary:()'
    var_16 = binary_node_1.__repr__()
    assert var_16 == '(L: binary:() R:)'
    var_17 = var_15.__repr__()
    assert var_17 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_16)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_18 = var_15.__contains__(var_15)
    var_19 = var_17.__repr__()
    assert var_19 == '"\'binary:()\'"'
    var_20 = var_17.__repr__()
    assert var_20 == '"\'binary:()\'"'

def test_case_966():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__contains__(none_type_0)
    assert var_2 is False
    var_3 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    var_7 = var_4.__iter__()
    var_8 = var_5.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(var_9)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__repr__()
    assert var_10 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_10)
    assert binary_node_5.value == 'binary:()'
    var_11 = binary_tree_4.__repr__()
    assert var_11 == 'binary:()'
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_1)
    var_12 = binary_node_6.inorder()
    var_13 = var_12.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_7 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_14)
    assert binary_node_8.value == 'binary:()'
    binary_node_9 = module_0.BinaryNode(binary_node_7)
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__repr__()
    assert var_20 == 'binary:()'
    binary_node_10 = module_0.BinaryNode(var_20)
    assert binary_node_10.value == 'binary:()'
    var_21 = binary_node_10.__repr__()
    assert var_21 == '(L: binary:() R:)'
    var_22 = var_20.__repr__()
    assert var_22 == "'binary:()'"
    float_0 = -4121.0
    binary_node_11 = module_0.BinaryNode(float_0)

def test_case_967():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    var_13 = binary_tree_6.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_15)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__repr__()
    assert var_16 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_16)
    assert binary_node_3.value == 'binary:()'
    var_17 = binary_tree_7.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__repr__()
    assert var_18 == 'binary:()'
    int_0 = 3888
    binary_node_4 = module_0.BinaryNode(int_0)

def test_case_968():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_2.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_6.add(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__repr__()
    assert var_11 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_11)
    assert binary_node_3.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(none_type_1)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = binary_tree_0.__repr__()
    assert var_20 == 'binary:()'

def test_case_969():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    bool_0 = False
    binary_node_2 = module_0.BinaryNode(bool_0)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_1)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_1)
    binary_node_4 = module_0.BinaryNode(var_6)
    var_7 = binary_node_3.removeFromParent(var_6, none_type_1)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__repr__()
    assert var_8 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_8)
    assert binary_node_5.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__repr__()
    assert var_9 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_9)
    assert binary_node_6.value == 'binary:()'
    var_10 = binary_node_6.__repr__()
    assert var_10 == '(L: binary:() R:)'
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"
    binary_node_7 = module_0.BinaryNode(var_10)
    assert binary_node_7.value == '(L: binary:() R:)'
    var_12 = var_9.__contains__(var_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_10)
    var_13 = binary_node_8.inorder()
    var_14 = var_13.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_9 = module_0.BinaryNode(bytes_0)
    var_15 = binary_node_9.inorder()
    var_16 = binary_tree_3.__iter__()

def test_case_970():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.__contains__(binary_tree_1)
    assert var_3 is False
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_4)
    assert binary_node_0.value == 'binary:()'
    var_5 = binary_node_0.__repr__()
    assert var_5 == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(var_5)
    assert binary_node_3.value == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_6)
    assert binary_node_4.value == 'binary:()'
    var_7 = binary_node_4.__repr__()
    assert var_7 == '(L: binary:() R:)'
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_7)
    assert binary_node_5.value == '(L: binary:() R:)'
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_9)
    assert binary_node_6.value == 'binary:()'
    var_10 = binary_node_6.__repr__()
    assert var_10 == '(L: binary:() R:)'
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__repr__()
    assert var_12 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_12)
    assert binary_node_7.value == 'binary:()'
    var_13 = binary_node_7.__repr__()
    assert var_13 == '(L: binary:() R:)'
    var_14 = var_12.__repr__()
    assert var_14 == "'binary:()'"
    binary_node_8 = module_0.BinaryNode(var_13)
    assert binary_node_8.value == '(L: binary:() R:)'
    var_15 = var_12.__contains__(var_12)
    binary_tree_6 = module_0.BinaryTree()
    var_16 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_21 = binary_tree_8.__iter__()
    binary_node_9 = module_0.BinaryNode(var_21)
    binary_tree_9 = module_0.BinaryTree()
    var_22 = binary_tree_9.__iter__()
    var_23 = binary_tree_9.closest(var_22)
    binary_node_10 = module_0.BinaryNode(var_22)
    binary_tree_10 = module_0.BinaryTree()
    var_24 = binary_tree_10.__repr__()
    assert var_24 == 'binary:()'
    binary_node_11 = module_0.BinaryNode(var_24)
    assert binary_node_11.value == 'binary:()'
    var_25 = binary_node_11.__repr__()
    assert var_25 == '(L: binary:() R:)'
    var_26 = var_24.__repr__()
    assert var_26 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_12 = module_0.BinaryNode(tuple_1)
    binary_tree_11 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_27 = binary_tree_12.add(dict_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_28 = var_27.__repr__()
    var_29 = var_28.__iter__()
    var_30 = var_29.__iter__()
    var_31 = var_30.__repr__()
    binary_node_13 = module_0.BinaryNode(var_29)
    binary_node_14 = module_0.BinaryNode(var_2)

def test_case_971():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == 'binary:()'
    binary_node_3 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_5)
    assert binary_node_4.value == 'binary:()'
    var_6 = binary_node_4.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_6)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_8 = var_5.__contains__(var_5)
    var_9 = var_7.__repr__()
    assert var_9 == '"\'binary:()\'"'
    none_type_1 = None
    binary_node_6 = module_0.BinaryNode(none_type_1)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_node_7 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_7.value).__module__}.{type(binary_node_7.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_8 = module_0.BinaryNode(set_0)
    binary_node_9 = module_0.BinaryNode(binary_node_8)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_10 = module_0.BinaryNode(binary_tree_9)
    var_11 = binary_node_10.inorder()
    var_12 = var_11.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_11 = module_0.BinaryNode(var_13)
    assert f'{type(binary_node_11.value).__module__}.{type(binary_node_11.value).__qualname__}' == 'builtins.generator'
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    var_15 = binary_tree_11.closest(var_14)
    var_16 = var_13.__iter__()
    var_17 = binary_tree_11.remove(var_15)
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.add(none_type_2)
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.add(none_type_3)
    binary_node_12 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    var_21 = var_14.__repr__()

def test_case_972():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_1)
    binary_node_1 = module_0.BinaryNode(var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__repr__()
    assert var_8 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_8)
    assert binary_node_2.value == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_8)
    assert binary_node_3.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    var_20 = var_16.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__repr__()
    assert var_21 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_21)
    assert binary_node_4.value == 'binary:()'
    var_22 = binary_node_4.__repr__()
    assert var_22 == '(L: binary:() R:)'
    var_23 = var_21.__repr__()
    assert var_23 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_22)
    assert binary_node_5.value == '(L: binary:() R:)'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    var_24 = binary_node_6.inorder()
    var_25 = var_24.__repr__()
    var_26 = binary_tree_4.closest(var_17)

def test_case_973():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_2 = var_1.__contains__(var_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_3.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_3.remove(var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(var_7)

def test_case_974():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_4.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__repr__()
    assert var_11 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_11)
    assert binary_node_3.value == 'binary:()'
    var_12 = binary_node_3.__repr__()
    assert var_12 == '(L: binary:() R:)'
    var_13 = var_11.__repr__()
    assert var_13 == "'binary:()'"
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__repr__()
    assert var_14 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_14)
    assert binary_node_4.value == 'binary:()'
    var_15 = binary_node_4.__repr__()
    assert var_15 == '(L: binary:() R:)'
    var_16 = var_14.__repr__()
    assert var_16 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_15)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_17 = var_14.__contains__(var_14)
    var_18 = var_16.__repr__()
    assert var_18 == '"\'binary:()\'"'
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_6 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_7 = module_0.BinaryNode(tuple_1)
    binary_tree_12 = module_0.BinaryTree()
    var_25 = binary_tree_12.__repr__()
    assert var_25 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_25)
    assert binary_node_8.value == 'binary:()'
    binary_node_9 = module_0.BinaryNode(binary_node_7)
    binary_node_10 = module_0.BinaryNode(var_25)
    assert binary_node_10.value == 'binary:()'

def test_case_975():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_1.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_7 = binary_node_0.inorder()
    var_8 = var_7.__repr__()
    var_9 = binary_tree_2.__contains__(var_5)
    assert var_9 is False

def test_case_976():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_3.__contains__(binary_tree_5)
    assert var_8 is False
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(dict_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_14)
    assert binary_node_3.value == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_14)
    assert binary_node_4.value == 'binary:()'
    var_15 = binary_tree_3.__repr__()
    assert var_15 == 'binary:()'

def test_case_977():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    var_1 = binary_node_2.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__repr__()
    assert var_18 == 'binary:()'
    var_19 = binary_node_3.__repr__()
    assert var_19 == '(L: ((),) R:)'
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    dict_0 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.add(dict_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_0.__repr__()
    assert var_27 == "'binary:()'"

def test_case_978():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = binary_tree_1.closest(var_3)
    var_7 = binary_tree_1.closest(var_4)

def test_case_979():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.__contains__(binary_tree_2)
    assert var_3 is False
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_8 = binary_tree_3.__repr__()
    assert var_8 == 'binary:(L: None R:)'

def test_case_980():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    var_2 = binary_node_2.inorder()
    var_3 = var_2.__repr__()
    var_4 = var_2.__repr__()

def test_case_981():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_2.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_7.getMax()
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_1)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    var_10 = binary_node_5.inorder()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_tree_13.__iter__()
    binary_node_6 = module_0.BinaryNode(var_11)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    var_12 = var_0.__iter__()

def test_case_982():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_3 = binary_tree_1.getMin()
    binary_node_2 = module_0.BinaryNode(binary_tree_0)

def test_case_983():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__repr__()
    assert var_9 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == 'binary:()'
    var_10 = binary_node_2.__repr__()
    assert var_10 == '(L: binary:() R:)'
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_12 = var_9.__contains__(var_9)
    var_13 = var_11.__repr__()
    assert var_13 == '"\'binary:()\'"'
    binary_tree_10 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__repr__()
    assert var_14 == 'binary:()'
    var_15 = binary_tree_11.remove(var_14)
    var_16 = var_14.__repr__()
    assert var_16 == "'binary:()'"
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__iter__()
    var_21 = var_17.__repr__()
    binary_tree_14 = module_0.BinaryTree()

def test_case_984():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    var_3 = binary_node_0.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_5 = var_2.__contains__(var_2)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    var_7 = binary_node_3.inorder()
    var_8 = binary_tree_2.__repr__()
    assert var_8 == 'binary:(L: None R:)'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_4 = module_0.BinaryNode(tuple_3)
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__repr__()
    assert var_9 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_9)
    assert binary_node_5.value == 'binary:()'
    binary_node_6 = module_0.BinaryNode(binary_node_4)
    var_10 = var_7.__iter__()

def test_case_985():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    var_4 = binary_tree_2.closest(binary_tree_0)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_tree_5.remove(var_6)
    var_8 = binary_node_1.add(var_5)
    assert f'{type(binary_node_1.left).__module__}.{type(binary_node_1.left).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_986():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_6.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    var_11 = binary_node_0.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    var_19 = var_15.__iter__()
    var_20 = var_17.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_node_2 = module_0.BinaryNode(var_21)
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_14.__contains__(binary_tree_16)
    assert var_24 is False
    binary_tree_18 = module_0.BinaryTree()
    var_25 = binary_tree_18.__iter__()
    binary_node_3 = module_0.BinaryNode(var_25)
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_26 = binary_node_3.inorder()
    var_27 = binary_tree_18.add(binary_node_3)
    binary_tree_21 = module_0.BinaryTree()
    var_28 = binary_tree_21.__iter__()
    binary_node_4 = module_0.BinaryNode(var_28)
    binary_tree_22 = module_0.BinaryTree()
    var_29 = binary_tree_22.__iter__()
    binary_tree_23 = module_0.BinaryTree()

def test_case_987():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_3.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = var_7.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_4.__iter__()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_2)
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_18)
    bool_0 = False
    binary_node_4 = module_0.BinaryNode(bool_0)
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_20)
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    var_22 = binary_tree_13.closest(var_21)
    var_23 = var_20.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    var_24 = binary_node_6.inorder()
    var_25 = var_24.__repr__()
    var_26 = binary_node_1.removeFromParent(var_22, var_24)

def test_case_988():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = binary_tree_1.getMax()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.closest(var_3)
    var_5 = var_3.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_2)
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_9.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_4.getMax()

def test_case_989():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_1 = binary_node_2.inorder()
    var_2 = binary_node_1.inorder()

def test_case_990():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_4 = binary_node_1.inorder()
    var_5 = var_4.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.add(none_type_1)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    none_type_3 = None
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.add(none_type_3)
    var_13 = var_12.__repr__()
    bool_0 = False
    binary_node_4 = module_0.BinaryNode(bool_0)
    binary_tree_15 = module_0.BinaryTree()
    var_14 = binary_tree_15.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    binary_tree_16 = module_0.BinaryTree()
    var_15 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_17 = binary_tree_15.__contains__(binary_tree_17)
    assert var_17 is False
    var_18 = binary_node_5.removeFromParent(binary_tree_15, var_8)

def test_case_991():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = binary_tree_2.remove(var_5)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_1)
    var_9 = binary_tree_4.getMax()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    var_11 = binary_tree_5.__contains__(binary_tree_5)
    assert var_11 is False
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(none_type_2)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    var_18 = binary_node_3.removeFromParent(binary_tree_7, var_17)
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__repr__()
    assert var_19 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_20)
    var_21 = binary_node_4.inorder()
    var_22 = var_20.__repr__()
    var_23 = binary_tree_7.remove(var_15)

def test_case_992():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_1)
    var_3 = binary_tree_1.getMax()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_4)
    var_6 = var_4.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_7.__repr__()
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = binary_tree_11.closest(var_13)
    binary_tree_13 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    var_17 = binary_node_3.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.__repr__()
    assert var_23 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_23)
    assert binary_node_4.value == 'binary:()'
    var_24 = binary_node_4.__repr__()
    assert var_24 == '(L: binary:() R:)'
    binary_tree_17 = module_0.BinaryTree()

def test_case_993():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    var_3 = binary_node_0.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()

def test_case_994():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_2.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_tree_3.__repr__()
    assert var_11 == 'binary:()'
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    var_15 = binary_node_0.inorder()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    var_16 = binary_node_1.inorder()
    var_17 = var_16.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.__repr__()
    assert var_18 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_19)
    var_20 = binary_node_2.inorder()
    var_21 = var_19.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_22 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_24.__iter__()
    var_27 = var_23.__iter__()
    binary_node_3 = module_0.BinaryNode(var_23)
    binary_tree_11 = module_0.BinaryTree()
    var_28 = binary_tree_11.__repr__()
    assert var_28 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_28)
    assert binary_node_4.value == 'binary:()'
    var_29 = binary_node_4.__repr__()
    assert var_29 == '(L: binary:() R:)'
    var_30 = var_28.__repr__()
    assert var_30 == "'binary:()'"
    binary_tree_12 = module_0.BinaryTree()

def test_case_995():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_6 = var_2.__repr__()

def test_case_996():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_4.__iter__()
    var_7 = binary_tree_1.__repr__()
    assert var_7 == 'binary:()'
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_node_1 = module_0.BinaryNode(var_10)
    binary_tree_4 = module_0.BinaryTree()
    var_13 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_13)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__repr__()
    assert var_14 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_14)
    assert binary_node_3.value == 'binary:()'
    var_15 = binary_tree_4.__repr__()
    assert var_15 == 'binary:()'
    dict_1 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.add(dict_1)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_21 = binary_tree_9.__repr__()
    assert var_21 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_21)
    assert binary_node_4.value == 'binary:()'
    var_22 = binary_node_4.__repr__()
    assert var_22 == '(L: binary:() R:)'
    var_23 = var_14.__iter__()

def test_case_997():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_3)
    assert binary_node_0.value == 'binary:()'
    var_4 = binary_node_0.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_6 = var_3.__contains__(var_3)
    var_7 = binary_tree_1.__iter__()
    var_8 = var_3.__repr__()
    assert var_8 == "'binary:()'"

def test_case_998():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_6 = binary_node_0.inorder()
    var_7 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_8 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_10 = binary_node_3.inorder()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    var_16 = binary_tree_10.closest(var_13)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_node_6 = module_0.BinaryNode(var_17)
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    var_19 = binary_tree_14.closest(var_18)
    var_20 = var_17.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_19)
    var_25 = binary_node_7.inorder()
    var_26 = var_25.__repr__()
    var_27 = binary_tree_18.remove(var_19)

def test_case_999():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_6.__iter__()
    var_9 = binary_tree_2.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_node_2.__repr__()
    assert var_11 == '(L: ((),) R:)'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    var_12 = binary_node_3.inorder()
    var_13 = var_12.__repr__()
    binary_node_4 = module_0.BinaryNode(var_9)

def test_case_1000():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__contains__(binary_tree_2)
    assert var_5 is False
    binary_node_2 = module_0.BinaryNode(var_5)

def test_case_1001():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()

def test_case_1002():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == 'binary:()'
    binary_node_3 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    var_7 = binary_node_4.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_5 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    var_10 = binary_tree_6.closest(var_9)
    var_11 = var_8.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_6 = module_0.BinaryNode(binary_tree_8)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_7 = module_0.BinaryNode(tuple_3)
    var_14 = binary_node_7.inorder()
    var_15 = binary_tree_8.__repr__()
    assert var_15 == 'binary:(L: None R:)'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(none_type_1)
    binary_tree_10 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(none_type_1)
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_19.__iter__()
    var_22 = var_18.__iter__()
    var_23 = binary_node_5.removeFromParent(binary_tree_12, var_12)

def test_case_1003():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    var_11 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__repr__()
    assert var_12 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_12)
    assert binary_node_2.value == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_12)
    assert binary_node_3.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    var_14 = binary_tree_7.__contains__(binary_tree_7)
    assert var_14 is False
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.add(none_type_0)
    var_16 = var_15.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(none_type_1)
    binary_tree_11 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_1)
    binary_node_5 = module_0.BinaryNode(var_17)
    var_18 = binary_node_4.removeFromParent(var_17, none_type_1)
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    binary_node_6 = module_0.BinaryNode(var_20)
    binary_tree_16 = module_0.BinaryTree()

def test_case_1004():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    dict_1 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(dict_1)
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_node_0 = module_0.BinaryNode(var_10)
    dict_2 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.add(dict_2)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_18 = binary_tree_6.__repr__()
    assert var_18 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_19 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_19)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.add(none_type_0)
    var_21 = var_20.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    var_22 = binary_node_3.inorder()
    var_23 = var_22.__repr__()
    var_24 = var_17.__repr__()

def test_case_1005():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_1 = binary_node_1.inorder()
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:(L: None R:)'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    var_3 = binary_node_2.inorder()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    var_11 = binary_tree_4.__contains__(binary_tree_4)
    assert var_11 is False
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(none_type_1)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_9.__contains__(binary_tree_11)
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.add(none_type_2)
    var_23 = var_22.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__iter__()
    binary_node_6 = module_0.BinaryNode(var_24)
    binary_tree_17 = module_0.BinaryTree()
    var_25 = binary_tree_17.__iter__()
    var_26 = binary_tree_17.closest(var_25)
    var_27 = var_24.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_28 = binary_node_5.inorder()

def test_case_1006():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_4)
    binary_node_2 = module_0.BinaryNode(binary_node_1)

def test_case_1007():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_2 = module_0.BinaryNode(tuple_3)
    var_3 = binary_node_2.inorder()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_node_3.inorder()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    var_5 = binary_node_4.inorder()
    var_6 = var_5.__repr__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_5 = module_0.BinaryNode(binary_tree_3)
    var_8 = binary_tree_3.getMin()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_1)
    binary_node_6 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_7 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_7.value).__module__}.{type(binary_node_7.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_5.__contains__(binary_tree_7)
    assert var_13 is False
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_node_8 = module_0.BinaryNode(var_15)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_9 = module_0.BinaryNode(binary_tree_13)
    var_16 = binary_node_9.inorder()
    binary_node_10 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()

def test_case_1008():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__contains__(binary_tree_2)
    assert var_4 is False
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    var_6 = binary_tree_3.getMin()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = var_13.__iter__()

def test_case_1009():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    var_10 = binary_tree_4.__contains__(binary_tree_4)
    assert var_10 is False
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    var_17 = binary_tree_8.closest(var_16)
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_10 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_node_2 = module_0.BinaryNode(var_18)
    var_19 = binary_node_1.removeFromParent(var_18, none_type_0)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = var_20.__repr__()
    var_24 = binary_tree_0.__iter__()

def test_case_1010():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_1 = binary_node_1.inorder()
    var_2 = var_1.__repr__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_3.getMax()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    var_10 = binary_tree_8.closest(var_9)
    var_11 = var_8.__iter__()
    var_12 = binary_node_2.__repr__()
    assert var_12 == '(L: binary:(L: None R:) R:)'

def test_case_1011():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    var_2 = binary_node_2.inorder()
    var_3 = var_2.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__repr__()
    assert var_4 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_4)
    assert binary_node_5.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_node_6 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_6.inorder()
    var_7 = binary_tree_6.remove(var_4)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_9)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = var_8.__repr__()
    var_12 = binary_tree_12.closest(binary_tree_10)
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_15 = binary_tree_17.__iter__()
    binary_node_9 = module_0.BinaryNode(var_14)
    var_16 = binary_node_9.removeFromParent(binary_tree_14, var_15)
    binary_tree_18 = module_0.BinaryTree()
    var_17 = binary_tree_18.__repr__()
    assert var_17 == 'binary:()'
    binary_node_10 = module_0.BinaryNode(var_17)
    assert binary_node_10.value == 'binary:()'
    binary_tree_19 = module_0.BinaryTree()
    binary_node_11 = module_0.BinaryNode(binary_tree_19)
    var_18 = var_17.__contains__(var_17)
    var_19 = binary_node_0.__repr__()
    assert var_19 == '(L: binary:(L: None R:) R:)'

def test_case_1012():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_0.inorder()
    var_8 = var_7.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_10 = binary_tree_4.getMin()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(none_type_2)
    var_13 = var_12.__repr__()
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_3)
    var_15 = binary_tree_7.getMax()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    var_17 = binary_tree_8.closest(var_16)
    var_18 = var_16.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_19)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()

def test_case_1013():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    var_10 = var_7.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    var_12 = binary_tree_5.__contains__(binary_tree_5)
    assert var_12 is False
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__repr__()
    assert var_13 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_13)
    assert binary_node_3.value == 'binary:()'
    var_14 = binary_node_3.__repr__()
    assert var_14 == '(L: binary:() R:)'
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_14)
    assert binary_node_4.value == '(L: binary:() R:)'
    var_16 = var_13.__contains__(var_13)
    var_17 = binary_tree_6.__iter__()
    var_18 = var_8.__repr__()

def test_case_1014():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_2.remove(var_5)
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__repr__()
    assert var_8 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_8)
    assert binary_node_2.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = var_12.__repr__()
    var_16 = binary_tree_10.closest(binary_tree_8)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.add(none_type_0)
    assert f'{type(binary_tree_16.root).__module__}.{type(binary_tree_16.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_17 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_node_5 = module_0.BinaryNode(var_20)
    var_21 = binary_node_4.removeFromParent(var_20, none_type_0)
    none_type_1 = None
    binary_tree_18 = module_0.BinaryTree()
    var_22 = binary_tree_18.add(none_type_1)
    var_23 = var_22.__repr__()
    var_24 = binary_tree_8.add(var_4)

def test_case_1015():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.__contains__(binary_tree_1)
    assert var_3 is False
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_1)
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_9)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    var_11 = binary_tree_6.closest(var_10)
    var_12 = var_9.__iter__()
    var_13 = binary_node_0.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    var_18 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_19 = binary_node_3.inorder()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = binary_tree_10.closest(var_21)
    binary_tree_12 = module_0.BinaryTree()

def test_case_1016():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_9.__iter__()
    var_12 = binary_tree_5.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_15.__iter__()
    var_18 = binary_tree_8.__repr__()
    assert var_18 == 'binary:()'
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.add(dict_0)
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__iter__()
    var_25 = binary_tree_13.__iter__()
    var_26 = var_13.__iter__()

def test_case_1017():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    var_7 = var_4.__repr__()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_1)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_1)
    var_9 = binary_tree_2.__contains__(binary_tree_0)
    assert var_9 is False

def test_case_1018():
    none_type_0 = None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    binary_node_0 = module_0.BinaryNode(list_0)
    var_0 = binary_node_0.__repr__()
    assert var_0 == '(L: [False, False, False, False] R:)'

def test_case_1019():
    float_0 = 921.445
    int_0 = 934
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(int_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1020():
    bytes_0 = b'\x86\x1d\xb3`F6L\xb7'
    float_0 = 2101.0
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.closest(float_0)
    var_1 = var_0.__repr__()

def test_case_1021():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'

def test_case_1022():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)

def test_case_1023():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_2)
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'

def test_case_1024():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()

def test_case_1025():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)

def test_case_1026():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_2)
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)

def test_case_1027():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)

def test_case_1028():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)

def test_case_1029():
    int_0 = -2878
    str_0 = 'T|,^lMO1B//A{E;vjo'
    binary_node_0 = module_0.BinaryNode(str_0)

def test_case_1030():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)

def test_case_1031():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_1 = var_0.__repr__()

def test_case_1032():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    none_type_3 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()

def test_case_1033():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    bytes_0 = b"G\xdfP*\x10\xcap:q?\xc1\x11D\xd3'"

def test_case_1034():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)

def test_case_1035():
    binary_tree_0 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()

def test_case_1036():
    binary_tree_0 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    float_0 = 549.0

def test_case_1037():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)

def test_case_1038():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1039():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_2)
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()

def test_case_1040():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_2)
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    set_0 = set()

def test_case_1041():
    binary_tree_0 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_2)

def test_case_1042():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()

def test_case_1043():
    pass

def test_case_1044():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    with pytest.raises(ValueError):
        binary_tree_5.getMax()

def test_case_1045():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_3)
    binary_tree_8 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_4)
    none_type_5 = None
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__iter__()

def test_case_1046():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()

def test_case_1047():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()

def test_case_1048():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1049():
    binary_tree_0 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_2)
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()

def test_case_1050():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)

def test_case_1051():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_2)
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    none_type_4 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_4)
    none_type_5 = None
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__iter__()
    bytes_0 = b''

def test_case_1052():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(none_type_3)
    none_type_4 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    none_type_5 = None
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.add(none_type_5)
    none_type_6 = None
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(none_type_6)
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__iter__()
    with pytest.raises(ValueError):
        binary_tree_6.getMin()

def test_case_1053():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()

def test_case_1054():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_2)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_13 = module_0.BinaryTree()
    var_9 = binary_tree_13.add(none_type_4)
    none_type_5 = None
    binary_tree_14 = module_0.BinaryTree()
    var_10 = binary_tree_14.add(none_type_5)
    binary_node_3 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    var_11 = binary_tree_15.__iter__()
    none_type_6 = None
    binary_tree_16 = module_0.BinaryTree()
    var_12 = binary_tree_16.add(none_type_6)
    none_type_7 = None
    binary_tree_17 = module_0.BinaryTree()
    var_13 = binary_tree_17.add(none_type_7)
    binary_node_4 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()

def test_case_1055():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_2)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(none_type_4)
    none_type_5 = None
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.add(none_type_5)
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_11 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_12 = binary_tree_16.__iter__()

def test_case_1056():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)

def test_case_1057():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.add(none_type_2)
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()

def test_case_1058():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.__iter__()
    with pytest.raises(ValueError):
        binary_tree_8.getMin()

def test_case_1059():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    none_type_4 = None
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    none_type_5 = None
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(none_type_5)

def test_case_1060():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()

def test_case_1061():
    binary_tree_0 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.__iter__()
    none_type_4 = None
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_14)
    none_type_5 = None
    binary_tree_15 = module_0.BinaryTree()
    var_14 = binary_tree_15.add(none_type_5)
    none_type_6 = None
    binary_tree_16 = module_0.BinaryTree()
    var_15 = binary_tree_16.add(none_type_6)
    binary_node_4 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_16 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    none_type_7 = None
    binary_tree_21 = module_0.BinaryTree()
    var_18 = binary_tree_21.add(none_type_7)

def test_case_1062():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_2)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_11)

def test_case_1063():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    with pytest.raises(ValueError):
        binary_tree_2.getMax()

def test_case_1064():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()

def test_case_1065():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_3.getMin()

def test_case_1066():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_9)

def test_case_1067():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()

def test_case_1068():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.add(none_type_2)
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    none_type_4 = None
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.add(none_type_4)
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__iter__()
    none_type_5 = None
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_12 = binary_tree_16.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    var_13 = binary_tree_4.add(binary_tree_11)

def test_case_1069():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()

def test_case_1070():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    int_0 = 911

def test_case_1071():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()

def test_case_1072():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    with pytest.raises(ValueError):
        binary_tree_0.getMax()

def test_case_1073():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    none_type_4 = None
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.add(none_type_4)
    none_type_5 = None
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.add(none_type_5)
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_9 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()

def test_case_1074():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(none_type_3)
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    none_type_5 = None
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.add(none_type_5)
    none_type_6 = None
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.add(none_type_6)
    binary_node_4 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    none_type_7 = None
    binary_tree_18 = module_0.BinaryTree()
    var_16 = binary_tree_18.add(none_type_7)
    binary_node_5 = module_0.BinaryNode(binary_tree_18)
    binary_tree_19 = module_0.BinaryTree()
    var_17 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_21 = module_0.BinaryTree()

def test_case_1075():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_3)
    none_type_4 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_4)
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()

def test_case_1076():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()

def test_case_1077():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_1)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_6 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_7 = binary_tree_11.add(none_type_3)
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_8 = binary_tree_12.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_9 = binary_tree_14.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_15 = module_0.BinaryTree()
    var_10 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_12 = binary_tree_17.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    binary_tree_18 = module_0.BinaryTree()
    var_13 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_15 = binary_tree_17.__contains__(binary_tree_19)
    assert var_15 is False
    binary_tree_21 = module_0.BinaryTree()
    var_16 = binary_tree_21.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()

def test_case_1078():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1079():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)

def test_case_1080():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_4.__contains__(binary_tree_6)
    assert var_6 is False
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(none_type_2)
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_11 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_12 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_16 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    none_type_4 = None
    binary_tree_19 = module_0.BinaryTree()
    var_18 = binary_tree_19.add(none_type_4)
    binary_node_4 = module_0.BinaryNode(binary_tree_19)
    binary_tree_20 = module_0.BinaryTree()
    var_19 = binary_tree_20.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_20 = binary_tree_21.__iter__()
    binary_node_5 = module_0.BinaryNode(var_20)

def test_case_1081():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    with pytest.raises(ValueError):
        binary_tree_3.getMax()

def test_case_1082():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_8.__contains__(binary_tree_10)
    assert var_10 is False
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_14 = binary_tree_16.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    none_type_3 = None
    binary_tree_17 = module_0.BinaryTree()
    var_15 = binary_tree_17.add(none_type_3)
    none_type_4 = None
    binary_tree_18 = module_0.BinaryTree()
    var_16 = binary_tree_18.add(none_type_4)
    none_type_5 = None
    binary_tree_19 = module_0.BinaryTree()
    var_17 = binary_tree_19.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_19)
    binary_tree_20 = module_0.BinaryTree()

def test_case_1083():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.add(none_type_2)
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    var_15 = binary_node_3.inorder()
    none_type_4 = None
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.add(none_type_4)
    none_type_5 = None
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_18 = binary_tree_19.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_20 = module_0.BinaryTree()
    var_19 = binary_tree_20.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_21 = binary_tree_19.__contains__(binary_tree_21)
    assert var_21 is False

def test_case_1084():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()

def test_case_1085():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()

def test_case_1086():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()

def test_case_1087():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'

def test_case_1088():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_16 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_19 = module_0.BinaryTree()
    var_18 = binary_tree_19.add(none_type_3)

def test_case_1089():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_4.__contains__(binary_tree_6)
    assert var_6 is False
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_1)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_12)

def test_case_1090():
    set_0 = set()
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)

def test_case_1091():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_3)
    none_type_4 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    var_13 = binary_node_4.inorder()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.__iter__()
    binary_node_5 = module_0.BinaryNode(var_17)

def test_case_1092():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_5.__contains__(binary_tree_7)
    assert var_9 is False
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_1)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.add(none_type_3)
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_15 = binary_tree_17.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)

def test_case_1093():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_1.__contains__(binary_tree_3)
    assert var_4 is False
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_1)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(none_type_3)
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.add(none_type_4)
    none_type_5 = None
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    none_type_6 = None
    binary_tree_18 = module_0.BinaryTree()
    var_16 = binary_tree_18.add(none_type_6)
    none_type_7 = None
    binary_tree_19 = module_0.BinaryTree()
    var_17 = binary_tree_19.add(none_type_7)
    binary_node_5 = module_0.BinaryNode(binary_tree_19)
    binary_tree_20 = module_0.BinaryTree()
    binary_tree_21 = module_0.BinaryTree()
    binary_tree_22 = module_0.BinaryTree()
    var_18 = binary_tree_22.__iter__()
    binary_tree_23 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    bool_0 = True

def test_case_1094():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_13)
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_12.__contains__(binary_tree_14)
    assert var_17 is False
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_18 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_20 = binary_tree_20.__iter__()
    binary_node_4 = module_0.BinaryNode(var_19)
    with pytest.raises(ValueError):
        binary_tree_13.getMax()

def test_case_1095():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    var_9 = binary_node_2.inorder()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(none_type_1)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    none_type_3 = None
    binary_tree_16 = module_0.BinaryTree()
    var_14 = binary_tree_16.add(none_type_3)
    none_type_4 = None
    binary_tree_17 = module_0.BinaryTree()
    var_15 = binary_tree_17.add(none_type_4)
    binary_node_4 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    var_16 = binary_tree_18.__iter__()

def test_case_1096():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_4.__contains__(binary_tree_6)
    assert var_6 is False
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_16 = binary_tree_16.add(none_type_2)
    none_type_3 = None
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_17.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_19 = module_0.BinaryTree()
    var_18 = binary_tree_19.add(none_type_4)
    none_type_5 = None
    binary_tree_20 = module_0.BinaryTree()
    var_19 = binary_tree_20.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_20)
    binary_tree_21 = module_0.BinaryTree()
    binary_tree_22 = module_0.BinaryTree()

def test_case_1097():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_2)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.add(none_type_4)
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_14 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    none_type_5 = None
    binary_tree_19 = module_0.BinaryTree()
    var_16 = binary_tree_19.add(none_type_5)
    none_type_6 = None
    binary_tree_20 = module_0.BinaryTree()
    var_17 = binary_tree_20.add(none_type_6)
    binary_node_4 = module_0.BinaryNode(binary_tree_20)
    binary_tree_21 = module_0.BinaryTree()
    binary_tree_22 = module_0.BinaryTree()
    binary_tree_23 = module_0.BinaryTree()
    var_18 = binary_tree_23.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_24 = module_0.BinaryTree()
    var_19 = binary_tree_24.__iter__()
    binary_tree_25 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_26 = module_0.BinaryTree()
    var_21 = binary_tree_23.__contains__(binary_tree_25)
    assert var_21 is False
    float_0 = 643.203727

def test_case_1098():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()

def test_case_1099():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_1)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_11 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_17 = module_0.BinaryTree()
    var_13 = binary_tree_17.add(none_type_4)
    none_type_5 = None
    binary_tree_18 = module_0.BinaryTree()
    var_14 = binary_tree_18.add(none_type_5)
    binary_node_3 = module_0.BinaryNode(binary_tree_18)
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    binary_tree_21 = module_0.BinaryTree()
    var_15 = binary_tree_21.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    var_16 = binary_node_4.inorder()

def test_case_1100():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()

def test_case_1101():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    var_6 = binary_node_1.inorder()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_1)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()

def test_case_1102():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)

def test_case_1103():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    with pytest.raises(ValueError):
        binary_tree_3.getMax()

def test_case_1104():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(dict_0)
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_3)
    none_type_4 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_12.__contains__(binary_tree_14)
    assert var_16 is False
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_19 = binary_tree_19.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_20 = module_0.BinaryTree()
    var_20 = binary_tree_20.__iter__()
    with pytest.raises(ValueError):
        binary_tree_12.getMax()

def test_case_1105():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()

def test_case_1106():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    list_0 = [binary_tree_2, var_2, var_1, binary_tree_0]
    var_3 = var_0.__iter__()

def test_case_1107():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_7.__contains__(binary_tree_9)
    assert var_14 is False
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_0)
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.add(none_type_2)
    none_type_3 = None
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_20 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()

def test_case_1108():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(dict_0)
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()

def test_case_1109():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_2)
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.add(none_type_4)
    none_type_5 = None
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    none_type_6 = None
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_tree_15.add(none_type_6)
    binary_node_3 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    var_14 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_15 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_19 = module_0.BinaryTree()

def test_case_1110():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    var_11 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_0)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    dict_1 = {}

def test_case_1111():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_6.__contains__(binary_tree_8)
    assert var_8 is False
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_10 = binary_node_3.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()

def test_case_1112():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(dict_0)
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_1)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    var_12 = binary_node_1.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_node_2 = module_0.BinaryNode(var_17)
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_20 = binary_tree_14.__contains__(binary_tree_16)
    assert var_20 is False
    none_type_3 = None
    binary_tree_18 = module_0.BinaryTree()
    var_21 = binary_tree_18.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_18)
    with pytest.raises(ValueError):
        binary_tree_17.getMax()

def test_case_1113():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()

def test_case_1114():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_2)
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    var_11 = binary_node_4.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.__iter__()
    binary_node_5 = module_0.BinaryNode(var_12)
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_15 = binary_tree_14.__contains__(binary_tree_16)
    assert var_15 is False
    with pytest.raises(ValueError):
        binary_tree_10.getMax()

def test_case_1115():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_2.inorder()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_16 = module_0.BinaryTree()
    var_16 = binary_tree_16.add(none_type_4)
    none_type_5 = None
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_17.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_18 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()

def test_case_1116():
    binary_tree_0 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()

def test_case_1117():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)

def test_case_1118():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()

def test_case_1119():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_2.__contains__(binary_tree_4)
    assert var_7 is False
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(none_type_0)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.add(none_type_3)
    none_type_4 = None
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    var_18 = binary_node_4.inorder()
    binary_tree_17 = module_0.BinaryTree()
    var_19 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()

def test_case_1120():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.add(none_type_3)

def test_case_1121():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    var_10 = binary_node_1.inorder()

def test_case_1122():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_10.__contains__(binary_tree_12)
    assert var_17 is False
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    dict_0 = {}
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.add(dict_0)
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_25 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    binary_tree_19 = module_0.BinaryTree()

def test_case_1123():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(dict_0)
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()

def test_case_1124():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_4.__contains__(binary_tree_6)
    assert var_6 is False
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_20 = binary_tree_18.__iter__()
    binary_node_1 = module_0.BinaryNode(var_19)
    none_type_0 = None
    binary_tree_19 = module_0.BinaryTree()
    var_21 = binary_tree_19.add(none_type_0)
    assert f'{type(binary_tree_19.root).__module__}.{type(binary_tree_19.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_19)
    dict_0 = {}
    binary_tree_20 = module_0.BinaryTree()
    var_22 = binary_tree_20.add(dict_0)
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_24.__iter__()

def test_case_1125():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_4.__contains__(binary_tree_6)
    assert var_6 is False
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.add(none_type_2)
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_12.__iter__()
    binary_tree_15 = module_0.BinaryTree()

def test_case_1126():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_21 = binary_tree_19.__iter__()
    binary_node_3 = module_0.BinaryNode(var_21)
    var_22 = binary_node_3.inorder()
    binary_tree_20 = module_0.BinaryTree()
    var_23 = binary_tree_20.__iter__()
    binary_node_4 = module_0.BinaryNode(var_23)
    binary_tree_21 = module_0.BinaryTree()
    var_24 = binary_tree_21.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    binary_tree_23 = module_0.BinaryTree()
    var_26 = binary_tree_20.__contains__(binary_tree_22)
    assert var_26 is False

def test_case_1127():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(dict_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    dict_1 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.add(dict_1)
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_16 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_19 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_23 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_24 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_26.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)

def test_case_1128():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    var_7 = binary_node_1.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_13)
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_19 = binary_tree_19.__iter__()
    binary_node_3 = module_0.BinaryNode(var_18)
    binary_tree_20 = module_0.BinaryTree()
    var_20 = binary_tree_20.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()

def test_case_1129():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_2.inorder()
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_1)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(dict_0)
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(none_type_3)
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_4)
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()

def test_case_1130():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_node_0 = module_0.BinaryNode(var_13)
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_8.__contains__(binary_tree_10)
    assert var_16 is False
    binary_tree_12 = module_0.BinaryTree()

def test_case_1131():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()

def test_case_1132():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(none_type_3)
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_13.__contains__(binary_tree_15)
    assert var_19 is False
    dict_0 = {}
    binary_tree_17 = module_0.BinaryTree()
    var_20 = binary_tree_17.add(dict_0)
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_24 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_26.__iter__()

def test_case_1133():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1134():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()

def test_case_1135():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    var_5 = binary_node_2.inorder()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.add(dict_0)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()

def test_case_1136():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_16 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_17 = var_16.__iter__()

def test_case_1137():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    var_7 = var_4.__repr__()

def test_case_1138():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()

def test_case_1139():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()

def test_case_1140():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)

def test_case_1141():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    var_3 = binary_node_0.inorder()

def test_case_1142():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(dict_0)
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_7.__contains__(binary_tree_9)
    assert var_11 is False
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)

def test_case_1143():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_3)
    none_type_4 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(dict_0)
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()

def test_case_1144():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_1.__contains__(binary_tree_3)
    assert var_4 is False
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    var_9 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = binary_tree_7.remove(var_9)

def test_case_1145():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_node_1.__repr__()

def test_case_1146():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.add(none_type_0)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_2)

def test_case_1147():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    dict_0 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.add(dict_0)
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.add(none_type_1)
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_node_3 = module_0.BinaryNode(var_18)
    var_19 = binary_node_3.inorder()
    none_type_3 = None
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.add(none_type_3)
    var_21 = binary_tree_15.remove(var_19)
    none_type_4 = None
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_17.add(none_type_4)
    none_type_5 = None
    binary_tree_18 = module_0.BinaryTree()
    var_23 = binary_tree_18.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_18)
    binary_tree_19 = module_0.BinaryTree()

def test_case_1148():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(dict_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)

def test_case_1149():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_4.__contains__(binary_tree_6)
    assert var_7 is False
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.add(none_type_1)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()

def test_case_1150():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    var_9 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()

def test_case_1151():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    var_4 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_3.remove(var_4)
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(dict_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    dict_1 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(dict_1)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    var_21 = var_17.__iter__()

def test_case_1152():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_4.__contains__(binary_tree_6)
    assert var_5 is False
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    var_7 = binary_node_2.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.add(none_type_2)
    none_type_3 = None
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_tree_15.add(none_type_3)
    none_type_4 = None
    binary_tree_16 = module_0.BinaryTree()
    var_14 = binary_tree_16.add(none_type_4)
    binary_node_4 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    var_15 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_16 = binary_tree_18.__iter__()
    binary_node_5 = module_0.BinaryNode(var_16)

def test_case_1153():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    var_4 = binary_node_0.inorder()

def test_case_1154():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    var_6 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = var_6.__iter__()

def test_case_1155():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)

def test_case_1156():
    complex_0 = 4278.791 + 1625.847j
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    var_0 = binary_node_0.__repr__()
    assert var_0 == '(L: None R:)'

def test_case_1157():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_16)
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_10.__contains__(binary_tree_12)
    assert var_19 is False
    binary_tree_14 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_14)
    var_20 = binary_node_2.inorder()
    binary_tree_15 = module_0.BinaryTree()

def test_case_1158():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()

def test_case_1159():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    var_3 = binary_tree_4.closest(var_2)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)

def test_case_1160():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1161():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_5.__contains__(binary_tree_7)
    assert var_8 is False
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()

def test_case_1162():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(dict_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.add(none_type_2)
    none_type_3 = None
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_23.__repr__()
    var_26 = var_23.__iter__()
    dict_1 = {}
    binary_tree_19 = module_0.BinaryTree()
    var_27 = binary_tree_19.add(dict_1)
    var_28 = var_27.__repr__()
    var_29 = var_28.__iter__()
    var_30 = var_29.__iter__()

def test_case_1163():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    var_8 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = binary_tree_4.remove(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()

def test_case_1164():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_0 = module_0.BinaryNode(var_13)
    var_14 = binary_node_0.inorder()
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_1)
    var_16 = binary_tree_10.remove(var_14)
    binary_tree_12 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_12)
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.add(none_type_2)
    none_type_3 = None
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()

def test_case_1165():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    var_5 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()

def test_case_1166():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(dict_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    dict_1 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(dict_1)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_7.__contains__(binary_tree_9)
    assert var_15 is False
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)

def test_case_1167():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()

def test_case_1168():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()

def test_case_1169():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    var_7 = binary_node_2.inorder()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.add(none_type_3)
    none_type_4 = None
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(none_type_4)
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    none_type_5 = None
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.add(none_type_5)
    dict_0 = {}
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()

def test_case_1170():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_3.__contains__(binary_tree_5)
    assert var_5 is False
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_2)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_3)
    none_type_4 = None
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_9 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    var_16 = binary_node_4.inorder()
    none_type_5 = None
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.add(none_type_5)
    var_18 = binary_tree_15.remove(var_16)
    none_type_6 = None
    binary_tree_17 = module_0.BinaryTree()
    var_19 = binary_tree_17.add(none_type_6)
    binary_node_5 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    var_20 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()

def test_case_1171():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'

def test_case_1172():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_4.__contains__(binary_tree_6)
    assert var_12 is False
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    with pytest.raises(ValueError):
        binary_tree_12.getMax()

def test_case_1173():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = binary_tree_1.remove(var_3)

def test_case_1174():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)

def test_case_1175():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()

def test_case_1176():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(dict_0)
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.add(none_type_2)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    dict_1 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.add(dict_1)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_13)

def test_case_1177():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(dict_0)
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    var_13 = binary_node_4.inorder()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_2)
    var_15 = binary_tree_11.remove(var_13)
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.add(none_type_3)
    none_type_4 = None
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.add(none_type_4)
    binary_node_5 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_6 = module_0.BinaryNode(set_1)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_17)
    var_19 = binary_node_8.inorder()

def test_case_1178():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_15)
    var_16 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_18 = binary_tree_7.remove(var_16)
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()
    var_20 = binary_tree_9.closest(var_19)
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.add(dict_0)
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    var_27 = var_26.__iter__()
    var_28 = var_27.__repr__()

def test_case_1179():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_1.getMin()

def test_case_1180():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    var_4 = binary_tree_1.remove(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()

def test_case_1181():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    var_3 = binary_node_2.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()

def test_case_1182():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_2 = module_0.BinaryNode(set_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    var_17 = binary_tree_11.closest(var_16)
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__iter__()
    binary_node_4 = module_0.BinaryNode(var_19)
    bytes_0 = b'N\xd6\x80\x8a2%V3w'

def test_case_1183():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_1)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_9.__contains__(binary_tree_11)
    assert var_13 is False
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    none_type_4 = None
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.add(none_type_4)
    none_type_5 = None
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.add(none_type_5)
    binary_node_6 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()

def test_case_1184():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    var_6 = binary_node_2.inorder()

def test_case_1185():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_13 = binary_tree_4.remove(var_4)

def test_case_1186():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    var_11 = binary_tree_9.closest(var_10)
    var_12 = var_9.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_10 = module_0.BinaryTree()

def test_case_1187():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_3 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_2)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.__iter__()

def test_case_1188():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_2)
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    var_9 = binary_tree_8.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    var_12 = binary_node_2.inorder()
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(none_type_3)
    var_14 = binary_tree_9.remove(var_12)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    var_20 = var_16.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()

def test_case_1189():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_node_0 = module_0.BinaryNode(var_16)
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    var_19 = binary_node_2.inorder()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_12 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.add(none_type_1)
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.add(none_type_2)
    binary_node_6 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_24.__iter__()
    binary_tree_18 = module_0.BinaryTree()

def test_case_1190():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_15)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_17)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    var_19 = binary_tree_13.closest(var_18)
    var_20 = var_17.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_23.__iter__()
    var_26 = var_22.__iter__()

def test_case_1191():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(dict_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_node_2 = module_0.BinaryNode(var_19)
    var_20 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.add(none_type_0)
    var_22 = binary_tree_13.remove(var_20)
    dict_1 = {}
    binary_tree_15 = module_0.BinaryTree()
    var_23 = binary_tree_15.add(dict_1)
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_25.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_27 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_28.__repr__()
    var_30 = var_29.__iter__()
    var_31 = var_29.__iter__()

def test_case_1192():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)

def test_case_1193():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    var_5 = binary_node_3.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    var_15 = binary_tree_10.closest(var_14)
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.add(none_type_2)
    none_type_3 = None
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.add(none_type_3)
    binary_node_5 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_21 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()

def test_case_1194():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    with pytest.raises(ValueError):
        binary_tree_2.getMax()

def test_case_1195():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_3 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    var_8 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = binary_tree_6.remove(var_8)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()

def test_case_1196():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    var_7 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    var_9 = binary_node_1.inorder()

def test_case_1197():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_9.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.add(none_type_0)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()

def test_case_1198():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_5.__contains__(binary_tree_7)
    assert var_6 is False

def test_case_1199():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.add(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()

def test_case_1200():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.add(none_type_2)
    none_type_3 = None
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__iter__()

def test_case_1201():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.add(none_type_0)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_11 = binary_node_3.inorder()
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(none_type_4)
    var_13 = binary_tree_10.remove(var_11)

def test_case_1202():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(dict_0)
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_1)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_8)

def test_case_1203():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_8)
    var_9 = binary_node_0.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    var_11 = binary_node_1.inorder()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    dict_0 = {var_11: binary_tree_2}

def test_case_1204():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    var_9 = binary_node_4.inorder()
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_3)
    var_11 = binary_tree_8.remove(var_9)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_13.__iter__()

def test_case_1205():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_1.__contains__(binary_tree_3)
    assert var_4 is False
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    var_11 = binary_node_1.inorder()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    bool_0 = True

def test_case_1206():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    var_9 = binary_node_2.inorder()
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_3)
    var_11 = binary_tree_7.remove(var_9)
    binary_tree_9 = module_0.BinaryTree()

def test_case_1207():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()

def test_case_1208():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)

def test_case_1209():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_11 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(none_type_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_15 = module_0.BinaryTree()
    var_11 = binary_tree_15.__iter__()
    binary_node_6 = module_0.BinaryNode(var_11)
    var_12 = binary_node_6.inorder()
    var_13 = binary_tree_13.__iter__()

def test_case_1210():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_1211():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(dict_0)
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(none_type_1)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_4)
    none_type_5 = None
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(none_type_5)
    binary_node_5 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_20 = binary_tree_17.__iter__()
    binary_node_6 = module_0.BinaryNode(var_19)

def test_case_1212():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    dict_1 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.add(dict_1)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_node_2 = module_0.BinaryNode(var_21)
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_25 = binary_tree_19.__iter__()
    binary_node_3 = module_0.BinaryNode(var_25)
    var_26 = binary_node_3.inorder()
    none_type_2 = None
    binary_tree_20 = module_0.BinaryTree()
    var_27 = binary_tree_20.add(none_type_2)
    var_28 = binary_tree_19.remove(var_26)

def test_case_1213():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)

def test_case_1214():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    with pytest.raises(ValueError):
        binary_tree_2.getMin()

def test_case_1215():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()

def test_case_1216():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    var_9 = binary_node_2.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_8.__contains__(binary_tree_10)
    assert var_13 is False
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(dict_0)
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_13 = module_0.BinaryTree()

def test_case_1217():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()

def test_case_1218():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()

def test_case_1219():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.add(none_type_0)
    var_8 = binary_tree_1.remove(var_6)

def test_case_1220():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    var_7 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = binary_tree_5.remove(var_7)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(dict_0)
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)

def test_case_1221():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)

def test_case_1222():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    var_6 = binary_tree_5.closest(var_5)
    var_7 = var_4.__iter__()

def test_case_1223():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    var_7 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = binary_tree_2.remove(var_7)

def test_case_1224():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    var_7 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    var_17 = binary_node_4.inorder()
    binary_tree_14 = module_0.BinaryTree()

def test_case_1225():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_0.__repr__()

def test_case_1226():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()

def test_case_1227():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_0)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)

def test_case_1228():
    binary_tree_0 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_0.getMax()

def test_case_1229():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    var_9 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    var_11 = binary_node_2.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()

def test_case_1230():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()

def test_case_1231():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    var_4 = binary_tree_4.closest(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_1232():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.closest(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_5.__contains__(binary_tree_7)
    assert var_10 is False
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_node_2 = module_0.BinaryNode(var_13)
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    var_15 = binary_tree_13.closest(var_14)
    var_16 = var_13.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_5 = module_0.BinaryNode(set_1)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_14 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_7 = module_0.BinaryNode(bytes_0)
    with pytest.raises(ValueError):
        binary_tree_6.getMax()

def test_case_1233():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    var_7 = binary_tree_9.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    var_15 = binary_tree_0.__iter__()

def test_case_1234():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_5.__contains__(binary_tree_7)
    assert var_10 is False
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    var_13 = binary_tree_10.closest(var_12)
    var_14 = var_11.__iter__()
    dict_0 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(dict_0)
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()

def test_case_1235():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    var_4 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_4.remove(var_4)

def test_case_1236():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)

def test_case_1237():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_5 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_2)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()

def test_case_1238():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    var_12 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()

def test_case_1239():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_1.__contains__(binary_tree_3)
    assert var_4 is False
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_1)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    var_7 = binary_node_2.inorder()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_2)
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    none_type_4 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_4)
    none_type_5 = None
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()

def test_case_1240():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    var_18 = binary_tree_13.closest(var_17)

def test_case_1241():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    with pytest.raises(ValueError):
        binary_tree_1.getMax()

def test_case_1242():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    var_12 = binary_node_3.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_11.__contains__(binary_tree_13)
    assert var_18 is False
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_22 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_24.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_27 = binary_tree_21.__iter__()

def test_case_1243():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()

def test_case_1244():
    binary_tree_0 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_1245():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()

def test_case_1246():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_3)
    none_type_4 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    dict_0 = {binary_node_1: none_type_3, none_type_3: binary_node_0, binary_tree_6: none_type_1}

def test_case_1247():
    binary_tree_0 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    var_20 = var_16.__iter__()
    list_0 = [var_3, binary_tree_3, var_7]

def test_case_1248():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_6.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_12.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_17)
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    var_19 = binary_tree_9.closest(var_18)
    var_20 = var_17.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_21)
    var_22 = binary_node_2.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_23 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    var_27 = var_25.__iter__()

def test_case_1249():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_2.inorder()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_11 = binary_tree_14.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    binary_tree_15 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    var_12 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    with pytest.raises(ValueError):
        binary_tree_2.getMin()

def test_case_1250():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()

def test_case_1251():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    bytes_0 = b'\xc4'
    var_4 = var_0.__repr__()

def test_case_1252():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_node_1 = module_0.BinaryNode(var_17)
    var_18 = binary_node_1.inorder()
    dict_0 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.add(dict_0)
    assert f'{type(binary_tree_14.root).__module__}.{type(binary_tree_14.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__iter__()
    none_type_0 = None
    binary_tree_15 = module_0.BinaryTree()
    var_23 = binary_tree_15.add(none_type_0)
    none_type_1 = None
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()

def test_case_1253():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    var_7 = binary_node_0.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_0.getMax()

def test_case_1254():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(dict_0)
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    var_10 = binary_node_4.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_12)
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_node_6 = module_0.BinaryNode(var_17)
    var_18 = binary_node_6.inorder()
    binary_tree_15 = module_0.BinaryTree()

def test_case_1255():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    dict_1 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(dict_1)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(none_type_0)
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    with pytest.raises(ValueError):
        binary_tree_2.getMax()

def test_case_1256():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_2.__contains__(binary_tree_4)
    assert var_6 is False
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    var_8 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = binary_tree_6.remove(var_8)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_1)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.add(none_type_3)
    none_type_4 = None
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.add(none_type_4)
    binary_node_4 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()

def test_case_1257():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()

def test_case_1258():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_6.__contains__(binary_tree_8)
    assert var_12 is False
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.add(none_type_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()

def test_case_1259():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    dict_0 = {binary_node_0: binary_tree_5, var_2: var_0, binary_tree_1: binary_tree_3}
    list_0 = [dict_0, var_2, binary_tree_2]
    tuple_0 = (list_0, var_2, var_3)

def test_case_1260():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    var_13 = binary_node_3.inorder()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(none_type_0)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_15.__repr__()
    var_20 = var_10.__repr__()

def test_case_1261():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(dict_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__repr__()
    assert var_17 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_17)
    assert binary_node_1.value == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_14 = module_0.BinaryTree()

def test_case_1262():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_17)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_18)
    var_19 = binary_node_4.inorder()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.add(none_type_2)
    var_21 = binary_tree_13.remove(var_19)
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_24.__iter__()
    binary_tree_17 = module_0.BinaryTree()

def test_case_1263():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_node_0 = module_0.BinaryNode(var_17)
    var_18 = binary_node_0.inorder()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_node_1 = module_0.BinaryNode(var_19)
    var_20 = binary_node_1.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__iter__()
    binary_node_2 = module_0.BinaryNode(var_21)
    tuple_0 = ()

def test_case_1264():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_1.__contains__(binary_tree_3)
    assert var_5 is False

def test_case_1265():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()

def test_case_1266():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_3.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    var_8 = binary_node_0.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    var_13 = binary_tree_10.closest(var_12)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    none_type_0 = None
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.add(none_type_0)
    assert f'{type(binary_tree_13.root).__module__}.{type(binary_tree_13.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__iter__()
    set_0 = set()

def test_case_1267():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    var_6 = var_5.__repr__()

def test_case_1268():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_4.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_18 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_5 = module_0.BinaryNode(set_1)
    binary_node_6 = module_0.BinaryNode(binary_node_5)

def test_case_1269():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_3 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__repr__()
    assert var_13 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_13)
    assert binary_node_3.value == 'binary:()'
    var_14 = var_11.__repr__()

def test_case_1270():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    var_5 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_2)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_18 = module_0.BinaryTree()
    var_17 = binary_tree_18.add(dict_0)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()

def test_case_1271():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()

def test_case_1272():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    var_12 = binary_node_1.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()

def test_case_1273():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    var_9 = binary_tree_7.closest(var_8)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.add(none_type_2)
    none_type_3 = None
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_16)
    var_18 = binary_node_5.inorder()
    binary_tree_17 = module_0.BinaryTree()
    var_19 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    var_22 = var_19.__iter__()

def test_case_1274():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_7)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_7 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_2)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    var_18 = binary_node_4.inorder()
    binary_tree_15 = module_0.BinaryTree()

def test_case_1275():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_node_4 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_4.inorder()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_3)
    none_type_4 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_4)
    binary_node_6 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.__iter__()
    var_13 = binary_tree_13.closest(var_12)

def test_case_1276():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_3)
    var_8 = var_7.__repr__()
    none_type_4 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_4)
    none_type_5 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.add(dict_0)
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()

def test_case_1277():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    dict_0 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()

def test_case_1278():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    var_5 = var_4.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()

def test_case_1279():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    var_7 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_8 = binary_node_2.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_10 = binary_node_3.inorder()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_2)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_3)
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()

def test_case_1280():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    var_8 = binary_tree_9.closest(var_7)
    var_9 = var_6.__iter__()
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(dict_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_0)
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    var_20 = var_16.__repr__()
    with pytest.raises(ValueError):
        binary_tree_1.getMin()

def test_case_1281():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(none_type_0)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()

def test_case_1282():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    with pytest.raises(ValueError):
        binary_tree_3.getMax()

def test_case_1283():
    binary_tree_0 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()

def test_case_1284():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    var_5 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = binary_tree_4.remove(var_5)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    var_9 = binary_node_1.inorder()

def test_case_1285():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()

def test_case_1286():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    var_14 = binary_tree_10.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = var_13.__repr__()

def test_case_1287():
    bytes_0 = b'\x8b\xd4`oW&\xb3'
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.remove(bytes_0)

def test_case_1288():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_2 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_10 = binary_node_3.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    var_13 = binary_tree_12.closest(var_12)
    var_14 = var_11.__iter__()
    var_15 = var_12.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_16)
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    var_18 = binary_tree_14.closest(var_17)
    var_19 = var_16.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__repr__()
    assert var_20 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_20)
    assert binary_node_6.value == 'binary:()'

def test_case_1289():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_2 = binary_node_1.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    var_4 = binary_tree_1.closest(var_3)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    var_16 = binary_tree_7.closest(var_15)
    var_17 = var_14.__iter__()
    var_18 = var_15.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_19)
    binary_tree_9 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()

def test_case_1290():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_12 = binary_node_3.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    var_14 = binary_node_5.inorder()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_node_6 = module_0.BinaryNode(var_15)
    var_16 = binary_node_6.inorder()
    none_type_1 = None
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.add(none_type_1)
    none_type_2 = None
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.add(none_type_2)
    binary_node_7 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()

def test_case_1291():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_1)
    var_9 = var_8.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    var_11 = binary_node_3.inorder()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_2)
    var_13 = binary_tree_7.remove(var_11)
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_12)

def test_case_1292():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_3.inorder()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_2)
    var_6 = binary_tree_4.remove(var_4)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_3)
    none_type_4 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_4)
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_node_6 = module_0.BinaryNode(binary_node_5)

def test_case_1293():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__repr__()
    assert var_19 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_19)
    assert binary_node_5.value == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.add(none_type_1)
    none_type_2 = None
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.add(none_type_2)
    binary_node_6 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.__iter__()
    none_type_3 = None
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_17.add(none_type_3)
    none_type_4 = None
    binary_tree_18 = module_0.BinaryTree()
    var_24 = binary_tree_18.add(none_type_4)
    binary_node_7 = module_0.BinaryNode(binary_tree_18)
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_25 = binary_tree_14.__iter__()

def test_case_1294():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    var_10 = binary_tree_4.closest(var_9)
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_16 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_18)
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_9.__contains__(binary_tree_11)
    assert var_21 is False
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_24.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_27 = binary_tree_16.__iter__()
    binary_node_2 = module_0.BinaryNode(var_27)
    binary_tree_17 = module_0.BinaryTree()
    var_28 = binary_tree_17.__iter__()
    var_29 = binary_tree_17.closest(var_28)
    var_30 = var_27.__iter__()
    var_31 = var_28.__repr__()

def test_case_1295():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_8)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    var_10 = binary_tree_5.closest(var_9)
    var_11 = var_8.__iter__()
    var_12 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_14.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_8 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_19 = binary_node_2.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_20)
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    var_22 = binary_tree_10.closest(var_21)
    var_23 = var_20.__iter__()

def test_case_1296():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    var_1 = binary_tree_1.closest(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_13.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_20.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_23 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_24 = binary_tree_12.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()

def test_case_1297():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    dict_1 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(dict_1)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_16 = binary_tree_6.add(none_type_0)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_18)
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_10.__contains__(binary_tree_12)
    assert var_21 is False

def test_case_1298():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    var_7 = binary_node_3.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(dict_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_4 = module_0.BinaryNode(set_1)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_9 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.add(none_type_0)
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.add(none_type_1)
    binary_node_6 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_node_7 = module_0.BinaryNode(var_18)
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    var_20 = binary_tree_14.closest(var_19)
    var_21 = var_18.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_16)
    binary_node_9 = module_0.BinaryNode(binary_node_8)
    with pytest.raises(ValueError):
        binary_tree_16.getMax()

def test_case_1299():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_3 = module_0.BinaryNode(set_1)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_0 = binary_node_3.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    var_6 = var_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_6 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    var_11 = binary_tree_7.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_node_7 = module_0.BinaryNode(var_13)
    var_14 = binary_node_7.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_node_8 = module_0.BinaryNode(var_16)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    var_20 = binary_tree_14.closest(var_19)

def test_case_1300():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()

def test_case_1301():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    var_7 = binary_tree_6.closest(var_6)

def test_case_1302():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_3.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    var_12 = binary_tree_9.closest(var_11)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    var_14 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_2)
    var_16 = binary_tree_10.remove(var_14)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    dict_0 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.add(dict_0)
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()

def test_case_1303():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_1)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    var_13 = binary_node_2.inorder()
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.add(none_type_3)
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    var_21 = binary_tree_17.__iter__()
    binary_node_4 = module_0.BinaryNode(var_21)
    var_22 = binary_node_4.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_18 = module_0.BinaryTree()

def test_case_1304():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()

def test_case_1305():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    var_11 = binary_tree_6.closest(var_10)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_16)
    var_17 = binary_node_5.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    binary_tree_16 = module_0.BinaryTree()

def test_case_1306():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    var_3 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(none_type_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_tree_16.add(none_type_2)
    none_type_3 = None
    binary_tree_17 = module_0.BinaryTree()
    var_19 = binary_tree_17.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    var_20 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_19)
    var_21 = binary_node_3.inorder()
    binary_tree_20 = module_0.BinaryTree()
    var_22 = binary_tree_20.__iter__()
    binary_node_4 = module_0.BinaryNode(var_22)
    var_23 = binary_node_4.inorder()

def test_case_1307():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(dict_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_8 = binary_node_4.inorder()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_1)
    var_10 = binary_tree_5.remove(var_8)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_5 = module_0.BinaryNode(bytes_0)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()

def test_case_1308():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()

def test_case_1309():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_6)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    var_8 = binary_tree_7.closest(var_7)

def test_case_1310():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()

def test_case_1311():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.add(none_type_0)
    binary_node_3 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'

def test_case_1312():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    var_9 = binary_tree_6.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_11)
    var_16 = binary_node_5.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_17)
    var_18 = binary_node_6.inorder()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_26 = binary_tree_19.__iter__()
    binary_node_7 = module_0.BinaryNode(var_25)

def test_case_1313():
    float_0 = -1378.0
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    binary_node_0 = module_0.BinaryNode(dict_0)

def test_case_1314():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.add(none_type_0)
    binary_node_0 = module_0.BinaryNode(binary_tree_9)
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.add(none_type_1)
    var_21 = var_20.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_22 = binary_node_1.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_23 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_23)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_24 = binary_tree_13.__repr__()
    assert var_24 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_24)
    assert binary_node_4.value == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_25 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_26 = var_25.__iter__()

def test_case_1315():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()

def test_case_1316():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_node_2 = module_0.BinaryNode(binary_node_1)

def test_case_1317():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_9 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.add(none_type_1)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()

def test_case_1318():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    var_10 = binary_node_1.inorder()
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(dict_0)
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()

def test_case_1319():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_3 = module_0.BinaryNode(set_1)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()

def test_case_1320():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_3.closest(var_7)
    var_9 = var_6.__iter__()

def test_case_1321():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    binary_tree_8 = module_0.BinaryTree()

def test_case_1322():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_7 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(dict_0)
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    var_25 = var_22.__iter__()
    var_26 = var_22.__repr__()

def test_case_1323():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_node_5 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_4 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_7 = binary_tree_12.add(dict_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()

def test_case_1324():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()

def test_case_1325():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()

def test_case_1326():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_0)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    var_12 = binary_tree_10.closest(var_11)
    var_13 = var_10.__iter__()
    var_14 = var_11.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_5 = module_0.BinaryNode(set_1)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    var_15 = binary_node_5.inorder()

def test_case_1327():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_2)
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    var_8 = binary_tree_9.closest(var_7)
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.add(dict_0)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_4)
    none_type_5 = None
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.add(none_type_5)
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()

def test_case_1328():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_4 = binary_node_1.inorder()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_8)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    var_9 = binary_tree_9.closest(var_8)
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_10)
    var_11 = binary_node_7.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()

def test_case_1329():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    var_7 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_2)
    var_9 = binary_tree_7.remove(var_7)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    var_12 = binary_node_4.inorder()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_15 = binary_tree_18.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)

def test_case_1330():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'

def test_case_1331():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()

def test_case_1332():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    var_13 = binary_node_2.inorder()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    var_16 = binary_tree_13.closest(var_15)
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    none_type_3 = None
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.add(none_type_3)
    binary_tree_16 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_3)

def test_case_1333():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()

def test_case_1334():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    var_12 = binary_tree_4.closest(var_11)
    var_13 = var_10.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_15)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    dict_1 = {}
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.add(dict_1)
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_26.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_29 = binary_tree_16.__iter__()
    binary_node_4 = module_0.BinaryNode(var_29)
    binary_tree_17 = module_0.BinaryTree()
    var_30 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_31 = var_30.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_32 = binary_tree_16.__contains__(binary_tree_18)
    assert var_32 is False

def test_case_1335():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    var_4 = binary_node_0.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    var_7 = binary_tree_7.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = var_6.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__repr__()
    assert var_10 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_10)
    assert binary_node_4.value == 'binary:()'

def test_case_1336():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = binary_tree_4.getMax()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_14)
    var_14 = binary_node_5.inorder()

def test_case_1337():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    var_7 = binary_tree_8.closest(var_6)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    var_10 = binary_tree_10.closest(var_9)
    var_11 = var_8.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()

def test_case_1338():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    var_8 = binary_tree_5.closest(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    var_10 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_2)
    var_12 = binary_tree_6.remove(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(dict_0)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    binary_node_2 = module_0.BinaryNode(var_21)
    var_22 = binary_node_2.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_23 = binary_node_3.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__iter__()

def test_case_1339():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    var_4 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    var_17 = binary_tree_9.closest(var_16)
    var_18 = var_15.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)

def test_case_1340():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)

def test_case_1341():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()

def test_case_1342():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_tree_11 = module_0.BinaryTree()
    var_7 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_7.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_13.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_16)
    binary_node_5 = module_0.BinaryNode(binary_node_4)

def test_case_1343():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(dict_0)
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_3 = module_0.BinaryNode(set_1)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_7 = module_0.BinaryTree()

def test_case_1344():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = binary_tree_15.__iter__()

def test_case_1345():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_2.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_3.__contains__(binary_tree_5)
    assert var_6 is False

def test_case_1346():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_2.__contains__(binary_tree_4)
    assert var_4 is False
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_11 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(none_type_1)
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_11 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    none_type_3 = None
    binary_tree_17 = module_0.BinaryTree()
    var_13 = binary_tree_17.add(none_type_3)
    var_14 = binary_tree_17.getMax()
    none_type_4 = None
    binary_tree_18 = module_0.BinaryTree()
    var_15 = binary_tree_18.add(none_type_4)
    binary_node_5 = module_0.BinaryNode(binary_tree_18)
    none_type_5 = None
    binary_tree_19 = module_0.BinaryTree()
    var_16 = binary_tree_19.add(none_type_5)
    var_17 = var_16.__repr__()
    binary_tree_20 = module_0.BinaryTree()
    var_18 = binary_tree_20.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    with pytest.raises(ValueError):
        binary_tree_3.getMin()

def test_case_1347():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_9.__contains__(binary_tree_11)
    assert var_15 is False

def test_case_1348():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = binary_tree_2.getMax()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_1.inorder()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_1)
    var_6 = binary_tree_3.remove(var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_2)
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()

def test_case_1349():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    var_16 = binary_tree_11.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    with pytest.raises(ValueError):
        binary_tree_12.getMax()

def test_case_1350():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    bool_0 = True

def test_case_1351():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    var_4 = binary_tree_5.closest(var_3)

def test_case_1352():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()

def test_case_1353():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_3.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(dict_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.add(none_type_0)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_1)
    var_17 = var_16.__repr__()
    dict_1 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.add(dict_1)
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.__repr__()
    assert var_22 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_22)
    assert binary_node_3.value == 'binary:()'

def test_case_1354():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    var_12 = binary_tree_4.closest(var_11)
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    var_19 = var_15.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_20 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_10 = module_0.BinaryTree()
    var_25 = binary_tree_10.__repr__()
    assert var_25 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_25)
    assert binary_node_3.value == 'binary:()'

def test_case_1355():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    var_1 = binary_tree_2.closest(var_0)
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_2.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_3.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_0)
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    dict_0 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.add(dict_0)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_13.__repr__()

def test_case_1356():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()

def test_case_1357():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()

def test_case_1358():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    var_7 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    var_16 = binary_node_2.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__repr__()
    assert var_17 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_17)
    assert binary_node_3.value == 'binary:()'

def test_case_1359():
    binary_tree_0 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_0.getMax()

def test_case_1360():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__repr__()
    assert var_7 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_7)
    assert binary_node_0.value == 'binary:()'
    var_8 = binary_node_0.__repr__()
    assert var_8 == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.add(none_type_2)
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    none_type_3 = None
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_14)
    none_type_4 = None
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.add(none_type_4)
    var_17 = var_16.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_tree_16.__iter__()
    binary_node_3 = module_0.BinaryNode(var_18)
    var_19 = binary_node_3.inorder()
    binary_tree_17 = module_0.BinaryTree()

def test_case_1361():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.add(none_type_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_13 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__repr__()
    assert var_13 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_13)
    assert binary_node_5.value == 'binary:()'
    var_14 = binary_node_5.__repr__()
    assert var_14 == '(L: binary:() R:)'
    none_type_1 = None
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.add(none_type_1)
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_16 = binary_tree_16.add(none_type_2)
    binary_node_6 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_19 = module_0.BinaryTree()
    var_17 = binary_tree_19.add(none_type_3)

def test_case_1362():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_1.remove(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    var_6 = binary_node_1.__repr__()
    assert var_6 == '(L: binary:() R:)'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_1)
    var_8 = binary_tree_4.getMax()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_9 = binary_node_2.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(none_type_2)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_15)
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_12.__contains__(binary_tree_14)
    assert var_18 is False
    dict_0 = {var_7: none_type_0, binary_tree_2: binary_tree_3, int_0: var_2, var_17: binary_tree_6}
    var_19 = binary_tree_9.getMin()

def test_case_1363():
    complex_0 = -374.48838 + 3013.04j
    bool_0 = False
    binary_node_0 = module_0.BinaryNode(bool_0)

def test_case_1364():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    var_13 = binary_tree_8.closest(var_12)
    var_14 = var_11.__iter__()

def test_case_1365():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    var_3 = binary_node_0.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    var_7 = var_6.__repr__()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_2)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_10 = binary_node_2.inorder()
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_3)
    var_12 = binary_tree_5.remove(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()

def test_case_1366():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    var_6 = binary_tree_1.__contains__(binary_tree_1)
    assert var_6 is False
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_7.__contains__(binary_tree_9)
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.add(none_type_0)
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.add(none_type_1)
    var_20 = var_19.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_23.__iter__()
    var_26 = var_22.__iter__()

def test_case_1367():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    var_14 = var_10.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_15 = binary_tree_5.__repr__()
    assert var_15 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_15)
    assert binary_node_0.value == 'binary:()'
    var_16 = binary_node_0.__repr__()
    assert var_16 == '(L: binary:() R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_17 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_17)
    var_18 = binary_node_1.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_19)
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_20)
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    var_22 = binary_tree_10.closest(var_21)
    var_23 = var_20.__iter__()
    var_24 = var_21.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_25 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_25)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_5 = module_0.BinaryNode(bytes_0)
    binary_tree_14 = module_0.BinaryTree()
    var_26 = binary_tree_14.__iter__()
    binary_node_6 = module_0.BinaryNode(var_26)
    var_27 = binary_node_6.inorder()
    none_type_0 = None
    binary_tree_15 = module_0.BinaryTree()
    var_28 = binary_tree_15.add(none_type_0)
    var_29 = binary_tree_14.remove(var_27)
    bool_0 = True

def test_case_1368():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.__contains__(binary_tree_2)
    assert var_4 is False
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    var_6 = binary_node_1.__repr__()
    assert var_6 == '(L: binary:() R:)'

def test_case_1369():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_1.remove(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()

def test_case_1370():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    bytes_0 = b'Zx\xd8\x8b@\xea'
    var_5 = var_0.__repr__()

def test_case_1371():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    var_7 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    var_11 = binary_tree_6.closest(var_10)
    var_12 = var_9.__iter__()
    var_13 = var_10.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    var_15 = binary_node_3.inorder()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    var_17 = binary_tree_9.__contains__(binary_tree_9)
    assert var_17 is False
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_20.__iter__()
    var_23 = var_19.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_24 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_24)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_25 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    var_27 = var_26.__repr__()
    var_28 = var_27.__iter__()
    var_29 = var_28.__repr__()
    binary_tree_17 = module_0.BinaryTree()

def test_case_1372():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = binary_tree_4.getMax()
    tuple_0 = ()
    var_6 = var_5.__repr__()

def test_case_1373():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    var_3 = binary_tree_3.__contains__(binary_tree_3)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)

def test_case_1374():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_7.__contains__(binary_tree_9)
    assert var_10 is False
    with pytest.raises(ValueError):
        binary_tree_2.getMax()

def test_case_1375():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_1.inorder()
    var_5 = binary_tree_1.remove(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_5 = module_0.BinaryTree()

def test_case_1376():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    var_11 = binary_tree_11.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    var_15 = binary_tree_13.closest(var_14)

def test_case_1377():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()

def test_case_1378():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    var_2 = binary_tree_2.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()

def test_case_1379():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)

def test_case_1380():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    var_7 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_2)
    var_9 = binary_tree_6.remove(var_7)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_3)
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__repr__()
    assert var_21 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_21)
    assert binary_node_3.value == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_17.__iter__()
    binary_node_4 = module_0.BinaryNode(var_22)
    binary_tree_18 = module_0.BinaryTree()
    var_23 = binary_tree_18.__iter__()
    var_24 = binary_tree_18.closest(var_23)
    var_25 = var_22.__iter__()
    var_26 = var_23.__repr__()
    binary_tree_19 = module_0.BinaryTree()
    var_27 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_28.__repr__()
    var_30 = var_29.__iter__()
    var_31 = var_29.__iter__()

def test_case_1381():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_4.__contains__(binary_tree_6)
    assert var_6 is False
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    var_9 = binary_tree_9.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = var_8.__repr__()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_15 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_15 = binary_tree_16.add(none_type_2)
    none_type_3 = None
    binary_tree_17 = module_0.BinaryTree()
    var_16 = binary_tree_17.add(none_type_3)
    binary_node_6 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_19 = module_0.BinaryTree()
    var_17 = binary_tree_19.add(none_type_4)
    binary_node_7 = module_0.BinaryNode(binary_tree_19)
    none_type_5 = None
    binary_tree_20 = module_0.BinaryTree()
    var_18 = binary_tree_20.add(none_type_5)
    var_19 = var_18.__repr__()
    binary_tree_21 = module_0.BinaryTree()
    var_20 = binary_tree_21.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()
    var_25 = var_21.__iter__()
    binary_tree_23 = module_0.BinaryTree()
    var_26 = binary_tree_23.__iter__()
    binary_tree_24 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_26.__repr__()

def test_case_1382():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    var_6 = binary_node_1.__repr__()
    assert var_6 == '(L: binary:() R:)'

def test_case_1383():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_6.__contains__(none_type_1)
    assert var_4 is False

def test_case_1384():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()

def test_case_1385():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    var_8 = binary_tree_6.closest(var_7)
    var_9 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.add(dict_0)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    with pytest.raises(ValueError):
        binary_tree_4.getMin()

def test_case_1386():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.add(none_type_0)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()

def test_case_1387():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_7 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    var_10 = binary_tree_7.closest(var_9)
    var_11 = var_8.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()

def test_case_1388():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.__contains__(binary_tree_2)
    assert var_5 is False
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    var_15 = binary_tree_11.closest(var_14)
    var_16 = var_13.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_node_2 = module_0.BinaryNode(var_18)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = var_13.__repr__()

def test_case_1389():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    var_6 = binary_node_2.inorder()
    var_7 = binary_tree_4.remove(var_4)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()

def test_case_1390():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    with pytest.raises(ValueError):
        binary_tree_1.getMax()

def test_case_1391():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_1392():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: binary:() R:)'

def test_case_1393():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_1)
    var_7 = var_6.__repr__()

def test_case_1394():
    binary_tree_0 = module_0.BinaryTree()
    none_type_0 = None
    var_0 = binary_tree_0.closest(binary_tree_0)

def test_case_1395():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_6)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_15)
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    var_17 = binary_tree_10.closest(var_16)
    var_18 = var_15.__iter__()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.add(none_type_0)
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    var_22 = binary_node_2.inorder()

def test_case_1396():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(dict_0)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_16)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    var_18 = binary_tree_10.closest(var_17)
    var_19 = var_16.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__repr__()
    assert var_20 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_20)
    assert binary_node_2.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    var_21 = var_20.__contains__(var_20)
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_22)
    var_23 = binary_node_4.inorder()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_14)
    none_type_3 = None
    binary_tree_15 = module_0.BinaryTree()
    var_25 = binary_tree_15.add(none_type_3)
    var_26 = var_25.__repr__()

def test_case_1397():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()

def test_case_1398():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_11)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__repr__()
    assert var_13 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_13)
    assert binary_node_3.value == 'binary:()'
    var_14 = binary_node_3.__repr__()
    assert var_14 == '(L: binary:() R:)'
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"

def test_case_1399():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()

def test_case_1400():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()

def test_case_1401():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    var_11 = binary_tree_4.closest(var_10)
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_12)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    var_14 = binary_tree_8.__contains__(binary_tree_8)
    assert var_14 is False

def test_case_1402():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__repr__()
    assert var_17 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_17)
    assert binary_node_1.value == 'binary:()'
    var_18 = binary_node_1.__repr__()
    assert var_18 == '(L: binary:() R:)'
    var_19 = var_17.__repr__()
    assert var_19 == "'binary:()'"
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_20)
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_9.__contains__(binary_tree_11)
    assert var_23 is False
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_24 = binary_tree_13.add(none_type_1)
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_25 = binary_tree_14.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    var_26 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_27 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_29 = binary_tree_19.__iter__()
    binary_node_4 = module_0.BinaryNode(var_28)

def test_case_1403():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()

def test_case_1404():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()

def test_case_1405():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_9)
    assert binary_node_0.value == 'binary:()'
    var_10 = binary_node_0.__repr__()
    assert var_10 == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__repr__()
    assert var_12 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_12)
    assert binary_node_2.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    var_13 = var_12.__contains__(var_12)
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.add(dict_0)
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    var_18 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()
    var_20 = binary_tree_9.closest(var_19)
    binary_tree_10 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    var_21 = binary_node_4.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__repr__()
    assert var_22 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_24 = var_23.__iter__()

def test_case_1406():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    var_9 = binary_node_0.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_5.__contains__(binary_tree_7)
    assert var_13 is False
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__repr__()
    assert var_15 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_15)
    assert binary_node_2.value == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__repr__()
    assert var_16 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_16)
    assert binary_node_3.value == 'binary:()'
    var_17 = binary_node_3.__repr__()
    assert var_17 == '(L: binary:() R:)'
    var_18 = var_16.__repr__()
    assert var_18 == "'binary:()'"
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()

def test_case_1407():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    var_5 = binary_tree_1.__contains__(binary_tree_1)
    assert var_5 is False
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_0)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__repr__()
    assert var_11 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_11)
    assert binary_node_2.value == 'binary:()'
    var_12 = binary_node_2.__repr__()
    assert var_12 == '(L: binary:() R:)'
    var_13 = var_11.__repr__()
    assert var_13 == "'binary:()'"
    with pytest.raises(ValueError):
        binary_tree_8.getMin()

def test_case_1408():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()

def test_case_1409():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__repr__()
    assert var_7 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_7)
    assert binary_node_3.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    var_9 = binary_node_4.inorder()
    var_10 = binary_tree_7.remove(var_7)
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_11.__repr__()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.add(none_type_3)
    binary_node_5 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()

def test_case_1410():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_node_3 = module_0.BinaryNode(binary_node_2)

def test_case_1411():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_1.__contains__(binary_tree_3)
    assert var_8 is False
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    var_10 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_0)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(none_type_1)
    var_13 = var_12.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    dict_1 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.add(dict_1)
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_24 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_24.__repr__()
    var_27 = var_24.__iter__()
    var_28 = var_24.__repr__()
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_29 = binary_tree_13.add(none_type_2)
    none_type_3 = None
    binary_tree_14 = module_0.BinaryTree()
    var_30 = binary_tree_14.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_16 = module_0.BinaryTree()
    var_31 = binary_tree_16.add(none_type_4)
    var_32 = binary_tree_16.getMax()
    with pytest.raises(ValueError):
        binary_tree_8.getMin()

def test_case_1412():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_1 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_4 = module_0.BinaryNode(set_1)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()

def test_case_1413():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_3 = module_0.BinaryNode(set_1)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    var_5 = binary_tree_5.__contains__(binary_tree_5)
    assert var_5 is False
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()

def test_case_1414():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    var_6 = binary_node_1.__repr__()
    assert var_6 == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_8)
    assert binary_node_2.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_10 = binary_node_3.inorder()
    var_11 = binary_tree_5.remove(var_8)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__repr__()
    assert var_12 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_12)
    assert binary_node_4.value == 'binary:()'
    var_13 = binary_node_4.__repr__()
    assert var_13 == '(L: binary:() R:)'
    var_14 = var_12.__repr__()
    assert var_14 == "'binary:()'"
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()

def test_case_1415():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()

def test_case_1416():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    var_4 = binary_node_2.__repr__()
    assert var_4 == '(L: binary:() R:)'
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_5)
    assert binary_node_3.value == 'binary:()'
    var_6 = binary_node_3.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_13.__repr__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.add(none_type_2)
    none_type_3 = None
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.add(none_type_3)
    binary_node_5 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()

def test_case_1417():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_2)
    var_5 = binary_tree_3.remove(var_3)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    var_11 = binary_tree_7.closest(var_10)

def test_case_1418():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__repr__()
    assert var_10 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_10)
    assert binary_node_1.value == 'binary:()'
    var_11 = binary_node_1.__repr__()
    assert var_11 == '(L: binary:() R:)'
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__repr__()
    assert var_13 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_13)
    assert binary_node_2.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    var_14 = var_13.__contains__(var_13)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = binary_tree_7.getMax()

def test_case_1419():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_2.getMax()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(dict_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_9 = module_0.BinaryTree()

def test_case_1420():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_9)
    assert binary_node_1.value == 'binary:()'
    var_10 = binary_node_1.__repr__()
    assert var_10 == '(L: binary:() R:)'
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"

def test_case_1421():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    with pytest.raises(ValueError):
        binary_tree_2.getMax()

def test_case_1422():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_4)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_6 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_7)
    var_6 = binary_node_7.inorder()
    var_7 = binary_tree_5.__contains__(var_4)
    assert var_7 is False

def test_case_1423():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    none_type_0 = None

def test_case_1424():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__repr__()
    assert var_7 == 'binary:()'
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(dict_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_node_0 = module_0.BinaryNode(var_13)
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    var_15 = binary_tree_9.closest(var_14)
    var_16 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()

def test_case_1425():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_6 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_1.__contains__(binary_tree_3)
    assert var_9 is False
    dict_1 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(dict_1)
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_22)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.__iter__()
    var_24 = binary_tree_14.__contains__(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    var_25 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_27 = binary_tree_17.__iter__()

def test_case_1426():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    var_7 = binary_tree_2.__contains__(binary_tree_2)
    assert var_7 is False
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(dict_0)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()

def test_case_1427():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    var_13 = binary_node_1.inorder()
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(dict_0)
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_19)
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_11.__contains__(binary_tree_13)
    assert var_22 is False
    binary_tree_15 = module_0.BinaryTree()
    var_23 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_27 = binary_tree_17.__iter__()
    binary_node_3 = module_0.BinaryNode(var_27)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    int_0 = 3559
    list_0 = [int_0]

def test_case_1428():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    var_2 = binary_node_0.inorder()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_1)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_3)
    var_6 = var_5.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_8 = binary_node_3.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_7 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_6 = module_0.BinaryNode(set_1)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = var_14.__iter__()

def test_case_1429():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.add(none_type_2)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_node_3 = module_0.BinaryNode(binary_node_2)

def test_case_1430():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_1)
    var_11 = binary_tree_8.getMax()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.add(none_type_2)
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_5 = module_0.BinaryNode(bytes_0)
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__iter__()
    var_21 = binary_tree_15.__contains__(binary_tree_15)
    assert var_21 is False

def test_case_1431():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_2 = module_0.BinaryNode(set_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_5 = binary_node_2.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_6.__repr__()

def test_case_1432():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    with pytest.raises(ValueError):
        binary_tree_1.getMin()

def test_case_1433():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    var_12 = binary_tree_8.__contains__(binary_tree_8)
    assert var_12 is False
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.__iter__()
    binary_node_2 = module_0.BinaryNode(var_18)
    binary_tree_17 = module_0.BinaryTree()
    var_20 = binary_tree_17.__iter__()
    binary_node_3 = module_0.BinaryNode(var_20)
    var_21 = binary_node_3.inorder()
    none_type_1 = None
    binary_tree_18 = module_0.BinaryTree()
    var_22 = binary_tree_18.add(none_type_1)
    var_23 = binary_tree_17.remove(var_21)
    binary_tree_19 = module_0.BinaryTree()
    var_24 = binary_tree_19.__repr__()
    assert var_24 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_24)
    assert binary_node_4.value == 'binary:()'

def test_case_1434():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    var_11 = binary_node_3.inorder()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__repr__()
    assert var_12 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_12)
    assert binary_node_4.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    var_14 = binary_node_5.inorder()
    var_15 = binary_tree_11.remove(var_12)
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_node_6 = module_0.BinaryNode(var_16)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__iter__()
    var_21 = var_17.__repr__()
    var_22 = binary_tree_4.add(binary_tree_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1435():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_7 = module_0.BinaryTree()

def test_case_1436():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_2 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    var_6 = binary_tree_5.closest(var_5)
    var_7 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    var_9 = binary_node_4.inorder()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_1)
    var_11 = binary_tree_6.remove(var_9)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_2)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(none_type_3)
    binary_node_5 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__repr__()
    assert var_15 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_15)
    assert binary_node_6.value == 'binary:()'
    var_16 = binary_node_6.__repr__()
    assert var_16 == '(L: binary:() R:)'
    var_17 = var_15.__repr__()
    assert var_17 == "'binary:()'"

def test_case_1437():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_3.__contains__(binary_tree_5)
    assert var_8 is False
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    var_10 = binary_tree_7.__contains__(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    var_16 = binary_tree_11.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()
    var_24 = var_21.__iter__()

def test_case_1438():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_0 = module_0.BinaryNode(var_9)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    var_11 = binary_node_1.inorder()
    binary_tree_10 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_12 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_15 = module_0.BinaryTree()
    var_14 = binary_tree_15.__iter__()
    var_15 = binary_tree_15.closest(var_14)
    var_16 = var_13.__iter__()
    var_17 = binary_node_3.inorder()

def test_case_1439():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    var_6 = binary_node_2.__repr__()
    assert var_6 == '(L: binary:() R:)'

def test_case_1440():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_1441():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False

def test_case_1442():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_1)
    var_5 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__repr__()
    assert var_14 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_14)
    assert binary_node_1.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    var_15 = var_14.__contains__(var_14)
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.add(none_type_2)
    dict_0 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.add(dict_0)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    binary_node_3 = module_0.BinaryNode(var_21)
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.__iter__()
    var_23 = binary_tree_16.closest(var_22)
    var_24 = var_21.__iter__()
    var_25 = var_22.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_17)
    var_26 = binary_node_4.inorder()
    binary_tree_18 = module_0.BinaryTree()
    var_27 = binary_tree_18.__iter__()
    binary_node_5 = module_0.BinaryNode(var_27)
    binary_tree_19 = module_0.BinaryTree()
    var_28 = binary_tree_19.__iter__()
    var_29 = binary_tree_19.closest(var_28)
    var_30 = var_27.__iter__()
    var_31 = binary_node_5.inorder()

def test_case_1443():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_0, bool_1}
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.closest(none_type_0)

def test_case_1444():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_2 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    var_4 = binary_tree_5.closest(var_3)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    var_11 = binary_node_2.inorder()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_2)
    var_13 = binary_tree_8.remove(var_11)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_4)
    none_type_5 = None
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__repr__()
    assert var_18 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_18)
    assert binary_node_5.value == 'binary:()'
    var_19 = binary_node_5.__repr__()
    assert var_19 == '(L: binary:() R:)'
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.__repr__()
    assert var_20 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_20)
    assert binary_node_6.value == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    var_21 = binary_tree_17.__iter__()
    binary_node_7 = module_0.BinaryNode(var_21)
    var_22 = binary_node_7.inorder()
    var_23 = binary_tree_16.remove(var_20)

def test_case_1445():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__repr__()
    assert var_1 == 'binary:()'

def test_case_1446():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.add(none_type_0)
    var_8 = binary_tree_1.remove(var_6)
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_14 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_18)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__repr__()
    assert var_19 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_20)
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_10.__contains__(binary_tree_12)
    assert var_23 is False
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__iter__()
    var_25 = binary_tree_14.closest(var_24)

def test_case_1447():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)

def test_case_1448():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()

def test_case_1449():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    none_type_0 = None

def test_case_1450():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(dict_0)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    binary_tree_8 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.add(none_type_2)
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_2)
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()

def test_case_1451():
    binary_tree_0 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_1452():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_6)
    assert binary_node_1.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    var_8 = binary_tree_4.closest(var_7)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_9 = binary_node_2.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_10)
    assert binary_node_4.value == 'binary:()'
    var_11 = binary_node_4.__repr__()
    assert var_11 == '(L: binary:() R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    with pytest.raises(ValueError):
        binary_tree_1.getMin()

def test_case_1453():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_3.__repr__()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    dict_1 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.add(dict_1)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()

def test_case_1454():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_2.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_6)
    assert binary_node_3.value == 'binary:()'
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_12.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.add(none_type_0)
    var_18 = binary_tree_7.getMax()
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.add(none_type_1)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()
    var_24 = var_21.__iter__()

def test_case_1455():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_3 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__repr__()
    assert var_4 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_4)
    assert binary_node_4.value == 'binary:()'
    var_5 = binary_node_4.__repr__()
    assert var_5 == '(L: binary:() R:)'

def test_case_1456():
    binary_tree_0 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_1457():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_4)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    var_5 = var_4.__contains__(var_4)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    bytes_0 = b'\xdf\xac\xcdg\x01^\xbf\x9b\xba3_\xc5"'

def test_case_1458():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_3.__contains__(binary_tree_3)
    assert var_4 is False
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_5)
    assert binary_node_3.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    var_6 = var_5.__contains__(var_5)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()

def test_case_1459():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_7)
    assert binary_node_0.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    var_9 = binary_node_1.inorder()
    var_10 = binary_tree_5.remove(var_7)
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(dict_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    var_15 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    var_18 = binary_tree_9.closest(var_17)
    var_19 = var_16.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    var_21 = binary_node_0.__repr__()
    assert var_21 == '(L: binary:() R:)'

def test_case_1460():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    var_12 = binary_tree_7.closest(var_11)
    var_13 = var_10.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__repr__()
    assert var_15 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_15)
    assert binary_node_1.value == 'binary:()'
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.add(none_type_0)
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__repr__()
    assert var_19 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_19)
    assert binary_node_3.value == 'binary:()'
    var_20 = binary_node_3.__repr__()
    assert var_20 == '(L: binary:() R:)'
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_23.__iter__()
    var_26 = var_22.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_27 = binary_tree_16.__iter__()
    binary_node_4 = module_0.BinaryNode(var_27)
    binary_tree_17 = module_0.BinaryTree()
    var_28 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_29 = var_28.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_30 = binary_tree_16.__contains__(binary_tree_18)
    assert var_30 is False

def test_case_1461():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    var_2 = binary_tree_2.closest(var_1)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_3.inorder()
    var_6 = binary_tree_3.remove(var_3)

def test_case_1462():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_1.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    var_8 = binary_tree_4.closest(var_7)
    var_9 = var_6.__iter__()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_14 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    var_17 = binary_tree_7.closest(var_16)
    var_18 = var_15.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_24 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_24)
    var_25 = binary_node_4.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_26 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_26)
    binary_tree_13 = module_0.BinaryTree()

def test_case_1463():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()

def test_case_1464():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    none_type_0 = None

def test_case_1465():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(dict_0)
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__repr__()
    assert var_9 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == 'binary:()'
    var_10 = binary_node_2.__repr__()
    assert var_10 == '(L: binary:() R:)'
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.add(none_type_3)
    var_19 = var_18.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_20)
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    var_22 = binary_tree_13.closest(var_21)
    var_23 = var_20.__iter__()
    var_24 = binary_node_6.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_25 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    var_27 = var_26.__repr__()
    var_28 = var_27.__iter__()
    var_29 = var_27.__iter__()
    var_30 = var_26.__iter__()

def test_case_1466():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.add(none_type_0)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    var_9 = binary_tree_5.closest(var_8)
    var_10 = var_7.__iter__()

def test_case_1467():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    var_14 = binary_tree_7.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = var_13.__repr__()
    dict_1 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.add(dict_1)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    var_21 = binary_tree_8.__iter__()

def test_case_1468():
    binary_tree_0 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_1469():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_0)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    var_14 = binary_tree_8.closest(var_13)
    var_15 = var_12.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    var_21 = var_17.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_22)
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_24 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_24)
    binary_tree_14 = module_0.BinaryTree()

def test_case_1470():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_1)
    var_13 = var_12.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__repr__()
    assert var_14 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_14)
    assert binary_node_4.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_15)
    var_16 = binary_node_5.inorder()
    var_17 = binary_tree_11.remove(var_14)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_node_6 = module_0.BinaryNode(var_18)
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    var_22 = var_19.__iter__()
    var_23 = var_21.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_24.__repr__()
    var_27 = var_24.__iter__()

def test_case_1471():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_2.inorder()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_1)
    var_8 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    var_10 = binary_tree_6.closest(var_9)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_11 = binary_node_4.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    var_13 = binary_tree_7.__contains__(binary_tree_7)
    assert var_13 is False
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_node_6 = module_0.BinaryNode(var_15)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__iter__()
    var_21 = var_17.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_24.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_27 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_28.__repr__()
    var_30 = var_29.__iter__()
    var_31 = var_30.__repr__()

def test_case_1472():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    list_0 = [binary_tree_1]

def test_case_1473():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_1.__contains__(binary_tree_3)
    assert var_4 is False
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    var_6 = var_5.__contains__(var_5)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()

def test_case_1474():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()

def test_case_1475():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__repr__()
    assert var_9 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    var_11 = binary_node_3.inorder()
    var_12 = binary_tree_7.remove(var_9)
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__repr__()
    assert var_13 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_13)
    assert binary_node_4.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    var_14 = var_13.__contains__(var_13)

def test_case_1476():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    var_2 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_10.__iter__()
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()

def test_case_1477():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    var_11 = binary_tree_9.closest(var_10)
    var_12 = var_9.__iter__()
    var_13 = var_10.__repr__()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(none_type_1)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.add(dict_0)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    var_22 = binary_tree_14.closest(var_21)
    binary_tree_15 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_15)
    dict_1 = {}
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.add(dict_1)
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_25.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_27 = binary_tree_17.__repr__()
    assert var_27 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_27)
    assert binary_node_4.value == 'binary:()'
    var_28 = binary_node_4.__repr__()
    assert var_28 == '(L: binary:() R:)'
    var_29 = var_27.__repr__()
    assert var_29 == "'binary:()'"
    bool_0 = False

def test_case_1478():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_3.inorder()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    var_6 = binary_node_4.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_11.__contains__(binary_tree_13)
    assert var_16 is False
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_22 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    var_25 = var_22.__iter__()
    var_26 = var_22.__repr__()
    with pytest.raises(ValueError):
        binary_tree_0.getMax()

def test_case_1479():
    float_0 = 1868.0
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.remove(float_0)

def test_case_1480():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.add(none_type_0)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    var_9 = binary_node_1.removeFromParent(binary_tree_2, var_8)
    with pytest.raises(ValueError):
        binary_tree_3.getMax()

def test_case_1481():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    var_3 = binary_tree_2.getMax()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_5.__contains__(binary_tree_7)
    assert var_9 is False
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)

def test_case_1482():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    var_8 = binary_tree_7.closest(var_7)
    var_9 = var_6.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__repr__()
    assert var_10 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    var_12 = binary_node_4.inorder()
    var_13 = binary_tree_8.remove(var_10)

def test_case_1483():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    var_6 = binary_node_0.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__repr__()
    assert var_13 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_13)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    var_14 = var_13.__contains__(var_13)
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__repr__()
    assert var_18 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_18)
    assert binary_node_3.value == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_19)
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    var_21 = binary_tree_12.closest(var_20)
    var_22 = var_19.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_12.__iter__()
    none_type_0 = None
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.add(none_type_0)
    binary_tree_15 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_0)
    binary_tree_16 = module_0.BinaryTree()
    var_25 = binary_tree_16.__repr__()
    assert var_25 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_25)
    assert binary_node_6.value == 'binary:()'
    var_26 = binary_node_6.__repr__()
    assert var_26 == '(L: binary:() R:)'
    dict_1 = {}
    binary_tree_17 = module_0.BinaryTree()
    var_27 = binary_tree_17.add(dict_1)
    var_28 = var_27.__repr__()
    var_29 = var_28.__iter__()
    var_30 = var_29.__iter__()
    var_31 = binary_tree_17.__iter__()

def test_case_1484():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__repr__()
    assert var_19 == 'binary:()'

def test_case_1485():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_5.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_12)
    var_18 = binary_node_6.inorder()
    list_0 = [binary_node_1]

def test_case_1486():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    var_6 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    var_11 = binary_tree_5.closest(var_10)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__repr__()
    assert var_12 == 'binary:()'
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(dict_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = binary_tree_7.__iter__()

def test_case_1487():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_1.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_9)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    var_11 = binary_node_2.inorder()
    var_12 = binary_tree_5.remove(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__repr__()
    assert var_13 == 'binary:()'
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.add(dict_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_18)
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    var_20 = binary_tree_10.closest(var_19)
    var_21 = var_18.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_10.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_13)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    none_type_0 = None
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.add(none_type_0)
    none_type_1 = None
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.add(none_type_1)
    binary_node_6 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    var_25 = binary_tree_16.__iter__()
    none_type_2 = None
    binary_tree_17 = module_0.BinaryTree()
    var_26 = binary_tree_17.add(none_type_2)
    binary_node_7 = module_0.BinaryNode(binary_tree_17)

def test_case_1488():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    var_13 = binary_node_0.removeFromParent(binary_tree_3, var_12)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_0)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    var_18 = binary_tree_11.closest(var_17)
    var_19 = var_16.__iter__()
    var_20 = var_17.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_21)
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.__iter__()
    var_23 = binary_tree_13.closest(var_22)
    var_24 = var_21.__iter__()
    var_25 = binary_node_5.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_26 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_27 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_29 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_30 = var_29.__iter__()
    var_31 = var_30.__repr__()
    var_32 = var_31.__iter__()
    var_33 = var_31.__iter__()
    var_34 = var_30.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_20)
    var_35 = binary_node_6.inorder()

def test_case_1489():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_0.closest(var_4)

def test_case_1490():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()

def test_case_1491():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()

def test_case_1492():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__repr__()
    assert var_16 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_16)
    assert binary_node_2.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__repr__()
    assert var_17 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_17)
    assert binary_node_3.value == 'binary:()'
    var_18 = binary_node_3.__repr__()
    assert var_18 == '(L: binary:() R:)'
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_26 = binary_tree_18.__iter__()
    binary_node_4 = module_0.BinaryNode(var_25)
    var_27 = binary_node_4.removeFromParent(binary_tree_15, var_26)
    binary_tree_19 = module_0.BinaryTree()
    var_28 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_29 = var_28.__iter__()
    var_30 = var_29.__repr__()
    var_31 = var_30.__iter__()
    var_32 = var_28.__repr__()

def test_case_1493():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_5 = binary_node_0.inorder()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_2 = module_0.BinaryNode(set_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_7)
    assert binary_node_5.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_6 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    var_9 = binary_node_6.inorder()
    var_10 = binary_tree_5.remove(var_7)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_0)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_1)
    binary_node_7 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.add(none_type_2)
    binary_node_8 = module_0.BinaryNode(binary_tree_11)

def test_case_1494():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_17.__iter__()

def test_case_1495():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()

def test_case_1496():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    var_14 = binary_tree_6.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = var_13.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_17)
    var_18 = binary_node_2.inorder()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_19)
    var_20 = binary_node_3.inorder()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.add(none_type_0)
    binary_tree_12 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_0)

def test_case_1497():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_node_1.__repr__()
    assert var_2 == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_1)
    var_5 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(dict_0)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    var_19 = var_17.__iter__()

def test_case_1498():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)

def test_case_1499():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__repr__()
    assert var_7 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_7)
    assert binary_node_1.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    var_9 = binary_tree_4.closest(var_8)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    var_12 = binary_node_3.inorder()
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_18)
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()

def test_case_1500():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    var_5 = binary_node_1.removeFromParent(binary_tree_2, var_4)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    var_8 = binary_tree_7.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_11 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_2)
    var_15 = binary_tree_12.getMax()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_13)
    var_16 = binary_node_6.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_17.__repr__()

def test_case_1501():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_7 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)

def test_case_1502():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    var_5 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.__iter__()
    var_10 = binary_tree_12.closest(var_9)
    var_11 = var_8.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.add(none_type_2)
    var_18 = binary_tree_16.getMax()
    binary_tree_17 = module_0.BinaryTree()
    var_19 = binary_tree_17.__iter__()
    binary_node_4 = module_0.BinaryNode(var_19)
    binary_tree_18 = module_0.BinaryTree()
    var_20 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_22 = binary_tree_17.__contains__(binary_tree_19)
    assert var_22 is False
    binary_tree_21 = module_0.BinaryTree()
    var_23 = binary_tree_21.__iter__()
    var_24 = binary_tree_21.__contains__(binary_tree_21)

def test_case_1503():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_node_1.__repr__()
    assert var_6 == '(L: ((),) R:)'
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_1504():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_1)
    var_6 = var_5.__repr__()
    bytes_0 = b'\xd0'
    var_7 = binary_tree_2.__iter__()

def test_case_1505():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_3 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_12 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_13)
    var_6 = binary_node_5.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_7 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_8 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_10 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    binary_tree_21 = module_0.BinaryTree()
    var_12 = binary_tree_21.__iter__()
    binary_node_6 = module_0.BinaryNode(var_11)
    with pytest.raises(ValueError):
        binary_tree_14.getMax()

def test_case_1506():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_0 = module_0.BinaryNode(var_14)
    var_16 = binary_node_0.removeFromParent(binary_tree_6, var_15)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()

def test_case_1507():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    var_6 = binary_tree_2.closest(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(none_type_0)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_node_1 = module_0.BinaryNode(var_17)
    var_18 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.add(none_type_2)
    var_20 = binary_tree_13.remove(var_18)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__repr__()
    assert var_21 == 'binary:()'
    var_22 = binary_node_2.__repr__()
    assert var_22 == '(L: ((),) R:)'
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.__repr__()
    assert var_23 == 'binary:()'
    with pytest.raises(ValueError):
        binary_tree_9.getMin()

def test_case_1508():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()

def test_case_1509():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    var_6 = binary_tree_7.closest(var_5)
    var_7 = var_4.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    var_9 = binary_tree_9.__contains__(binary_tree_9)
    assert var_9 is False
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()

def test_case_1510():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'

def test_case_1511():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    var_2 = binary_tree_1.closest(var_1)

def test_case_1512():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__repr__()
    assert var_15 == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__repr__()
    assert var_16 == 'binary:()'
    var_17 = binary_node_2.__repr__()
    assert var_17 == '(L: ((),) R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__repr__()
    assert var_18 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_18)
    assert binary_node_3.value == 'binary:()'
    var_19 = binary_node_3.__repr__()
    assert var_19 == '(L: binary:() R:)'
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_25 = binary_tree_14.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_14)
    none_type_3 = None
    binary_tree_15 = module_0.BinaryTree()
    var_26 = binary_tree_15.add(none_type_3)
    var_27 = var_26.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_28 = binary_tree_16.__iter__()
    binary_node_5 = module_0.BinaryNode(var_28)
    binary_tree_17 = module_0.BinaryTree()
    var_29 = binary_tree_17.__iter__()
    var_30 = binary_tree_17.closest(var_29)
    var_31 = var_28.__iter__()
    binary_tree_18 = module_0.BinaryTree()

def test_case_1513():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = binary_tree_1.closest(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_9.__iter__()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(none_type_1)
    var_13 = binary_tree_5.getMax()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_14)
    var_15 = binary_node_0.inorder()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.add(none_type_2)
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.add(none_type_4)
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    none_type_5 = None
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.add(none_type_5)
    var_20 = var_19.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    var_22 = binary_tree_13.closest(var_21)
    with pytest.raises(ValueError):
        binary_tree_6.getMax()

def test_case_1514():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()

def test_case_1515():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    var_7 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_8 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    var_9 = binary_node_4.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    with pytest.raises(ValueError):
        binary_tree_4.getMin()

def test_case_1516():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()

def test_case_1517():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    var_15 = binary_tree_13.closest(var_14)
    var_16 = var_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    none_type_0 = None
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.add(none_type_0)
    assert f'{type(binary_tree_15.root).__module__}.{type(binary_tree_15.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()

def test_case_1518():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    var_9 = binary_tree_6.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = binary_node_0.inorder()
    var_12 = var_9.__repr__()

def test_case_1519():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.add(none_type_2)
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_node_3.__repr__()
    assert var_8 == '(L: ((),) R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_9.__repr__()
    var_14 = var_13.__repr__()

def test_case_1520():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()

def test_case_1521():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_3.__contains__(binary_tree_3)
    assert var_4 is False
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    var_6 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = binary_tree_4.remove(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()

def test_case_1522():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_2 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_9)
    assert binary_node_3.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    var_15 = binary_tree_10.closest(var_14)
    var_16 = var_13.__iter__()
    var_17 = var_14.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_node_5 = module_0.BinaryNode(var_19)
    var_21 = binary_node_5.removeFromParent(binary_tree_11, var_20)
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    binary_tree_17 = module_0.BinaryTree()

def test_case_1523():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    list_0 = [binary_tree_2, none_type_1]

def test_case_1524():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_1)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_11 = module_0.BinaryTree()
    var_7 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__iter__()
    var_14 = binary_tree_14.closest(var_13)
    var_15 = var_12.__iter__()
    binary_tree_15 = module_0.BinaryTree()

def test_case_1525():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()

def test_case_1526():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_2.__contains__(binary_tree_4)
    assert var_5 is False

def test_case_1527():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_node_0.__repr__()
    assert var_11 == '(L: ((),) R:)'

def test_case_1528():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__repr__()
    assert var_11 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_11)
    assert binary_node_1.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    var_12 = var_11.__contains__(var_11)
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_tree_16.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_17 = module_0.BinaryTree()
    var_19 = binary_tree_17.__iter__()
    var_20 = binary_tree_17.closest(var_19)
    var_21 = var_18.__iter__()
    var_22 = binary_node_5.inorder()
    binary_tree_18 = module_0.BinaryTree()
    var_23 = binary_tree_18.__iter__()
    binary_node_6 = module_0.BinaryNode(var_23)
    var_24 = binary_node_6.inorder()
    none_type_2 = None
    binary_tree_19 = module_0.BinaryTree()
    var_25 = binary_tree_19.add(none_type_2)
    binary_node_7 = module_0.BinaryNode(binary_tree_19)
    none_type_3 = None
    binary_tree_20 = module_0.BinaryTree()
    var_26 = binary_tree_20.add(none_type_3)
    var_27 = var_26.__repr__()

def test_case_1529():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()

def test_case_1530():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(none_type_0)

def test_case_1531():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()

def test_case_1532():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()

def test_case_1533():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    var_7 = var_4.__iter__()
    var_8 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = binary_tree_8.closest(var_15)
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_24 = binary_tree_12.__repr__()
    assert var_24 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_24)
    assert binary_node_3.value == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_13)
    var_25 = var_24.__contains__(var_24)
    binary_tree_14 = module_0.BinaryTree()
    var_26 = binary_tree_14.__iter__()
    binary_node_5 = module_0.BinaryNode(var_26)
    binary_tree_15 = module_0.BinaryTree()
    var_27 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_28.__repr__()
    var_30 = var_29.__iter__()

def test_case_1534():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()

def test_case_1535():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_3.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()

def test_case_1536():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_3)
    var_6 = binary_tree_7.getMax()
    with pytest.raises(ValueError):
        binary_tree_5.getMax()

def test_case_1537():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_4 = binary_node_1.inorder()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_1)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_1)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_7 = binary_node_4.inorder()
    binary_tree_5 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_2)
    var_9 = binary_tree_6.getMax()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__repr__()
    assert var_17 == 'binary:()'
    var_18 = binary_tree_11.remove(var_17)
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_24.__repr__()
    var_27 = var_24.__iter__()
    var_28 = var_26.__iter__()

def test_case_1538():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()

def test_case_1539():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()

def test_case_1540():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__repr__()
    assert var_11 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_11)
    assert binary_node_2.value == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    var_13 = binary_tree_11.__contains__(binary_tree_11)
    assert var_13 is False
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_14 = binary_node_3.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__iter__()
    var_21 = binary_tree_15.closest(var_20)
    none_type_0 = None
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.add(none_type_0)
    assert f'{type(binary_tree_16.root).__module__}.{type(binary_tree_16.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_17.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()

def test_case_1541():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_3.inorder()
    var_6 = binary_tree_4.remove(var_3)
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()

def test_case_1542():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()

def test_case_1543():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    var_12 = binary_node_0.inorder()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    var_13 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    list_0 = [binary_node_1]

def test_case_1544():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    var_5 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.add(none_type_2)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.__repr__()
    assert var_9 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_9)
    assert binary_node_4.value == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_10)
    var_11 = binary_node_5.inorder()
    var_12 = binary_tree_12.remove(var_9)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_6 = module_0.BinaryNode(set_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_tree_15.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_16 = module_0.BinaryTree()
    var_14 = binary_tree_16.__iter__()
    binary_node_8 = module_0.BinaryNode(var_14)
    binary_tree_17 = module_0.BinaryTree()
    var_15 = binary_tree_17.__iter__()
    var_16 = binary_tree_17.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_20.__iter__()
    var_23 = var_21.__iter__()

def test_case_1545():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    var_6 = binary_tree_2.__contains__(binary_tree_2)
    assert var_6 is False
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_3.closest(var_8)
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_13)
    bool_0 = False

def test_case_1546():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_4 = var_3.__contains__(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_3.inorder()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_7.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()

def test_case_1547():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_4.__contains__(binary_tree_6)
    assert var_5 is False
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    var_7 = binary_node_2.inorder()
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(dict_0)
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    var_15 = binary_tree_11.closest(var_14)
    var_16 = var_13.__iter__()
    var_17 = binary_node_3.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__repr__()
    assert var_18 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_18)
    assert binary_node_4.value == 'binary:()'
    var_19 = binary_node_4.__repr__()
    assert var_19 == '(L: binary:() R:)'
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.__repr__()
    assert var_20 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_20)
    assert binary_node_5.value == 'binary:()'
    var_21 = binary_node_5.__repr__()
    assert var_21 == '(L: binary:() R:)'
    var_22 = var_20.__repr__()
    assert var_22 == "'binary:()'"
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_23.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_26 = binary_tree_16.__iter__()
    binary_node_6 = module_0.BinaryNode(var_26)
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_27 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    binary_tree_21 = module_0.BinaryTree()
    var_29 = binary_tree_21.__iter__()
    binary_node_7 = module_0.BinaryNode(var_28)

def test_case_1548():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(dict_0)
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_9.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__repr__()
    assert var_14 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_14)
    assert binary_node_3.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    var_15 = var_14.__contains__(var_14)

def test_case_1549():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_3.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__repr__()
    assert var_14 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_14)
    assert binary_node_2.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    var_16 = binary_node_3.inorder()
    var_17 = binary_tree_9.remove(var_14)

def test_case_1550():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    var_3 = binary_tree_3.closest(var_2)
    var_4 = var_1.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(dict_0)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__repr__()
    assert var_11 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_11)
    assert binary_node_4.value == 'binary:()'
    var_12 = binary_node_4.__repr__()
    assert var_12 == '(L: binary:() R:)'
    dict_1 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(dict_1)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()

def test_case_1551():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_2 = binary_tree_6.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_3 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_9 = module_0.BinaryTree()

def test_case_1552():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()

def test_case_1553():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()

def test_case_1554():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_15)
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    var_17 = binary_tree_8.closest(var_16)
    var_18 = var_15.__iter__()

def test_case_1555():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_7.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    var_13 = binary_tree_7.closest(var_12)
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_19)
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_10.__contains__(binary_tree_12)
    assert var_22 is False
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_14)
    none_type_3 = None
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.add(none_type_3)
    var_25 = var_24.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_26 = binary_tree_16.__repr__()
    assert var_26 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_26)
    assert binary_node_4.value == 'binary:()'
    float_0 = 2580.8343

def test_case_1556():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_7)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    var_9 = binary_node_2.inorder()
    var_10 = binary_tree_5.remove(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__repr__()
    assert var_11 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_11)
    assert binary_node_3.value == 'binary:()'
    var_12 = binary_node_3.__repr__()
    assert var_12 == '(L: binary:() R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__repr__()
    assert var_13 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_13)
    assert binary_node_4.value == 'binary:()'
    var_14 = binary_node_4.__repr__()
    assert var_14 == '(L: binary:() R:)'
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    var_17 = binary_tree_9.__contains__(binary_tree_9)
    assert var_17 is False
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_10.__contains__(binary_tree_12)
    none_type_0 = None
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.add(none_type_0)
    assert f'{type(binary_tree_14.root).__module__}.{type(binary_tree_14.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_15 = module_0.BinaryTree()
    var_23 = binary_tree_15.add(none_type_1)
    binary_node_6 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_24 = binary_tree_18.__iter__()
    binary_node_7 = module_0.BinaryNode(var_24)
    var_25 = binary_node_7.inorder()
    binary_tree_19 = module_0.BinaryTree()
    var_26 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_27.__repr__()
    var_29 = var_28.__iter__()
    var_30 = var_29.__repr__()
    binary_tree_21 = module_0.BinaryTree()

def test_case_1557():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_2)
    var_8 = var_7.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    var_11 = binary_tree_7.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()

def test_case_1558():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    var_2 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_2.getMax()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    var_5 = binary_node_2.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_11 = binary_node_3.removeFromParent(binary_tree_5, var_10)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_1)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(none_type_2)
    binary_tree_11 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_2)
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = binary_tree_14.closest(var_18)
    with pytest.raises(ValueError):
        binary_tree_6.getMin()

def test_case_1559():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_3 = module_0.BinaryNode(set_1)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_6 = binary_node_3.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    var_9 = binary_tree_7.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = binary_node_5.inorder()

def test_case_1560():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    var_2 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    var_7 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_10.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_6 = module_0.BinaryTree()

def test_case_1561():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    var_6 = binary_tree_4.closest(var_5)
    var_7 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    var_11 = binary_node_3.inorder()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__repr__()
    assert var_14 == 'binary:()'
    var_15 = binary_tree_11.remove(var_14)
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    var_21 = var_17.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.__iter__()
    binary_node_5 = module_0.BinaryNode(var_22)
    var_23 = binary_node_5.inorder()
    none_type_2 = None
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.add(none_type_2)
    var_25 = binary_tree_14.remove(var_23)

def test_case_1562():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    var_15 = binary_node_2.inorder()
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.add(none_type_1)
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_17)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    bytes_1 = b''
    bool_0 = True
    var_19 = binary_tree_10.remove(bool_0)

def test_case_1563():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__repr__()
    assert var_6 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_6)
    assert binary_node_1.value == 'binary:()'
    var_7 = binary_node_1.__repr__()
    assert var_7 == '(L: binary:() R:)'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    var_14 = binary_tree_10.closest(var_13)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__repr__()
    assert var_15 == 'binary:()'
    var_16 = binary_tree_11.remove(var_15)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    var_19 = binary_tree_13.closest(var_18)
    var_20 = var_17.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_14.getMax()

def test_case_1564():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(dict_0)
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()

def test_case_1565():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_3.closest(var_7)
    var_9 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    var_11 = binary_tree_4.closest(var_10)
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_15.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    var_23 = var_20.__iter__()
    var_24 = var_22.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_25 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_26 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_28 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_29 = var_28.__iter__()
    var_30 = var_29.__repr__()
    var_31 = var_30.__iter__()
    var_32 = var_30.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_19 = module_0.BinaryTree()
    var_33 = binary_tree_19.add(dict_0)
    assert f'{type(binary_tree_19.root).__module__}.{type(binary_tree_19.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_34 = var_33.__repr__()
    var_35 = var_34.__iter__()
    var_36 = var_35.__iter__()
    var_37 = var_36.__repr__()
    binary_tree_20 = module_0.BinaryTree()
    var_38 = binary_tree_20.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_39 = var_38.__iter__()
    var_40 = var_39.__repr__()
    var_41 = var_40.__iter__()
    var_42 = var_40.__iter__()
    bytes_0 = b'\x98\xf0<#\xfb![\\\x8d'

def test_case_1566():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_8.__iter__()

def test_case_1567():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    var_9 = binary_tree_5.remove(var_8)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__repr__()
    assert var_10 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_10)
    assert binary_node_2.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    var_11 = var_10.__contains__(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_8.__contains__(binary_tree_10)
    assert var_15 is False
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(dict_0)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_20 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_27.__repr__()
    binary_tree_18 = module_0.BinaryTree()

def test_case_1568():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_0)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    var_14 = var_10.__repr__()
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_1)
    dict_1 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(dict_1)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()

def test_case_1569():
    binary_tree_0 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_1570():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_3 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = binary_tree_3.closest(var_5)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    var_11 = binary_node_3.inorder()
    var_12 = binary_tree_5.remove(var_9)

def test_case_1571():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__repr__()
    assert var_6 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_6)
    assert binary_node_3.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    var_7 = var_6.__contains__(var_6)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__repr__()
    assert var_8 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_8)
    assert binary_node_5.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(var_9)
    var_10 = binary_node_6.inorder()
    var_11 = binary_tree_9.remove(var_8)
    with pytest.raises(ValueError):
        binary_tree_10.getMin()

def test_case_1572():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(dict_0)
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    dict_1 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(dict_1)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_11 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__iter__()
    var_13 = binary_tree_4.closest(var_12)
    var_14 = var_11.__iter__()
    var_15 = var_12.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_16 = binary_node_1.inorder()

def test_case_1573():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)

def test_case_1574():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    with pytest.raises(ValueError):
        binary_tree_0.getMax()

def test_case_1575():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_2.closest(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    var_11 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    var_12 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__repr__()
    assert var_15 == 'binary:()'
    var_16 = binary_node_5.__repr__()
    assert var_16 == '(L: ((),) R:)'
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__repr__()
    assert var_17 == 'binary:()'

def test_case_1576():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_node_1.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_node_2.__repr__()
    assert var_8 == '(L: ((),) R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_10 = binary_node_3.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    var_12 = binary_node_4.inorder()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_14 = binary_tree_8.remove(var_12)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    var_15 = binary_node_5.inorder()
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.add(dict_0)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.__iter__()
    binary_node_7 = module_0.BinaryNode(var_22)

def test_case_1577():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    var_14 = binary_node_1.removeFromParent(binary_tree_8, var_13)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    var_20 = var_16.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_node_3 = module_0.BinaryNode(var_21)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    var_25 = var_22.__iter__()
    var_26 = var_24.__iter__()
    bool_0 = False

def test_case_1578():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    var_6 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_2.__contains__(var_2)
    assert var_7 is False

def test_case_1579():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.add(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    var_12 = binary_tree_6.closest(var_11)
    var_13 = var_10.__iter__()
    var_14 = var_11.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.add(none_type_1)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__iter__()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_6 = module_0.BinaryNode(set_1)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_7.__contains__(binary_node_6)
    assert var_23 is False

def test_case_1580():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_8)
    assert binary_node_0.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_9)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    var_10 = var_9.__contains__(var_9)

def test_case_1581():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    var_7 = binary_tree_2.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = var_6.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__repr__()
    assert var_10 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_10)
    assert binary_node_1.value == 'binary:()'
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.add(none_type_0)
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    bool_0 = True

def test_case_1582():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_8.__iter__()
    var_11 = binary_tree_4.__repr__()
    assert var_11 == 'binary:()'

def test_case_1583():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_2)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    var_12 = binary_node_2.inorder()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)

def test_case_1584():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__repr__()
    assert var_7 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_7)
    assert binary_node_2.value == 'binary:()'
    var_8 = binary_node_2.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)

def test_case_1585():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_3)
    assert binary_node_0.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_4 = var_3.__contains__(var_3)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_8.__iter__()

def test_case_1586():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    var_5 = binary_tree_1.__repr__()
    assert var_5 == 'binary:()'

def test_case_1587():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()

def test_case_1588():
    binary_tree_0 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_0.getMax()

def test_case_1589():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()

def test_case_1590():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_5.closest(var_7)
    var_11 = binary_tree_4.add(binary_tree_6)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1591():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    var_1 = binary_node_2.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_3 = binary_node_4.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_6 = module_0.BinaryNode(binary_tree_3)

def test_case_1592():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = var_6.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__repr__()
    assert var_13 == 'binary:()'

def test_case_1593():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__repr__()
    assert var_3 == 'binary:()'
    var_4 = binary_tree_5.remove(var_3)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = binary_tree_8.getMax()
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_1)

def test_case_1594():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_1595():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_3 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    var_6 = binary_tree_5.closest(var_5)
    var_7 = var_4.__iter__()
    var_8 = binary_node_2.inorder()

def test_case_1596():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_2.getMax()
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_1597():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    var_12 = binary_node_0.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.__iter__()
    var_19 = binary_tree_7.closest(var_18)
    binary_tree_8 = module_0.BinaryTree()
    var_20 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_20)
    binary_tree_9 = module_0.BinaryTree()
    var_21 = binary_tree_9.__iter__()
    var_22 = binary_tree_9.closest(var_21)
    var_23 = var_20.__iter__()
    str_0 = '\t~xX$S\rQLR=dkM'

def test_case_1598():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False

def test_case_1599():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()

def test_case_1600():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = binary_tree_2.closest(var_3)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_8)
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_1601():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_2)
    var_4 = binary_tree_4.getMax()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_8.__repr__()
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(none_type_3)
    binary_tree_11 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_3)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_14 = binary_node_2.inorder()
    var_15 = binary_tree_7.__contains__(binary_tree_8)
    assert var_15 is False

def test_case_1602():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_node_2.__repr__()
    assert var_8 == '(L: ((),) R:)'

def test_case_1603():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_3.closest(var_3)
    var_5 = var_2.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_1)
    var_8 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()

def test_case_1604():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    with pytest.raises(ValueError):
        binary_tree_2.getMin()

def test_case_1605():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_4.__contains__(binary_tree_6)
    assert var_5 is False
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_2)
    var_8 = var_7.__repr__()

def test_case_1606():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_1607():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_2)
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_7 = binary_node_3.inorder()
    none_type_4 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_4)
    var_9 = binary_tree_7.remove(var_7)
    none_type_5 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_9)

def test_case_1608():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.add(none_type_0)
    var_5 = binary_tree_1.getMax()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_12 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    dict_1 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.add(dict_1)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_18 = binary_tree_6.__repr__()
    assert var_18 == 'binary:()'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)

def test_case_1609():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()

def test_case_1610():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()

def test_case_1611():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_5.__contains__(binary_tree_7)
    assert var_7 is False
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__repr__()
    assert var_8 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_8)
    assert binary_node_6.value == 'binary:()'
    var_9 = binary_node_6.__repr__()
    assert var_9 == '(L: binary:() R:)'
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_11)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()

def test_case_1612():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_6.__iter__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    var_12 = binary_node_3.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_13 = binary_node_4.inorder()

def test_case_1613():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()

def test_case_1614():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_5 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    var_6 = binary_node_2.removeFromParent(binary_tree_6, var_5)
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__iter__()
    var_9 = binary_tree_11.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = binary_node_3.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    var_18 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()
    var_22 = var_18.__repr__()
    binary_tree_19 = module_0.BinaryTree()
    var_23 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_24 = var_23.__iter__()

def test_case_1615():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_2)
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.__iter__()
    none_type_4 = None
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_tree_15.add(none_type_4)
    none_type_5 = None
    binary_tree_16 = module_0.BinaryTree()
    var_14 = binary_tree_16.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_15 = binary_tree_18.__repr__()
    assert var_15 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_15)
    assert binary_node_5.value == 'binary:()'
    binary_tree_19 = module_0.BinaryTree()
    var_16 = binary_tree_19.__iter__()
    binary_node_6 = module_0.BinaryNode(var_16)
    var_17 = binary_node_6.inorder()
    var_18 = binary_tree_18.remove(var_15)

def test_case_1616():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_2.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_6.__contains__(binary_tree_8)
    assert var_8 is False
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.__repr__()
    assert var_12 == 'binary:()'

def test_case_1617():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_2)
    none_type_3 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_4)
    var_6 = binary_tree_5.getMax()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__repr__()
    assert var_18 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_18)
    assert binary_node_2.value == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    var_19 = var_18.__contains__(var_18)

def test_case_1618():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__repr__()
    assert var_0 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_0)
    assert binary_node_2.value == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    var_2 = binary_node_3.__repr__()
    assert var_2 == '(L: ((),) R:)'

def test_case_1619():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_5.__iter__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_2 = module_0.BinaryNode(tuple_3)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    var_9 = binary_node_2.__repr__()
    assert var_9 == '(L: ((),) R:)'
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    var_20 = var_16.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_24 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_26.__iter__()
    var_29 = var_25.__iter__()
    tuple_4 = ()
    tuple_5 = (tuple_4,)
    binary_node_4 = module_0.BinaryNode(tuple_5)

def test_case_1620():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.add(none_type_0)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    var_22 = var_19.__iter__()
    var_23 = var_21.__iter__()
    var_24 = binary_tree_10.__repr__()
    assert var_24 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_25 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_27 = binary_tree_15.__iter__()
    binary_node_1 = module_0.BinaryNode(var_26)
    var_28 = binary_node_1.removeFromParent(binary_tree_12, var_27)

def test_case_1621():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__repr__()
    assert var_12 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_12)
    assert binary_node_2.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    var_14 = binary_node_3.inorder()
    var_15 = binary_tree_8.remove(var_12)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__repr__()
    assert var_16 == 'binary:()'
    var_17 = binary_node_4.__repr__()
    assert var_17 == '(L: ((),) R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__repr__()
    assert var_18 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_18)
    assert binary_node_5.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_12)
    var_19 = var_18.__contains__(var_18)
    with pytest.raises(ValueError):
        binary_tree_5.getMin()

def test_case_1622():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    var_11 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.add(none_type_0)
    var_13 = binary_tree_3.remove(var_11)

def test_case_1623():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    var_6 = var_4.__iter__()

def test_case_1624():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)

def test_case_1625():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_3.closest(var_3)
    var_5 = var_2.__iter__()
    var_6 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    var_9 = binary_tree_6.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    var_15 = binary_tree_10.closest(var_14)
    var_16 = var_13.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_7.getMin()

def test_case_1626():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()

def test_case_1627():
    none_type_0 = None

def test_case_1628():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()

def test_case_1629():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_3.inorder()
    var_5 = binary_tree_2.remove(var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_tree_6.remove(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    var_16 = binary_tree_7.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    var_18 = binary_node_4.inorder()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_11)
    var_19 = binary_node_5.inorder()

def test_case_1630():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.__contains__(binary_tree_1)
    assert var_3 is False

def test_case_1631():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()

def test_case_1632():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    var_7 = binary_node_2.inorder()
    var_8 = binary_tree_2.remove(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    var_16 = binary_tree_8.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_18)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    var_22 = var_19.__iter__()
    var_23 = var_19.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_26.__iter__()
    var_29 = var_25.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_30 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_31 = var_30.__iter__()
    var_32 = var_31.__repr__()
    var_33 = var_32.__iter__()
    var_34 = binary_tree_17.closest(var_31)
    binary_tree_19 = module_0.BinaryTree()
    var_35 = binary_tree_19.__repr__()
    assert var_35 == 'binary:()'
    var_36 = binary_tree_19.remove(var_35)

def test_case_1633():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_6 = binary_node_0.inorder()

def test_case_1634():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    var_3 = binary_node_2.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    var_16 = binary_tree_9.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = binary_tree_11.closest(var_19)
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__iter__()
    binary_node_6 = module_0.BinaryNode(var_23)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.add(none_type_0)
    assert f'{type(binary_tree_16.root).__module__}.{type(binary_tree_16.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_17 = module_0.BinaryTree()
    var_25 = binary_tree_17.add(none_type_1)
    binary_node_7 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_20 = module_0.BinaryTree()
    var_26 = binary_tree_20.add(none_type_2)
    binary_node_8 = module_0.BinaryNode(binary_tree_20)
    none_type_3 = None
    binary_tree_21 = module_0.BinaryTree()
    var_27 = binary_tree_21.add(none_type_3)
    var_28 = var_27.__repr__()

def test_case_1635():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_9.__iter__()
    var_12 = binary_tree_8.remove(binary_tree_3)

def test_case_1636():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_9)
    var_10 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()

def test_case_1637():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_8 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_0)
    var_10 = binary_tree_6.remove(var_8)
    with pytest.raises(ValueError):
        binary_tree_4.getMin()

def test_case_1638():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_3.closest(var_3)
    var_5 = var_2.__iter__()
    var_6 = binary_node_2.inorder()

def test_case_1639():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    var_5 = binary_tree_5.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    var_12 = binary_tree_12.closest(var_11)
    var_13 = var_10.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_node_3 = module_0.BinaryNode(var_18)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()

def test_case_1640():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    var_10 = binary_tree_5.closest(var_9)
    var_11 = var_8.__iter__()
    var_12 = binary_node_1.inorder()
    var_13 = binary_tree_3.__contains__(var_5)
    assert var_13 is False

def test_case_1641():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_17.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    var_23 = var_20.__iter__()
    var_24 = var_22.__iter__()
    var_25 = binary_tree_10.__repr__()
    assert var_25 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_26 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_26.__repr__()
    var_29 = var_26.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_0 = None
    binary_tree_14 = module_0.BinaryTree()
    var_30 = binary_tree_14.add(none_type_0)
    assert f'{type(binary_tree_14.root).__module__}.{type(binary_tree_14.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_15 = module_0.BinaryTree()
    var_31 = binary_tree_15.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()

def test_case_1642():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    var_4 = binary_tree_4.closest(var_3)
    var_5 = var_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_2)
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_17.add(none_type_4)
    none_type_5 = None
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_18)
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    binary_tree_21 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_21)

def test_case_1643():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    var_3 = binary_tree_3.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_7.__iter__()

def test_case_1644():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_3.closest(var_7)
    var_9 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_7.__contains__(binary_tree_9)
    assert var_15 is False
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__repr__()
    assert var_16 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_16)
    assert binary_node_5.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_12)
    var_17 = var_16.__contains__(var_16)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()

def test_case_1645():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_3)
    var_9 = var_8.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(none_type_4)
    binary_tree_9 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_4)
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    binary_tree_12 = module_0.BinaryTree()

def test_case_1646():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()

def test_case_1647():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    var_6 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()

def test_case_1648():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_1.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    var_2 = binary_node_2.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_2)
    assert binary_node_3.value == '(L: binary:() R:)'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_4)
    assert binary_node_4.value == 'binary:()'

def test_case_1649():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()

def test_case_1650():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()

def test_case_1651():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_5 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    var_8 = binary_tree_6.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = var_7.__repr__()

def test_case_1652():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    var_3 = binary_tree_5.closest(var_2)
    var_4 = var_1.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()

def test_case_1653():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    var_4 = binary_node_4.inorder()
    binary_node_5 = module_0.BinaryNode(binary_tree_5)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    var_6 = binary_tree_6.__contains__(binary_tree_6)
    assert var_6 is False
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()

def test_case_1654():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_4)
    assert binary_node_3.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    var_5 = binary_node_4.inorder()
    binary_node_5 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_6 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'

def test_case_1655():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_4)
    assert binary_node_3.value == 'binary:()'
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_6 = module_0.BinaryNode(tuple_3)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_node_6.__repr__()
    assert var_10 == '(L: ((),) R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__repr__()
    assert var_15 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_15)
    assert binary_node_7.value == 'binary:()'
    var_16 = binary_node_7.__repr__()
    assert var_16 == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_8 = module_0.BinaryNode(set_0)
    binary_node_9 = module_0.BinaryNode(binary_node_8)
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_node_4.__repr__()
    assert var_17 == '(L: binary:(L: None R:) R:)'

def test_case_1656():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.__repr__()
    assert var_3 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_3)
    assert binary_node_5.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__iter__()
    binary_node_6 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_6.inorder()
    var_6 = binary_tree_6.remove(var_3)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_2)
    binary_node_7 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_node_8 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_8.value).__module__}.{type(binary_node_8.value).__qualname__}' == 'builtins.generator'
    binary_tree_10 = module_0.BinaryTree()

def test_case_1657():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_4.__iter__()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__repr__()
    assert var_8 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_8)
    assert binary_node_4.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_9)
    var_10 = binary_node_5.inorder()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_2)
    var_12 = binary_tree_7.remove(var_10)
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_6 = module_0.BinaryNode(set_1)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_9 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(none_type_3)
    binary_node_8 = module_0.BinaryNode(binary_tree_10)
    none_type_4 = None
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.add(none_type_4)
    var_15 = var_14.__repr__()

def test_case_1658():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    var_10 = binary_node_0.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = binary_tree_7.getMax()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_17)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_21 = binary_tree_17.__iter__()
    binary_node_4 = module_0.BinaryNode(var_21)
    binary_tree_18 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_19 = module_0.BinaryTree()
    var_22 = binary_tree_19.add(dict_0)
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_24.__iter__()
    var_26 = binary_tree_19.__iter__()

def test_case_1659():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_15.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_node_0 = module_0.BinaryNode(var_20)
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    var_22 = binary_tree_10.closest(var_21)
    var_23 = var_20.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_12)
    var_24 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_13.getMin()

def test_case_1660():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: binary:() R:)'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_4 = binary_node_2.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_8 = binary_node_4.inorder()
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_1)
    var_10 = binary_tree_7.remove(var_8)

def test_case_1661():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = binary_tree_3.closest(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_9.__iter__()
    var_12 = binary_tree_5.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    var_14 = binary_tree_7.closest(var_13)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.add(none_type_2)
    var_18 = binary_tree_11.getMax()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()

def test_case_1662():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_2.closest(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_12.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_17)

def test_case_1663():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == 'binary:()'
    var_7 = binary_node_2.__repr__()
    assert var_7 == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__repr__()
    assert var_8 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_8)
    assert binary_node_3.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(var_9)
    var_10 = binary_node_4.inorder()
    var_11 = binary_tree_3.remove(var_8)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_5 = module_0.BinaryNode(bytes_0)
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    with pytest.raises(ValueError):
        binary_tree_3.getMin()

def test_case_1664():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__repr__()
    assert var_16 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_16)
    assert binary_node_6.value == 'binary:()'
    var_17 = binary_node_6.__repr__()
    assert var_17 == '(L: binary:() R:)'
    var_18 = var_16.__repr__()
    assert var_18 == "'binary:()'"
    binary_node_7 = module_0.BinaryNode(var_17)
    assert binary_node_7.value == '(L: binary:() R:)'
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.add(none_type_2)

def test_case_1665():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(list_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    list_1 = [var_0]
    none_type_0 = None
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    var_1 = binary_node_0.removeFromParent(none_type_0, none_type_0)
    var_2 = var_1.__repr__()

def test_case_1666():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_1)
    var_3 = var_2.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__repr__()
    assert var_4 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_4)
    assert binary_node_3.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_4.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_8.closest(var_8)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_12.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__iter__()
    var_21 = var_19.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_17.__iter__()
    binary_node_5 = module_0.BinaryNode(var_23)
    binary_tree_18 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_18)
    var_25 = binary_node_6.inorder()
    binary_tree_19 = module_0.BinaryTree()
    var_26 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_27 = var_26.__iter__()

def test_case_1667():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_3.closest(var_7)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    var_11 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    var_18 = binary_node_4.inorder()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_8)
    var_19 = binary_node_5.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_20.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_25 = binary_tree_11.__repr__()
    assert var_25 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_25)
    assert binary_node_6.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_26 = binary_tree_12.__iter__()
    binary_node_7 = module_0.BinaryNode(var_26)
    var_27 = binary_node_7.inorder()
    var_28 = binary_tree_11.remove(var_25)
    binary_tree_13 = module_0.BinaryTree()
    var_29 = binary_tree_13.__iter__()
    binary_node_8 = module_0.BinaryNode(var_29)
    binary_tree_14 = module_0.BinaryTree()
    var_30 = binary_tree_14.__iter__()
    var_31 = binary_tree_14.closest(var_30)
    var_32 = var_29.__iter__()
    with pytest.raises(ValueError):
        binary_tree_13.getMax()

def test_case_1668():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_6.__repr__()
    var_11 = binary_tree_7.__iter__()

def test_case_1669():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    var_3 = binary_node_0.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == '(L: binary:() R:)'
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    with pytest.raises(ValueError):
        binary_tree_1.getMin()

def test_case_1670():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_4.closest(var_6)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_node_7 = module_0.BinaryNode(var_16)
    var_17 = binary_node_7.inorder()
    none_type_1 = None
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.add(none_type_1)
    var_19 = binary_tree_13.remove(var_17)

def test_case_1671():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_11.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__repr__()
    assert var_16 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_16)
    assert binary_node_2.value == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_14)
    var_17 = var_16.__contains__(var_16)
    none_type_0 = None
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.add(none_type_0)
    assert f'{type(binary_tree_15.root).__module__}.{type(binary_tree_15.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    list_0 = [binary_tree_9, binary_tree_15]

def test_case_1672():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_9)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    var_11 = binary_tree_5.closest(var_10)
    binary_node_1 = module_0.BinaryNode(var_10)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(none_type_1)
    var_14 = var_13.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    var_16 = binary_node_4.inorder()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(none_type_2)
    var_18 = binary_tree_9.remove(var_16)
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_19)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__repr__()
    assert var_20 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_20)
    assert binary_node_6.value == 'binary:()'
    var_21 = binary_tree_11.__repr__()
    assert var_21 == 'binary:()'

def test_case_1673():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    var_11 = binary_tree_6.closest(var_10)
    var_12 = var_9.__iter__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_14 = binary_tree_7.getMax()
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.add(none_type_1)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__repr__()
    assert var_17 == 'binary:()'
    var_18 = binary_node_3.__repr__()
    assert var_18 == '(L: ((),) R:)'
    dict_0 = {}
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.add(dict_0)
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__iter__()
    var_23 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_26 = binary_tree_16.__repr__()
    assert var_26 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_26)
    assert binary_node_4.value == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_17)
    var_27 = var_26.__contains__(var_26)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_6 = module_0.BinaryNode(tuple_3)
    var_28 = binary_tree_13.getMax()

def test_case_1674():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_12.__repr__()

def test_case_1675():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__repr__()
    assert var_8 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_8)
    assert binary_node_3.value == 'binary:()'
    var_9 = binary_node_3.__repr__()
    assert var_9 == '(L: binary:() R:)'
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_9)
    assert binary_node_4.value == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_5 = module_0.BinaryNode(binary_tree_8)

def test_case_1676():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    var_6 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = binary_tree_2.remove(var_6)
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(dict_0)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_13 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    var_14 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_6)

def test_case_1677():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    var_5 = var_4.__contains__(var_4)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__iter__()

def test_case_1678():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()

def test_case_1679():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    with pytest.raises(ValueError):
        binary_tree_4.getMax()

def test_case_1680():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_3.closest(var_7)
    var_9 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    var_13 = binary_tree_6.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_17.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_20)
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    var_22 = binary_tree_10.closest(var_21)
    binary_node_3 = module_0.BinaryNode(var_21)
    binary_tree_11 = module_0.BinaryTree()
    var_23 = binary_tree_11.__repr__()
    assert var_23 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_23)
    assert binary_node_4.value == 'binary:()'
    var_24 = binary_node_4.__repr__()
    assert var_24 == '(L: binary:() R:)'
    var_25 = var_23.__repr__()
    assert var_25 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_24)
    assert binary_node_5.value == '(L: binary:() R:)'

def test_case_1681():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    tuple_0 = (var_9, binary_tree_2, var_11, var_2)

def test_case_1682():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()

def test_case_1683():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    var_7 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)

def test_case_1684():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    var_12 = binary_node_2.removeFromParent(binary_tree_3, var_11)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_17)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.add(none_type_0)
    binary_node_7 = module_0.BinaryNode(binary_tree_13)
    none_type_1 = None
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.add(none_type_1)
    var_20 = var_19.__repr__()

def test_case_1685():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_1.remove(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    var_6 = binary_node_1.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__repr__()
    assert var_11 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_11)
    assert binary_node_3.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    var_13 = binary_node_4.inorder()
    var_14 = binary_tree_8.remove(var_11)
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(var_15)
    var_16 = binary_node_5.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_19.__iter__()
    var_22 = binary_tree_10.add(var_14)

def test_case_1686():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_6.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__repr__()
    assert var_12 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_12)
    assert binary_node_2.value == 'binary:()'
    var_13 = binary_tree_7.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__repr__()
    assert var_14 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_14)
    assert binary_node_3.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    var_16 = binary_node_4.inorder()
    var_17 = binary_tree_11.remove(var_14)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_13.__contains__(binary_tree_15)
    assert var_21 is False
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_24.__iter__()
    var_27 = var_23.__iter__()
    dict_0 = {}
    binary_tree_19 = module_0.BinaryTree()
    var_28 = binary_tree_19.add(dict_0)
    var_29 = var_28.__repr__()
    var_30 = var_29.__iter__()
    var_31 = var_30.__iter__()
    var_32 = binary_tree_19.__iter__()

def test_case_1687():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    var_3 = binary_node_2.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__repr__()
    assert var_4 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_4)
    assert binary_node_3.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    var_6 = binary_node_4.inorder()
    var_7 = binary_tree_5.remove(var_4)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_node_6 = module_0.BinaryNode(var_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_7 = module_0.BinaryNode(tuple_1)
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_node_7.__repr__()
    assert var_11 == '(L: ((),) R:)'
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.__iter__()
    binary_node_8 = module_0.BinaryNode(var_12)
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__iter__()
    var_14 = binary_tree_14.closest(var_13)
    binary_node_9 = module_0.BinaryNode(var_13)
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.__iter__()
    var_16 = binary_tree_15.__contains__(binary_tree_15)
    assert var_16 is False
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.__repr__()
    assert var_17 == 'binary:()'
    binary_node_10 = module_0.BinaryNode(var_17)
    assert binary_node_10.value == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    binary_node_11 = module_0.BinaryNode(binary_tree_17)
    var_18 = var_17.__contains__(var_17)
    with pytest.raises(ValueError):
        binary_tree_2.getMin()

def test_case_1688():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    var_5 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_7)
    assert binary_node_3.value == 'binary:()'
    var_8 = binary_node_3.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_17.__repr__()
    assert var_24 == 'binary:()'
    var_25 = binary_tree_17.remove(var_24)

def test_case_1689():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()

def test_case_1690():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    var_7 = binary_node_1.inorder()
    var_8 = binary_tree_2.remove(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    var_10 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_12 = binary_tree_4.remove(var_10)
    var_13 = var_5.__iter__()
    var_14 = binary_tree_0.add(binary_node_0)

def test_case_1691():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_4.__iter__()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_2)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    var_11 = binary_node_3.inorder()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_11 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_11)
    var_12 = binary_node_6.inorder()
    var_13 = var_12.__repr__()
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_3)
    binary_tree_13 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(none_type_3)
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__repr__()
    assert var_15 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_15)
    assert binary_node_8.value == 'binary:()'
    var_16 = binary_node_8.__repr__()
    assert var_16 == '(L: binary:() R:)'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_9 = module_0.BinaryNode(tuple_1)
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__repr__()
    assert var_17 == 'binary:()'
    var_18 = binary_node_9.__repr__()
    assert var_18 == '(L: ((),) R:)'

def test_case_1692():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_node_1.__repr__()
    assert var_6 == '(L: ((),) R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_9.__iter__()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_16 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_24 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_26 = binary_tree_16.__iter__()
    binary_node_5 = module_0.BinaryNode(var_25)
    binary_tree_17 = module_0.BinaryTree()
    var_27 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_28.__repr__()
    var_30 = var_29.__iter__()
    var_31 = binary_tree_17.closest(var_28)

def test_case_1693():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_2.inorder()
    binary_tree_4 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)

def test_case_1694():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    var_3 = binary_node_0.__repr__()
    assert var_3 == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    var_5 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = binary_tree_3.remove(var_5)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__repr__()
    assert var_9 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_9)
    assert binary_node_3.value == 'binary:()'
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    var_16 = binary_tree_9.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_17)
    var_18 = binary_node_5.inorder()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_27.__repr__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_29 = binary_tree_19.__iter__()
    binary_node_6 = module_0.BinaryNode(var_29)
    binary_tree_20 = module_0.BinaryTree()
    var_30 = binary_tree_20.__iter__()
    var_31 = binary_tree_20.closest(var_30)
    var_32 = var_29.__iter__()
    binary_tree_21 = module_0.BinaryTree()

def test_case_1695():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_2.inorder()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_1)
    var_5 = binary_tree_3.remove(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    var_7 = binary_tree_5.__contains__(binary_tree_5)
    assert var_7 is False
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__repr__()
    assert var_8 == 'binary:()'
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_2)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()

def test_case_1696():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_3.closest(var_7)
    var_9 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__repr__()
    assert var_11 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_11)
    assert binary_node_1.value == 'binary:()'
    var_12 = binary_node_1.__repr__()
    assert var_12 == '(L: binary:() R:)'
    var_13 = var_11.__repr__()
    assert var_13 == "'binary:()'"
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    var_16 = binary_tree_7.closest(var_15)
    var_17 = var_14.__iter__()
    var_18 = var_15.__repr__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_20 = binary_node_4.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_21 = binary_tree_9.__repr__()
    assert var_21 == 'binary:()'
    var_22 = binary_tree_9.remove(var_21)
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_23 = binary_tree_10.add(none_type_1)
    str_0 = '~.zlsszCHr[:\x0bQpmF'

def test_case_1697():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.__contains__(binary_tree_2)
    assert var_4 is False
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_node_0.__repr__()
    assert var_11 == '(L: ((),) R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    var_13 = binary_node_1.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_14)
    assert binary_node_2.value == 'binary:()'
    var_15 = binary_node_2.__repr__()
    assert var_15 == '(L: binary:() R:)'
    var_16 = var_14.__repr__()
    assert var_16 == "'binary:()'"
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_17)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    var_18 = binary_node_4.inorder()
    var_19 = var_18.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_20)
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    var_22 = binary_tree_13.closest(var_21)
    var_23 = var_20.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_13.__iter__()
    none_type_0 = None
    binary_tree_15 = module_0.BinaryTree()
    var_25 = binary_tree_15.add(none_type_0)
    assert f'{type(binary_tree_15.root).__module__}.{type(binary_tree_15.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_6 = module_0.BinaryNode(binary_tree_15)

def test_case_1698():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_4.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__repr__()
    assert var_12 == 'binary:()'
    var_13 = binary_tree_7.remove(var_12)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    var_14 = binary_node_2.inorder()
    var_15 = var_14.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    var_20 = var_18.__iter__()
    var_21 = binary_tree_9.__repr__()
    assert var_21 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__iter__()
    binary_node_3 = module_0.BinaryNode(var_23)
    var_25 = binary_node_3.removeFromParent(binary_tree_11, var_24)
    binary_tree_15 = module_0.BinaryTree()
    var_26 = binary_tree_15.__repr__()
    assert var_26 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_26)
    assert binary_node_4.value == 'binary:()'
    var_27 = binary_node_4.__repr__()
    assert var_27 == '(L: binary:() R:)'
    var_28 = var_26.__repr__()
    assert var_28 == "'binary:()'"

def test_case_1699():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__repr__()
    assert var_3 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_3)
    assert binary_node_3.value == 'binary:()'
    var_4 = binary_node_3.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_tree_6.remove(var_6)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_26.__iter__()
    var_29 = var_25.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_30 = binary_tree_16.__iter__()
    binary_node_4 = module_0.BinaryNode(var_30)
    binary_tree_17 = module_0.BinaryTree()
    var_31 = binary_tree_17.__iter__()
    var_32 = binary_tree_17.closest(var_31)
    binary_node_5 = module_0.BinaryNode(var_31)
    var_33 = var_11.__repr__()

def test_case_1700():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_5 = binary_node_1.inorder()
    var_6 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_10.__iter__()

def test_case_1701():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    var_6 = binary_node_2.inorder()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_1)
    var_8 = binary_tree_6.remove(var_6)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    with pytest.raises(ValueError):
        binary_tree_2.getMax()

def test_case_1702():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__iter__()

def test_case_1703():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()

def test_case_1704():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_7 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_13.__repr__()
    with pytest.raises(ValueError):
        binary_tree_5.getMin()

def test_case_1705():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()

def test_case_1706():
    complex_0 = 637.3 - 2452.8j
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)

def test_case_1707():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_4.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_9)
    assert binary_node_1.value == 'binary:()'
    str_0 = ''

def test_case_1708():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    var_3 = binary_tree_3.__contains__(binary_tree_3)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_7 = binary_node_2.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    var_15 = binary_tree_12.closest(var_14)
    binary_node_5 = module_0.BinaryNode(var_14)
    none_type_4 = None
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.add(none_type_4)
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_6 = module_0.BinaryNode(set_1)
    binary_node_7 = module_0.BinaryNode(binary_node_6)

def test_case_1709():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    var_5 = binary_node_2.__repr__()
    assert var_5 == '(L: ((),) R:)'
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()

def test_case_1710():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(dict_0)
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_2.closest(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_6 = module_0.BinaryTree()

def test_case_1711():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()

def test_case_1712():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()

def test_case_1713():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__repr__()
    assert var_8 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_8)
    assert binary_node_2.value == 'binary:()'
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_12.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__repr__()
    assert var_18 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_18)
    assert binary_node_6.value == 'binary:()'
    var_19 = binary_node_6.__repr__()
    assert var_19 == '(L: binary:() R:)'
    var_20 = var_18.__repr__()
    assert var_20 == "'binary:()'"

def test_case_1714():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__repr__()
    assert var_0 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_0)
    assert binary_node_3.value == 'binary:()'
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_4 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_1)
    var_3 = var_2.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_5 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_6 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    var_8 = binary_tree_7.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = var_7.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_7 = module_0.BinaryNode(var_11)
    binary_tree_9 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_8 = module_0.BinaryNode(bytes_0)
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()

def test_case_1715():
    bytes_0 = b'\xd7'
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()

def test_case_1716():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_10.__iter__()
    with pytest.raises(ValueError):
        binary_tree_0.getMax()

def test_case_1717():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()

def test_case_1718():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    var_6 = binary_tree_5.closest(var_5)
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    var_9 = binary_tree_7.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    var_12 = binary_node_4.inorder()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_14 = binary_tree_8.remove(var_12)
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__repr__()
    assert var_15 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_15)
    assert binary_node_5.value == 'binary:()'
    var_16 = binary_node_5.__repr__()
    assert var_16 == '(L: binary:() R:)'
    var_17 = var_15.__repr__()
    assert var_17 == "'binary:()'"
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_node_6 = module_0.BinaryNode(var_18)
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    var_20 = binary_tree_12.closest(var_19)
    var_21 = var_18.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_23 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()

def test_case_1719():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()

def test_case_1720():
    pass

def test_case_1721():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    var_4 = binary_node_1.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_3)
    var_8 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    var_9 = binary_node_3.inorder()
    none_type_4 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_4)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_4)
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    dict_0 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()

def test_case_1722():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    none_type_0 = None

def test_case_1723():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_5 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__repr__()
    assert var_7 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_7)
    assert binary_node_3.value == 'binary:()'
    var_8 = binary_tree_3.__repr__()
    assert var_8 == 'binary:()'
    with pytest.raises(ValueError):
        binary_tree_2.getMax()

def test_case_1724():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)

def test_case_1725():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    var_6 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = binary_tree_2.remove(var_6)

def test_case_1726():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    var_6 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_7)
    assert binary_node_2.value == 'binary:()'
    var_8 = binary_node_2.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_8)
    assert binary_node_3.value == '(L: binary:() R:)'
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_tree_5.remove(var_10)
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    var_14 = binary_node_4.inorder()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(none_type_2)
    var_16 = binary_tree_6.remove(var_14)
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_17)
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    var_19 = binary_tree_9.closest(var_18)
    binary_node_6 = module_0.BinaryNode(var_18)
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_20)
    var_21 = binary_node_7.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__repr__()
    assert var_22 == 'binary:()'

def test_case_1727():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_2.inorder()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'

def test_case_1728():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_1)
    var_7 = var_6.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__repr__()
    assert var_8 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_8)
    assert binary_node_3.value == 'binary:()'
    var_9 = binary_node_3.__repr__()
    assert var_9 == '(L: binary:() R:)'
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_9)
    assert binary_node_4.value == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    var_11 = binary_node_5.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_12.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_7 = module_0.BinaryNode(tuple_1)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__repr__()
    assert var_17 == 'binary:()'
    var_18 = binary_node_7.__repr__()
    assert var_18 == '(L: ((),) R:)'

def test_case_1729():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_node_1.__repr__()
    assert var_2 == '(L: binary:() R:)'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    var_7 = binary_node_2.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    var_10 = binary_tree_5.closest(var_9)
    var_11 = var_8.__iter__()
    var_12 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__repr__()
    assert var_13 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_13)
    assert binary_node_4.value == 'binary:()'
    var_14 = binary_node_4.__repr__()
    assert var_14 == '(L: binary:() R:)'
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"

def test_case_1730():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_6)
    assert binary_node_0.value == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_node_1.__repr__()
    assert var_8 == '(L: ((),) R:)'
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_4.__contains__(binary_tree_6)
    assert var_12 is False
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    var_15 = binary_tree_9.closest(var_14)
    var_16 = var_13.__iter__()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()

def test_case_1731():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_2 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_4 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    var_5 = binary_node_3.removeFromParent(binary_tree_6, var_4)
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_6 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_7 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.add(none_type_1)
    var_14 = binary_tree_13.getMax()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__iter__()
    var_16 = binary_tree_14.closest(var_15)
    var_17 = var_15.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    var_19 = binary_node_5.inorder()
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.add(none_type_2)
    var_21 = binary_tree_15.remove(var_19)

def test_case_1732():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    var_3 = binary_tree_2.remove(var_2)
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    none_type_0 = None
    var_8 = var_4.__repr__()
    assert var_8 == '"\'binary:()\'"'

def test_case_1733():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    var_8 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_2)
    var_10 = binary_tree_4.remove(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    var_13 = binary_tree_7.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = var_16.__repr__()

def test_case_1734():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__repr__()
    assert var_12 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_12)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_13)
    var_14 = binary_node_2.inorder()
    var_15 = binary_tree_5.remove(var_12)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_17 = binary_tree_7.getMax()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__repr__()
    assert var_18 == 'binary:()'
    var_19 = binary_node_3.__repr__()
    assert var_19 == '(L: ((),) R:)'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_9)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.add(none_type_2)
    var_22 = var_21.__repr__()
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_23 = binary_tree_11.add(none_type_3)

def test_case_1735():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_2.remove(var_5)
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_9 = binary_node_3.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_17.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__repr__()
    assert var_20 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_21)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()

def test_case_1736():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_2.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    var_9 = binary_node_4.inorder()
    var_10 = var_9.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_11 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.__iter__()
    var_13 = binary_tree_14.closest(var_12)
    var_14 = var_11.__iter__()
    var_15 = var_12.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    var_20 = var_18.__iter__()

def test_case_1737():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    var_2 = binary_tree_1.remove(var_1)
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_7.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__repr__()
    assert var_10 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_10)
    assert binary_node_2.value == 'binary:()'

def test_case_1738():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'

def test_case_1739():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_node_6 = module_0.BinaryNode(var_12)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__repr__()
    assert var_13 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_13)
    assert binary_node_7.value == 'binary:()'
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.add(dict_0)
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.add(none_type_3)
    var_20 = binary_tree_13.getMax()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    var_22 = binary_tree_14.closest(var_21)
    var_23 = var_21.__repr__()

def test_case_1740():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    var_4 = var_3.__repr__()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_2)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_2)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_5)
    var_6 = binary_node_5.inorder()
    binary_node_6 = module_0.BinaryNode(binary_tree_5)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_7 = module_0.BinaryNode(set_0)
    binary_node_8 = module_0.BinaryNode(binary_node_7)

def test_case_1741():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_1.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__repr__()
    assert var_13 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_13)
    assert binary_node_0.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    var_14 = var_13.__contains__(var_13)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_17.__iter__()
    var_20 = binary_tree_11.__repr__()
    assert var_20 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_23.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_26 = binary_tree_15.__iter__()
    var_27 = binary_tree_15.closest(var_26)
    none_type_0 = None

def test_case_1742():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    var_10 = binary_tree_6.closest(var_9)
    binary_node_4 = module_0.BinaryNode(var_9)

def test_case_1743():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_3 = binary_node_0.inorder()
    var_4 = var_3.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_4.getMax()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    var_8 = binary_tree_5.closest(var_7)
    var_9 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    var_14 = binary_tree_9.closest(var_13)
    var_15 = var_12.__iter__()
    binary_tree_10 = module_0.BinaryTree()

def test_case_1744():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    var_6 = binary_node_2.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_6)
    assert binary_node_3.value == '(L: binary:() R:)'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()

def test_case_1745():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_10.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_node_1 = module_0.BinaryNode(var_19)
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    var_21 = binary_tree_12.closest(var_20)
    binary_node_2 = module_0.BinaryNode(var_20)
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_22)
    var_23 = binary_node_3.inorder()
    binary_tree_14 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)

def test_case_1746():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_1.remove(var_5)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.add(none_type_0)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    var_14 = binary_tree_7.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = binary_node_1.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    var_18 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_19.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_24 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    none_type_1 = None
    binary_tree_14 = module_0.BinaryTree()
    var_28 = binary_tree_14.add(none_type_1)
    none_type_2 = None
    binary_tree_15 = module_0.BinaryTree()
    var_29 = binary_tree_15.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()

def test_case_1747():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_6 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_7 = var_1.__repr__()

def test_case_1748():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.closest(var_3)
    var_5 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_6.__repr__()

def test_case_1749():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_0)
    var_9 = binary_tree_6.getMax()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    var_11 = binary_tree_7.closest(var_10)
    var_12 = var_10.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()
    var_22 = var_20.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_23.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    dict_1 = {}

def test_case_1750():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)

def test_case_1751():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    var_12 = binary_tree_7.closest(var_11)
    var_13 = var_10.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_15 = binary_tree_8.getMax()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    binary_tree_10 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.add(none_type_1)
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_19 = binary_node_4.inorder()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__repr__()
    assert var_20 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_20)
    assert binary_node_6.value == 'binary:()'
    var_21 = binary_node_6.__repr__()
    assert var_21 == '(L: binary:() R:)'
    var_22 = var_20.__repr__()
    assert var_22 == "'binary:()'"
    binary_node_7 = module_0.BinaryNode(var_21)
    assert binary_node_7.value == '(L: binary:() R:)'
    var_23 = binary_node_2.inorder()

def test_case_1752():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    var_9 = binary_node_4.inorder()
    var_10 = binary_tree_5.getMax()

def test_case_1753():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__repr__()
    assert var_12 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_12)
    assert binary_node_3.value == 'binary:()'
    var_13 = binary_node_3.__repr__()
    assert var_13 == '(L: binary:() R:)'
    var_14 = var_12.__repr__()
    assert var_14 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_13)
    assert binary_node_4.value == '(L: binary:() R:)'
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__repr__()
    assert var_15 == 'binary:()'
    var_16 = binary_tree_9.remove(var_15)
    var_17 = var_15.__repr__()
    assert var_17 == "'binary:()'"
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_19 = binary_tree_10.getMax()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    var_21 = binary_tree_11.closest(var_20)
    var_22 = var_20.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_23)
    binary_tree_13 = module_0.BinaryTree()
    var_24 = binary_tree_13.__iter__()
    var_25 = binary_tree_13.closest(var_24)
    var_26 = var_23.__iter__()
    binary_tree_14 = module_0.BinaryTree()

def test_case_1754():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    var_5 = binary_node_2.removeFromParent(binary_tree_1, var_4)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_1)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    binary_tree_9 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)

def test_case_1755():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    var_3 = binary_node_1.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()

def test_case_1756():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_8 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    var_15 = binary_tree_12.closest(var_14)
    var_16 = var_13.__iter__()
    var_17 = binary_node_4.inorder()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__repr__()
    assert var_18 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_18)
    assert binary_node_5.value == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_14)
    var_19 = var_18.__contains__(var_18)
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__iter__()
    binary_node_7 = module_0.BinaryNode(var_21)
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_17.__iter__()
    var_23 = binary_tree_17.closest(var_22)
    var_24 = var_21.__iter__()
    tuple_0 = ()

def test_case_1757():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    var_6 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_10)

def test_case_1758():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_5 = module_0.BinaryNode(tuple_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__repr__()
    assert var_4 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_4)
    assert binary_node_6.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_8)
    var_10 = binary_node_7.inorder()
    binary_node_8 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_node_9 = module_0.BinaryNode(var_12)

def test_case_1759():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__repr__()
    assert var_13 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_13)
    assert binary_node_2.value == 'binary:()'
    var_14 = binary_node_2.__repr__()
    assert var_14 == '(L: binary:() R:)'
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"

def test_case_1760():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    var_4 = binary_tree_1.__repr__()
    assert var_4 == 'binary:()'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_1)
    var_6 = binary_tree_5.getMax()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    var_8 = binary_tree_6.closest(var_7)
    var_9 = var_7.__repr__()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_2)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    var_11 = binary_node_2.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__repr__()
    assert var_14 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_14)
    assert binary_node_4.value == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_17.__iter__()
    var_20 = binary_tree_14.__repr__()
    assert var_20 == 'binary:()'
    with pytest.raises(ValueError):
        binary_tree_11.getMax()

def test_case_1761():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = var_9.__repr__()
    bool_0 = True
    binary_node_2 = module_0.BinaryNode(bool_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)

def test_case_1762():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    var_6 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    var_8 = binary_tree_4.closest(var_7)
    var_9 = var_7.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    var_12 = binary_tree_6.closest(var_11)
    var_13 = var_10.__iter__()
    var_14 = binary_node_2.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    var_20 = var_18.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_21 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_22)
    binary_tree_13 = module_0.BinaryTree()
    var_24 = binary_tree_13.__repr__()
    assert var_24 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_25 = binary_tree_14.__iter__()
    binary_node_4 = module_0.BinaryNode(var_25)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_26 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_26.__repr__()
    var_29 = var_26.__iter__()

def test_case_1763():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)

def test_case_1764():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_21 = var_20.__repr__()

def test_case_1765():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    var_4 = binary_node_1.inorder()
    var_5 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = binary_tree_8.closest(var_10)
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()

def test_case_1766():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_2.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_6.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    var_23 = var_20.__iter__()

def test_case_1767():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    var_8 = var_5.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.__repr__()
    assert var_20 == 'binary:()'

def test_case_1768():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()

def test_case_1769():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)

def test_case_1770():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    var_12 = binary_tree_7.closest(var_11)
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    var_15 = binary_tree_9.closest(var_14)
    var_16 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()

def test_case_1771():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_2)
    assert binary_node_3.value == 'binary:()'
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    var_7 = binary_tree_7.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = var_6.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__repr__()
    assert var_13 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_13)
    assert binary_node_6.value == 'binary:()'
    var_14 = binary_node_6.__repr__()
    assert var_14 == '(L: binary:() R:)'
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(none_type_2)
    binary_tree_13 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(none_type_2)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_8 = module_0.BinaryNode(tuple_3)
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__repr__()
    assert var_17 == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_17)
    assert binary_node_9.value == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_node_10 = module_0.BinaryNode(var_18)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_19 = binary_node_10.inorder()
    var_20 = binary_tree_15.add(binary_node_10)

def test_case_1772():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_2.inorder()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_2)
    var_6 = binary_tree_5.remove(var_4)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    var_9 = binary_tree_8.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = var_8.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_13.__iter__()

def test_case_1773():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()

def test_case_1774():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_3.closest(var_3)
    with pytest.raises(ValueError):
        binary_tree_1.getMin()

def test_case_1775():
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_2.inorder()
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_1.__contains__(binary_tree_3)
    assert var_5 is False
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_6 = module_0.BinaryNode(var_12)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_13)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    var_15 = binary_tree_11.closest(var_14)
    var_16 = var_13.__iter__()
    var_17 = binary_node_7.inorder()

def test_case_1776():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    var_11 = binary_tree_11.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    var_15 = binary_tree_14.closest(var_14)
    var_16 = var_13.__iter__()
    var_17 = binary_node_3.inorder()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_15)
    var_18 = binary_node_4.inorder()
    binary_node_5 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    var_22 = var_19.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_23 = binary_tree_18.__repr__()
    assert var_23 == 'binary:()'
    var_24 = binary_tree_18.remove(var_23)
    var_25 = var_23.__repr__()
    assert var_25 == "'binary:()'"
    binary_tree_19 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_19)
    binary_tree_20 = module_0.BinaryTree()
    binary_tree_21 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_21)
    binary_node_8 = module_0.BinaryNode(binary_node_7)

def test_case_1777():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_node_0.inorder()
    var_9 = binary_tree_2.add(binary_node_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_0)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_1)
    var_12 = var_11.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_13 = binary_node_2.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_14)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_9)
    var_16 = binary_node_5.inorder()
    var_17 = var_16.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_18.__repr__()

def test_case_1778():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.__contains__(binary_tree_1)
    assert var_3 is False

def test_case_1779():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_1.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()

def test_case_1780():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_1)
    var_4 = var_3.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_5 = binary_node_2.inorder()
    var_6 = var_5.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_5 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    var_8 = binary_node_5.inorder()

def test_case_1781():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_2.inorder()
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_1782():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    var_13 = binary_tree_10.closest(var_12)
    var_14 = var_11.__iter__()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = var_15.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__iter__()

def test_case_1783():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(dict_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    var_9 = binary_tree_5.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    var_11 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    var_14 = binary_tree_8.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = binary_node_4.inorder()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.__iter__()
    binary_node_6 = module_0.BinaryNode(var_23)
    var_25 = binary_node_6.removeFromParent(binary_tree_12, var_24)
    binary_tree_16 = module_0.BinaryTree()
    var_26 = binary_tree_16.__repr__()
    assert var_26 == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    var_27 = binary_tree_17.__iter__()
    binary_node_7 = module_0.BinaryNode(var_27)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()

def test_case_1784():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_1.getMax()

def test_case_1785():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'

def test_case_1786():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_3 = binary_node_2.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_node_3.inorder()
    var_6 = binary_tree_5.add(binary_node_3)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    var_9 = binary_tree_9.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.add(none_type_0)
    none_type_1 = None
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_19 = binary_tree_18.__repr__()
    assert var_19 == 'binary:()'
    var_20 = binary_tree_18.remove(var_19)
    var_21 = var_19.__repr__()
    assert var_21 == "'binary:()'"
    binary_tree_19 = module_0.BinaryTree()
    var_22 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_23 = var_22.__iter__()

def test_case_1787():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_15)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_17 = binary_tree_11.getMax()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    var_19 = binary_tree_12.closest(var_18)
    var_20 = var_18.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    binary_node_2 = module_0.BinaryNode(var_21)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_24.__iter__()
    var_27 = var_25.__iter__()
    var_28 = binary_tree_17.__iter__()
    none_type_1 = None
    binary_tree_19 = module_0.BinaryTree()
    var_29 = binary_tree_19.add(none_type_1)

def test_case_1788():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()

def test_case_1789():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_16)
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_7.__contains__(binary_tree_9)
    assert var_19 is False
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    var_23 = var_20.__iter__()
    var_24 = var_22.__iter__()
    var_25 = binary_tree_11.__repr__()
    assert var_25 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_14)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_15 = module_0.BinaryTree()
    var_26 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_26.__repr__()
    var_29 = var_26.__iter__()
    var_30 = var_28.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_31 = binary_tree_17.__repr__()
    assert var_31 == 'binary:()'
    var_32 = binary_tree_17.remove(var_31)
    binary_tree_18 = module_0.BinaryTree()
    var_33 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_34 = var_33.__iter__()
    var_35 = var_34.__repr__()
    var_36 = var_35.__iter__()
    var_37 = binary_tree_18.closest(var_34)

def test_case_1790():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    var_11 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__repr__()
    assert var_12 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_12)
    assert binary_node_1.value == 'binary:()'
    var_13 = binary_node_1.__repr__()
    assert var_13 == '(L: binary:() R:)'
    var_14 = var_12.__repr__()
    assert var_14 == "'binary:()'"
    binary_tree_5 = module_0.BinaryTree()
    var_15 = binary_tree_5.__repr__()
    assert var_15 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_15)
    assert binary_node_2.value == 'binary:()'
    var_16 = binary_node_2.__repr__()
    assert var_16 == '(L: binary:() R:)'
    var_17 = var_15.__repr__()
    assert var_17 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_16)
    assert binary_node_3.value == '(L: binary:() R:)'
    none_type_0 = None
    var_18 = binary_tree_3.add(none_type_0)

def test_case_1791():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    var_15 = var_12.__repr__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_20.__iter__()
    var_23 = var_21.__iter__()
    var_24 = binary_tree_12.__iter__()

def test_case_1792():
    pass

def test_case_1793():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_7)
    assert binary_node_2.value == 'binary:()'
    var_8 = binary_tree_2.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_13.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_node_6 = module_0.BinaryNode(var_16)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    var_18 = binary_tree_12.closest(var_17)
    var_19 = var_16.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_node_7 = module_0.BinaryNode(var_20)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()
    var_24 = var_21.__iter__()
    var_25 = var_23.__iter__()
    var_26 = binary_tree_16.__repr__()
    assert var_26 == 'binary:()'
    binary_tree_18 = module_0.BinaryTree()

def test_case_1794():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_2.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    var_16 = var_13.__repr__()
    list_0 = []
    list_1 = [list_0, var_6]

def test_case_1795():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_5 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_9.__iter__()
    var_12 = binary_tree_3.__iter__()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.add(none_type_1)
    var_14 = binary_tree_5.getMax()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.__iter__()
    var_16 = binary_tree_6.closest(var_15)
    var_17 = var_15.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_18)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_node_2.inorder()
    with pytest.raises(ValueError):
        binary_tree_4.getMin()

def test_case_1796():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_5.__contains__(binary_tree_7)
    assert var_11 is False
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_12.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()

def test_case_1797():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    var_7 = binary_tree_7.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    var_11 = binary_tree_10.closest(var_10)
    var_12 = var_9.__iter__()
    var_13 = binary_node_3.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__repr__()
    assert var_14 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_14)
    assert binary_node_4.value == 'binary:()'
    var_15 = binary_node_4.__repr__()
    assert var_15 == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(none_type_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_17 = var_16.__repr__()
    bool_0 = True
    binary_node_5 = module_0.BinaryNode(bool_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    with pytest.raises(ValueError):
        binary_tree_3.getMax()

def test_case_1798():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1799():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    var_9 = binary_tree_5.remove(var_8)
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    var_12 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_14 = binary_tree_6.remove(var_12)

def test_case_1800():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    bool_0 = True
    binary_node_1 = module_0.BinaryNode(bool_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = binary_tree_2.closest(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_11 = module_0.BinaryTree()

def test_case_1801():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_4.__iter__()
    var_7 = binary_tree_3.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_node_2.__repr__()
    assert var_10 == '(L: ((),) R:)'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_1)
    var_12 = binary_tree_8.getMax()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    var_14 = binary_tree_9.closest(var_13)
    var_15 = var_13.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    var_17 = binary_node_3.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = binary_tree_11.closest(var_19)
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    var_27 = var_26.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_28 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_29 = var_28.__iter__()
    var_30 = var_29.__repr__()
    var_31 = var_30.__iter__()
    var_32 = var_28.__repr__()

def test_case_1802():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_4)
    assert binary_node_3.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    var_5 = var_4.__contains__(var_4)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_5)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_10)
    var_9 = binary_node_8.inorder()
    var_10 = var_9.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__repr__()
    assert var_11 == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_11)
    assert binary_node_9.value == 'binary:()'
    var_12 = binary_node_9.__repr__()
    assert var_12 == '(L: binary:() R:)'
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_node_10 = module_0.BinaryNode(var_13)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_16 = binary_tree_17.__iter__()
    binary_node_11 = module_0.BinaryNode(var_15)
    var_17 = binary_node_11.removeFromParent(binary_tree_14, var_16)
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.__iter__()
    binary_node_12 = module_0.BinaryNode(var_18)
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()

def test_case_1803():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_2.getMax()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_8)
    var_10 = binary_node_0.removeFromParent(binary_tree_3, var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__repr__()
    assert var_11 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_11)
    assert binary_node_1.value == 'binary:()'
    var_12 = binary_node_1.__repr__()
    assert var_12 == '(L: binary:() R:)'
    var_13 = var_11.__repr__()
    assert var_13 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_12)
    assert binary_node_2.value == '(L: binary:() R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    var_15 = binary_tree_8.remove(var_14)
    binary_tree_9 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    var_16 = binary_node_3.inorder()
    var_17 = var_16.__repr__()

def test_case_1804():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_3.getMin()

def test_case_1805():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    var_4 = binary_tree_5.closest(var_3)
    var_5 = var_2.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_10.__iter__()
    var_13 = binary_tree_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    var_19 = var_15.__iter__()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.__iter__()
    none_type_4 = None
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.add(none_type_4)
    binary_tree_16 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_4)
    binary_tree_17 = module_0.BinaryTree()
    var_25 = binary_tree_17.__iter__()
    binary_node_4 = module_0.BinaryNode(var_25)
    var_26 = binary_node_4.inorder()
    none_type_5 = None
    binary_tree_18 = module_0.BinaryTree()
    var_27 = binary_tree_18.add(none_type_5)
    var_28 = binary_tree_17.remove(var_26)
    binary_tree_19 = module_0.BinaryTree()
    var_29 = binary_tree_19.__repr__()
    assert var_29 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_29)
    assert binary_node_5.value == 'binary:()'
    binary_tree_20 = module_0.BinaryTree()
    var_30 = binary_tree_20.__iter__()
    binary_node_6 = module_0.BinaryNode(var_30)
    var_31 = binary_node_6.inorder()
    var_32 = binary_tree_19.remove(var_29)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_7 = module_0.BinaryNode(set_0)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    binary_tree_21 = module_0.BinaryTree()

def test_case_1806():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    var_11 = binary_tree_7.closest(var_10)
    var_12 = var_9.__iter__()
    var_13 = binary_node_0.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    var_18 = binary_node_1.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_node_2 = module_0.BinaryNode(var_20)
    var_22 = binary_node_2.removeFromParent(binary_tree_11, var_21)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_23 = binary_node_3.inorder()
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_25 = binary_tree_16.__repr__()
    assert var_25 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_25)
    assert binary_node_5.value == 'binary:()'
    var_26 = binary_node_5.__repr__()
    assert var_26 == '(L: binary:() R:)'
    binary_tree_17 = module_0.BinaryTree()
    var_27 = binary_tree_17.__iter__()
    binary_node_6 = module_0.BinaryNode(var_27)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_28 = binary_node_6.inorder()
    var_29 = binary_tree_17.add(binary_node_6)
    assert f'{type(binary_tree_17.root).__module__}.{type(binary_tree_17.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1807():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_4.closest(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__repr__()
    assert var_10 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_10)
    assert binary_node_0.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    var_11 = var_10.__contains__(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    var_13 = binary_tree_8.closest(var_12)
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    var_19 = var_17.__iter__()
    var_20 = binary_tree_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_24 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_24.__repr__()
    var_29 = binary_tree_0.add(var_6)

def test_case_1808():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_8)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    var_10 = binary_tree_7.closest(var_9)
    var_11 = var_8.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.add(dict_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    var_21 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_24.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_13.getMax()

def test_case_1809():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_2 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(dict_0)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__repr__()
    assert var_11 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    var_14 = binary_node_5.inorder()
    var_15 = var_13.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(var_16)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'

def test_case_1810():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_2 = binary_node_0.inorder()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'
    var_4 = binary_node_2.__repr__()
    assert var_4 == '(L: ((),) R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = binary_node_3.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_10)
    assert binary_node_4.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()

def test_case_1811():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_0 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    var_6 = var_4.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_9.__iter__()
    var_12 = binary_tree_5.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()

def test_case_1812():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()

def test_case_1813():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_0.__iter__()

def test_case_1814():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()

def test_case_1815():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'

def test_case_1816():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    var_11 = var_8.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__repr__()
    assert var_12 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_12)
    assert binary_node_0.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_13 = var_12.__contains__(var_12)
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    var_18 = var_16.__iter__()
    var_19 = binary_tree_6.__repr__()
    assert var_19 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_22)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_23.__repr__()
    binary_tree_18 = module_0.BinaryTree()
    var_26 = var_23.__repr__()
    binary_tree_19 = module_0.BinaryTree()
    var_27 = binary_tree_19.__iter__()
    var_28 = binary_tree_19.__contains__(binary_tree_19)
    assert var_28 is False

def test_case_1817():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_0.getMin()

def test_case_1818():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    var_6 = binary_tree_5.closest(var_5)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()

def test_case_1819():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    bytes_0 = b"\x17\xfb'\x88Fr$`\xc5\xb06v"

def test_case_1820():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.add(binary_node_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1821():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__iter__()
    var_5 = binary_tree_7.closest(var_4)
    binary_node_6 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_9)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_6 = binary_tree_10.add(none_type_2)
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_7 = binary_tree_11.add(none_type_3)
    binary_node_9 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()

def test_case_1822():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_6.__contains__(binary_tree_8)
    assert var_14 is False

def test_case_1823():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    var_6 = var_4.__iter__()
    var_7 = binary_tree_1.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_1)
    var_10 = var_9.__repr__()

def test_case_1824():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_3.closest(var_7)
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_4.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_15)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_node_2.inorder()
    var_17 = binary_tree_7.add(binary_node_2)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()
    var_22 = var_20.__iter__()
    bool_0 = True
    binary_node_3 = module_0.BinaryNode(bool_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.add(dict_0)
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_25.__iter__()
    var_27 = var_26.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    binary_tree_13 = module_0.BinaryTree()
    var_28 = binary_tree_13.__repr__()
    assert var_28 == 'binary:()'
    var_29 = binary_node_5.__repr__()
    assert var_29 == '(L: ((),) R:)'
    binary_tree_14 = module_0.BinaryTree()
    var_30 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_31 = var_30.__iter__()
    var_32 = var_31.__repr__()
    var_33 = var_32.__iter__()
    var_34 = var_30.__repr__()

def test_case_1825():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_3)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    var_5 = binary_node_1.inorder()
    var_6 = binary_tree_2.remove(var_3)

def test_case_1826():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"

def test_case_1827():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_7.__iter__()
    var_12 = var_9.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_node_4.inorder()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__repr__()
    assert var_15 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_15)
    assert binary_node_5.value == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_node_6 = module_0.BinaryNode(var_16)
    var_17 = binary_node_6.inorder()
    var_18 = binary_tree_13.remove(var_15)
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()

def test_case_1828():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_0.inorder()
    var_4 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_node_1.inorder()
    var_7 = binary_tree_3.add(binary_node_1)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.__iter__()
    var_13 = binary_tree_13.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.__repr__()
    assert var_15 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_15)
    assert binary_node_6.value == 'binary:()'
    var_16 = binary_node_6.__repr__()
    assert var_16 == '(L: binary:() R:)'
    var_17 = var_15.__repr__()
    assert var_17 == "'binary:()'"
    binary_node_7 = module_0.BinaryNode(var_16)
    assert binary_node_7.value == '(L: binary:() R:)'
    bool_0 = True
    binary_node_8 = module_0.BinaryNode(bool_0)
    binary_node_9 = module_0.BinaryNode(binary_node_8)
    none_type_0 = None
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_tree_16.add(none_type_0)
    var_19 = binary_tree_16.getMax()
    tuple_0 = ()

def test_case_1829():
    str_0 = '$\x0c=.'
    set_0 = {str_0, str_0}
    str_1 = 'binary:()'
    binary_node_0 = module_0.BinaryNode(str_1)

def test_case_1830():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    var_2 = binary_tree_1.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_2.__repr__()
    assert var_8 == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == 'binary:()'
    var_10 = binary_node_2.__repr__()
    assert var_10 == '(L: binary:() R:)'
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__repr__()
    assert var_11 == 'binary:()'
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(none_type_1)
    var_14 = var_13.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__repr__()
    assert var_15 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_15)
    assert binary_node_4.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_9)
    var_16 = var_15.__contains__(var_15)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_node_6 = module_0.BinaryNode(var_18)

def test_case_1831():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_1.__repr__()

def test_case_1832():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == 'binary:()'
    var_3 = binary_node_2.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_3)
    assert binary_node_3.value == '(L: binary:() R:)'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_5)
    assert binary_node_5.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1833():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    var_3 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_1.inorder()
    var_7 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    var_11 = binary_node_2.removeFromParent(binary_tree_4, var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_17.__iter__()
    var_20 = binary_tree_12.__repr__()
    assert var_20 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_17.__iter__()
    binary_node_3 = module_0.BinaryNode(var_24)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_25 = binary_tree_20.__repr__()
    assert var_25 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_25)
    assert binary_node_4.value == 'binary:()'
    var_26 = binary_tree_17.__repr__()
    assert var_26 == 'binary:()'
    none_type_0 = None
    binary_tree_21 = module_0.BinaryTree()
    var_27 = binary_tree_21.add(none_type_0)
    assert f'{type(binary_tree_21.root).__module__}.{type(binary_tree_21.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_22 = module_0.BinaryTree()
    var_28 = binary_tree_22.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_22)
    binary_tree_23 = module_0.BinaryTree()

def test_case_1834():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    var_2 = binary_node_2.__repr__()
    assert var_2 == '(L: binary:() R:)'

def test_case_1835():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_6 = binary_tree_1.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_10.__iter__()
    var_13 = binary_tree_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_14 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.__iter__()
    var_16 = binary_tree_6.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_18.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_23 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    var_27 = var_25.__iter__()
    var_28 = var_24.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_29 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_30 = var_29.__iter__()
    var_31 = var_30.__repr__()
    var_32 = var_31.__iter__()
    var_33 = var_31.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    bool_0 = True
    binary_node_4 = module_0.BinaryNode(bool_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)

def test_case_1836():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()

def test_case_1837():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_19)
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.__iter__()
    var_21 = binary_tree_13.closest(var_20)
    binary_node_6 = module_0.BinaryNode(var_20)
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_24.__iter__()
    var_27 = var_25.__iter__()
    var_28 = binary_tree_14.__iter__()

def test_case_1838():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    var_6 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = binary_tree_2.remove(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    var_11 = binary_node_3.inorder()
    var_12 = binary_tree_4.remove(var_9)
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    var_14 = binary_node_4.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_15)
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    var_17 = binary_tree_8.closest(var_16)
    var_18 = var_15.__iter__()

def test_case_1839():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    var_3 = var_1.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    var_6 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_13.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__iter__()
    var_19 = binary_tree_8.__contains__(binary_tree_8)
    assert var_19 is False
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__repr__()
    assert var_20 == 'binary:()'
    var_21 = binary_tree_9.remove(var_20)
    var_22 = var_20.__repr__()
    assert var_22 == "'binary:()'"
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_23 = binary_node_2.inorder()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_24 = binary_tree_10.add(none_type_2)
    binary_tree_11 = module_0.BinaryTree()
    var_25 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_13 = module_0.BinaryTree()
    var_27 = binary_tree_13.__repr__()
    assert var_27 == 'binary:()'
    var_28 = binary_node_4.__repr__()
    assert var_28 == '(L: ((),) R:)'

def test_case_1840():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__repr__()
    assert var_4 == 'binary:()'
    var_5 = binary_tree_6.remove(var_4)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_6 = binary_tree_7.__iter__()

def test_case_1841():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_3.closest(var_6)
    var_10 = var_8.__repr__()

def test_case_1842():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_2)
    var_4 = binary_tree_4.getMax()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    var_6 = binary_tree_5.closest(var_5)
    var_7 = var_5.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    var_8 = binary_node_4.inorder()
    binary_node_5 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_tree_7.remove(var_9)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_6 = module_0.BinaryNode(var_11)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    var_13 = binary_tree_9.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    var_20 = var_16.__iter__()
    var_21 = var_18.__repr__()

def test_case_1843():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_3.inorder()
    var_4 = binary_tree_1.remove(var_1)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_4.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = binary_tree_3.remove(var_6)
    bool_0 = True
    binary_node_5 = module_0.BinaryNode(bool_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_7 = module_0.BinaryNode(var_12)
    binary_tree_10 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.add(none_type_1)
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_2)
    binary_node_8 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.add(dict_0)
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__iter__()
    binary_node_9 = module_0.BinaryNode(var_20)
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__iter__()
    var_22 = binary_tree_16.closest(var_21)
    var_23 = var_20.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_16.__iter__()

def test_case_1844():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()

def test_case_1845():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    var_9 = binary_tree_4.closest(var_8)
    var_10 = var_8.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    var_14 = binary_node_1.removeFromParent(binary_tree_5, var_13)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = var_15.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    var_20 = binary_tree_13.__contains__(binary_tree_13)
    assert var_20 is False
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = var_21.__iter__()

def test_case_1846():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    var_12 = binary_tree_4.closest(var_11)
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_13)
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    var_15 = binary_tree_6.closest(var_14)
    var_16 = var_13.__iter__()
    var_17 = binary_node_2.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.__repr__()
    assert var_18 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_18)
    assert binary_node_3.value == 'binary:()'
    var_19 = binary_node_3.__repr__()
    assert var_19 == '(L: binary:() R:)'
    var_20 = var_18.__repr__()
    assert var_20 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_19)
    assert binary_node_4.value == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_21 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_5 = module_0.BinaryNode(binary_tree_8)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_22 = binary_tree_9.add(none_type_1)
    var_23 = var_22.__repr__()

def test_case_1847():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_7.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_12)
    var_13 = binary_node_1.inorder()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    var_19 = var_17.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_20)
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.add(dict_0)
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_26 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_26.__repr__()
    var_29 = var_26.__iter__()
    var_30 = var_28.__iter__()
    var_31 = binary_tree_13.__repr__()
    assert var_31 == 'binary:()'

def test_case_1848():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    var_16 = binary_tree_13.closest(var_15)
    var_17 = var_14.__iter__()
    var_18 = var_15.__repr__()

def test_case_1849():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_3 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    with pytest.raises(ValueError):
        binary_tree_11.getMax()

def test_case_1850():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__repr__()
    assert var_4 == 'binary:()'
    var_5 = binary_tree_7.remove(var_4)
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__repr__()
    assert var_6 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == 'binary:()'
    var_7 = binary_node_2.__repr__()
    assert var_7 == '(L: binary:() R:)'
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_11 = var_9.__repr__()
    var_12 = var_11.__repr__()

def test_case_1851():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(dict_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()

def test_case_1852():
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_1)
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__repr__()
    assert var_2 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_2)
    assert binary_node_4.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_4)
    var_3 = var_2.__contains__(var_2)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_2)
    var_5 = binary_tree_5.getMax()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_node_2.removeFromParent(binary_node_4, var_2)

def test_case_1853():
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_1854():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_2)
    var_5 = binary_tree_4.remove(var_3)
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(dict_0)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_17.__iter__()
    binary_node_6 = module_0.BinaryNode(var_17)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_18 = binary_tree_20.__iter__()
    var_19 = binary_tree_20.closest(var_18)
    binary_tree_21 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_21)
    var_20 = binary_node_7.inorder()
    var_21 = var_20.__repr__()

def test_case_1855():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__repr__()
    assert var_9 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == 'binary:()'
    var_10 = binary_node_2.__repr__()
    assert var_10 == '(L: binary:() R:)'
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == '(L: binary:() R:)'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__repr__()
    assert var_12 == 'binary:()'
    var_13 = binary_node_4.__repr__()
    assert var_13 == '(L: ((),) R:)'
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_node_5.inorder()

def test_case_1856():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_9.__iter__()

def test_case_1857():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_8 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_9 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.add(none_type_0)
    var_11 = binary_tree_2.remove(var_9)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    var_12 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_node_5.inorder()
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.add(none_type_1)
    binary_node_6 = module_0.BinaryNode(binary_tree_8)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(none_type_2)
    var_17 = var_16.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__repr__()
    assert var_21 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_21)
    assert binary_node_7.value == 'binary:()'
    var_22 = binary_node_7.__repr__()
    assert var_22 == '(L: binary:() R:)'

def test_case_1858():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_1)
    assert binary_node_0.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_2 = var_1.__contains__(var_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    var_4 = binary_tree_3.remove(var_3)
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"

def test_case_1859():
    binary_tree_0 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_0.getMax()

def test_case_1860():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_2)
    var_8 = binary_tree_5.getMax()
    binary_tree_6 = module_0.BinaryTree()

def test_case_1861():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    var_6 = binary_node_0.__repr__()
    assert var_6 == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_15.__iter__()
    var_18 = binary_tree_9.__repr__()
    assert var_18 == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__repr__()
    assert var_19 == 'binary:()'
    var_20 = binary_node_3.__repr__()
    assert var_20 == '(L: ((),) R:)'
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_21)
    var_22 = binary_node_4.inorder()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_14)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_15 = module_0.BinaryTree()
    var_23 = binary_tree_15.__repr__()
    assert var_23 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_23)
    assert binary_node_7.value == 'binary:()'
    binary_tree_16 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_16)
    var_24 = var_23.__contains__(var_23)

def test_case_1862():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_5.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__repr__()
    assert var_12 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_12)
    assert binary_node_3.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    var_15 = binary_tree_11.closest(var_14)
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    var_17 = binary_tree_12.__contains__(binary_tree_12)
    assert var_17 is False
    none_type_0 = None
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.add(none_type_0)
    assert f'{type(binary_tree_13.root).__module__}.{type(binary_tree_13.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_19 = var_18.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    var_23 = var_20.__iter__()
    var_24 = var_22.__iter__()
    var_25 = binary_tree_14.__repr__()
    assert var_25 == 'binary:()'
    binary_tree_16 = module_0.BinaryTree()

def test_case_1863():
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    var_9 = binary_tree_4.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    var_13 = binary_tree_7.closest(var_12)
    var_14 = var_11.__iter__()
    var_15 = binary_node_4.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__repr__()
    assert var_19 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_19)
    assert binary_node_5.value == 'binary:()'
    var_20 = binary_node_5.__repr__()
    assert var_20 == '(L: binary:() R:)'
    var_21 = var_19.__repr__()
    assert var_21 == "'binary:()'"
    binary_node_6 = module_0.BinaryNode(var_20)
    assert binary_node_6.value == '(L: binary:() R:)'
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.__iter__()
    binary_node_7 = module_0.BinaryNode(var_22)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_14)
    binary_tree_15 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_9 = module_0.BinaryNode(bytes_0)
    binary_node_10 = module_0.BinaryNode(binary_node_9)
    dict_0 = {}
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.add(dict_0)
    assert f'{type(binary_tree_16.root).__module__}.{type(binary_tree_16.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_25.__iter__()
    var_27 = binary_tree_16.__iter__()

def test_case_1864():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_tree_1.remove(var_2)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_1.inorder()
    var_8 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    var_11 = binary_node_3.inorder()
    var_12 = binary_tree_4.remove(var_9)
    with pytest.raises(ValueError):
        binary_tree_1.getMax()

def test_case_1865():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.add(none_type_1)
    var_9 = var_8.__repr__()
    bool_0 = True
    binary_node_7 = module_0.BinaryNode(bool_0)
    binary_node_8 = module_0.BinaryNode(binary_node_7)

def test_case_1866():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.add(none_type_0)
    var_11 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_15.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_18 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_18)
    binary_tree_7 = module_0.BinaryTree()
    var_19 = binary_tree_7.__iter__()
    var_20 = binary_tree_7.closest(var_19)
    var_21 = var_18.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_22 = binary_tree_9.add(none_type_1)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_23 = binary_tree_10.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()

def test_case_1867():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    var_5 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(dict_0)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    var_13 = binary_tree_6.closest(var_12)
    binary_node_6 = module_0.BinaryNode(var_12)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'

def test_case_1868():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_1.getMax()
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_1869():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    var_11 = var_8.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_15.__iter__()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_18 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_22 = binary_tree_7.__repr__()
    assert var_22 == 'binary:()'
    var_23 = binary_node_0.__repr__()
    assert var_23 == '(L: ((),) R:)'
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_24 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_24.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_27 = var_24.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_12)
    var_28 = binary_node_1.inorder()
    var_29 = var_28.__repr__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_2 = module_0.BinaryNode(tuple_3)
    str_0 = 'QmE_%IvzxAdYJOA]FVh'

def test_case_1870():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = binary_node_0.inorder()

def test_case_1871():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_tree_1.remove(var_2)

def test_case_1872():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_8 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_5 = module_0.BinaryNode(bytes_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_15)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    dict_0 = {}
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.add(dict_0)
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__iter__()
    var_23 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_26.__iter__()

def test_case_1873():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = binary_tree_2.add(var_0)

def test_case_1874():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_3 = binary_node_0.inorder()

def test_case_1875():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    var_3 = binary_node_0.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(none_type_3)
    var_12 = binary_tree_9.getMax()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    var_14 = binary_tree_10.closest(var_13)
    var_15 = var_13.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    var_21 = var_17.__iter__()
    var_22 = var_19.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_23)
    var_24 = binary_node_3.inorder()
    none_type_4 = None
    binary_tree_14 = module_0.BinaryTree()
    var_25 = binary_tree_14.add(none_type_4)
    var_26 = binary_tree_13.remove(var_24)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_27 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_27.__repr__()
    binary_tree_18 = module_0.BinaryTree()
    var_30 = var_27.__repr__()

def test_case_1876():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_2)
    var_4 = var_3.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_3.getMin()

def test_case_1877():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_2.getMax()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    var_7 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_1)

def test_case_1878():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = binary_tree_2.add(var_0)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_4 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_4.__contains__(binary_tree_6)
    assert var_8 is False

def test_case_1879():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_3)
    var_5 = var_4.__repr__()

def test_case_1880():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    var_6 = binary_tree_2.__contains__(binary_tree_2)
    assert var_6 is False
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_node_2 = module_0.BinaryNode(var_7)
    var_8 = binary_node_1.removeFromParent(var_7, none_type_0)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    var_9 = binary_node_3.inorder()

def test_case_1881():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    bool_0 = True
    binary_node_4 = module_0.BinaryNode(bool_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_1)
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_4 = binary_tree_8.__iter__()
    binary_node_7 = module_0.BinaryNode(var_3)
    var_5 = binary_node_7.removeFromParent(binary_tree_5, var_4)
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_8.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_8 = module_0.BinaryNode(set_0)
    binary_node_9 = module_0.BinaryNode(binary_node_8)
    var_11 = binary_node_8.inorder()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = binary_tree_11.getMax()
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_1)
    var_15 = var_14.__repr__()
    with pytest.raises(ValueError):
        binary_tree_10.getMax()

def test_case_1882():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__repr__()
    assert var_0 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_0)
    assert binary_node_2.value == 'binary:()'
    var_1 = binary_node_2.__repr__()
    assert var_1 == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    var_8 = var_5.__repr__()
    with pytest.raises(ValueError):
        binary_tree_3.getMax()

def test_case_1883():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_6)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    var_8 = binary_node_1.inorder()
    var_9 = binary_tree_2.remove(var_6)
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()

def test_case_1884():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_7 = binary_node_1.inorder()
    var_8 = binary_tree_1.remove(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_node_7 = module_0.BinaryNode(var_15)
    var_16 = binary_node_7.inorder()
    var_17 = var_15.__repr__()

def test_case_1885():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_1.__contains__(binary_tree_3)
    assert var_3 is False
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    var_7 = binary_tree_8.closest(var_6)
    binary_node_5 = module_0.BinaryNode(var_6)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_node_6 = module_0.BinaryNode(var_8)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()

def test_case_1886():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_0)
    assert binary_node_2.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(var_3)
    bool_0 = True
    binary_node_5 = module_0.BinaryNode(bool_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_6.getMax()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_9.__iter__()
    var_12 = binary_tree_7.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__repr__()
    assert var_13 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_13)
    assert binary_node_7.value == 'binary:()'
    var_14 = binary_node_7.__repr__()
    assert var_14 == '(L: binary:() R:)'
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"

def test_case_1887():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_1.remove(var_5)
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_0)
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_1)
    var_13 = var_12.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__repr__()
    assert var_14 == 'binary:()'
    var_15 = binary_node_2.__repr__()
    assert var_15 == '(L: ((),) R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_node_4 = module_0.BinaryNode(var_20)
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    var_22 = binary_tree_15.closest(var_21)
    binary_node_5 = module_0.BinaryNode(var_21)

def test_case_1888():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_1889():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = var_2.__repr__()

def test_case_1890():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_9.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_14)
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    var_20 = var_18.__iter__()
    var_21 = binary_tree_15.__repr__()
    assert var_21 == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()

def test_case_1891():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()

def test_case_1892():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    var_11 = var_8.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_8)
    var_12 = binary_node_0.inorder()
    var_13 = var_12.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_14)
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_15.__repr__()
    dict_0 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.add(dict_0)
    assert f'{type(binary_tree_14.root).__module__}.{type(binary_tree_14.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.__iter__()
    var_25 = binary_tree_15.closest(var_24)
    with pytest.raises(ValueError):
        binary_tree_1.getMax()

def test_case_1893():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()

def test_case_1894():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_tree_1.remove(var_2)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    var_8 = binary_node_1.removeFromParent(binary_tree_2, var_7)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = binary_tree_8.add(var_9)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(none_type_1)
    var_14 = var_13.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.add(none_type_3)
    var_21 = var_20.__repr__()
    dict_0 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.add(dict_0)
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_24.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_26 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_26.__repr__()
    binary_tree_18 = module_0.BinaryTree()
    var_29 = var_26.__repr__()

def test_case_1895():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = binary_tree_2.add(var_0)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    var_6 = binary_node_2.inorder()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    var_7 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_7)

def test_case_1896():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    var_6 = binary_tree_4.closest(var_5)
    var_7 = var_4.__iter__()
    var_8 = var_5.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_9)
    assert binary_node_3.value == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_10 = binary_node_4.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__repr__()
    assert var_11 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_11)
    assert binary_node_6.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_node_7 = module_0.BinaryNode(var_12)
    var_13 = binary_node_7.inorder()
    var_14 = binary_tree_6.remove(var_11)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__repr__()
    assert var_15 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_15)
    assert binary_node_8.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_9 = module_0.BinaryNode(binary_tree_9)
    var_16 = var_15.__contains__(var_15)

def test_case_1897():
    binary_tree_0 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_1.getMax()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_2.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_tree_6.remove(var_7)
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__repr__()
    assert var_10 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    var_11 = var_10.__contains__(var_10)
    bool_0 = True
    binary_node_5 = module_0.BinaryNode(bool_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_2)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = binary_tree_11.add(var_12)

def test_case_1898():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(dict_0)
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = binary_tree_6.closest(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_14)
    assert binary_node_1.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.add(none_type_1)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()

def test_case_1899():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__repr__()
    assert var_11 == 'binary:()'
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = var_12.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_14)
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    var_16 = binary_tree_7.closest(var_15)
    binary_node_1 = module_0.BinaryNode(var_15)
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_17)
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_8.__contains__(binary_tree_10)
    assert var_20 is False
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__repr__()
    assert var_21 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_21)
    assert binary_node_3.value == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.__iter__()
    var_23 = binary_tree_13.closest(var_22)

def test_case_1900():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = binary_tree_2.add(var_0)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_13)
    var_14 = binary_node_0.inorder()
    binary_tree_8 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.add(none_type_1)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.add(dict_0)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_14)
    var_22 = binary_node_2.inorder()

def test_case_1901():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    var_0 = binary_node_0.__repr__()
    assert var_0 == '(L: ((),) R:)'
    var_1 = var_0.__iter__()

def test_case_1902():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__repr__()
    assert var_8 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == 'binary:()'
    var_9 = binary_node_1.__repr__()
    assert var_9 == '(L: binary:() R:)'
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == '(L: binary:() R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    var_13 = binary_tree_12.closest(var_12)
    binary_node_4 = module_0.BinaryNode(var_12)
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.add(none_type_2)
    var_15 = binary_tree_13.getMax()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__repr__()
    assert var_16 == 'binary:()'
    var_17 = binary_tree_14.remove(var_16)
    var_18 = var_16.__repr__()
    assert var_18 == "'binary:()'"
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()

def test_case_1903():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__repr__()
    assert var_7 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_7)
    assert binary_node_4.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_8)
    var_8 = var_7.__contains__(var_7)

def test_case_1904():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_3.getMax()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    var_8 = binary_tree_4.closest(var_7)
    var_9 = var_7.__repr__()

def test_case_1905():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    bool_0 = True
    binary_node_2 = module_0.BinaryNode(bool_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    tuple_0 = ()

def test_case_1906():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_4.remove(var_5)
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"

def test_case_1907():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    var_15 = binary_node_1.removeFromParent(binary_tree_8, var_14)
    binary_tree_12 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    var_16 = binary_node_2.inorder()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_17.__repr__()

def test_case_1908():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_3.remove(var_5)
    list_0 = [var_5, var_5, var_1, var_2]

def test_case_1909():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_4.__contains__(binary_tree_6)
    assert var_7 is False
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__repr__()
    assert var_11 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_11)
    assert binary_node_3.value == 'binary:()'
    none_type_0 = None
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.add(none_type_0)
    assert f'{type(binary_tree_13.root).__module__}.{type(binary_tree_13.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_14 = module_0.BinaryTree()
    var_13 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = binary_tree_15.add(var_12)
    binary_tree_16 = module_0.BinaryTree()
    var_16 = binary_tree_16.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    var_17 = binary_node_4.inorder()
    none_type_1 = None
    binary_tree_17 = module_0.BinaryTree()
    var_18 = binary_tree_17.add(none_type_1)
    var_19 = binary_tree_16.remove(var_17)
    var_20 = binary_tree_14.add(binary_tree_9)

def test_case_1910():
    str_0 = 'binary:()'
    none_type_0 = None
    str_1 = 'Cx%$QBY?m16$FYf'
    binary_node_0 = module_0.BinaryNode(str_1)
    var_0 = binary_node_0.addToSubTree(none_type_0, none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree1.BinaryNode'
    assert var_0.value is None
    assert var_0.left is None
    assert var_0.right is None

def test_case_1911():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    var_8 = binary_node_0.inorder()
    var_9 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__repr__()
    assert var_13 == 'binary:()'
    var_14 = binary_node_1.__repr__()
    assert var_14 == '(L: ((),) R:)'
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_15)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_13 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.add(dict_0)
    assert f'{type(binary_tree_14.root).__module__}.{type(binary_tree_14.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_20 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    binary_node_6 = module_0.BinaryNode(var_21)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_18 = module_0.BinaryTree()
    var_22 = binary_tree_18.add(none_type_0)
    var_23 = var_22.__repr__()

def test_case_1912():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_2.getMax()
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_1)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_3)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = binary_tree_9.add(var_9)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__repr__()
    assert var_13 == 'binary:()'

def test_case_1913():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_6)
    assert binary_node_1.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    var_8 = binary_node_2.inorder()
    var_9 = binary_tree_2.remove(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    var_11 = binary_node_3.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = binary_tree_4.remove(var_11)
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    var_14 = binary_node_4.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__repr__()
    assert var_15 == 'binary:()'

def test_case_1914():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_9.__iter__()
    var_12 = binary_tree_6.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__repr__()
    assert var_13 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_13)
    assert binary_node_1.value == 'binary:()'
    var_14 = binary_node_1.__repr__()
    assert var_14 == '(L: binary:() R:)'
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_14)
    assert binary_node_2.value == '(L: binary:() R:)'
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(dict_0)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_20)
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_10.__contains__(binary_tree_12)
    assert var_23 is False

def test_case_1915():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(dict_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()

def test_case_1916():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_6 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_12 = module_0.BinaryTree()
    var_7 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_8 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_8.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_tree_15.__iter__()
    var_14 = binary_tree_15.closest(var_13)
    binary_tree_16 = module_0.BinaryTree()
    var_15 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.__iter__()
    binary_node_3 = module_0.BinaryNode(var_18)
    binary_tree_19 = module_0.BinaryTree()
    var_19 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_21 = binary_tree_18.__contains__(binary_tree_20)
    assert var_21 is False
    binary_tree_22 = module_0.BinaryTree()
    var_22 = binary_tree_22.__repr__()
    assert var_22 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_22)
    assert binary_node_4.value == 'binary:()'
    var_23 = binary_node_4.__repr__()
    assert var_23 == '(L: binary:() R:)'
    var_24 = var_22.__repr__()
    assert var_24 == "'binary:()'"

def test_case_1917():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None

def test_case_1918():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()

def test_case_1919():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)

def test_case_1920():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_3.inorder()
    var_6 = binary_tree_4.remove(var_3)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_node_4.__repr__()
    assert var_8 == '(L: ((),) R:)'
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()

def test_case_1921():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    var_9 = binary_tree_6.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    var_14 = binary_tree_12.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = binary_node_4.inorder()

def test_case_1922():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()

def test_case_1923():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_10 = binary_node_0.inorder()

def test_case_1924():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(dict_0)
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    var_11 = binary_tree_6.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    var_15 = binary_node_2.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_node_3.inorder()
    var_18 = binary_tree_9.add(binary_node_3)
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    binary_node_4 = module_0.BinaryNode(var_20)
    var_22 = binary_node_4.removeFromParent(binary_tree_12, var_21)
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_25 = binary_tree_19.__iter__()
    binary_node_5 = module_0.BinaryNode(var_24)
    binary_tree_20 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_20)

def test_case_1925():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_1)
    var_5 = binary_tree_2.getMax()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_12.__iter__()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.add(none_type_2)
    var_16 = binary_tree_6.getMax()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.__repr__()
    assert var_17 == 'binary:()'
    var_18 = binary_node_1.__repr__()
    assert var_18 == '(L: ((),) R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_19)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_12 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.add(dict_0)
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__repr__()
    assert var_24 == 'binary:()'

def test_case_1926():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_node_2 = module_0.BinaryNode(var_4)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    var_14 = binary_tree_10.closest(var_13)
    binary_node_5 = module_0.BinaryNode(var_13)

def test_case_1927():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_node_0.inorder()
    var_7 = binary_tree_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    var_10 = binary_tree_6.closest(var_9)
    binary_node_2 = module_0.BinaryNode(var_9)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_node_4 = module_0.BinaryNode(var_11)
    bool_0 = True
    binary_node_5 = module_0.BinaryNode(bool_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_7 = module_0.BinaryNode(var_12)
    var_13 = binary_node_7.inorder()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(none_type_1)
    var_15 = binary_tree_9.remove(var_13)
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    var_21 = var_17.__iter__()
    var_22 = var_19.__repr__()
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.add(none_type_2)
    var_24 = binary_tree_13.getMax()
    none_type_3 = None
    binary_tree_14 = module_0.BinaryTree()
    var_25 = binary_tree_14.add(none_type_3)
    var_26 = binary_tree_14.getMax()
    binary_tree_15 = module_0.BinaryTree()
    var_27 = binary_tree_15.__iter__()
    var_28 = binary_tree_15.closest(var_27)
    var_29 = var_27.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_8 = module_0.BinaryNode(set_0)
    binary_node_9 = module_0.BinaryNode(binary_node_8)

def test_case_1928():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_6 = module_0.BinaryNode(set_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    var_10 = binary_node_6.inorder()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__repr__()
    assert var_11 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_11)
    assert binary_node_8.value == 'binary:()'
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_9 = module_0.BinaryNode(set_1)
    binary_node_10 = module_0.BinaryNode(binary_node_9)
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_node_11 = module_0.BinaryNode(var_12)
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    var_14 = binary_tree_12.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = var_13.__repr__()

def test_case_1929():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_2.inorder()
    var_6 = binary_tree_2.remove(var_3)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__repr__()
    assert var_12 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_12)
    assert binary_node_4.value == 'binary:()'
    var_13 = binary_node_4.__repr__()
    assert var_13 == '(L: binary:() R:)'
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_16 = binary_tree_16.__iter__()
    binary_node_5 = module_0.BinaryNode(var_15)
    var_17 = binary_node_5.removeFromParent(binary_tree_13, var_16)
    binary_tree_17 = module_0.BinaryTree()
    var_18 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()
    var_22 = var_20.__iter__()
    var_23 = binary_tree_17.__repr__()
    assert var_23 == 'binary:()'
    binary_tree_19 = module_0.BinaryTree()
    binary_tree_20 = module_0.BinaryTree()
    var_24 = binary_tree_20.__iter__()
    binary_node_6 = module_0.BinaryNode(var_24)
    binary_tree_21 = module_0.BinaryTree()
    binary_tree_22 = module_0.BinaryTree()
    binary_tree_23 = module_0.BinaryTree()
    var_25 = binary_tree_23.__iter__()
    binary_tree_24 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    var_27 = var_26.__repr__()
    var_28 = var_27.__iter__()
    var_29 = var_27.__iter__()
    var_30 = var_28.__iter__()
    var_31 = binary_tree_23.__iter__()

def test_case_1930():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_1.getMax()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_4)
    var_6 = var_4.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_7.__repr__()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_16)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_16)
    var_20 = binary_node_2.inorder()
    var_21 = var_20.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_17.__repr__()
    assert var_22 == 'binary:()'
    var_23 = binary_tree_17.remove(var_22)
    var_24 = var_22.__repr__()
    assert var_24 == "'binary:()'"
    bool_0 = True
    binary_node_3 = module_0.BinaryNode(bool_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)

def test_case_1931():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_4.__iter__()
    var_7 = binary_tree_1.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_node_1.inorder()
    var_12 = binary_tree_5.__iter__()

def test_case_1932():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__repr__()
    assert var_11 == 'binary:()'
    var_12 = binary_node_2.__repr__()
    assert var_12 == '(L: ((),) R:)'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    var_13 = binary_node_3.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    var_18 = var_16.__iter__()
    var_19 = binary_tree_11.__repr__()
    assert var_19 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()

def test_case_1933():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_node_3 = module_0.BinaryNode(var_1)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    var_2 = binary_node_4.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_6.__iter__()

def test_case_1934():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__repr__()
    assert var_12 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_12)
    assert binary_node_5.value == 'binary:()'
    var_13 = binary_node_5.__repr__()
    assert var_13 == '(L: binary:() R:)'
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_14.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_node_6 = module_0.BinaryNode(var_18)
    var_19 = binary_node_6.inorder()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()

def test_case_1935():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__repr__()
    assert var_0 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_0)
    assert binary_node_3.value == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    var_6 = var_2.__iter__()
    var_7 = var_4.__repr__()
    with pytest.raises(ValueError):
        binary_tree_2.getMax()

def test_case_1936():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'

def test_case_1937():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_2.inorder()
    var_6 = binary_tree_3.remove(var_3)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_node_4 = module_0.BinaryNode(var_7)
    var_8 = binary_node_3.removeFromParent(var_7, none_type_0)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_tree_7.remove(var_9)
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__repr__()
    assert var_12 == 'binary:()'
    var_13 = binary_tree_8.remove(var_12)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.add(none_type_1)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__iter__()
    binary_node_6 = module_0.BinaryNode(var_17)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    var_18 = binary_node_6.inorder()
    var_19 = var_17.__repr__()

def test_case_1938():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_9.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    var_16 = binary_tree_9.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_node_6 = module_0.BinaryNode(var_18)
    var_19 = binary_node_6.inorder()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()

def test_case_1939():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)

def test_case_1940():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()

def test_case_1941():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    var_5 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = binary_tree_2.remove(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_9.__contains__(binary_tree_11)
    assert var_15 is False
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    var_20 = var_18.__iter__()
    var_21 = binary_tree_13.__repr__()
    assert var_21 == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_1.getMin()

def test_case_1942():
    bytes_0 = b'\xf4\xcb\x8fZ\x8a\xd2\xc8\xf8t\xea7\xf1\xa2\xd6\x1clM[\xe5'
    set_0 = {bytes_0}
    float_0 = 1835.0
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(float_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()

def test_case_1943():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_3 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_3.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = binary_tree_3.remove(var_5)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_14.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__repr__()
    assert var_19 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_19)
    assert binary_node_4.value == 'binary:()'
    var_20 = binary_node_4.__repr__()
    assert var_20 == '(L: binary:() R:)'
    var_21 = var_19.__repr__()
    assert var_21 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_20)
    assert binary_node_5.value == '(L: binary:() R:)'
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__iter__()
    binary_node_6 = module_0.BinaryNode(var_23)
    var_25 = binary_node_6.removeFromParent(binary_tree_11, var_24)
    binary_tree_15 = module_0.BinaryTree()
    var_26 = binary_tree_15.__iter__()
    binary_node_7 = module_0.BinaryNode(var_26)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_27 = binary_node_7.inorder()
    binary_tree_18 = module_0.BinaryTree()
    var_28 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_29 = var_28.__iter__()
    var_30 = var_29.__repr__()
    var_31 = var_30.__iter__()
    var_32 = var_31.__repr__()
    binary_tree_20 = module_0.BinaryTree()

def test_case_1944():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_2)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    var_4 = binary_node_2.__repr__()
    assert var_4 == '(L: ((),) R:)'
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    var_7 = binary_tree_5.closest(var_6)
    var_8 = var_5.__iter__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_4 = module_0.BinaryNode(tuple_3)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_9)
    assert binary_node_5.value == 'binary:()'
    bool_0 = True
    binary_node_6 = module_0.BinaryNode(bool_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)

def test_case_1945():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_2.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_4 = binary_tree_8.__repr__()
    assert var_4 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_4)
    assert binary_node_4.value == 'binary:()'
    var_5 = binary_node_4.__repr__()
    assert var_5 == '(L: binary:() R:)'
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_7 = binary_node_5.inorder()
    var_8 = binary_tree_9.__iter__()
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.add(none_type_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_13 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(none_type_0)
    binary_tree_14 = module_0.BinaryTree()
    var_10 = binary_tree_14.__repr__()
    assert var_10 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_10)
    assert binary_node_8.value == 'binary:()'
    var_11 = binary_node_8.__repr__()
    assert var_11 == '(L: binary:() R:)'
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    binary_node_9 = module_0.BinaryNode(var_11)
    assert binary_node_9.value == '(L: binary:() R:)'
    binary_tree_15 = module_0.BinaryTree()
    var_13 = binary_tree_15.__iter__()
    binary_node_10 = module_0.BinaryNode(var_13)
    assert f'{type(binary_node_10.value).__module__}.{type(binary_node_10.value).__qualname__}' == 'builtins.generator'
    binary_tree_16 = module_0.BinaryTree()

def test_case_1946():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = binary_tree_6.getMax()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    var_7 = binary_tree_7.closest(var_6)
    var_8 = var_6.__repr__()
    bool_0 = True
    binary_node_4 = module_0.BinaryNode(bool_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_9.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(var_14)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_node_6.inorder()
    var_16 = binary_tree_10.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_node_7 = module_0.BinaryNode(var_17)

def test_case_1947():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    var_11 = var_8.__repr__()

def test_case_1948():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    binary_node_1 = module_0.BinaryNode(var_6)

def test_case_1949():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    var_5 = binary_tree_4.__contains__(binary_tree_4)
    assert var_5 is False
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_node_2 = module_0.BinaryNode(var_6)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__repr__()
    assert var_10 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == 'binary:()'
    var_11 = binary_node_3.__repr__()
    assert var_11 == '(L: binary:() R:)'
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__repr__()
    assert var_13 == 'binary:()'
    var_14 = binary_tree_10.remove(var_13)
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"

def test_case_1950():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_9.__iter__()
    var_14 = var_11.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_15.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_20)
    var_21 = binary_node_1.inorder()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_tree_10.add(none_type_1)
    var_23 = binary_tree_9.remove(var_21)

def test_case_1951():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_4 = binary_node_1.inorder()
    var_5 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_node_2 = module_0.BinaryNode(var_20)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_node_2.inorder()
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_17.__repr__()
    assert var_22 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_22)
    assert binary_node_3.value == 'binary:()'
    var_23 = binary_node_3.__repr__()
    assert var_23 == '(L: binary:() R:)'
    binary_tree_18 = module_0.BinaryTree()

def test_case_1952():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False

def test_case_1953():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = binary_tree_6.add(var_2)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_6 = binary_node_4.inorder()

def test_case_1954():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_17)
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    var_19 = binary_tree_11.closest(var_18)
    var_20 = var_17.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    var_27 = var_25.__iter__()
    var_28 = var_26.__iter__()
    var_29 = binary_tree_14.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_30 = binary_tree_16.__repr__()
    assert var_30 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_30)
    assert binary_node_3.value == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    var_31 = binary_tree_17.__iter__()
    binary_node_4 = module_0.BinaryNode(var_31)
    var_32 = binary_node_4.inorder()
    var_33 = binary_tree_16.remove(var_30)

def test_case_1955():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    var_3 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()

def test_case_1956():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    var_6 = var_5.__contains__(var_5)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_node_5.inorder()
    var_13 = binary_tree_11.__iter__()
    binary_node_6 = module_0.BinaryNode(binary_tree_11)
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_16 = binary_tree_17.__iter__()
    binary_node_7 = module_0.BinaryNode(var_15)
    none_type_0 = None
    binary_tree_18 = module_0.BinaryTree()
    var_17 = binary_tree_18.add(none_type_0)
    assert f'{type(binary_tree_18.root).__module__}.{type(binary_tree_18.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_18 = binary_tree_18.getMax()
    binary_tree_19 = module_0.BinaryTree()
    var_19 = binary_tree_19.__iter__()
    var_20 = binary_tree_19.closest(var_19)
    var_21 = var_19.__repr__()
    with pytest.raises(ValueError):
        binary_tree_9.getMax()

def test_case_1957():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = binary_tree_6.closest(var_4)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    var_10 = binary_tree_9.closest(var_9)
    binary_node_5 = module_0.BinaryNode(var_9)
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(var_11)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_node_6.inorder()
    var_13 = binary_tree_10.add(binary_node_6)

def test_case_1958():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_2 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__repr__()
    assert var_2 == 'binary:()'
    var_3 = binary_node_4.__repr__()
    assert var_3 == '(L: ((),) R:)'
    str_0 = 'qSnQ>Qzk{wG@!!'
    set_1 = {int_0, var_2}

def test_case_1959():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    bool_0 = True
    binary_node_2 = module_0.BinaryNode(bool_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_6 = module_0.BinaryNode(tuple_1)
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__repr__()
    assert var_16 == 'binary:()'
    var_17 = binary_node_6.__repr__()
    assert var_17 == '(L: ((),) R:)'
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_node_7 = module_0.BinaryNode(var_18)
    var_19 = binary_node_7.inorder()
    binary_tree_15 = module_0.BinaryTree()

def test_case_1960():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__repr__()
    assert var_1 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_1)
    assert binary_node_3.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__repr__()
    assert var_5 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_5)
    assert binary_node_4.value == 'binary:()'
    var_6 = binary_node_4.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_6)
    assert binary_node_5.value == '(L: binary:() R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__repr__()
    assert var_18 == 'binary:()'
    var_19 = binary_tree_12.remove(var_18)
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()
    var_25 = var_21.__iter__()
    binary_node_6 = module_0.BinaryNode(var_21)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_7 = module_0.BinaryNode(tuple_3)
    binary_tree_15 = module_0.BinaryTree()
    var_26 = binary_tree_15.__repr__()
    assert var_26 == 'binary:()'
    var_27 = binary_node_7.__repr__()
    assert var_27 == '(L: ((),) R:)'
    var_28 = var_3.__iter__()

def test_case_1961():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_2.__repr__()

def test_case_1962():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_2.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_9)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    var_11 = binary_tree_6.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_node_3.inorder()
    dict_0 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.add(dict_0)
    assert f'{type(binary_tree_14.root).__module__}.{type(binary_tree_14.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    with pytest.raises(ValueError):
        binary_tree_5.getMin()

def test_case_1963():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    var_4 = binary_node_4.inorder()
    var_5 = var_4.__repr__()

def test_case_1964():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    var_7 = binary_node_0.removeFromParent(binary_tree_2, var_6)

def test_case_1965():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_2 = module_0.BinaryNode(set_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_0 = binary_node_2.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_4 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    binary_node_5 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = var_4.__repr__()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_1)
    binary_node_6 = module_0.BinaryNode(binary_tree_4)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_2)
    var_8 = var_7.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_7 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_9)
    assert binary_node_8.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_9 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_9.value).__module__}.{type(binary_node_9.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = binary_tree_12.closest(var_15)

def test_case_1966():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_node_3.inorder()
    var_9 = binary_tree_6.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_9)
    var_10 = binary_node_4.inorder()
    var_11 = var_10.__repr__()

def test_case_1967():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__repr__()
    assert var_16 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_16)
    assert binary_node_0.value == 'binary:()'
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.add(dict_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_tree_10.__repr__()
    assert var_22 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_22)
    assert binary_node_1.value == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    var_23 = var_22.__contains__(var_22)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    var_24 = binary_node_3.inorder()

def test_case_1968():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()

def test_case_1969():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_node_4.inorder()
    var_10 = binary_tree_6.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_15.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()
    var_22 = var_20.__iter__()
    var_23 = binary_tree_12.__repr__()
    assert var_23 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()

def test_case_1970():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_4.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = binary_tree_6.add(var_9)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__repr__()
    assert var_13 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_13)
    assert binary_node_1.value == 'binary:()'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_2 = module_0.BinaryNode(tuple_3)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.add(none_type_1)
    binary_tree_9 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_1)
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.add(dict_0)
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_11 = module_0.BinaryTree()

def test_case_1971():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(var_1)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_1972():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(dict_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = binary_tree_3.__iter__()
    bool_0 = True
    binary_node_1 = module_0.BinaryNode(bool_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_2)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_2)
    binary_node_4 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_tree_6.remove(var_9)
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__iter__()
    var_21 = var_19.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.__iter__()
    var_23 = binary_tree_12.__contains__(binary_tree_12)
    assert var_23 is False

def test_case_1973():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = binary_tree_2.add(var_0)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_4 = binary_node_0.inorder()
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_1)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_3.__repr__()
    assert var_10 == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__repr__()
    assert var_11 == 'binary:()'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(none_type_1)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_7.__contains__(binary_tree_9)
    assert var_16 is False
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__iter__()
    var_21 = var_19.__iter__()

def test_case_1974():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)

def test_case_1975():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()

def test_case_1976():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_5 = binary_node_1.inorder()

def test_case_1977():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    int_0 = 352

def test_case_1978():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_node_0.inorder()
    var_8 = binary_tree_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__repr__()
    assert var_12 == 'binary:()'
    var_13 = binary_tree_10.remove(var_12)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    none_type_0 = None
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__iter__()
    binary_node_3 = module_0.BinaryNode(var_24)
    binary_tree_17 = module_0.BinaryTree()
    var_25 = binary_tree_17.__iter__()
    var_26 = binary_tree_17.closest(var_25)
    var_27 = var_24.__iter__()
    var_28 = binary_node_3.inorder()

def test_case_1979():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_tree_1.remove(var_2)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_5 = binary_node_1.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_8.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_node_3.inorder()
    var_13 = binary_tree_4.add(binary_node_3)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    var_18 = var_14.__repr__()

def test_case_1980():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__repr__()
    assert var_5 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_5)
    assert binary_node_4.value == 'binary:()'
    var_6 = binary_node_4.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_6)
    assert binary_node_5.value == '(L: binary:() R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_6.__iter__()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.add(dict_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    none_type_0 = None
    binary_node_6 = module_0.BinaryNode(none_type_0)

def test_case_1981():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_1.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.add(none_type_4)
    none_type_5 = None
    binary_tree_16 = module_0.BinaryTree()
    var_19 = binary_tree_16.add(none_type_5)
    binary_node_4 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    var_20 = binary_tree_15.__iter__()

def test_case_1982():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    var_1 = binary_node_0.removeFromParent(var_0, none_type_0)

def test_case_1983():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)

def test_case_1984():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    var_4 = binary_tree_4.closest(var_3)
    var_5 = var_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_node_3.inorder()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(dict_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = var_13.__iter__()

def test_case_1985():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_12)
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    var_14 = binary_tree_6.closest(var_13)
    var_15 = var_12.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.add(none_type_0)
    binary_tree_9 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_10 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    var_17 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__repr__()
    assert var_18 == 'binary:()'
    var_19 = binary_tree_11.remove(var_18)

def test_case_1986():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_node_6 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    var_7 = binary_tree_8.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = var_6.__repr__()

def test_case_1987():
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_2.inorder()
    var_3 = var_1.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(none_type_2)
    binary_tree_10 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(none_type_2)
    with pytest.raises(ValueError):
        binary_tree_1.getMin()

def test_case_1988():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    var_11 = binary_tree_4.closest(var_10)
    var_12 = var_9.__iter__()

def test_case_1989():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__repr__()
    assert var_2 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == 'binary:()'
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_4.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_node_3.inorder()
    var_11 = binary_tree_7.__iter__()
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(var_12)
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    var_14 = binary_tree_11.closest(var_13)
    var_15 = var_12.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.add(none_type_0)
    assert f'{type(binary_tree_13.root).__module__}.{type(binary_tree_13.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_6 = module_0.BinaryNode(binary_tree_13)
    var_17 = binary_tree_13.getMin()

def test_case_1990():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)

def test_case_1991():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    var_7 = binary_tree_2.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = var_6.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_14 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_node_1.inorder()
    var_16 = binary_tree_5.__iter__()

def test_case_1992():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    none_type_1 = None
    binary_node_2 = module_0.BinaryNode(none_type_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_5 = binary_node_3.inorder()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_5)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_3)
    var_8 = var_7.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__repr__()
    assert var_9 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_9)
    assert binary_node_6.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_node_7 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_7.value).__module__}.{type(binary_node_7.value).__qualname__}' == 'builtins.generator'
    var_11 = binary_node_7.inorder()
    var_12 = binary_tree_7.remove(var_9)
    with pytest.raises(ValueError):
        binary_tree_8.getMin()

def test_case_1993():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_2)
    var_8 = var_7.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_9)
    assert binary_node_3.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_11 = binary_node_4.inorder()
    var_12 = binary_tree_5.remove(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    var_14 = binary_node_5.inorder()
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.add(none_type_3)
    var_16 = binary_tree_7.remove(var_14)

def test_case_1994():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_0.inorder()
    var_8 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_node_1.inorder()
    with pytest.raises(ValueError):
        binary_tree_1.getMax()

def test_case_1995():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_node_0.inorder()
    var_7 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_10.__iter__()
    var_13 = binary_tree_6.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_16.__iter__()
    var_19 = var_17.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__repr__()
    assert var_20 == 'binary:()'
    var_21 = binary_tree_10.remove(var_20)
    var_22 = var_20.__repr__()
    assert var_22 == "'binary:()'"

def test_case_1996():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    var_5 = binary_node_0.removeFromParent(binary_tree_1, var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    var_8 = binary_node_1.inorder()
    var_9 = var_7.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__repr__()
    assert var_11 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_11)
    assert binary_node_2.value == 'binary:()'
    var_12 = binary_node_2.__repr__()
    assert var_12 == '(L: binary:() R:)'
    var_13 = var_11.__repr__()
    assert var_13 == "'binary:()'"
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_node_3.inorder()
    var_16 = binary_tree_9.add(binary_node_3)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    binary_tree_13 = module_0.BinaryTree()

def test_case_1997():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_1998():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_1 = binary_tree_0.getMin()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.closest(var_3)
    var_5 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()

def test_case_1999():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.add(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_4)

def test_case_2000():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_4 = binary_node_2.inorder()
    var_5 = binary_tree_6.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_7 = binary_node_3.inorder()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = binary_tree_11.closest(var_9)
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    binary_node_4 = module_0.BinaryNode(var_14)
    var_15 = binary_node_4.inorder()
    var_16 = var_14.__repr__()

def test_case_2001():
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_2.remove(var_5)
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_1)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()

def test_case_2002():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    var_8 = binary_node_0.removeFromParent(binary_tree_3, var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_1)
    var_13 = var_12.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_node_4.inorder()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_17.__iter__()
    binary_node_5 = module_0.BinaryNode(var_17)
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.__iter__()
    var_19 = binary_tree_18.closest(var_18)
    var_20 = var_17.__iter__()
    var_21 = binary_tree_18.remove(var_19)
    none_type_2 = None
    binary_tree_19 = module_0.BinaryTree()
    var_22 = binary_tree_19.add(none_type_2)
    binary_node_6 = module_0.BinaryNode(binary_tree_19)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_7 = module_0.BinaryNode(tuple_1)
    binary_tree_20 = module_0.BinaryTree()
    var_23 = binary_tree_20.__repr__()
    assert var_23 == 'binary:()'
    var_24 = binary_node_7.__repr__()
    assert var_24 == '(L: ((),) R:)'
    none_type_3 = None
    binary_node_8 = module_0.BinaryNode(none_type_3)

def test_case_2003():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_4 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_4.inorder()

def test_case_2004():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_1 = binary_tree_6.__repr__()
    assert var_1 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_1)
    assert binary_node_5.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_2 = binary_tree_7.__iter__()
    binary_node_6 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_6.inorder()
    var_4 = binary_tree_6.remove(var_1)
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()

def test_case_2005():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()

def test_case_2006():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_6)
    assert binary_node_1.value == 'binary:()'

def test_case_2007():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_2008():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_2.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    var_9 = binary_tree_5.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()

def test_case_2009():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_1.getMax()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_4)
    var_6 = var_4.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    var_9 = binary_tree_4.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()

def test_case_2010():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    var_8 = binary_tree_7.getMin()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_3)
    var_13 = var_12.__repr__()

def test_case_2011():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_node_0.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = binary_tree_8.closest(var_13)

def test_case_2012():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_14.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    var_19 = binary_node_2.inorder()

def test_case_2013():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()

def test_case_2014():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    var_3 = binary_node_2.removeFromParent(binary_tree_1, var_2)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_7)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_node_4.inorder()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_11)
    var_9 = binary_node_5.inorder()
    var_10 = var_9.__repr__()
    bool_0 = False

def test_case_2015():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()

def test_case_2016():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    var_2 = binary_node_3.inorder()
    var_3 = var_2.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__repr__()
    assert var_11 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_11)
    assert binary_node_4.value == 'binary:()'
    var_12 = binary_node_4.__repr__()
    assert var_12 == '(L: binary:() R:)'

def test_case_2017():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    var_6 = binary_node_0.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    bool_0 = True
    binary_node_1 = module_0.BinaryNode(bool_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_node_5.__repr__()
    assert var_10 == '(L: ((),) R:)'
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__repr__()
    assert var_11 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(var_12)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_node_7 = module_0.BinaryNode(var_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = binary_node_7.inorder()
    binary_tree_16 = module_0.BinaryTree()
    var_15 = binary_tree_16.__repr__()
    assert var_15 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_15)
    assert binary_node_8.value == 'binary:()'
    var_16 = binary_node_8.__repr__()
    assert var_16 == '(L: binary:() R:)'
    var_17 = var_15.__repr__()
    assert var_17 == "'binary:()'"
    binary_node_9 = module_0.BinaryNode(var_16)
    assert binary_node_9.value == '(L: binary:() R:)'
    binary_tree_17 = module_0.BinaryTree()
    var_18 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()
    var_22 = var_20.__iter__()

def test_case_2018():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    var_5 = binary_tree_1.__contains__(binary_tree_1)
    assert var_5 is False
    dict_1 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(dict_1)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_11 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_12)

def test_case_2019():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    bool_0 = True

def test_case_2020():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.add(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_2.inorder()
    binary_tree_4 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    var_7 = binary_node_3.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_node_4.inorder()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    var_12 = binary_tree_10.closest(var_11)
    var_13 = var_10.__iter__()
    var_14 = binary_node_5.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_node_6 = module_0.BinaryNode(var_15)
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    var_17 = binary_tree_12.closest(var_16)
    var_18 = var_15.__iter__()
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.add(none_type_1)
    binary_node_7 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_22.__iter__()
    var_25 = var_23.__iter__()

def test_case_2021():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    var_6 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    var_8 = binary_tree_2.__contains__(binary_tree_2)
    assert var_8 is False
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__contains__(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_15 = binary_tree_7.getMax()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__repr__()
    assert var_16 == 'binary:()'
    var_17 = binary_node_3.__repr__()
    assert var_17 == '(L: ((),) R:)'
    var_18 = binary_tree_3.remove(binary_tree_5)

def test_case_2022():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_3.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    var_8 = binary_node_2.inorder()
    var_9 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_node_3.inorder()
    var_12 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)

def test_case_2023():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_6 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_1)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_6 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_0)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_0)
    binary_node_6 = module_0.BinaryNode(var_11)
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_7 = module_0.BinaryNode(var_12)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_node_7.inorder()
    var_14 = binary_tree_9.__iter__()
    binary_node_8 = module_0.BinaryNode(binary_tree_9)
    int_0 = -152

def test_case_2024():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_8 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.add(none_type_0)
    var_10 = binary_tree_2.remove(var_8)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__contains__(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_14.__iter__()
    var_17 = binary_tree_5.__repr__()
    assert var_17 == 'binary:()'
    var_18 = binary_tree_6.__repr__()
    assert var_18 == 'binary:()'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_19 = binary_tree_7.add(none_type_1)
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_1)
    binary_node_4 = module_0.BinaryNode(var_19)
    var_20 = binary_node_3.removeFromParent(var_19, none_type_1)
    binary_tree_9 = module_0.BinaryTree()
    var_21 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_21)
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_tree_10.__iter__()
    var_23 = binary_tree_10.closest(var_22)
    var_24 = var_21.__iter__()

def test_case_2025():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    var_17 = binary_tree_10.getMin()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_node_5.inorder()
    var_20 = binary_tree_11.__iter__()
    binary_node_6 = module_0.BinaryNode(binary_tree_11)

def test_case_2026():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__contains__(binary_tree_2)
    assert var_5 is False
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()

def test_case_2027():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()

def test_case_2028():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_3 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__repr__()
    assert var_4 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_4)
    assert binary_node_4.value == 'binary:()'
    var_5 = binary_node_4.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_5)
    assert binary_node_5.value == '(L: binary:() R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_6 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_node_6.inorder()
    var_9 = binary_tree_6.__iter__()
    binary_node_7 = module_0.BinaryNode(binary_tree_6)
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = binary_tree_9.getMax()

def test_case_2029():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_1)
    var_10 = var_9.__repr__()

def test_case_2030():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_13 = binary_tree_4.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_14 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_14)
    var_15 = binary_node_0.inorder()
    var_16 = var_14.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_17 = binary_tree_6.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_18)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    var_19 = binary_node_2.inorder()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_20)
    var_21 = binary_node_3.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_25 = binary_tree_13.__repr__()
    assert var_25 == 'binary:()'
    var_26 = binary_tree_13.remove(var_25)
    binary_tree_14 = module_0.BinaryTree()
    var_27 = binary_tree_14.__iter__()
    binary_node_4 = module_0.BinaryNode(var_27)
    binary_tree_15 = module_0.BinaryTree()
    var_28 = binary_tree_15.__iter__()
    var_29 = binary_tree_15.closest(var_28)
    var_30 = var_27.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_31 = binary_tree_15.__iter__()

def test_case_2031():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    var_3 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)

def test_case_2032():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    none_type_0 = None

def test_case_2033():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_1.__repr__()
    assert var_8 == 'binary:()'
    var_9 = binary_tree_2.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_17.__iter__()
    var_20 = var_16.__iter__()
    var_21 = var_18.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_22 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_25 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_27 = binary_tree_13.__iter__()
    binary_node_1 = module_0.BinaryNode(var_26)
    var_28 = binary_node_1.removeFromParent(binary_tree_10, var_27)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)

def test_case_2034():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__contains__(binary_tree_2)
    assert var_0 is False
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()

def test_case_2035():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_1)
    var_0 = binary_node_1.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_2.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_node_6 = module_0.BinaryNode(var_12)
    var_14 = binary_node_6.removeFromParent(binary_tree_8, var_13)

def test_case_2036():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_node_0.__repr__()
    assert var_6 == '(L: ((),) R:)'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_8 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    var_15 = binary_node_6.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_7 = module_0.BinaryNode(var_16)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_node_7.inorder()
    var_18 = binary_tree_9.__iter__()

def test_case_2037():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    var_3 = var_1.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__contains__(binary_tree_2)
    assert var_4 is False
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    var_11 = var_8.__repr__()
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_17 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_17)
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.__iter__()
    var_19 = binary_tree_7.closest(var_18)
    var_20 = var_17.__iter__()
    var_21 = binary_node_3.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_22 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_25 = binary_tree_10.__repr__()
    assert var_25 == 'binary:()'
    var_26 = binary_tree_10.remove(var_25)
    var_27 = var_25.__repr__()
    assert var_27 == "'binary:()'"
    binary_tree_11 = module_0.BinaryTree()
    var_28 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_28)
    binary_tree_12 = module_0.BinaryTree()
    var_29 = binary_tree_12.__iter__()
    var_30 = binary_tree_12.closest(var_29)
    var_31 = var_28.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_32 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_33 = var_32.__iter__()
    var_34 = var_33.__repr__()
    var_35 = var_34.__iter__()
    var_36 = var_32.__repr__()
    none_type_0 = None
    binary_tree_15 = module_0.BinaryTree()
    var_37 = binary_tree_15.add(none_type_0)
    binary_tree_16 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_0)
    list_0 = [var_21, var_24]
    var_38 = var_22.__iter__()

def test_case_2038():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_1)
    binary_node_5 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(var_14)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    var_16 = binary_tree_11.closest(var_15)
    binary_node_7 = module_0.BinaryNode(var_15)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_8 = module_0.BinaryNode(bytes_0)
    var_17 = binary_node_8.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__iter__()
    binary_node_9 = module_0.BinaryNode(var_19)
    var_21 = binary_node_9.removeFromParent(binary_tree_12, var_20)
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.add(none_type_2)
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_17.__repr__()
    assert var_23 == 'binary:()'
    binary_node_10 = module_0.BinaryNode(var_23)
    assert binary_node_10.value == 'binary:()'
    binary_tree_18 = module_0.BinaryTree()
    binary_node_11 = module_0.BinaryNode(binary_tree_18)
    var_24 = var_23.__contains__(var_23)

def test_case_2039():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_1.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_14 = binary_tree_5.getMax()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.__iter__()
    var_16 = binary_tree_6.closest(var_15)
    var_17 = var_15.__repr__()
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_20.__iter__()
    var_23 = var_19.__iter__()
    binary_node_2 = module_0.BinaryNode(var_19)
    binary_tree_9 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    var_24 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_25 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    var_27 = var_25.__repr__()
    var_28 = var_25.__iter__()
    var_29 = var_25.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_30 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_30)
    binary_tree_13 = module_0.BinaryTree()
    var_31 = binary_tree_13.__iter__()
    var_32 = binary_tree_13.closest(var_31)
    var_33 = var_30.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_34 = binary_tree_15.__iter__()
    binary_node_6 = module_0.BinaryNode(var_34)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_35 = binary_tree_18.__repr__()
    assert var_35 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_35)
    assert binary_node_7.value == 'binary:()'
    var_36 = binary_tree_15.__repr__()
    assert var_36 == 'binary:()'

def test_case_2040():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_5.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()

def test_case_2041():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_node_1.inorder()
    var_6 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    bytes_1 = b'I\x83\x98'

def test_case_2042():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    var_4 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_4.remove(var_4)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_node_2.inorder()
    var_9 = binary_tree_6.add(binary_node_2)
    bool_0 = True
    binary_node_3 = module_0.BinaryNode(bool_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)

def test_case_2043():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    var_11 = binary_tree_4.getMin()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    var_15 = binary_tree_7.closest(var_14)
    var_16 = var_13.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_17)
    var_18 = binary_node_2.inorder()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.add(none_type_1)
    var_20 = binary_tree_9.remove(var_18)

def test_case_2044():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.add(binary_node_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    var_4 = binary_node_1.__repr__()
    assert var_4 == '(L: binary:() R:)'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_5.__repr__()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.add(none_type_0)
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_10)
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__iter__()
    var_12 = binary_tree_12.closest(var_11)
    binary_node_6 = module_0.BinaryNode(var_11)
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_15.__iter__()
    var_18 = binary_tree_13.__repr__()
    assert var_18 == 'binary:()'
    var_19 = binary_tree_14.__repr__()
    assert var_19 == 'binary:()'

def test_case_2045():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    var_5 = binary_node_1.__repr__()
    assert var_5 == '(L: ((),) R:)'
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    bool_0 = True
    binary_node_3 = module_0.BinaryNode(bool_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    var_9 = binary_tree_7.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    with pytest.raises(ValueError):
        binary_tree_1.getMin()

def test_case_2046():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    var_4 = binary_node_2.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_4)
    assert binary_node_3.value == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_6.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__contains__(binary_tree_9)
    assert var_15 is False
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__repr__()
    assert var_16 == 'binary:()'
    var_17 = binary_tree_10.remove(var_16)

def test_case_2047():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(none_type_3)
    var_5 = var_4.__repr__()

def test_case_2048():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()

def test_case_2049():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_2050():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_8.__iter__()
    var_11 = binary_tree_2.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__repr__()
    assert var_12 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_12)
    assert binary_node_1.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.__repr__()
    assert var_22 == 'binary:()'
    var_23 = binary_tree_13.remove(var_22)
    var_24 = var_22.__repr__()
    assert var_24 == "'binary:()'"
    binary_tree_14 = module_0.BinaryTree()
    var_25 = binary_tree_14.__iter__()
    binary_node_2 = module_0.BinaryNode(var_25)
    binary_tree_15 = module_0.BinaryTree()
    var_26 = binary_tree_15.__iter__()

def test_case_2051():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = binary_node_0.inorder()

def test_case_2052():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    var_6 = binary_node_2.removeFromParent(binary_tree_2, var_5)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_9)
    var_10 = binary_node_5.inorder()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_16)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_node_6.inorder()
    var_18 = binary_tree_12.__iter__()
    binary_node_7 = module_0.BinaryNode(binary_tree_12)

def test_case_2053():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_4.__iter__()
    var_7 = binary_tree_1.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_14 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_node_1.inorder()
    var_16 = binary_tree_5.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_node_3 = module_0.BinaryNode(var_17)
    var_18 = binary_node_2.removeFromParent(var_17, none_type_0)
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.add(none_type_2)
    var_21 = var_20.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.__repr__()
    assert var_22 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_22)
    assert binary_node_5.value == 'binary:()'
    var_23 = binary_node_5.__repr__()
    assert var_23 == '(L: binary:() R:)'
    var_24 = var_22.__repr__()
    assert var_24 == "'binary:()'"
    binary_tree_13 = module_0.BinaryTree()
    var_25 = binary_tree_13.__iter__()
    binary_node_6 = module_0.BinaryNode(var_25)
    binary_tree_14 = module_0.BinaryTree()
    var_26 = binary_tree_14.__iter__()
    var_27 = binary_tree_14.closest(var_26)
    var_28 = var_25.__iter__()
    var_29 = var_26.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_30 = binary_tree_15.__iter__()
    binary_node_7 = module_0.BinaryNode(var_30)
    binary_tree_16 = module_0.BinaryTree()
    var_31 = binary_tree_16.__iter__()
    var_32 = binary_tree_16.closest(var_31)
    var_33 = var_30.__iter__()
    var_34 = binary_node_7.inorder()

def test_case_2054():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    var_1 = binary_node_0.removeFromParent(var_0, none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    var_4 = binary_tree_3.closest(var_3)
    var_5 = var_2.__iter__()
    var_6 = binary_tree_3.remove(var_4)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_tree_4.remove(var_7)
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_1)
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_1)
    binary_node_4 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(dict_0)
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.add(none_type_3)
    var_23 = var_22.__repr__()
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_24 = binary_tree_12.add(none_type_4)
    none_type_5 = None
    binary_tree_13 = module_0.BinaryTree()
    var_25 = binary_tree_13.add(none_type_5)
    binary_node_6 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    none_type_6 = None
    binary_tree_15 = module_0.BinaryTree()
    var_26 = binary_tree_15.__contains__(none_type_6)
    assert var_26 is False
    var_27 = var_26.__repr__()

def test_case_2055():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()

def test_case_2056():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_7 = binary_tree_4.getMin()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()

def test_case_2057():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_1.inorder()
    var_6 = var_4.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_14.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = var_19.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_23)
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_26 = binary_tree_13.__contains__(binary_tree_15)
    assert var_26 is False

def test_case_2058():
    tuple_0 = ()
    none_type_0 = None
    tuple_1 = ()
    binary_node_0 = module_0.BinaryNode(tuple_1)

def test_case_2059():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__repr__()
    assert var_11 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_11)
    assert binary_node_1.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_13.__iter__()
    var_18 = var_15.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()

def test_case_2060():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_1)
    var_8 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_9)
    assert binary_node_1.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    var_11 = binary_node_2.inorder()
    var_12 = binary_tree_4.remove(var_9)
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = binary_tree_6.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.__repr__()
    assert var_18 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_18)
    assert binary_node_4.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.__repr__()
    assert var_19 == 'binary:()'
    var_20 = binary_tree_8.remove(var_19)
    var_21 = var_19.__repr__()
    assert var_21 == "'binary:()'"
    binary_tree_9 = module_0.BinaryTree()
    var_22 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_22)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_23 = binary_node_5.inorder()
    var_24 = binary_tree_9.__iter__()
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    binary_tree_12 = module_0.BinaryTree()
    var_25 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    var_27 = var_26.__repr__()
    var_28 = var_27.__iter__()
    var_29 = var_27.__iter__()

def test_case_2061():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_4)

def test_case_2062():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    var_3 = binary_tree_4.closest(var_2)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    var_6 = binary_node_2.inorder()
    var_7 = var_6.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    var_10 = binary_tree_8.closest(var_9)
    var_11 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_15.__iter__()
    var_18 = binary_tree_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__repr__()
    assert var_19 == 'binary:()'
    var_20 = binary_tree_11.remove(var_19)
    var_21 = var_19.__repr__()
    assert var_21 == "'binary:()'"
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()

def test_case_2063():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    var_8 = binary_tree_5.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = var_7.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_11.__repr__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    var_19 = binary_tree_11.closest(var_18)
    var_20 = var_17.__iter__()
    var_21 = binary_node_4.inorder()
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.add(none_type_1)
    var_23 = binary_tree_12.getMax()
    binary_tree_13 = module_0.BinaryTree()
    var_24 = binary_tree_13.__iter__()
    var_25 = binary_tree_13.closest(var_24)
    var_26 = var_24.__repr__()
    float_0 = -1356.547829

def test_case_2064():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__contains__(none_type_0)
    assert var_1 is False
    var_2 = var_1.__repr__()

def test_case_2065():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.add(binary_node_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    var_5 = binary_tree_4.closest(var_4)
    var_6 = var_3.__iter__()

def test_case_2066():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.__contains__(binary_tree_1)
    assert var_3 is False
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_6.__iter__()
    var_9 = binary_tree_2.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_tree_3.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_node_0.inorder()
    var_13 = binary_tree_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    var_16 = binary_tree_8.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_8.__iter__()

def test_case_2067():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = binary_tree_5.add(var_5)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.add(none_type_1)
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.add(none_type_2)
    binary_node_0 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()

def test_case_2068():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_7)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    var_9 = binary_tree_9.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_12)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_node_5.inorder()
    with pytest.raises(ValueError):
        binary_tree_10.getMax()

def test_case_2069():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    var_3 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    var_6 = binary_tree_5.closest(var_5)
    var_7 = var_4.__iter__()
    var_8 = var_5.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)

def test_case_2070():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)

def test_case_2071():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    var_5 = binary_tree_4.closest(var_4)
    var_6 = var_3.__iter__()
    var_7 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__repr__()
    assert var_9 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_9)
    assert binary_node_3.value == 'binary:()'
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_11.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__repr__()
    assert var_16 == 'binary:()'
    var_17 = binary_tree_11.remove(var_16)
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_19)
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    var_21 = binary_tree_14.closest(var_20)
    var_22 = var_19.__iter__()

def test_case_2072():
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_1)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = binary_tree_5.getMax()

def test_case_2073():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    var_1 = binary_node_0.removeFromParent(var_0, none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_8)
    assert binary_node_3.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(var_9)
    var_10 = binary_node_4.inorder()
    var_11 = binary_tree_4.remove(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    var_14 = binary_node_5.inorder()
    var_15 = var_13.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_node_8 = module_0.BinaryNode(var_17)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_node_9 = module_0.BinaryNode(var_18)
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.__iter__()
    var_20 = binary_tree_15.closest(var_19)
    var_21 = var_18.__iter__()
    var_22 = var_19.__repr__()
    none_type_1 = None
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.add(none_type_1)
    none_type_2 = None
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_17.add(none_type_2)
    binary_node_10 = module_0.BinaryNode(binary_tree_17)
    binary_tree_18 = module_0.BinaryTree()
    var_25 = binary_tree_16.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_26 = binary_tree_19.__iter__()
    binary_node_11 = module_0.BinaryNode(var_26)
    var_27 = binary_node_11.inorder()
    none_type_3 = None
    binary_tree_20 = module_0.BinaryTree()
    var_28 = binary_tree_20.add(none_type_3)
    var_29 = binary_tree_19.remove(var_27)

def test_case_2074():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()

def test_case_2075():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    var_3 = var_1.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    var_6 = var_5.__contains__(var_5)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_2)
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()

def test_case_2076():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_2)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = binary_tree_7.add(var_3)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_8.closest(var_8)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    var_14 = binary_tree_11.closest(var_13)
    var_15 = var_12.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.__iter__()
    binary_node_3 = module_0.BinaryNode(var_21)
    var_22 = binary_node_3.inorder()
    binary_tree_17 = module_0.BinaryTree()
    none_type_3 = None
    binary_tree_18 = module_0.BinaryTree()
    var_23 = binary_tree_18.add(none_type_3)
    binary_tree_19 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_3)
    binary_node_5 = module_0.BinaryNode(var_23)
    var_24 = binary_node_4.removeFromParent(var_23, none_type_3)
    binary_tree_20 = module_0.BinaryTree()
    var_25 = binary_tree_20.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_26 = var_25.__iter__()

def test_case_2077():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    var_2 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    var_7 = binary_node_1.inorder()
    with pytest.raises(ValueError):
        binary_tree_2.getMax()

def test_case_2078():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    var_3 = var_1.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    var_7 = binary_tree_5.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = var_6.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    var_12 = binary_tree_7.closest(var_11)
    var_13 = var_10.__iter__()
    var_14 = binary_tree_7.remove(var_12)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    var_16 = binary_tree_8.__contains__(binary_tree_8)
    assert var_16 is False

def test_case_2079():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_1.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_9.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_12 = binary_tree_4.getMax()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_14.__iter__()
    var_19 = var_16.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_20 = binary_tree_7.__iter__()
    binary_node_0 = module_0.BinaryNode(var_20)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_21 = binary_node_0.inorder()
    var_22 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_7)

def test_case_2080():
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    var_0 = binary_node_2.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_node_3 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = binary_tree_1.remove(var_3)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = binary_tree_2.getMax()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    var_9 = binary_tree_3.closest(var_8)
    var_10 = var_8.__repr__()

def test_case_2081():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.add(none_type_2)
    var_15 = var_14.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__repr__()
    assert var_16 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_16)
    assert binary_node_3.value == 'binary:()'
    var_17 = binary_node_3.__repr__()
    assert var_17 == '(L: binary:() R:)'
    var_18 = var_16.__repr__()
    assert var_18 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_17)
    assert binary_node_4.value == '(L: binary:() R:)'
    var_19 = var_16.__contains__(var_16)
    var_20 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_23.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_26 = binary_tree_12.__repr__()
    assert var_26 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_26)
    assert binary_node_5.value == 'binary:()'
    var_27 = binary_node_5.__repr__()
    assert var_27 == '(L: binary:() R:)'
    var_28 = var_26.__repr__()
    assert var_28 == "'binary:()'"
    binary_node_6 = module_0.BinaryNode(var_27)
    assert binary_node_6.value == '(L: binary:() R:)'
    var_29 = var_26.__contains__(var_26)

def test_case_2082():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_node_2.inorder()
    var_5 = binary_tree_4.add(binary_node_2)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.add(none_type_0)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    var_11 = binary_tree_11.closest(var_10)
    binary_node_5 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    bool_0 = True
    binary_node_6 = module_0.BinaryNode(bool_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_14.__iter__()
    var_17 = binary_tree_12.__repr__()
    assert var_17 == 'binary:()'
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.add(none_type_2)
    binary_node_8 = module_0.BinaryNode(binary_tree_14)
    dict_0 = {}
    binary_tree_15 = module_0.BinaryTree()
    var_19 = binary_tree_15.add(dict_0)
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__iter__()
    var_23 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_24 = binary_tree_16.__iter__()
    binary_node_9 = module_0.BinaryNode(var_24)
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_25 = binary_node_9.inorder()
    var_26 = binary_tree_16.__iter__()

def test_case_2083():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_2.__contains__(binary_tree_4)
    assert var_6 is False
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_15.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_18)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__repr__()
    assert var_19 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_19)
    assert binary_node_4.value == 'binary:()'
    var_20 = binary_tree_9.__repr__()
    assert var_20 == 'binary:()'
    none_type_0 = None
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.add(none_type_0)
    binary_node_5 = module_0.BinaryNode(binary_tree_13)
    var_22 = binary_tree_13.getMin()
    none_type_1 = None
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.add(none_type_1)
    var_24 = binary_tree_14.getMax()
    binary_tree_15 = module_0.BinaryTree()
    var_25 = binary_tree_15.__iter__()
    binary_node_6 = module_0.BinaryNode(var_25)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_26 = binary_tree_18.__repr__()
    assert var_26 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_26)
    assert binary_node_7.value == 'binary:()'
    var_27 = binary_node_7.__repr__()
    assert var_27 == '(L: binary:() R:)'

def test_case_2084():
    bool_0 = False
    str_0 = "g:ho<'WzP"
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.remove(str_0)

def test_case_2085():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__repr__()
    assert var_2 == 'binary:()'
    var_3 = binary_tree_3.remove(var_2)
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    var_9 = binary_node_2.removeFromParent(binary_tree_5, var_8)
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_2)
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.add(none_type_3)
    var_12 = var_11.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    none_type_4 = None
    binary_tree_18 = module_0.BinaryTree()
    var_17 = binary_tree_18.add(none_type_4)
    binary_tree_19 = module_0.BinaryTree()
    var_18 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = binary_tree_20.add(var_17)

def test_case_2086():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    var_3 = binary_tree_5.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = binary_tree_5.remove(var_3)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    var_8 = binary_tree_7.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = binary_node_3.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__repr__()
    assert var_11 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_11)
    assert binary_node_4.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_12)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_node_5.inorder()
    var_14 = binary_tree_9.__iter__()

def test_case_2087():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()

def test_case_2088():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = binary_tree_1.getMax()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    var_7 = binary_tree_2.closest(var_6)
    var_8 = var_6.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    var_11 = binary_tree_4.closest(var_10)
    binary_node_3 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__repr__()
    assert var_12 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_12)
    assert binary_node_4.value == 'binary:()'
    var_13 = binary_node_4.__repr__()
    assert var_13 == '(L: binary:() R:)'
    var_14 = var_12.__repr__()
    assert var_14 == "'binary:()'"
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.add(none_type_1)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_1)
    binary_node_6 = module_0.BinaryNode(var_15)
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_node_7 = module_0.BinaryNode(var_16)
    assert f'{type(binary_node_7.value).__module__}.{type(binary_node_7.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_node_7.inorder()
    var_18 = binary_tree_8.__iter__()
    binary_node_8 = module_0.BinaryNode(binary_tree_8)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.add(none_type_2)
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.add(none_type_3)
    binary_node_9 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    dict_0 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.add(dict_0)
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_24.__iter__()
    var_26 = binary_tree_14.__iter__()

def test_case_2089():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'

def test_case_2090():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__repr__()
    assert var_8 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == 'binary:()'
    var_9 = binary_node_1.__repr__()
    assert var_9 == '(L: binary:() R:)'
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_11 = var_8.__contains__(var_8)
    var_12 = var_10.__repr__()
    assert var_12 == '"\'binary:()\'"'
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    var_14 = binary_tree_7.__contains__(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    var_17 = binary_node_3.inorder()
    var_18 = var_16.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    binary_tree_12 = module_0.BinaryTree()

def test_case_2091():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_4.__iter__()
    var_9 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__repr__()
    assert var_10 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_10)
    assert binary_node_1.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    var_13 = binary_tree_6.closest(var_12)
    var_14 = var_11.__iter__()
    var_15 = binary_tree_6.remove(var_13)

def test_case_2092():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()

def test_case_2093():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_3.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    var_12 = binary_node_0.removeFromParent(binary_tree_6, var_11)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    var_15 = binary_node_1.inorder()
    var_16 = var_14.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_19.__iter__()
    var_22 = var_20.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.__repr__()
    assert var_23 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_23)
    assert binary_node_2.value == 'binary:()'
    var_24 = binary_node_2.__repr__()
    assert var_24 == '(L: binary:() R:)'
    var_25 = var_23.__repr__()
    assert var_25 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_24)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_26 = var_23.__contains__(var_23)

def test_case_2094():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_4)
    assert binary_node_3.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()

def test_case_2095():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_2.inorder()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_1)
    var_5 = binary_tree_1.remove(var_3)
    none_type_2 = None
    binary_node_3 = module_0.BinaryNode(none_type_2)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_tree_3.remove(var_6)
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'

def test_case_2096():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()

def test_case_2097():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_15.__iter__()
    var_18 = binary_tree_7.__repr__()
    assert var_18 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_24 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_25 = binary_tree_12.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_26 = binary_tree_11.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_27 = binary_tree_14.__iter__()
    binary_node_3 = module_0.BinaryNode(var_27)
    var_28 = binary_node_3.inorder()
    binary_tree_15 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    var_29 = binary_node_4.inorder()
    binary_tree_16 = module_0.BinaryTree()
    var_30 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_31 = var_30.__iter__()
    var_32 = var_31.__repr__()
    var_33 = var_32.__iter__()
    var_34 = var_32.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_35 = binary_tree_18.__repr__()
    assert var_35 == 'binary:()'
    var_36 = binary_tree_18.remove(var_35)
    var_37 = var_35.__repr__()
    assert var_37 == "'binary:()'"

def test_case_2098():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(binary_tree_0)
    assert var_0 is False
    var_1 = var_0.__repr__()

def test_case_2099():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_2.inorder()
    var_7 = var_5.__repr__()

def test_case_2100():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_tree_1.remove(var_2)

def test_case_2101():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_node_2.inorder()
    var_2 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(binary_tree_2)
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__repr__()
    assert var_3 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_3)
    assert binary_node_4.value == 'binary:()'
    var_4 = binary_node_4.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_4)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_6 = var_3.__contains__(var_3)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_9.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_1)
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = var_13.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__repr__()
    assert var_17 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_17)
    assert binary_node_7.value == 'binary:()'
    var_18 = binary_node_7.__repr__()
    assert var_18 == '(L: binary:() R:)'
    var_19 = var_17.__repr__()
    assert var_19 == "'binary:()'"
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.__repr__()
    assert var_20 == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    var_21 = binary_tree_17.__iter__()
    binary_node_8 = module_0.BinaryNode(var_21)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()

def test_case_2102():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    var_4 = var_2.__repr__()
    assert var_4 == '"\'binary:()\'"'
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    var_6 = binary_tree_1.__contains__(binary_tree_1)
    assert var_6 is False

def test_case_2103():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    var_6 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_node_0.inorder()

def test_case_2104():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()

def test_case_2105():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_node_1.inorder()
    var_7 = binary_tree_3.__iter__()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_14.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.add(none_type_0)
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.add(none_type_2)
    binary_tree_14 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_2)
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_24.__iter__()
    var_27 = var_25.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_18)
    binary_node_6 = module_0.BinaryNode(binary_node_5)

def test_case_2106():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_node_1.inorder()
    var_5 = var_4.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    with pytest.raises(ValueError):
        binary_tree_12.getMin()

def test_case_2107():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    var_4 = binary_tree_0.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_1)
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_1)
    binary_node_4 = module_0.BinaryNode(var_9)
    var_10 = binary_node_3.removeFromParent(var_9, none_type_1)
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_2)
    var_12 = var_11.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__iter__()
    binary_node_7 = module_0.BinaryNode(var_14)
    var_16 = binary_node_7.removeFromParent(binary_tree_9, var_15)
    dict_0 = {}
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.add(dict_0)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    var_21 = binary_tree_13.__iter__()
    none_type_3 = None
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.add(none_type_3)
    none_type_4 = None
    binary_tree_15 = module_0.BinaryTree()
    var_23 = binary_tree_15.add(none_type_4)
    binary_node_8 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()

def test_case_2108():
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_0)
    assert binary_node_2.value == 'binary:()'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    var_1 = binary_node_3.inorder()

def test_case_2109():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    var_13 = binary_tree_6.closest(var_12)
    var_14 = var_11.__iter__()
    var_15 = binary_tree_6.remove(var_13)

def test_case_2110():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_7.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    var_21 = var_19.__iter__()
    var_22 = binary_tree_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_23 = binary_tree_11.__repr__()
    assert var_23 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_23)
    assert binary_node_1.value == 'binary:()'

def test_case_2111():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_2.remove(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    var_8 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_11.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_16)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_node_1.inorder()
    var_18 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__repr__()
    assert var_19 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_20)
    var_21 = binary_node_3.inorder()
    var_22 = var_20.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__iter__()
    var_24 = binary_tree_13.closest(var_23)

def test_case_2112():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    int_0 = 934

def test_case_2113():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    var_7 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = binary_tree_2.remove(var_7)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    var_11 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    var_12 = binary_node_2.inorder()
    var_13 = var_12.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__repr__()
    assert var_15 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_15)
    assert binary_node_4.value == 'binary:()'
    var_16 = binary_tree_6.__repr__()
    assert var_16 == 'binary:()'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_5 = module_0.BinaryNode(bytes_0)
    var_17 = binary_node_5.inorder()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_tree_12.add(none_type_1)
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.add(none_type_2)
    binary_node_6 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_25 = binary_tree_15.__iter__()
    binary_node_7 = module_0.BinaryNode(var_25)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_26 = binary_node_7.inorder()
    binary_tree_18 = module_0.BinaryTree()
    var_27 = binary_node_7.inorder()

def test_case_2114():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_7)
    assert binary_node_0.value == 'binary:()'
    var_8 = binary_node_0.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    var_10 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_11.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_node_2.inorder()
    var_18 = binary_tree_7.add(binary_node_2)
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_19)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    bool_0 = False

def test_case_2115():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()

def test_case_2116():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    var_7 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_8)
    assert binary_node_2.value == 'binary:()'
    var_9 = binary_node_2.__repr__()
    assert var_9 == '(L: binary:() R:)'
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_9)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_11 = var_8.__contains__(var_8)
    var_12 = var_10.__repr__()
    assert var_12 == '"\'binary:()\'"'
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_15.__iter__()
    var_18 = binary_tree_5.__repr__()
    assert var_18 == 'binary:()'
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_19 = binary_tree_7.add(none_type_2)
    none_type_3 = None
    binary_tree_8 = module_0.BinaryTree()
    var_20 = binary_tree_8.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_21 = binary_tree_7.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(var_22)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_node_5.inorder()
    var_24 = binary_tree_10.add(binary_node_5)
    str_0 = 'b}@pV%=ey'
    var_25 = binary_tree_4.__iter__()

def test_case_2117():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_7.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    var_16 = binary_tree_9.closest(var_15)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.add(dict_0)
    assert f'{type(binary_tree_13.root).__module__}.{type(binary_tree_13.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    none_type_0 = None
    binary_tree_14 = module_0.BinaryTree()
    var_25 = binary_tree_14.add(none_type_0)
    binary_node_2 = module_0.BinaryNode(binary_tree_14)
    var_26 = binary_tree_14.getMin()
    binary_tree_15 = module_0.BinaryTree()
    var_27 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_27.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    var_30 = binary_tree_17.__iter__()
    binary_node_3 = module_0.BinaryNode(var_30)
    binary_tree_18 = module_0.BinaryTree()
    var_31 = binary_tree_18.__iter__()
    var_32 = binary_tree_18.closest(var_31)
    binary_node_4 = module_0.BinaryNode(var_31)
    str_0 = 'zjb[+,'
    dict_1 = {binary_tree_3: binary_tree_7, var_23: var_4, var_0: var_32, str_0: var_23}

def test_case_2118():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    var_9 = binary_node_0.removeFromParent(binary_tree_2, var_8)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__contains__(none_type_0)
    assert var_10 is False
    var_11 = var_10.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_12 = binary_node_1.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_15.__iter__()
    var_18 = binary_tree_7.__repr__()
    assert var_18 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_19)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    var_21 = binary_tree_12.closest(var_20)
    binary_tree_13 = module_0.BinaryTree()
    var_22 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.__iter__()
    binary_node_3 = module_0.BinaryNode(var_24)
    binary_tree_16 = module_0.BinaryTree()
    var_25 = binary_tree_16.__iter__()
    binary_node_4 = module_0.BinaryNode(var_25)
    binary_tree_17 = module_0.BinaryTree()
    var_26 = binary_tree_17.__iter__()
    var_27 = binary_tree_17.closest(var_26)
    var_28 = var_25.__iter__()

def test_case_2119():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    var_2 = binary_node_2.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_2)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_4 = var_1.__contains__(var_1)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.__contains__(binary_tree_4)
    assert var_7 is False
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_7 = module_0.BinaryTree()

def test_case_2120():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_4.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__repr__()
    assert var_15 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_15)
    assert binary_node_2.value == 'binary:()'
    var_16 = binary_tree_9.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    var_21 = binary_node_3.inorder()

def test_case_2121():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__repr__()
    assert var_0 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_0)
    assert binary_node_2.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_3.inorder()
    var_3 = binary_tree_2.remove(var_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_4)
    assert binary_node_5.value == 'binary:()'
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_6 = module_0.BinaryNode(tuple_3)
    var_6 = binary_node_6.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_8 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_8.value).__module__}.{type(binary_node_8.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_6.__contains__(binary_tree_8)
    assert var_10 is False
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()

def test_case_2122():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    var_4 = binary_node_1.inorder()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_1)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_1)
    binary_node_4 = module_0.BinaryNode(var_5)
    var_6 = binary_node_3.removeFromParent(var_5, none_type_1)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_5 = module_0.BinaryNode(set_1)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__contains__(binary_tree_6)
    assert var_12 is False
    binary_tree_7 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_7)
    var_13 = binary_node_7.inorder()
    var_14 = var_13.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_8)

def test_case_2123():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = binary_tree_1.remove(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_tree_3.remove(var_6)
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_5.__repr__()
    assert var_14 == 'binary:()'
    var_15 = binary_tree_6.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    var_20 = var_18.__iter__()
    var_21 = binary_tree_7.__repr__()
    assert var_21 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()

def test_case_2124():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    none_type_0 = None
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    var_5 = binary_tree_5.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_3.getMin()

def test_case_2125():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    int_0 = -794
    var_3 = var_2.__iter__()

def test_case_2126():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_5.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_13.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()

def test_case_2127():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    var_7 = binary_node_2.inorder()
    var_8 = var_6.__repr__()
    var_9 = binary_node_2.addToSubTree(binary_tree_8, var_5)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree1.BinaryTree'
    assert f'{type(var_9.root).__module__}.{type(var_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_2128():
    binary_tree_0 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_2129():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__contains__(none_type_0)
    assert var_6 is False
    var_7 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    var_9 = binary_tree_4.remove(var_8)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_9)
    binary_node_3 = module_0.BinaryNode(binary_node_2)

def test_case_2130():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_8.__iter__()
    var_11 = binary_tree_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__repr__()
    assert var_12 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_12)
    assert binary_node_2.value == 'binary:()'
    var_13 = binary_node_2.__repr__()
    assert var_13 == '(L: binary:() R:)'
    var_14 = var_12.__repr__()
    assert var_14 == "'binary:()'"
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_12)
    var_16 = binary_node_4.inorder()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_19 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    var_24 = var_20.__iter__()
    var_25 = binary_node_4.inorder()
    var_26 = binary_tree_18.__iter__()

def test_case_2131():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_12)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    var_14 = binary_tree_7.closest(var_13)
    var_15 = var_12.__iter__()
    bool_0 = True

def test_case_2132():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_8 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_node_2.inorder()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    var_20 = var_18.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.__iter__()
    var_22 = binary_tree_12.closest(var_21)
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_23)
    binary_tree_14 = module_0.BinaryTree()
    var_24 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_26.__iter__()
    var_29 = var_25.__iter__()
    binary_node_4 = module_0.BinaryNode(var_25)
    binary_tree_16 = module_0.BinaryTree()
    var_30 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_31 = var_30.__iter__()
    var_32 = var_30.__repr__()
    var_33 = var_30.__iter__()
    var_34 = var_30.__repr__()

def test_case_2133():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    var_3 = binary_tree_1.remove(var_2)

def test_case_2134():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__repr__()
    assert var_2 == 'binary:()'
    var_3 = binary_tree_3.remove(var_2)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_4 = binary_node_1.inorder()
    none_type_0 = None
    binary_node_2 = module_0.BinaryNode(none_type_0)

def test_case_2135():
    binary_tree_0 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_2136():
    binary_tree_0 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    var_2 = binary_tree_2.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    var_6 = binary_node_4.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_7)
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()
    var_9 = binary_tree_10.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = binary_node_5.inorder()

def test_case_2137():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    var_3 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_6.__iter__()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_node_3.inorder()

def test_case_2138():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    var_4 = binary_node_1.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_6 = var_3.__contains__(var_3)
    var_7 = var_5.__repr__()
    assert var_7 == '"\'binary:()\'"'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_4 = module_0.BinaryNode(tuple_3)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__repr__()
    assert var_11 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_11)
    assert binary_node_5.value == 'binary:()'
    var_12 = binary_tree_7.__repr__()
    assert var_12 == 'binary:()'
    bool_0 = False

def test_case_2139():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    var_7 = binary_node_0.inorder()

def test_case_2140():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_7)
    assert binary_node_0.value == 'binary:()'
    var_8 = binary_node_0.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == '(L: binary:() R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__repr__()
    assert var_11 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_11)
    assert binary_node_4.value == 'binary:()'
    var_12 = binary_tree_6.__repr__()
    assert var_12 == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_node_7 = module_0.BinaryNode(var_13)
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    var_15 = binary_tree_9.closest(var_14)
    var_16 = var_13.__iter__()
    var_17 = binary_node_7.inorder()
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.add(dict_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    with pytest.raises(ValueError):
        binary_tree_7.getMax()

def test_case_2141():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    var_4 = binary_tree_0.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()

def test_case_2142():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    var_3 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()

def test_case_2143():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()

def test_case_2144():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    var_4 = var_2.__repr__()
    assert var_4 == '"\'binary:()\'"'
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_9 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_11.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__repr__()
    assert var_15 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_15)
    assert binary_node_2.value == 'binary:()'
    var_16 = binary_node_2.__repr__()
    assert var_16 == '(L: binary:() R:)'
    var_17 = var_15.__repr__()
    assert var_17 == "'binary:()'"

def test_case_2145():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()

def test_case_2146():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    var_1 = binary_node_2.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__contains__(binary_tree_2)
    assert var_2 is False
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_3)
    assert binary_node_5.value == 'binary:()'
    var_4 = binary_node_5.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_6 = module_0.BinaryNode(var_4)
    assert binary_node_6.value == '(L: binary:() R:)'
    var_6 = var_3.__contains__(var_3)
    bool_0 = True
    binary_node_7 = module_0.BinaryNode(bool_0)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_9 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_14.__iter__()
    var_17 = binary_tree_7.__iter__()

def test_case_2147():
    bool_0 = True
    int_0 = -2211
    set_0 = {int_0, int_0}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.closest(set_0)

def test_case_2148():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__repr__()
    assert var_10 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_10)
    assert binary_node_2.value == 'binary:()'
    var_11 = binary_node_2.__repr__()
    assert var_11 == '(L: binary:() R:)'
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_11)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_13 = var_10.__contains__(var_10)
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    with pytest.raises(ValueError):
        binary_tree_9.getMax()

def test_case_2149():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_8)
    assert binary_node_1.value == 'binary:()'
    var_9 = binary_node_1.__repr__()
    assert var_9 == '(L: binary:() R:)'
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_11 = var_8.__contains__(var_8)
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    var_15 = binary_tree_7.closest(var_14)
    var_16 = var_13.__iter__()
    var_17 = var_14.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_18)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_6 = module_0.BinaryNode(set_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    var_19 = binary_node_6.inorder()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.add(none_type_2)
    binary_tree_13 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(none_type_2)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = var_21.__repr__()
    none_type_3 = None
    binary_tree_18 = module_0.BinaryTree()
    var_25 = binary_tree_18.add(none_type_3)
    var_26 = binary_tree_18.getMax()

def test_case_2150():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_0 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()

def test_case_2151():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()
    bool_0 = True
    binary_node_1 = module_0.BinaryNode(bool_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_3)
    assert binary_node_3.value == 'binary:()'
    var_4 = binary_node_3.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_4)
    assert binary_node_4.value == '(L: binary:() R:)'
    var_6 = var_3.__contains__(var_3)
    var_7 = binary_tree_2.__iter__()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_6 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    var_11 = binary_tree_5.closest(var_10)
    var_12 = var_9.__iter__()
    var_13 = binary_tree_5.remove(var_11)

def test_case_2152():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_3 = binary_tree_6.__iter__()
    var_4 = binary_tree_6.closest(var_3)
    var_5 = var_2.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_7)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_node_5.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_9 = binary_tree_11.__repr__()
    assert var_9 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_9)
    assert binary_node_6.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_10 = binary_tree_12.__iter__()
    binary_node_7 = module_0.BinaryNode(var_10)
    var_11 = binary_node_7.inorder()
    var_12 = binary_tree_11.remove(var_9)
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_15.__iter__()
    var_18 = binary_tree_13.__repr__()
    assert var_18 == 'binary:()'
    var_19 = binary_tree_14.__repr__()
    assert var_19 == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_22 = binary_tree_18.__iter__()
    binary_node_8 = module_0.BinaryNode(var_21)
    binary_tree_19 = module_0.BinaryTree()

def test_case_2153():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    binary_node_3 = module_0.BinaryNode(var_6)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    var_10 = binary_tree_6.closest(var_9)
    var_11 = var_8.__iter__()
    var_12 = binary_node_4.inorder()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = binary_tree_9.add(var_13)
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(dict_0)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_node_5 = module_0.BinaryNode(var_19)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_6 = module_0.BinaryNode(set_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_11 = module_0.BinaryTree()

def test_case_2154():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_2155():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(dict_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()

def test_case_2156():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    var_13 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_15 = binary_tree_8.remove(var_13)
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__repr__()
    assert var_19 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_19)
    assert binary_node_3.value == 'binary:()'
    var_20 = binary_node_3.__repr__()
    assert var_20 == '(L: binary:() R:)'
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_26 = var_16.__repr__()

def test_case_2157():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'

def test_case_2158():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_node_3 = module_0.BinaryNode(var_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_4.__iter__()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_1)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = binary_tree_8.add(var_11)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_10)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_2)
    var_16 = var_15.__repr__()
    none_type_3 = None
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.add(none_type_3)
    none_type_4 = None
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.add(none_type_4)
    binary_node_9 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = binary_tree_15.__iter__()
    none_type_5 = None
    binary_tree_16 = module_0.BinaryTree()
    var_21 = binary_tree_16.add(none_type_5)
    binary_node_10 = module_0.BinaryNode(binary_tree_16)

def test_case_2159():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    var_7 = binary_tree_4.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    var_11 = binary_node_3.inorder()
    var_12 = var_11.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()

def test_case_2160():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_11 = binary_tree_3.add(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_13.__iter__()
    binary_node_0 = module_0.BinaryNode(var_13)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_18 = binary_tree_6.add(none_type_1)
    var_19 = binary_tree_6.getMax()
    binary_tree_7 = module_0.BinaryTree()
    var_20 = binary_tree_7.__iter__()
    var_21 = binary_tree_7.closest(var_20)
    var_22 = var_20.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_23 = binary_tree_8.__repr__()
    assert var_23 == 'binary:()'
    var_24 = binary_tree_8.remove(var_23)
    var_25 = var_23.__repr__()
    assert var_25 == "'binary:()'"
    binary_tree_9 = module_0.BinaryTree()
    var_26 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_26)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_27 = binary_node_1.inorder()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_28 = binary_tree_13.__iter__()
    binary_node_2 = module_0.BinaryNode(var_28)
    var_29 = binary_node_2.inorder()
    str_0 = 'hFy|u\tG*{E~dHL_\\%'

def test_case_2161():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_8)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()

def test_case_2162():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    var_2 = binary_tree_4.__repr__()
    assert var_2 == 'binary:()'
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_node_4 = module_0.BinaryNode(var_3)

def test_case_2163():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(binary_tree_0)
    assert var_0 is False
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_5)
    assert binary_node_3.value == 'binary:()'
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_4.inorder()
    binary_node_5 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    var_9 = binary_tree_4.remove(var_8)
    binary_tree_5 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_5)
    var_10 = binary_node_6.inorder()
    var_11 = var_10.__repr__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(none_type_0)
    dict_1 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(dict_1)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_8)
    var_18 = binary_node_7.inorder()

def test_case_2164():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__contains__(none_type_0)
    assert var_3 is False
    var_4 = var_3.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    var_5 = binary_node_1.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    bool_0 = True
    binary_node_3 = module_0.BinaryNode(bool_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_12.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__repr__()
    assert var_15 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_15)
    assert binary_node_6.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    var_21 = var_17.__iter__()
    binary_node_7 = module_0.BinaryNode(var_17)
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__repr__()
    assert var_22 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_22)
    assert binary_node_8.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.__iter__()
    binary_node_9 = module_0.BinaryNode(var_23)
    var_24 = binary_node_9.inorder()
    var_25 = binary_tree_11.remove(var_22)

def test_case_2165():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_2.getMax()

def test_case_2166():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(dict_0)
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_7 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_9 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__repr__()
    assert var_10 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_10)
    assert binary_node_2.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_12 = binary_node_3.inorder()
    var_13 = binary_tree_6.remove(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_14)
    assert binary_node_4.value == 'binary:()'
    var_15 = binary_node_4.__repr__()
    assert var_15 == '(L: binary:() R:)'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__repr__()
    assert var_16 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_16)
    assert binary_node_6.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_17)
    assert f'{type(binary_node_7.value).__module__}.{type(binary_node_7.value).__qualname__}' == 'builtins.generator'
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    var_19 = binary_tree_11.closest(var_18)
    var_20 = var_17.__iter__()
    var_21 = binary_node_7.inorder()

def test_case_2167():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_node_1 = module_0.BinaryNode(binary_node_0)

def test_case_2168():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = binary_tree_5.add(var_3)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_8)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__repr__()
    assert var_13 == 'binary:()'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__contains__(none_type_1)
    assert var_14 is False
    var_15 = var_14.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    var_21 = var_19.__iter__()
    var_22 = binary_tree_10.__iter__()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.add(none_type_2)
    binary_tree_13 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_2)
    binary_node_4 = module_0.BinaryNode(var_23)
    var_24 = binary_node_3.removeFromParent(var_23, none_type_2)

def test_case_2169():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_2170():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_0.inorder()
    var_3 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_6.__iter__()
    var_9 = binary_tree_2.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_7 = module_0.BinaryTree()

def test_case_2171():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(binary_tree_0)
    assert var_0 is False
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_2)
    assert binary_node_3.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_4 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_4.inorder()
    var_5 = binary_tree_2.remove(var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_5 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    var_8 = binary_tree_5.closest(var_7)
    var_9 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_6 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    var_12 = binary_tree_7.closest(var_11)
    var_13 = var_10.__iter__()
    var_14 = binary_tree_7.remove(var_12)
    none_type_0 = None
    binary_node_7 = module_0.BinaryNode(none_type_0)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.add(none_type_1)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = var_15.__repr__()

def test_case_2172():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_4.__iter__()
    var_7 = binary_tree_4.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    var_9 = binary_node_1.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_tree_16.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    var_18 = binary_node_4.inorder()
    with pytest.raises(ValueError):
        binary_tree_1.getMin()

def test_case_2173():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_10.__iter__()

def test_case_2174():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_node_1.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_4 = var_1.__contains__(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    var_11 = binary_tree_5.closest(var_10)
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_17)
    var_18 = binary_node_3.inorder()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_0.__repr__()
    assert var_19 == 'binary:()'

def test_case_2175():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_6.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_9 = binary_node_1.inorder()

def test_case_2176():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    var_4 = var_2.__repr__()
    assert var_4 == '"\'binary:()\'"'

def test_case_2177():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__contains__(none_type_0)
    assert var_1 is False
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    var_9 = binary_node_2.__repr__()
    assert var_9 == '(L: ((),) R:)'

def test_case_2178():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = binary_tree_1.closest(var_3)

def test_case_2179():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(none_type_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    int_0 = 2132

def test_case_2180():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_7)
    assert binary_node_1.value == 'binary:()'
    var_8 = binary_node_1.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_8)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_10 = var_7.__contains__(var_7)
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__repr__()
    assert var_12 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_12)
    assert binary_node_3.value == 'binary:()'
    var_13 = binary_node_3.__repr__()
    assert var_13 == '(L: binary:() R:)'
    var_14 = var_12.__repr__()
    assert var_14 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_13)
    assert binary_node_4.value == '(L: binary:() R:)'
    var_15 = var_12.__contains__(var_12)
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_16)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_12)
    binary_node_8 = module_0.BinaryNode(binary_node_7)

def test_case_2181():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    var_11 = var_8.__repr__()
    dict_1 = {var_3: var_11}

def test_case_2182():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_node_0.__repr__()
    assert var_7 == '(L: ((),) R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__contains__(binary_tree_5)
    assert var_11 is False
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_3 = module_0.BinaryNode(tuple_3)
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__repr__()
    assert var_12 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_12)
    assert binary_node_4.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    var_15 = binary_tree_8.__contains__(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_16)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__repr__()
    assert var_17 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_17)
    assert binary_node_6.value == 'binary:()'
    var_18 = binary_tree_9.__repr__()
    assert var_18 == 'binary:()'
    none_type_0 = None
    var_19 = binary_tree_4.__iter__()

def test_case_2183():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    bool_0 = True
    binary_node_2 = module_0.BinaryNode(bool_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(dict_0)
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_5 = module_0.BinaryNode(tuple_3)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__repr__()
    assert var_13 == 'binary:()'
    var_14 = binary_node_5.__repr__()
    assert var_14 == '(L: ((),) R:)'
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_12)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    var_16 = binary_tree_13.__contains__(binary_tree_13)
    assert var_16 is False
    binary_tree_14 = module_0.BinaryTree()
    var_17 = binary_tree_14.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_node_8 = module_0.BinaryNode(var_18)
    var_19 = binary_node_8.inorder()
    var_20 = var_18.__repr__()

def test_case_2184():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    var_2 = binary_node_2.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_2)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_4 = var_1.__contains__(var_1)
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_5.add(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_11)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_1)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.add(none_type_2)
    binary_node_6 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_7 = module_0.BinaryNode(bytes_0)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_16.__iter__()
    dict_0 = {}
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.add(dict_0)
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()

def test_case_2185():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    var_6 = var_3.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_7)
    assert binary_node_1.value == 'binary:()'
    var_8 = binary_tree_2.__repr__()
    assert var_8 == 'binary:()'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_1)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    none_type_0 = None
    binary_node_5 = module_0.BinaryNode(none_type_0)
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_9.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_14 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(var_22)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()

def test_case_2186():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_3 = binary_node_0.inorder()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_node_1.inorder()
    var_7 = binary_tree_2.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_5 = module_0.BinaryTree()

def test_case_2187():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_1.__iter__()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_node_2 = module_0.BinaryNode(var_6)

def test_case_2188():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()

def test_case_2189():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)

def test_case_2190():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_3.__contains__(binary_tree_5)
    assert var_4 is False
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(none_type_2)
    none_type_3 = None
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__iter__()
    binary_node_5 = module_0.BinaryNode(var_17)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_18 = binary_node_5.inorder()

def test_case_2191():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_node_1.inorder()
    var_4 = binary_tree_2.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__repr__()
    assert var_11 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_11)
    assert binary_node_4.value == 'binary:()'
    var_12 = binary_tree_7.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_16.__iter__()
    var_19 = binary_tree_8.__iter__()
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.add(dict_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    binary_node_5 = module_0.BinaryNode(var_22)
    binary_tree_11 = module_0.BinaryTree()
    var_25 = binary_tree_11.__iter__()
    binary_node_6 = module_0.BinaryNode(var_25)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_26 = binary_node_6.inorder()
    var_27 = binary_tree_11.__iter__()
    binary_node_7 = module_0.BinaryNode(binary_tree_11)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_8 = module_0.BinaryNode(tuple_3)
    binary_tree_14 = module_0.BinaryTree()
    var_28 = binary_tree_14.__repr__()
    assert var_28 == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_28)
    assert binary_node_9.value == 'binary:()'

def test_case_2192():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'

def test_case_2193():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_node_1.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_4 = var_1.__contains__(var_1)
    var_5 = var_3.__repr__()
    assert var_5 == '"\'binary:()\'"'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_6)
    assert binary_node_5.value == 'binary:()'
    var_7 = binary_node_5.__repr__()
    assert var_7 == '(L: binary:() R:)'
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    binary_node_6 = module_0.BinaryNode(var_7)
    assert binary_node_6.value == '(L: binary:() R:)'

def test_case_2194():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_1.inorder()

def test_case_2195():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_5 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_8.__iter__()
    var_11 = binary_tree_2.__repr__()
    assert var_11 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    var_14 = binary_tree_7.closest(var_13)
    var_15 = var_12.__iter__()
    var_16 = binary_tree_7.remove(var_14)
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__repr__()
    assert var_17 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_17)
    assert binary_node_4.value == 'binary:()'
    var_18 = binary_node_4.__repr__()
    assert var_18 == '(L: binary:() R:)'
    var_19 = var_17.__repr__()
    assert var_19 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_18)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_20 = var_17.__contains__(var_17)
    binary_tree_9 = module_0.BinaryTree()
    var_21 = binary_tree_9.__repr__()
    assert var_21 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_21)
    assert binary_node_6.value == 'binary:()'
    var_22 = binary_node_6.__repr__()
    assert var_22 == '(L: binary:() R:)'
    var_23 = var_21.__repr__()
    assert var_23 == "'binary:()'"
    binary_node_7 = module_0.BinaryNode(var_22)
    assert binary_node_7.value == '(L: binary:() R:)'
    var_24 = var_21.__contains__(var_21)
    var_25 = var_23.__repr__()
    assert var_25 == '"\'binary:()\'"'
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_26 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_8 = module_0.BinaryNode(binary_tree_10)
    with pytest.raises(ValueError):
        binary_tree_6.getMin()

def test_case_2196():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_1.getMax()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_4)
    var_6 = var_4.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    var_9 = binary_tree_4.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()

def test_case_2197():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    var_1 = binary_tree_0.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == 'binary:()'
    var_3 = binary_node_2.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_2.remove(var_5)
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__repr__()
    assert var_17 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_17)
    assert binary_node_4.value == 'binary:()'
    var_18 = binary_tree_8.__repr__()
    assert var_18 == 'binary:()'

def test_case_2198():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    var_4 = binary_node_2.__repr__()
    assert var_4 == '(L: binary:() R:)'

def test_case_2199():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()

def test_case_2200():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()

def test_case_2201():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_3 = module_0.BinaryNode(set_1)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_1 = binary_node_3.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_9)
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_6 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_node_7 = module_0.BinaryNode(var_11)
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    var_13 = binary_tree_12.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_17.__iter__()
    var_20 = binary_tree_14.__repr__()
    assert var_20 == 'binary:()'
    var_21 = binary_tree_15.__repr__()
    assert var_21 == 'binary:()'
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_22.__repr__()
    binary_tree_18 = module_0.BinaryTree()

def test_case_2202():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    var_6 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_2.getMin()

def test_case_2203():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_node_4 = module_0.BinaryNode(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_6)
    var_7 = binary_node_5.inorder()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_6 = module_0.BinaryNode(tuple_1)
    var_8 = binary_node_6.inorder()
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_7 = module_0.BinaryNode(bytes_1)
    var_9 = binary_node_7.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = var_10.__repr__()

def test_case_2204():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_3)
    var_4 = binary_node_0.removeFromParent(var_3, none_type_0)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    var_6 = binary_node_2.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_6)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_8 = var_5.__contains__(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_14.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    var_19 = binary_node_5.inorder()
    var_20 = var_19.__repr__()

def test_case_2205():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = var_2.__repr__()

def test_case_2206():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(binary_tree_0)
    assert var_0 is False
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    var_4 = binary_node_2.removeFromParent(binary_tree_1, var_3)

def test_case_2207():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_7.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__repr__()
    assert var_12 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_12)
    assert binary_node_0.value == 'binary:()'
    var_13 = binary_node_0.__repr__()
    assert var_13 == '(L: binary:() R:)'
    binary_tree_5 = module_0.BinaryTree()
    var_14 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_19 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_19)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_20 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_node_3 = module_0.BinaryNode(var_20)
    binary_tree_10 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    var_21 = binary_node_4.inorder()
    var_22 = var_21.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_5 = module_0.BinaryNode(bytes_0)
    var_23 = binary_node_5.inorder()

def test_case_2208():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    var_5 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    var_8 = binary_tree_3.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = binary_tree_3.remove(var_8)
    none_type_0 = None
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_17 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_17)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_node_3.inorder()
    var_19 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_20)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.__iter__()
    binary_node_7 = module_0.BinaryNode(var_22)
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_17.__iter__()
    binary_node_8 = module_0.BinaryNode(var_24)
    binary_tree_18 = module_0.BinaryTree()
    var_25 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_27 = binary_tree_17.__contains__(binary_tree_19)
    assert var_27 is False

def test_case_2209():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()

def test_case_2210():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    var_2 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_3 = var_2.__repr__()

def test_case_2211():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    var_5 = binary_tree_5.__contains__(binary_tree_5)
    assert var_5 is False
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(dict_0)
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_10 = module_0.BinaryTree()

def test_case_2212():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    var_9 = binary_node_1.inorder()
    var_10 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_14.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_17 = binary_node_2.inorder()

def test_case_2213():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_5 = binary_node_0.inorder()
    var_6 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    var_8 = binary_node_1.inorder()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_1)
    var_10 = binary_tree_4.remove(var_8)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_6.__contains__(binary_tree_8)
    assert var_14 is False
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__contains__(binary_tree_10)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_2)
    binary_node_5 = module_0.BinaryNode(binary_tree_11)
    var_17 = binary_tree_11.getMin()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__repr__()
    assert var_18 == 'binary:()'
    var_19 = binary_tree_12.remove(var_18)

def test_case_2214():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_9)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    var_11 = binary_tree_6.closest(var_10)
    var_12 = var_9.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    var_13 = binary_node_1.inorder()
    var_14 = var_13.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__repr__()
    assert var_15 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_15)
    assert binary_node_2.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    var_16 = var_15.__contains__(var_15)
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_10 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_node_5 = module_0.BinaryNode(var_17)
    dict_0 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.add(dict_0)
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__iter__()
    var_22 = binary_tree_11.__iter__()
    dict_1 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.add(dict_1)
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_25.__iter__()

def test_case_2215():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = binary_tree_1.remove(var_4)
    dict_0 = {}
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(dict_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__repr__()
    assert var_12 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_12)
    assert binary_node_3.value == 'binary:()'
    var_13 = binary_node_3.__repr__()
    assert var_13 == '(L: binary:() R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_14)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    var_16 = binary_tree_7.closest(var_15)
    var_17 = var_14.__iter__()
    var_18 = binary_node_4.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_19)
    var_20 = binary_node_5.inorder()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = binary_tree_10.closest(var_22)
    binary_tree_12 = module_0.BinaryTree()
    var_26 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_26)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()

def test_case_2216():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__contains__(binary_tree_6)
    assert var_7 is False
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    var_16 = binary_tree_9.closest(var_15)
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(dict_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_node_3 = module_0.BinaryNode(var_19)
    dict_1 = {}
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.add(dict_1)
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_24.__iter__()
    var_26 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_27 = binary_tree_12.__iter__()
    binary_node_4 = module_0.BinaryNode(var_27)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_28 = binary_node_4.inorder()
    binary_tree_15 = module_0.BinaryTree()
    var_29 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_30 = var_29.__iter__()
    var_31 = var_30.__repr__()
    var_32 = var_31.__iter__()
    var_33 = var_32.__repr__()

def test_case_2217():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_2 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_3 = binary_node_3.inorder()
    binary_tree_10 = module_0.BinaryTree()
    var_4 = binary_node_3.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_5 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_4.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_7 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_8 = binary_node_5.inorder()
    var_9 = binary_tree_12.__iter__()

def test_case_2218():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()

def test_case_2219():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_4 = binary_tree_4.__contains__(binary_tree_6)
    assert var_4 is False
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    none_type_0 = None
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_7 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_7)
    var_8 = binary_node_4.inorder()
    var_9 = var_7.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    var_14 = var_10.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_15)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_node_5.inorder()
    binary_tree_16 = module_0.BinaryTree()
    var_17 = binary_node_5.inorder()
    binary_tree_17 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_17)
    var_18 = binary_node_6.inorder()
    binary_node_7 = module_0.BinaryNode(binary_tree_17)

def test_case_2220():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False

def test_case_2221():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_4 = binary_node_0.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__repr__()
    assert var_6 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == 'binary:()'
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    bool_0 = False
    binary_node_3 = module_0.BinaryNode(bool_0)
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_1)
    bytes_2 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_5 = module_0.BinaryNode(bytes_2)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__repr__()
    assert var_12 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_12)
    assert binary_node_7.value == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_12)
    var_13 = var_12.__contains__(var_12)

def test_case_2222():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_node_1.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__contains__(binary_tree_4)
    assert var_3 is False
    bool_0 = False
    binary_node_4 = module_0.BinaryNode(bool_0)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    var_10 = var_7.__repr__()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_5 = module_0.BinaryNode(set_1)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_11.__repr__()

def test_case_2223():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    dict_1 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.add(dict_1)
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_10 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_node_0.inorder()
    var_12 = binary_tree_2.add(binary_node_0)
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_13)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_node_1.inorder()
    var_15 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_node_3.inorder()
    var_18 = binary_tree_8.__iter__()
    complex_0 = 805.825701 + 1789.90284j
    int_0 = -3349

def test_case_2224():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_2.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_1.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    var_13 = binary_node_3.inorder()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(none_type_1)
    binary_node_7 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_18.__repr__()
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.add(none_type_2)
    var_24 = binary_tree_16.getMax()
    with pytest.raises(ValueError):
        binary_tree_10.getMin()

def test_case_2225():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_node_0 = module_0.BinaryNode(var_2)
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_node_1.inorder()
    var_7 = binary_tree_1.add(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_8.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__repr__()
    assert var_13 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_13)
    assert binary_node_2.value == 'binary:()'
    var_14 = binary_node_2.__repr__()
    assert var_14 == '(L: binary:() R:)'
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()

def test_case_2226():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()

def test_case_2227():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    var_1 = binary_node_0.removeFromParent(var_0, none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.__contains__(binary_tree_2)
    assert var_3 is False
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_node_2.inorder()

def test_case_2228():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__repr__()
    assert var_0 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_0)
    assert binary_node_2.value == 'binary:()'
    var_1 = binary_node_2.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_1)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    var_4 = binary_tree_1.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_5)
    assert binary_node_5.value == 'binary:()'
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_6 = module_0.BinaryNode(set_1)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__contains__(binary_tree_3)
    assert var_6 is False
    none_type_0 = None
    binary_node_8 = module_0.BinaryNode(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_9 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_9.value).__module__}.{type(binary_node_9.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_node_9.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_node_9.inorder()

def test_case_2229():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_7.__iter__()
    binary_node_4 = module_0.BinaryNode(var_7)
    binary_tree_11 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_11)

def test_case_2230():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    var_8 = binary_tree_6.closest(var_7)
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_node_3.inorder()
    binary_tree_10 = module_0.BinaryTree()

def test_case_2231():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_8.__iter__()
    var_11 = binary_tree_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__repr__()
    assert var_17 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_17)
    assert binary_node_2.value == 'binary:()'
    var_18 = binary_node_2.__repr__()
    assert var_18 == '(L: binary:() R:)'
    var_19 = var_17.__repr__()
    assert var_19 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_18)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_20 = var_17.__contains__(var_17)
    var_21 = binary_tree_8.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_22 = binary_node_4.inorder()
    bool_0 = False
    binary_node_6 = module_0.BinaryNode(bool_0)
    binary_tree_9 = module_0.BinaryTree()
    var_23 = binary_tree_9.__iter__()
    binary_node_7 = module_0.BinaryNode(var_23)
    var_24 = binary_node_7.inorder()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_25 = binary_tree_11.__repr__()
    assert var_25 == 'binary:()'
    var_26 = binary_tree_11.remove(var_25)
    binary_tree_12 = module_0.BinaryTree()
    var_27 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_27.__repr__()
    var_30 = var_27.__iter__()
    var_31 = var_29.__iter__()
    var_32 = binary_tree_12.__repr__()
    assert var_32 == 'binary:()'

def test_case_2232():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    var_11 = var_8.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_6 = module_0.BinaryTree()
    bytes_0 = b'\xf8Z\x15\xd0\x91\xf3\xe2\xc2o\x06vK<W\xa0c\xf5'

def test_case_2233():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__repr__()
    assert var_7 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_7)
    assert binary_node_2.value == 'binary:()'
    var_8 = binary_tree_7.__repr__()
    assert var_8 == 'binary:()'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_9)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_8.__contains__(binary_tree_10)
    assert var_12 is False
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_node_5.inorder()
    var_15 = binary_tree_12.add(binary_node_5)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_16.__repr__()
    var_19 = var_16.__iter__()
    var_20 = var_16.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    var_21 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_23.__iter__()
    var_26 = var_22.__iter__()
    binary_node_6 = module_0.BinaryNode(var_22)

def test_case_2234():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    var_11 = binary_tree_9.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_16.__iter__()
    var_19 = binary_tree_11.__iter__()

def test_case_2235():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_node_3.__repr__()
    assert var_7 == '(L: ((),) R:)'

def test_case_2236():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_0.inorder()
    var_6 = var_4.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_8 = binary_node_1.inorder()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_1)
    var_10 = binary_tree_3.remove(var_8)

def test_case_2237():
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()

def test_case_2238():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__repr__()
    assert var_4 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_2)
    var_5 = var_4.__contains__(var_4)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_6)
    assert binary_node_4.value == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_4 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_1)
    binary_node_7 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.add(dict_0)
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    binary_node_8 = module_0.BinaryNode(var_11)
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_2239():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    var_1 = binary_node_0.removeFromParent(var_0, none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    var_8 = var_4.__repr__()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_1)
    var_10 = var_9.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__repr__()
    assert var_11 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = binary_tree_15.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_16 = module_0.BinaryTree()
    var_15 = binary_tree_16.__repr__()
    assert var_15 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_15)
    assert binary_node_5.value == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_6 = module_0.BinaryNode(tuple_1)
    binary_tree_17 = module_0.BinaryTree()
    var_16 = binary_tree_17.__repr__()
    assert var_16 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_16)
    assert binary_node_7.value == 'binary:()'

def test_case_2240():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__repr__()
    assert var_7 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_7)
    assert binary_node_2.value == 'binary:()'
    var_8 = binary_node_2.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_7 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.add(dict_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_4 = module_0.BinaryNode(tuple_3)
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__repr__()
    assert var_15 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_15)
    assert binary_node_5.value == 'binary:()'
    var_16 = binary_tree_9.__repr__()
    assert var_16 == 'binary:()'
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(none_type_0)
    var_18 = var_17.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    var_24 = var_22.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_25 = binary_tree_13.__iter__()
    binary_node_6 = module_0.BinaryNode(var_25)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()

def test_case_2241():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    dict_0 = {}
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.add(dict_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_node_2 = module_0.BinaryNode(var_5)
    binary_tree_2 = module_0.BinaryTree()
    var_8 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_10.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__repr__()
    assert var_13 == 'binary:()'
    var_14 = binary_tree_5.remove(var_13)

def test_case_2242():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    var_6 = binary_node_0.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_6)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_8 = var_5.__contains__(var_5)
    var_9 = binary_tree_2.__iter__()

def test_case_2243():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False

def test_case_2244():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_4)
    var_5 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    var_8 = binary_tree_6.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = binary_tree_6.remove(var_8)
    bool_0 = True
    binary_node_2 = module_0.BinaryNode(bool_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)

def test_case_2245():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_5)
    assert binary_node_4.value == 'binary:()'
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_5 = module_0.BinaryNode(var_7)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_4.__contains__(binary_tree_6)
    assert var_10 is False

def test_case_2246():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    var_6 = binary_node_2.removeFromParent(binary_tree_3, var_5)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__repr__()
    assert var_13 == 'binary:()'
    var_14 = binary_tree_9.remove(var_13)

def test_case_2247():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    var_6 = var_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__contains__(none_type_0)
    assert var_7 is False
    var_8 = var_7.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_12.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    var_17 = binary_tree_8.closest(var_16)
    var_18 = var_15.__iter__()
    var_19 = var_16.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = binary_tree_9.closest(var_21)

def test_case_2248():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_1)
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()

def test_case_2249():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_node_0.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    var_8 = binary_node_1.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__repr__()
    assert var_9 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    var_11 = binary_node_3.inorder()
    var_12 = binary_tree_7.remove(var_9)
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_14.__iter__()
    var_19 = var_16.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_20)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_node_4.inorder()
    var_22 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(binary_tree_11)
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_24.__repr__()
    var_26 = var_25.__iter__()
    var_27 = binary_tree_14.closest(var_24)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_6 = module_0.BinaryNode(tuple_1)
    binary_tree_16 = module_0.BinaryTree()
    var_28 = binary_tree_16.__repr__()
    assert var_28 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_28)
    assert binary_node_7.value == 'binary:()'
    var_29 = binary_tree_16.__repr__()
    assert var_29 == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    var_30 = binary_tree_17.__iter__()
    binary_node_8 = module_0.BinaryNode(var_30)
    binary_tree_18 = module_0.BinaryTree()
    var_31 = binary_tree_18.__iter__()
    var_32 = binary_tree_18.closest(var_31)
    var_33 = var_30.__iter__()
    none_type_0 = None
    binary_tree_19 = module_0.BinaryTree()
    var_34 = binary_tree_19.add(none_type_0)
    assert f'{type(binary_tree_19.root).__module__}.{type(binary_tree_19.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_9 = module_0.BinaryNode(binary_tree_19)
    dict_0 = {none_type_0: binary_tree_12}

def test_case_2250():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()

def test_case_2251():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__contains__(binary_tree_2)
    assert var_5 is False
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_1)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_tree_3.remove(var_6)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_8)
    assert binary_node_6.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_6)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    binary_node_9 = module_0.BinaryNode(binary_node_8)
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_10 = module_0.BinaryNode(var_9)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_7.__contains__(binary_tree_9)

def test_case_2252():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)

def test_case_2253():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__repr__()
    assert var_3 == 'binary:()'
    var_4 = binary_tree_5.remove(var_3)
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"

def test_case_2254():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_node_0.inorder()
    var_8 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)

def test_case_2255():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_1)
    var_9 = var_8.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    var_12 = binary_node_2.inorder()
    var_13 = var_11.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    var_15 = binary_node_3.inorder()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(none_type_2)
    var_17 = binary_tree_8.remove(var_15)

def test_case_2256():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_node_4.inorder()
    var_12 = binary_tree_9.__iter__()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    binary_node_5 = module_0.BinaryNode(var_15)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__repr__()
    assert var_18 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_node_6 = module_0.BinaryNode(var_19)
    var_20 = binary_node_6.inorder()
    var_21 = var_19.__repr__()
    var_22 = var_4.__repr__()

def test_case_2257():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_8.__iter__()
    var_11 = binary_tree_3.__repr__()
    assert var_11 == 'binary:()'
    var_12 = binary_tree_4.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__repr__()
    assert var_13 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_13)
    assert binary_node_0.value == 'binary:()'
    var_14 = binary_node_0.__repr__()
    assert var_14 == '(L: binary:() R:)'
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_14)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_16 = var_13.__contains__(var_13)
    binary_tree_6 = module_0.BinaryTree()
    var_17 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_20)
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    var_22 = binary_tree_10.closest(var_21)
    var_23 = var_20.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_24 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_24.__repr__()
    none_type_0 = None
    binary_tree_14 = module_0.BinaryTree()
    var_27 = binary_tree_14.add(none_type_0)
    assert f'{type(binary_tree_14.root).__module__}.{type(binary_tree_14.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_28 = var_27.__repr__()

def test_case_2258():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_4)
    var_6 = var_3.__iter__()
    var_7 = binary_tree_2.remove(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == 'binary:()'
    var_10 = binary_tree_3.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    var_15 = binary_node_4.inorder()
    var_16 = binary_tree_10.__repr__()
    assert var_16 == 'binary:(L: None R:)'
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.add(none_type_1)
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.add(none_type_2)
    binary_tree_13 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_2)
    binary_node_6 = module_0.BinaryNode(var_20)
    var_21 = binary_node_5.removeFromParent(var_20, none_type_2)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_7 = module_0.BinaryNode(set_0)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.__repr__()
    assert var_22 == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_22)
    assert binary_node_9.value == 'binary:()'
    var_23 = binary_node_9.__repr__()
    assert var_23 == '(L: binary:() R:)'
    var_24 = var_22.__repr__()
    assert var_24 == "'binary:()'"
    binary_node_10 = module_0.BinaryNode(var_23)
    assert binary_node_10.value == '(L: binary:() R:)'
    var_25 = var_22.__contains__(var_22)
    var_26 = binary_tree_14.__iter__()

def test_case_2259():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_10.__iter__()
    var_13 = binary_tree_5.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    var_16 = binary_tree_8.closest(var_15)
    var_17 = var_14.__iter__()
    var_18 = var_15.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_19)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_17.add(none_type_2)
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_26 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_27.__repr__()
    var_29 = var_28.__iter__()
    var_30 = var_28.__iter__()
    var_31 = var_27.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_32 = binary_tree_20.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_33 = var_32.__iter__()
    var_34 = var_33.__repr__()
    var_35 = var_34.__iter__()
    var_36 = var_35.__repr__()
    binary_tree_22 = module_0.BinaryTree()

def test_case_2260():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_node_1.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    var_7 = binary_tree_9.closest(var_6)
    binary_node_3 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_11 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_12.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_15 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_15.__repr__()
    none_type_1 = None
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.add(none_type_1)
    var_21 = binary_tree_16.getMax()
    binary_tree_17 = module_0.BinaryTree()
    var_22 = binary_tree_17.__iter__()
    var_23 = binary_tree_17.closest(var_22)
    var_24 = var_22.__repr__()
    binary_tree_18 = module_0.BinaryTree()
    var_25 = binary_tree_18.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    var_27 = var_25.__repr__()
    var_28 = var_25.__iter__()
    var_29 = var_27.__iter__()
    var_30 = binary_tree_18.__repr__()
    assert var_30 == 'binary:()'
    binary_tree_20 = module_0.BinaryTree()
    binary_tree_21 = module_0.BinaryTree()
    var_31 = binary_tree_21.__iter__()
    binary_tree_22 = module_0.BinaryTree()
    var_32 = var_31.__iter__()
    var_33 = var_31.__repr__()
    var_34 = var_31.__iter__()
    var_35 = var_31.__repr__()

def test_case_2261():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    var_4 = var_2.__repr__()
    assert var_4 == '"\'binary:()\'"'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.add(none_type_2)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_2)
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_node_4.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_node_4.inorder()

def test_case_2262():
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_1.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    var_13 = binary_node_2.inorder()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__repr__()
    assert var_14 == 'binary:()'
    var_15 = binary_node_3.__repr__()
    assert var_15 == '(L: ((),) R:)'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_4 = module_0.BinaryNode(tuple_3)
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__repr__()
    assert var_16 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_16)
    assert binary_node_5.value == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_node_6 = module_0.BinaryNode(var_18)

def test_case_2263():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_2 = module_0.BinaryNode(tuple_3)
    var_3 = binary_node_2.inorder()
    var_4 = binary_tree_1.__repr__()
    assert var_4 == 'binary:(L: None R:)'
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_3.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(dict_0)
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_14.__iter__()
    var_16 = binary_tree_7.__iter__()

def test_case_2264():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_3.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__repr__()
    assert var_11 == 'binary:()'
    var_12 = binary_tree_5.remove(var_11)
    var_13 = var_11.__repr__()
    assert var_13 == "'binary:()'"
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.__iter__()
    binary_node_0 = module_0.BinaryNode(var_19)
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    var_21 = binary_tree_9.closest(var_20)
    var_22 = var_19.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_10)
    var_23 = binary_node_1.inorder()
    var_24 = var_23.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_25 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_25)
    binary_tree_12 = module_0.BinaryTree()
    var_26 = binary_tree_12.__iter__()
    var_27 = binary_tree_12.closest(var_26)
    var_28 = var_25.__iter__()
    var_29 = var_26.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_30 = binary_tree_13.__iter__()
    binary_node_3 = module_0.BinaryNode(var_30)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_31 = binary_node_3.inorder()
    var_32 = binary_tree_13.add(binary_node_3)

def test_case_2265():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    var_4 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_1)
    var_7 = var_6.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    var_9 = binary_tree_4.remove(var_8)
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_tree_5 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_5)
    var_11 = binary_node_5.inorder()
    var_12 = var_11.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_node_6 = module_0.BinaryNode(var_13)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_7 = module_0.BinaryNode(tuple_1)
    set_1 = {binary_tree_6}

def test_case_2266():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    str_0 = 'r|wb1'

def test_case_2267():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_2 = module_0.BinaryNode(tuple_3)
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__repr__()
    assert var_11 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_11)
    assert binary_node_3.value == 'binary:()'
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_13 = binary_tree_7.getMax()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    var_15 = binary_tree_8.closest(var_14)
    var_16 = var_14.__repr__()

def test_case_2268():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_5.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.add(none_type_1)
    binary_tree_9 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_1)
    binary_node_2 = module_0.BinaryNode(var_15)
    var_16 = binary_node_1.removeFromParent(var_15, none_type_1)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__iter__()
    var_21 = var_19.__iter__()
    var_22 = binary_tree_10.__repr__()
    assert var_22 == 'binary:()'
    var_23 = binary_tree_11.__repr__()
    assert var_23 == 'binary:()'
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_24 = binary_tree_12.add(none_type_2)
    var_25 = binary_tree_12.getMax()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_26 = binary_tree_14.__repr__()
    assert var_26 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_26)
    assert binary_node_3.value == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)

def test_case_2269():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    var_6 = var_2.__iter__()
    bool_0 = False
    binary_node_2 = module_0.BinaryNode(bool_0)
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(dict_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()

def test_case_2270():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_6.__contains__(binary_tree_8)
    assert var_10 is False

def test_case_2271():
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = binary_tree_3.remove(var_7)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    var_14 = var_12.__iter__()
    var_15 = binary_tree_4.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_21 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_21)
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_tree_10.__iter__()
    var_23 = binary_tree_10.closest(var_22)
    var_24 = var_21.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_12 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_12)
    var_25 = binary_node_5.inorder()
    var_26 = var_25.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_27 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_28 = var_27.__iter__()
    var_29 = var_27.__repr__()
    binary_tree_15 = module_0.BinaryTree()

def test_case_2272():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    var_12 = binary_node_0.inorder()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__repr__()
    assert var_13 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_13)
    assert binary_node_1.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_14)
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_9.__contains__(binary_tree_11)
    assert var_17 is False
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_20 = binary_tree_16.__iter__()
    binary_node_3 = module_0.BinaryNode(var_19)
    var_21 = binary_node_3.removeFromParent(binary_tree_13, var_20)

def test_case_2273():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    none_type_2 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_2)
    var_4 = var_3.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_8.__iter__()

def test_case_2274():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_node_1.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_4 = var_1.__contains__(var_1)
    var_5 = var_3.__repr__()
    assert var_5 == '"\'binary:()\'"'
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_8.__iter__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.add(none_type_1)
    var_12 = var_11.__repr__()

def test_case_2275():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_3)
    assert binary_node_0.value == 'binary:()'
    var_4 = binary_node_0.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    var_6 = binary_node_2.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    var_13 = var_10.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_4 = module_0.BinaryNode(tuple_3)
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__repr__()
    assert var_19 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_19)
    assert binary_node_5.value == 'binary:()'
    var_20 = binary_tree_9.__repr__()
    assert var_20 == 'binary:()'

def test_case_2276():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    var_4 = binary_node_1.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_6 = var_3.__contains__(var_3)
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_0)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__contains__(binary_tree_9)
    assert var_13 is False

def test_case_2277():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    var_1 = binary_tree_0.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_3 = module_0.BinaryNode(tuple_3)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__repr__()
    assert var_4 == 'binary:()'
    var_5 = binary_node_3.__repr__()
    assert var_5 == '(L: ((),) R:)'
    tuple_4 = ()
    tuple_5 = (tuple_4,)
    binary_node_4 = module_0.BinaryNode(tuple_5)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_6)
    assert binary_node_5.value == 'binary:()'
    binary_node_6 = module_0.BinaryNode(binary_node_4)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    var_13 = var_10.__repr__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_15 = var_14.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_21)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = binary_node_7.inorder()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_23 = binary_tree_14.__iter__()
    binary_node_8 = module_0.BinaryNode(var_23)
    var_24 = binary_node_8.inorder()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    var_25 = binary_tree_16.__iter__()

def test_case_2278():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()

def test_case_2279():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__repr__()
    assert var_7 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_7)
    assert binary_node_2.value == 'binary:()'
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(dict_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__contains__(binary_tree_8)
    assert var_13 is False
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.add(none_type_0)
    var_15 = var_14.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_18.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()
    var_24 = var_21.__iter__()
    var_25 = var_23.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_26 = binary_tree_16.__iter__()
    binary_node_5 = module_0.BinaryNode(var_26)
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_27 = binary_node_5.inorder()
    var_28 = binary_tree_16.__iter__()

def test_case_2280():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_node_2 = module_0.BinaryNode(binary_node_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__contains__(binary_tree_4)
    assert var_6 is False
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_5 = module_0.BinaryNode(tuple_3)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_node_5.__repr__()
    assert var_8 == '(L: ((),) R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    var_10 = binary_tree_6.closest(var_9)
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_6 = module_0.BinaryNode(set_1)
    binary_node_7 = module_0.BinaryNode(binary_node_6)

def test_case_2281():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(binary_tree_0)

def test_case_2282():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    var_4 = binary_node_1.inorder()
    var_5 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    var_7 = binary_node_2.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    var_11 = binary_node_3.removeFromParent(binary_tree_7, var_10)

def test_case_2283():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_3.inorder()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__contains__(binary_tree_3)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    var_5 = binary_tree_4.remove(var_4)
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_tree_5 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_5)
    var_7 = binary_node_6.inorder()
    var_8 = var_7.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_7 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_7.value).__module__}.{type(binary_node_7.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()

def test_case_2284():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_node_0.inorder()
    var_7 = binary_tree_1.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()

def test_case_2285():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_1 = binary_node_1.inorder()
    var_2 = var_1.__repr__()
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_1)
    var_4 = var_3.__repr__()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(dict_0)
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    var_16 = var_13.__repr__()

def test_case_2286():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_3)
    assert binary_node_3.value == 'binary:()'
    binary_node_4 = module_0.BinaryNode(binary_node_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    var_10 = var_7.__repr__()
    none_type_0 = None
    binary_node_5 = module_0.BinaryNode(none_type_0)

def test_case_2287():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_6 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)

def test_case_2288():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(none_type_1)
    var_2 = var_1.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__repr__()
    assert var_3 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_3)
    assert binary_node_4.value == 'binary:()'
    var_4 = binary_node_4.__repr__()
    assert var_4 == '(L: binary:() R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_6.remove(var_5)
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    bool_0 = False
    binary_node_5 = module_0.BinaryNode(bool_0)
    bool_1 = True

def test_case_2289():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_node_1.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == '(L: binary:() R:)'

def test_case_2290():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_8.__iter__()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(none_type_2)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:()'
    var_15 = binary_node_2.__repr__()
    assert var_15 == '(L: ((),) R:)'

def test_case_2291():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_1 = binary_tree_0.getMin()
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_1)
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_node_2.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_node_2.inorder()
    dict_0 = {}
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(dict_0)
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__repr__()
    assert var_13 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_13)
    assert binary_node_4.value == 'binary:()'
    var_14 = binary_node_4.__repr__()
    assert var_14 == '(L: binary:() R:)'
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_14)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_16 = var_13.__contains__(var_13)
    var_17 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__repr__()
    assert var_18 == 'binary:()'

def test_case_2292():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_2 = binary_node_1.inorder()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    bool_0 = False

def test_case_2293():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.add(binary_node_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    var_6 = binary_tree_5.closest(var_5)
    var_7 = var_4.__iter__()
    var_8 = binary_tree_5.remove(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    var_10 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_0)
    var_12 = binary_tree_6.remove(var_10)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.__repr__()
    assert var_15 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_15)
    assert binary_node_4.value == 'binary:()'
    var_16 = binary_node_4.__repr__()
    assert var_16 == '(L: binary:() R:)'
    var_17 = var_15.__repr__()
    assert var_17 == "'binary:()'"
    bool_0 = False
    binary_node_5 = module_0.BinaryNode(bool_0)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    var_21 = var_18.__iter__()
    var_22 = var_20.__iter__()
    var_23 = binary_tree_13.__repr__()
    assert var_23 == 'binary:()'
    none_type_1 = None
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.add(none_type_1)
    none_type_2 = None
    binary_tree_16 = module_0.BinaryTree()
    var_25 = binary_tree_16.add(none_type_2)
    binary_node_6 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_7 = module_0.BinaryNode(tuple_1)

def test_case_2294():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()

def test_case_2295():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_tree_6.remove(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_12.__iter__()
    var_17 = var_14.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    var_19 = binary_tree_9.closest(var_18)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(var_20)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_node_5.inorder()
    var_22 = binary_tree_10.__iter__()
    binary_node_6 = module_0.BinaryNode(binary_tree_10)
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = var_23.__repr__()

def test_case_2296():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_3.__repr__()
    assert var_10 == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_11 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    var_12 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_node_5 = module_0.BinaryNode(var_13)
    var_14 = binary_node_4.removeFromParent(var_13, none_type_0)
    with pytest.raises(ValueError):
        binary_tree_7.getMin()

def test_case_2297():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()

def test_case_2298():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_node_0 = module_0.BinaryNode(var_2)
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_5 = binary_node_1.inorder()
    var_6 = var_5.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_8 = binary_node_2.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    var_11 = binary_tree_6.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.add(none_type_0)
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.__repr__()
    assert var_18 == 'binary:()'
    var_19 = binary_tree_10.remove(var_18)
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()

def test_case_2299():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_1.__iter__()

def test_case_2300():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    none_type_0 = None
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(none_type_1)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_12 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_1)
    binary_node_5 = module_0.BinaryNode(var_12)
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__repr__()
    assert var_13 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_13)
    assert binary_node_6.value == 'binary:()'
    var_14 = binary_node_6.__repr__()
    assert var_14 == '(L: binary:() R:)'
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"
    binary_node_7 = module_0.BinaryNode(var_14)
    assert binary_node_7.value == '(L: binary:() R:)'
    var_16 = var_13.__contains__(var_13)

def test_case_2301():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'

def test_case_2302():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    var_1 = binary_tree_1.__contains__(binary_tree_1)
    assert var_1 is False
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    var_3 = var_2.__contains__(var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == 'binary:()'
    var_5 = binary_node_2.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_node_4.inorder()
    binary_tree_9 = module_0.BinaryTree()
    none_type_0 = None

def test_case_2303():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_5 = var_2.__contains__(var_2)
    var_6 = var_4.__repr__()
    assert var_6 == '"\'binary:()\'"'
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    var_8 = binary_tree_2.closest(var_7)
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_10.__iter__()
    binary_node_3 = module_0.BinaryNode(var_10)
    binary_tree_5 = module_0.BinaryTree()
    var_15 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    var_16 = binary_node_4.inorder()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_17)
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__iter__()
    var_19 = binary_tree_8.closest(var_18)
    binary_node_6 = module_0.BinaryNode(var_18)

def test_case_2304():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == 'binary:()'
    var_5 = binary_node_2.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_5)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_7 = var_4.__contains__(var_4)
    var_8 = binary_tree_2.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_10)
    assert binary_node_5.value == 'binary:()'
    var_11 = binary_node_5.__repr__()
    assert var_11 == '(L: binary:() R:)'
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    binary_node_6 = module_0.BinaryNode(var_11)
    assert binary_node_6.value == '(L: binary:() R:)'
    var_13 = var_10.__contains__(var_10)
    var_14 = var_12.__repr__()
    assert var_14 == '"\'binary:()\'"'
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.__repr__()
    assert var_15 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_15)
    assert binary_node_7.value == 'binary:()'
    var_16 = binary_node_7.__repr__()
    assert var_16 == '(L: binary:() R:)'
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_19 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_tree_12.add(none_type_1)
    var_22 = var_21.__repr__()

def test_case_2305():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_node_2.inorder()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__iter__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_9 = binary_tree_8.getMax()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__repr__()
    assert var_10 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == 'binary:()'
    var_11 = binary_node_3.__repr__()
    assert var_11 == '(L: binary:() R:)'
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    binary_node_4 = module_0.BinaryNode(var_11)
    assert binary_node_4.value == '(L: binary:() R:)'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(none_type_1)
    var_14 = var_13.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_tree_12.add(dict_0)
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    binary_node_5 = module_0.BinaryNode(var_17)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    var_20 = binary_node_6.inorder()
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    binary_node_7 = module_0.BinaryNode(var_21)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_node_7.inorder()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_node_7.inorder()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_8 = module_0.BinaryNode(tuple_1)
    binary_tree_17 = module_0.BinaryTree()
    var_24 = binary_tree_17.__repr__()
    assert var_24 == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_24)
    assert binary_node_9.value == 'binary:()'
    binary_node_10 = module_0.BinaryNode(binary_node_8)

def test_case_2306():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    var_6 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_7)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    var_9 = binary_node_1.inorder()
    var_10 = binary_tree_2.remove(var_7)
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__repr__()
    assert var_11 == 'binary:()'
    var_12 = binary_tree_4.remove(var_11)
    var_13 = var_11.__repr__()
    assert var_13 == "'binary:()'"
    with pytest.raises(ValueError):
        binary_tree_3.getMax()

def test_case_2307():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.add(none_type_0)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.add(none_type_2)
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()

def test_case_2308():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_1)
    binary_node_3 = module_0.BinaryNode(var_1)
    var_2 = binary_node_2.removeFromParent(var_1, none_type_1)

def test_case_2309():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_4 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    var_7 = binary_node_3.inorder()
    var_8 = binary_tree_4.remove(var_5)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    var_14 = binary_node_5.inorder()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_7 = module_0.BinaryNode(set_1)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_node_9 = module_0.BinaryNode(binary_tree_11)
    binary_node_10 = module_0.BinaryNode(binary_node_9)

def test_case_2310():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    var_4 = binary_node_1.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_6 = var_3.__contains__(var_3)
    var_7 = var_5.__repr__()
    assert var_7 == '"\'binary:()\'"'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_10.__iter__()
    var_13 = binary_tree_5.__repr__()
    assert var_13 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__repr__()
    assert var_14 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_14)
    assert binary_node_3.value == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_15 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_15.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__contains__(binary_tree_10)
    assert var_20 is False
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    var_22 = binary_tree_11.__contains__(binary_tree_11)

def test_case_2311():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    var_9 = binary_tree_3.remove(var_7)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_10 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__repr__()
    assert var_11 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_11)
    assert binary_node_2.value == 'binary:()'
    var_12 = binary_node_2.__repr__()
    assert var_12 == '(L: binary:() R:)'
    var_13 = var_11.__repr__()
    assert var_13 == "'binary:()'"
    binary_tree_5 = module_0.BinaryTree()
    var_14 = binary_tree_5.__repr__()
    assert var_14 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_14)
    assert binary_node_3.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    var_15 = var_14.__contains__(var_14)

def test_case_2312():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()

def test_case_2313():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_3 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_5 = binary_tree_8.__iter__()
    var_6 = binary_tree_8.closest(var_5)
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__repr__()
    assert var_7 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_7)
    assert binary_node_2.value == 'binary:()'
    var_8 = binary_node_2.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_8)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_10 = var_7.__contains__(var_7)
    var_11 = binary_tree_9.__iter__()
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_1)
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = binary_tree_12.add(var_12)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)

def test_case_2314():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    var_12 = binary_node_1.inorder()
    var_13 = var_12.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__repr__()
    assert var_14 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_14)
    assert binary_node_2.value == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_14)
    assert binary_node_3.value == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    var_17 = binary_tree_11.closest(var_16)
    var_18 = var_15.__iter__()
    var_19 = binary_node_4.inorder()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_5 = module_0.BinaryNode(tuple_3)
    var_20 = binary_node_5.inorder()
    set_0 = {var_11}

def test_case_2315():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()

def test_case_2316():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    var_7 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_4)

def test_case_2317():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__repr__()
    assert var_0 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_0)
    assert binary_node_2.value == 'binary:()'
    var_1 = binary_node_2.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__repr__()
    assert var_7 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_7)
    assert binary_node_4.value == 'binary:()'
    var_8 = binary_node_4.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_8)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_10 = var_7.__contains__(var_7)

def test_case_2318():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_3.inorder()
    var_4 = binary_tree_4.remove(var_1)

def test_case_2319():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    var_2 = binary_tree_1.remove(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    var_11 = var_9.__iter__()
    var_12 = binary_tree_4.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_13)
    var_14 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = binary_tree_6.remove(var_14)
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_19.__iter__()
    var_22 = var_18.__iter__()
    var_23 = var_20.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_24 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_24.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_27 = var_24.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    var_28 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_29 = var_28.__iter__()
    var_30 = var_29.__repr__()
    var_31 = var_30.__iter__()
    var_32 = var_30.__iter__()
    var_33 = var_29.__iter__()

def test_case_2320():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"

def test_case_2321():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_1)
    var_7 = var_6.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    var_10 = binary_node_2.inorder()
    var_11 = var_9.__repr__()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_2)
    var_13 = binary_tree_8.getMax()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    var_18 = var_16.__iter__()
    var_19 = binary_tree_9.__repr__()
    assert var_19 == 'binary:()'

def test_case_2322():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.add(none_type_1)
    var_8 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_tree_4.remove(var_9)
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.add(none_type_2)
    var_17 = var_16.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()
    var_19 = binary_tree_9.__contains__(binary_tree_9)
    assert var_19 is False
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_20)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = binary_node_1.inorder()
    var_22 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_13 = module_0.BinaryTree()
    var_23 = binary_tree_13.__repr__()
    assert var_23 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_23)
    assert binary_node_3.value == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_14)
    var_24 = var_23.__contains__(var_23)
    binary_tree_15 = module_0.BinaryTree()
    var_25 = binary_tree_15.__iter__()

def test_case_2323():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_4 = binary_tree_2.getMin()
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_1)
    var_6 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_3)
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()

def test_case_2324():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_6 = binary_node_1.inorder()
    var_7 = var_6.__repr__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    none_type_4 = None
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__contains__(none_type_4)
    assert var_11 is False
    var_12 = var_11.__repr__()

def test_case_2325():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    var_0 = binary_node_0.inorder()
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_6.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    binary_tree_12 = module_0.BinaryTree()

def test_case_2326():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_2 = binary_node_1.inorder()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_2 = module_0.BinaryNode(tuple_3)
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_3)
    assert binary_node_3.value == 'binary:()'
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    tuple_4 = ()
    tuple_5 = (tuple_4,)
    binary_node_4 = module_0.BinaryNode(tuple_5)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_5)
    assert binary_node_5.value == 'binary:()'
    binary_node_6 = module_0.BinaryNode(binary_node_4)
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    with pytest.raises(ValueError):
        binary_tree_0.getMin()

def test_case_2327():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    var_10 = binary_node_1.removeFromParent(binary_tree_5, var_9)
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__iter__()
    var_13 = binary_tree_10.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_15)
    var_16 = binary_node_3.inorder()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_19.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    var_22 = binary_tree_15.closest(var_19)
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.__repr__()
    assert var_23 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_23)
    assert binary_node_4.value == 'binary:()'
    var_24 = binary_node_4.__repr__()
    assert var_24 == '(L: binary:() R:)'
    var_25 = var_23.__repr__()
    assert var_25 == "'binary:()'"
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_17 = module_0.BinaryTree()

def test_case_2328():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    var_3 = binary_tree_3.__contains__(binary_tree_3)
    assert var_3 is False
    var_4 = var_3.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__contains__(binary_tree_5)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__repr__()
    assert var_7 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_7)
    assert binary_node_5.value == 'binary:()'
    var_8 = binary_tree_6.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_8)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(none_type_1)
    none_type_2 = None
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.add(none_type_2)
    binary_node_8 = module_0.BinaryNode(binary_tree_12)
    binary_tree_13 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()

def test_case_2329():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    var_4 = binary_node_4.inorder()

def test_case_2330():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.closest(var_3)
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_node_2.inorder()
    var_7 = binary_tree_3.__iter__()

def test_case_2331():
    bool_0 = True
    int_0 = -84
    binary_node_0 = module_0.BinaryNode(int_0)

def test_case_2332():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_0 = binary_tree_2.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_2.remove(var_0)
    bool_0 = False
    binary_node_3 = module_0.BinaryNode(bool_0)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    var_2 = binary_node_4.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_5 = module_0.BinaryNode(binary_tree_3)
    var_4 = binary_tree_3.getMin()
    with pytest.raises(ValueError):
        binary_tree_2.getMax()

def test_case_2333():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_4.__iter__()
    var_7 = binary_tree_1.__repr__()
    assert var_7 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    var_10 = binary_tree_5.closest(var_9)
    var_11 = var_8.__iter__()
    var_12 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_16.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_20)

def test_case_2334():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    none_type_0 = None
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.add(none_type_1)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__repr__()
    assert var_16 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_16)
    assert binary_node_4.value == 'binary:()'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_9)
    var_17 = var_16.__contains__(var_16)
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.add(dict_0)
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    binary_node_6 = module_0.BinaryNode(var_20)
    none_type_2 = None
    binary_tree_11 = module_0.BinaryTree()
    var_23 = binary_tree_11.add(none_type_2)
    binary_tree_12 = module_0.BinaryTree()
    var_24 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = binary_tree_13.add(var_23)

def test_case_2335():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    var_1 = binary_node_2.inorder()
    var_2 = var_1.__repr__()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_1)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_3.__contains__(binary_tree_5)
    assert var_7 is False

def test_case_2336():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    var_9 = binary_node_1.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__repr__()
    assert var_10 == 'binary:()'

def test_case_2337():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()

def test_case_2338():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_4)
    var_6 = var_3.__iter__()
    var_7 = var_4.__repr__()
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_1)
    var_9 = var_8.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    var_11 = binary_tree_5.__contains__(binary_tree_5)
    assert var_11 is False

def test_case_2339():
    pass

def test_case_2340():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    var_9 = binary_tree_6.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_14.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__repr__()
    assert var_17 == 'binary:()'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_18)
    binary_tree_12 = module_0.BinaryTree()
    var_19 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = binary_tree_11.__contains__(binary_tree_13)
    assert var_21 is False
    none_type_1 = None
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_tree_15.add(none_type_1)
    binary_tree_16 = module_0.BinaryTree()
    var_23 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_24 = var_23.__iter__()
    var_25 = binary_tree_17.add(var_22)
    none_type_2 = None
    binary_tree_18 = module_0.BinaryTree()
    var_26 = binary_tree_18.add(none_type_2)
    none_type_3 = None
    binary_tree_19 = module_0.BinaryTree()
    var_27 = binary_tree_19.add(none_type_3)
    binary_node_5 = module_0.BinaryNode(binary_tree_19)
    binary_tree_20 = module_0.BinaryTree()
    var_28 = binary_tree_20.__iter__()

def test_case_2341():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"

def test_case_2342():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    none_type_0 = None
    binary_node_1 = module_0.BinaryNode(none_type_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__contains__(binary_tree_1)
    assert var_2 is False
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_4 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_2.__contains__(binary_tree_4)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_5 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__repr__()
    assert var_8 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_8)
    assert binary_node_6.value == 'binary:()'
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_node_7 = module_0.BinaryNode(var_11)
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__iter__()
    var_13 = binary_tree_12.closest(var_12)
    var_14 = var_11.__iter__()
    var_15 = var_12.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__repr__()
    assert var_16 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_16)
    assert binary_node_8.value == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_16)
    assert binary_node_9.value == 'binary:()'
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_10 = module_0.BinaryNode(set_1)
    binary_node_11 = module_0.BinaryNode(binary_node_10)
    binary_tree_14 = module_0.BinaryTree()

def test_case_2343():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    binary_tree_1 = module_0.BinaryTree()

def test_case_2344():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__repr__()
    assert var_1 == 'binary:()'
    var_2 = binary_tree_4.remove(var_1)
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_8)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_node_1.inorder()
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_13.__iter__()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.add(dict_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_17 = var_16.__repr__()
    var_18 = var_17.__iter__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    binary_node_2 = module_0.BinaryNode(var_18)
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__repr__()
    assert var_21 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_21)
    assert binary_node_3.value == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_21)
    assert binary_node_4.value == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.__iter__()

def test_case_2345():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    var_1 = var_0.__repr__()
    binary_tree_0 = module_0.BinaryTree()
    var_2 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)

def test_case_2346():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_12 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_node_2 = module_0.BinaryNode(var_11)
    var_12 = binary_node_1.removeFromParent(var_11, none_type_0)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_15.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__iter__()
    var_18 = binary_tree_15.closest(var_15)

def test_case_2347():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    var_1 = binary_node_2.inorder()
    var_2 = var_1.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = binary_tree_2.getMax()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    var_7 = var_5.__repr__()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_1)
    var_9 = var_8.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = var_10.__repr__()
    var_14 = binary_tree_7.closest(binary_tree_5)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_3 = module_0.BinaryNode(tuple_3)

def test_case_2348():
    bytes_0 = b'\x03\xbdp\x0eh'
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()

def test_case_2349():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_10)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_12)
    var_14 = binary_node_3.inorder()
    var_15 = var_14.__repr__()
    none_type_2 = None
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.add(none_type_2)
    var_17 = binary_tree_13.getMax()
    var_18 = binary_tree_6.add(none_type_0)

def test_case_2350():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_1.__repr__()
    assert var_0 == '(L: (L: {1379} R:) R:)'

def test_case_2351():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    var_1 = binary_tree_1.__contains__(binary_tree_1)
    assert var_1 is False
    var_2 = var_1.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__repr__()
    assert var_3 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_3)
    assert binary_node_0.value == 'binary:()'
    var_4 = binary_node_0.__repr__()
    assert var_4 == '(L: binary:() R:)'
    var_5 = var_3.__repr__()
    assert var_5 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_3 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_3.getMax()

def test_case_2352():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_1 = module_0.BinaryNode(tuple_3)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_2.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_node_3.inorder()
    binary_tree_5 = module_0.BinaryTree()

def test_case_2353():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    var_0 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_7.__repr__()
    var_11 = binary_tree_7.closest(binary_tree_5)
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_14 = binary_tree_11.__iter__()

def test_case_2354():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_0 = None
    binary_node_4 = module_0.BinaryNode(none_type_0)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_0 = binary_tree_3.add(none_type_1)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_1)
    binary_node_6 = module_0.BinaryNode(var_0)
    var_1 = binary_node_5.removeFromParent(var_0, none_type_1)
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_node_7 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_7.value).__module__}.{type(binary_node_7.value).__qualname__}' == 'builtins.generator'

def test_case_2355():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    var_6 = binary_node_0.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_6)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_8 = var_5.__contains__(var_5)
    var_9 = var_7.__repr__()
    assert var_9 == '"\'binary:()\'"'
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    var_12 = binary_tree_4.closest(var_11)
    var_13 = var_10.__iter__()
    var_14 = binary_node_2.inorder()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_15 = binary_tree_5.__repr__()
    assert var_15 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_15)
    assert binary_node_4.value == 'binary:()'
    binary_node_5 = module_0.BinaryNode(binary_node_3)

def test_case_2356():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_node_1.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__repr__()
    assert var_10 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == 'binary:()'
    binary_node_4 = module_0.BinaryNode(binary_node_2)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_5 = module_0.BinaryNode(tuple_3)
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    var_16 = binary_tree_9.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_node_6 = module_0.BinaryNode(var_17)
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    var_19 = binary_tree_13.closest(var_18)
    binary_node_7 = module_0.BinaryNode(var_18)
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_node_8 = module_0.BinaryNode(var_20)
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    var_22 = binary_tree_15.closest(var_21)
    var_23 = var_20.__iter__()
    var_24 = var_21.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_25 = binary_tree_16.__iter__()
    var_26 = binary_tree_16.__contains__(binary_tree_16)
    assert var_26 is False
    none_type_0 = None
    binary_tree_17 = module_0.BinaryTree()
    var_27 = binary_tree_17.add(none_type_0)
    assert f'{type(binary_tree_17.root).__module__}.{type(binary_tree_17.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_18 = module_0.BinaryTree()
    var_28 = binary_tree_18.add(none_type_1)
    binary_node_9 = module_0.BinaryNode(binary_tree_18)
    binary_tree_19 = module_0.BinaryTree()
    var_29 = binary_tree_17.__iter__()

def test_case_2357():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_0 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_7)
    assert binary_node_2.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    var_8 = var_7.__contains__(var_7)

def test_case_2358():
    binary_tree_0 = module_0.BinaryTree()
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_0.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_4)
    assert binary_node_0.value == 'binary:()'
    var_5 = binary_node_0.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_7 = var_4.__contains__(var_4)
    var_8 = var_6.__repr__()
    assert var_8 == '"\'binary:()\'"'

def test_case_2359():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_0 = binary_tree_1.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    var_1 = binary_node_1.__repr__()
    assert var_1 == '(L: binary:() R:)'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_7)
    assert binary_node_2.value == 'binary:()'
    var_8 = binary_node_2.__repr__()
    assert var_8 == '(L: binary:() R:)'
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_11)
    var_12 = binary_node_4.inorder()
    var_13 = var_11.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_14)
    var_15 = binary_node_5.inorder()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_6 = module_0.BinaryNode(tuple_3)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__repr__()
    assert var_17 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_17)
    assert binary_node_7.value == 'binary:()'
    var_18 = binary_tree_12.__repr__()
    assert var_18 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    var_20 = binary_tree_13.__contains__(binary_tree_13)
    assert var_20 is False

def test_case_2360():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    var_3 = binary_tree_3.__contains__(binary_tree_3)
    assert var_3 is False
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_node_1.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_node_1.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    var_10 = var_7.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__contains__(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_14.__iter__()
    var_17 = var_15.__iter__()
    var_18 = binary_tree_11.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    var_24 = var_20.__iter__()
    var_25 = var_22.__repr__()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_4 = module_0.BinaryNode(set_1)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    var_26 = binary_node_4.inorder()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    var_27 = binary_node_6.inorder()
    binary_tree_15 = module_0.BinaryTree()
    var_28 = binary_tree_15.__iter__()
    var_29 = binary_tree_15.closest(var_28)

def test_case_2361():
    str_0 = '\nqyDr@(,_Q+!O.I)c6'
    str_1 = ' AW%ffVH3#>Q`qKra'
    binary_node_0 = module_0.BinaryNode(str_1)
    var_0 = binary_node_0.add(str_0)
    assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_2362():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.add(binary_node_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    var_3 = binary_node_1.inorder()
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_1)

def test_case_2363():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    with pytest.raises(ValueError):
        binary_tree_3.getMax()

def test_case_2364():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    var_2 = binary_tree_0.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    var_4 = binary_node_1.__repr__()
    assert var_4 == '(L: ((),) R:)'
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_1)
    var_7 = var_6.__repr__()
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.add(none_type_2)
    var_9 = binary_tree_6.getMax()
    none_type_3 = None
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.add(none_type_3)
    var_11 = var_10.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    var_12 = binary_node_3.inorder()
    var_13 = var_12.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = binary_tree_10.__iter__()
    binary_node_4 = module_0.BinaryNode(var_14)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_15 = binary_node_4.inorder()
    var_16 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(binary_tree_10)
    binary_tree_13 = module_0.BinaryTree()
    var_17 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()

def test_case_2365():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_2.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_3.inorder()
    binary_tree_2 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_4 = module_0.BinaryNode(set_1)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_5)
    assert binary_node_6.value == 'binary:()'
    var_6 = binary_node_6.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_node_7 = module_0.BinaryNode(var_6)
    assert binary_node_7.value == '(L: binary:() R:)'
    var_8 = var_5.__contains__(var_5)
    var_9 = binary_tree_3.__iter__()
    int_2 = 1379
    set_2 = {int_2, int_2}
    binary_node_8 = module_0.BinaryNode(set_2)
    binary_node_9 = module_0.BinaryNode(binary_node_8)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__contains__(binary_tree_4)
    assert var_10 is False
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    var_16 = binary_tree_5.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    int_3 = 1379
    set_3 = {int_3, int_3}
    binary_node_10 = module_0.BinaryNode(set_3)
    binary_node_11 = module_0.BinaryNode(binary_node_10)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__repr__()
    assert var_22 == 'binary:()'
    binary_node_12 = module_0.BinaryNode(var_22)
    assert binary_node_12.value == 'binary:()'
    var_23 = binary_node_12.__repr__()
    assert var_23 == '(L: binary:() R:)'
    var_24 = var_22.__repr__()
    assert var_24 == "'binary:()'"
    binary_node_13 = module_0.BinaryNode(var_23)
    assert binary_node_13.value == '(L: binary:() R:)'
    var_25 = var_22.__contains__(var_22)
    var_26 = var_24.__repr__()
    assert var_26 == '"\'binary:()\'"'

def test_case_2366():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_node_2 = module_0.BinaryNode(binary_node_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_3 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    var_6 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_8)
    var_10 = binary_node_4.removeFromParent(binary_tree_5, var_9)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_5 = module_0.BinaryNode(tuple_3)
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__repr__()
    assert var_11 == 'binary:()'
    var_12 = binary_node_5.__repr__()
    assert var_12 == '(L: ((),) R:)'
    var_13 = var_10.__repr__()

def test_case_2367():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.__contains__(binary_tree_2)
    assert var_3 is False
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    var_4 = binary_node_2.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_6)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_5 = module_0.BinaryNode(binary_tree_7)
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_1)
    var_10 = var_9.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_node_6 = module_0.BinaryNode(var_11)
    var_12 = binary_node_6.inorder()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    var_18 = var_14.__iter__()
    var_19 = var_16.__repr__()
    var_20 = binary_tree_11.__iter__()

def test_case_2368():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_5 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    var_9 = binary_node_1.removeFromParent(binary_tree_3, var_8)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_13.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_node_3.inorder()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_18.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_23 = binary_tree_15.__iter__()
    binary_node_4 = module_0.BinaryNode(var_23)
    var_24 = binary_node_4.inorder()
    binary_tree_16 = module_0.BinaryTree()

def test_case_2369():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)

def test_case_2370():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    var_7 = binary_node_1.__repr__()
    assert var_7 == '(L: ((),) R:)'
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__repr__()
    assert var_8 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_8)
    assert binary_node_2.value == 'binary:()'
    var_9 = binary_node_2.__repr__()
    assert var_9 == '(L: binary:() R:)'
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_9)
    assert binary_node_3.value == '(L: binary:() R:)'
    var_11 = var_8.__contains__(var_8)
    var_12 = var_10.__repr__()
    assert var_12 == '"\'binary:()\'"'
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    var_17 = binary_tree_6.__iter__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_4 = module_0.BinaryNode(tuple_3)
    binary_tree_7 = module_0.BinaryTree()
    var_18 = binary_tree_7.__repr__()
    assert var_18 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_18)
    assert binary_node_5.value == 'binary:()'
    binary_node_6 = module_0.BinaryNode(binary_node_4)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_7 = module_0.BinaryNode(bytes_0)
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.__repr__()
    assert var_19 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_19)
    assert binary_node_8.value == 'binary:()'
    var_20 = binary_node_8.__repr__()
    assert var_20 == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_9 = module_0.BinaryNode(set_0)
    binary_node_10 = module_0.BinaryNode(binary_node_9)
    binary_node_11 = module_0.BinaryNode(var_20)
    assert binary_node_11.value == '(L: binary:() R:)'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_21 = binary_tree_9.add(none_type_1)
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_22 = binary_tree_10.add(none_type_2)
    binary_node_12 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_23 = binary_tree_9.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_24 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    var_26 = var_25.__repr__()
    var_27 = var_26.__iter__()
    var_28 = var_26.__iter__()
    binary_tree_14 = module_0.BinaryTree()

def test_case_2371():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_4 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_node_4.inorder()

def test_case_2372():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_8 = binary_node_0.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_11.__iter__()
    var_14 = var_12.__iter__()
    var_15 = binary_tree_6.__iter__()

def test_case_2373():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_6)
    var_7 = binary_node_1.inorder()
    var_8 = binary_tree_2.remove(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_11)
    binary_tree_9 = module_0.BinaryTree()
    var_12 = binary_tree_9.__iter__()
    var_13 = binary_tree_9.closest(var_12)
    var_14 = var_11.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__repr__()
    assert var_16 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_16)
    assert binary_node_5.value == 'binary:()'
    var_17 = binary_tree_11.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_node_6 = module_0.BinaryNode(var_18)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_18 = module_0.BinaryTree()
    var_19 = binary_tree_18.add(none_type_0)
    assert f'{type(binary_tree_18.root).__module__}.{type(binary_tree_18.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_19 = module_0.BinaryTree()
    var_20 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = binary_tree_20.add(var_19)
    binary_tree_21 = module_0.BinaryTree()
    var_23 = binary_tree_21.__repr__()
    assert var_23 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_23)
    assert binary_node_7.value == 'binary:()'
    var_24 = binary_node_7.__repr__()
    assert var_24 == '(L: binary:() R:)'
    var_25 = var_23.__repr__()
    assert var_25 == "'binary:()'"
    none_type_1 = None
    binary_tree_22 = module_0.BinaryTree()
    var_26 = binary_tree_22.add(none_type_1)
    none_type_2 = None
    binary_tree_23 = module_0.BinaryTree()
    var_27 = binary_tree_23.add(none_type_2)
    binary_node_8 = module_0.BinaryNode(binary_tree_23)
    binary_tree_24 = module_0.BinaryTree()

def test_case_2374():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    var_3 = binary_node_0.__repr__()
    assert var_3 == '(L: ((),) R:)'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    var_6 = binary_tree_3.closest(var_5)
    var_7 = var_4.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_8 = binary_node_2.inorder()
    var_9 = var_8.__repr__()
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_1)
    var_11 = binary_tree_5.getMax()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_12)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    var_14 = binary_tree_7.closest(var_13)
    var_15 = var_12.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.add(none_type_2)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_9.__iter__()

def test_case_2375():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__contains__(binary_tree_3)
    assert var_4 is False
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_2 = module_0.BinaryNode(set_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(var_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_node_4.inorder()
    var_7 = binary_tree_5.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_5 = module_0.BinaryNode(bytes_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_node_7 = module_0.BinaryNode(var_8)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_node_7.inorder()
    binary_tree_11 = module_0.BinaryTree()
    var_10 = binary_tree_11.__iter__()
    var_11 = binary_tree_11.__contains__(binary_tree_11)
    var_12 = var_11.__repr__()

def test_case_2376():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = var_2.__repr__()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.__iter__()

def test_case_2377():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    var_8 = binary_node_0.inorder()
    var_9 = var_7.__repr__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_11 = var_10.__repr__()
    binary_tree_6 = module_0.BinaryTree()

def test_case_2378():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(none_type_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.closest(var_3)
    var_5 = var_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_6.__iter__()
    var_10 = var_8.__iter__()
    var_11 = binary_tree_3.__repr__()
    assert var_11 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_1 = module_0.BinaryNode(var_15)
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    var_17 = binary_tree_10.closest(var_16)
    var_18 = var_15.__iter__()
    var_19 = var_16.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    var_23 = var_20.__iter__()
    var_24 = var_22.__iter__()
    var_25 = binary_tree_11.__repr__()
    assert var_25 == 'binary:()'
    var_26 = binary_tree_12.__repr__()
    assert var_26 == 'binary:()'
    bool_0 = True

def test_case_2379():
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_1 = module_0.BinaryNode(bytes_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_3 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_3.inorder()
    binary_tree_1 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_4 = module_0.BinaryNode(binary_tree_2)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_5 = module_0.BinaryNode(tuple_1)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_6 = module_0.BinaryNode(set_0)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    var_3 = binary_node_6.inorder()

def test_case_2380():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_0.__iter__()

def test_case_2381():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_11 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_11)
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__repr__()
    assert var_13 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_13)
    assert binary_node_2.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_14)
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    var_16 = binary_tree_7.closest(var_15)
    binary_node_4 = module_0.BinaryNode(var_15)
    binary_tree_8 = module_0.BinaryTree()
    var_17 = binary_tree_8.__repr__()
    assert var_17 == 'binary:()'
    var_18 = binary_tree_8.remove(var_17)

def test_case_2382():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_2 = binary_node_0.inorder()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_2.inorder()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_1)
    var_6 = binary_tree_3.remove(var_4)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_10 = binary_node_3.inorder()
    var_11 = var_9.__repr__()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_2)
    var_13 = var_12.__repr__()

def test_case_2383():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    var_3 = binary_tree_5.closest(var_2)
    var_4 = var_1.__iter__()
    var_5 = binary_tree_5.remove(var_3)
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    var_10 = var_9.__repr__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__repr__()
    assert var_13 == 'binary:()'
    var_14 = binary_tree_9.remove(var_13)
    var_15 = var_13.__repr__()
    assert var_15 == "'binary:()'"
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    none_type_0 = None

def test_case_2384():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_11 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    var_16 = binary_tree_3.__repr__()
    assert var_16 == 'binary:()'
    var_17 = binary_tree_4.__repr__()
    assert var_17 == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    var_18 = binary_node_0.inorder()
    binary_tree_5 = module_0.BinaryTree()
    var_19 = binary_tree_5.__repr__()
    assert var_19 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_19)
    assert binary_node_1.value == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_20 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_20)
    var_21 = binary_node_2.inorder()
    var_22 = binary_tree_5.remove(var_19)
    binary_tree_7 = module_0.BinaryTree()
    var_23 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_23)
    var_24 = binary_node_3.inorder()
    binary_tree_8 = module_0.BinaryTree()

def test_case_2385():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__repr__()
    assert var_2 == 'binary:()'
    var_3 = binary_tree_1.remove(var_2)

def test_case_2386():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.add(none_type_0)
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    none_type_2 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_2)
    none_type_3 = None
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()

def test_case_2387():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    var_4 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_4.remove(var_5)
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_1)
    none_type_2 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_11.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    var_17 = binary_tree_11.__contains__(binary_tree_11)
    assert var_17 is False
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__iter__()
    var_19 = binary_tree_12.closest(var_18)

def test_case_2388():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_1.getMax()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_4)
    var_6 = var_4.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_0.inorder()
    var_8 = var_7.__repr__()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    var_10 = binary_node_2.inorder()
    var_11 = binary_tree_4.__repr__()
    assert var_11 == 'binary:(L: None R:)'
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_12.__repr__()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_3 = module_0.BinaryNode(tuple_3)
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.__repr__()
    assert var_17 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_17)
    assert binary_node_4.value == 'binary:()'
    var_18 = binary_tree_7.__repr__()
    assert var_18 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_19 = binary_tree_8.__repr__()
    assert var_19 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_19)
    assert binary_node_5.value == 'binary:()'
    var_20 = binary_node_5.__repr__()
    assert var_20 == '(L: binary:() R:)'
    var_21 = var_19.__repr__()
    assert var_21 == "'binary:()'"
    binary_node_6 = module_0.BinaryNode(var_20)
    assert binary_node_6.value == '(L: binary:() R:)'
    var_22 = var_19.__contains__(var_19)
    var_23 = var_21.__repr__()
    assert var_23 == '"\'binary:()\'"'
    binary_tree_9 = module_0.BinaryTree()
    var_24 = binary_tree_9.__iter__()
    binary_node_7 = module_0.BinaryNode(var_24)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()

def test_case_2389():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"

def test_case_2390():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_5.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    binary_node_0 = module_0.BinaryNode(var_11)
    binary_tree_5 = module_0.BinaryTree()
    var_16 = binary_tree_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_16)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_node_1.inorder()
    var_18 = binary_tree_5.__iter__()

def test_case_2391():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_node_1.inorder()
    var_5 = binary_tree_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_6.__repr__()
    var_9 = var_8.__iter__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_10 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)

def test_case_2392():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    var_0 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_node_1.__repr__()
    assert var_2 == '(L: binary:() R:)'
    var_3 = var_1.__repr__()
    assert var_3 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == '(L: binary:() R:)'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_5 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    var_6 = binary_node_1.__repr__()
    assert var_6 == '(L: binary:() R:)'

def test_case_2393():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_9)
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    var_11 = binary_tree_4.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_4.__iter__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.add(none_type_0)
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_17)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_13 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_13.getMin()

def test_case_2394():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_node_2.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_5.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_3 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    var_11 = binary_tree_7.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    var_18 = binary_tree_12.closest(var_17)
    var_19 = var_16.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_20 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_23 = var_20.__repr__()
    var_24 = binary_tree_15.closest(binary_tree_13)
    binary_tree_17 = module_0.BinaryTree()
    var_25 = binary_tree_17.__iter__()
    binary_node_5 = module_0.BinaryNode(var_25)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_26 = binary_node_5.inorder()
    var_27 = binary_tree_17.__iter__()

def test_case_2395():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_3 = var_0.__contains__(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    var_6 = binary_tree_2.closest(var_5)
    var_7 = var_4.__iter__()
    var_8 = binary_node_2.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_12 = var_9.__repr__()
    var_13 = binary_tree_5.closest(binary_tree_3)
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_15 = var_14.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_node_3.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.__repr__()
    assert var_18 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_18)
    assert binary_node_4.value == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_19)
    var_20 = binary_node_5.inorder()
    var_21 = binary_tree_12.remove(var_18)
    none_type_1 = None
    binary_tree_14 = module_0.BinaryTree()
    var_22 = binary_tree_14.add(none_type_1)
    bool_0 = False
    binary_node_6 = module_0.BinaryNode(bool_0)
    bool_1 = True

def test_case_2396():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    var_2 = var_1.__repr__()

def test_case_2397():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_node_2 = module_0.BinaryNode(var_1)
    var_2 = binary_node_1.removeFromParent(var_1, none_type_0)
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__repr__()
    assert var_4 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_4)
    assert binary_node_4.value == 'binary:()'
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.__repr__()
    assert var_6 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_6)
    assert binary_node_5.value == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_6)
    assert binary_node_6.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_7 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_7.value).__module__}.{type(binary_node_7.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_node_7.inorder()
    var_9 = binary_tree_7.add(binary_node_7)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_8 = module_0.BinaryNode(set_0)
    binary_node_9 = module_0.BinaryNode(binary_node_8)
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__contains__(binary_tree_10)
    assert var_10 is False

def test_case_2398():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_node_2 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    var_6 = binary_tree_7.closest(var_5)
    var_7 = var_4.__iter__()
    var_8 = binary_tree_7.remove(var_6)

def test_case_2399():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_6.__repr__()
    assert var_14 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    var_18 = binary_tree_3.__iter__()

def test_case_2400():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_2.__repr__()
    assert var_10 == 'binary:()'
    var_11 = binary_tree_3.__repr__()
    assert var_11 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_12 = binary_tree_4.__repr__()
    assert var_12 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_12)
    assert binary_node_0.value == 'binary:()'
    var_13 = binary_node_0.__repr__()
    assert var_13 == '(L: binary:() R:)'
    var_14 = var_12.__repr__()
    assert var_14 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_13)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_15 = var_12.__contains__(var_12)
    var_16 = binary_tree_4.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_2 = module_0.BinaryNode(bytes_0)
    var_17 = binary_node_2.inorder()
    var_18 = var_17.__repr__()
    bytes_1 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_1)
    dict_0 = {}
    binary_tree_5 = module_0.BinaryTree()
    var_19 = binary_tree_5.add(dict_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_24 = binary_tree_6.__iter__()
    binary_node_4 = module_0.BinaryNode(var_24)
    binary_tree_7 = module_0.BinaryTree()
    var_25 = binary_tree_7.__iter__()

def test_case_2401():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = var_5.__repr__()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_node_0 = module_0.BinaryNode(var_15)
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_node_1 = module_0.BinaryNode(var_16)
    binary_tree_11 = module_0.BinaryTree()
    var_17 = binary_tree_11.__iter__()
    var_18 = binary_tree_11.closest(var_17)
    var_19 = var_16.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = var_20.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_25 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    var_27 = var_25.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_18)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_node_4 = module_0.BinaryNode(binary_node_3)

def test_case_2402():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_2.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_5 = binary_tree_2.remove(var_3)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_1)
    var_7 = binary_tree_4.getMax()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.add(none_type_2)
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_3)
    none_type_4 = None
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    var_14 = binary_tree_10.closest(var_13)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__repr__()
    assert var_15 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_15)
    assert binary_node_4.value == 'binary:()'
    var_16 = binary_node_4.__repr__()
    assert var_16 == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_5 = module_0.BinaryNode(set_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_node_7 = module_0.BinaryNode(var_16)
    assert binary_node_7.value == '(L: binary:() R:)'

def test_case_2403():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_node_1.inorder()
    var_9 = binary_tree_7.add(binary_node_1)
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    var_14 = var_12.__iter__()
    var_15 = binary_tree_10.__repr__()
    assert var_15 == 'binary:()'
    var_16 = binary_tree_11.__repr__()
    assert var_16 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    var_18 = binary_tree_12.__contains__(binary_tree_12)
    assert var_18 is False

def test_case_2404():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    var_6 = binary_tree_1.closest(var_5)
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__repr__()
    assert var_10 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_10)
    assert binary_node_1.value == 'binary:()'
    var_11 = binary_tree_5.__repr__()
    assert var_11 == 'binary:()'
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_12 = binary_tree_6.add(none_type_0)
    binary_tree_7 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_7)
    var_13 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    var_14 = binary_tree_8.__iter__()
    binary_node_4 = module_0.BinaryNode(var_14)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_17.__iter__()
    var_20 = binary_tree_11.__repr__()
    assert var_20 == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_21 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_21)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_22 = binary_node_5.inorder()
    binary_tree_16 = module_0.BinaryTree()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_6 = module_0.BinaryNode(tuple_3)
    binary_tree_17 = module_0.BinaryTree()
    var_23 = binary_tree_17.__repr__()
    assert var_23 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_23)
    assert binary_node_7.value == 'binary:()'
    binary_node_8 = module_0.BinaryNode(binary_node_6)

def test_case_2405():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    var_4 = binary_tree_2.__contains__(binary_tree_2)
    assert var_4 is False
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_8.__iter__()
    var_11 = binary_tree_3.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__repr__()
    assert var_17 == 'binary:()'
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_18)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    var_22 = var_19.__iter__()
    var_23 = var_21.__iter__()
    var_24 = binary_tree_14.__repr__()
    assert var_24 == 'binary:()'
    var_25 = binary_tree_15.__repr__()
    assert var_25 == 'binary:()'
    binary_tree_16 = module_0.BinaryTree()
    var_26 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_26.__repr__()
    var_29 = var_26.__iter__()
    var_30 = var_28.__iter__()

def test_case_2406():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_0.__contains__(binary_tree_2)
    assert var_3 is False
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)

def test_case_2407():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: binary:() R:)'
    var_4 = var_2.__repr__()
    assert var_4 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()

def test_case_2408():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = binary_tree_0.remove(var_1)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_4 = binary_node_1.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_3 = module_0.BinaryNode(tuple_3)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'
    var_10 = binary_node_3.__repr__()
    assert var_10 == '(L: ((),) R:)'
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_16 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_16)
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = binary_tree_12.__iter__()
    binary_node_5 = module_0.BinaryNode(var_20)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()

def test_case_2409():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_3)

def test_case_2410():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    var_2 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__repr__()
    assert var_3 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_3)
    assert binary_node_1.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_4 = var_3.__contains__(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    var_8 = binary_node_3.inorder()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.add(none_type_1)
    var_10 = var_9.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.add(none_type_2)
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_16 = binary_tree_11.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_17 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_13)
    var_18 = binary_node_5.inorder()
    var_19 = var_18.__repr__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_15)
    binary_node_7 = module_0.BinaryNode(binary_node_6)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    bytes_1 = b'v\x92m\xe9\x99\xcf\x96\xb2\x93\xd98\xb0\x1b\xef\x1f\x0b'

def test_case_2411():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = binary_tree_2.closest(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == 'binary:()'
    var_10 = binary_node_2.__repr__()
    assert var_10 == '(L: binary:() R:)'
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_10)
    assert binary_node_3.value == '(L: binary:() R:)'
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'

def test_case_2412():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(binary_tree_0)
    assert var_0 is False
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = binary_tree_5.closest(var_4)

def test_case_2413():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__repr__()
    assert var_2 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == 'binary:()'
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    none_type_1 = None
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.add(none_type_1)
    var_9 = var_8.__repr__()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(none_type_2)
    var_11 = var_10.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    binary_tree_12 = module_0.BinaryTree()
    var_12 = binary_tree_12.__repr__()
    assert var_12 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_12)
    assert binary_node_5.value == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_13.__repr__()
    var_16 = var_13.__iter__()
    var_17 = var_13.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_19.__repr__()
    var_21 = var_20.__iter__()
    var_22 = var_20.__iter__()
    var_23 = var_19.__iter__()
    var_24 = var_21.__repr__()
    none_type_3 = None
    binary_tree_17 = module_0.BinaryTree()
    var_25 = binary_tree_17.add(none_type_3)
    none_type_4 = None
    binary_tree_18 = module_0.BinaryTree()
    var_26 = binary_tree_18.add(none_type_4)
    binary_node_6 = module_0.BinaryNode(binary_tree_18)
    binary_tree_19 = module_0.BinaryTree()
    var_27 = binary_tree_17.__iter__()

def test_case_2414():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    var_8 = binary_node_4.inorder()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_node_5 = module_0.BinaryNode(var_9)
    var_10 = binary_node_5.inorder()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_11 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    var_15 = var_13.__iter__()
    var_16 = var_14.__iter__()
    var_17 = binary_tree_10.__iter__()
    none_type_0 = None
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.add(none_type_0)
    assert f'{type(binary_tree_12.root).__module__}.{type(binary_tree_12.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_6 = module_0.BinaryNode(binary_tree_12)
    var_19 = binary_tree_12.getMin()
    binary_tree_13 = module_0.BinaryTree()
    var_20 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_20.__repr__()
    var_23 = var_20.__iter__()
    var_24 = var_22.__iter__()
    var_25 = binary_tree_13.__repr__()
    assert var_25 == 'binary:()'
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_26 = binary_tree_17.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    var_27 = var_26.__iter__()
    var_28 = var_26.__repr__()
    binary_tree_19 = module_0.BinaryTree()
    var_29 = var_26.__repr__()
    binary_tree_20 = module_0.BinaryTree()

def test_case_2415():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_1.__repr__()
    assert var_6 == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_node_0.__repr__()
    assert var_8 == '(L: ((),) R:)'
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    var_13 = var_11.__iter__()
    var_14 = binary_tree_3.__repr__()
    assert var_14 == 'binary:()'

def test_case_2416():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    var_4 = binary_tree_1.closest(var_3)
    var_5 = var_3.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == 'binary:()'
    binary_node_3 = module_0.BinaryNode(binary_node_1)
    var_7 = var_6.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_3)
    var_8 = binary_node_4.inorder()
    binary_node_5 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_node_6 = module_0.BinaryNode(var_9)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    var_11 = binary_tree_5.closest(var_10)
    var_12 = var_9.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_13 = binary_tree_6.__repr__()
    assert var_13 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_13)
    assert binary_node_7.value == 'binary:()'
    var_14 = binary_node_7.__repr__()
    assert var_14 == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_8 = module_0.BinaryNode(set_0)
    binary_node_9 = module_0.BinaryNode(binary_node_8)
    binary_node_10 = module_0.BinaryNode(var_14)
    assert binary_node_10.value == '(L: binary:() R:)'
    binary_tree_7 = module_0.BinaryTree()
    var_15 = binary_tree_7.__iter__()
    binary_node_11 = module_0.BinaryNode(var_15)
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    var_17 = binary_tree_8.closest(var_16)
    var_18 = var_15.__iter__()
    var_19 = var_16.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    var_20 = binary_tree_9.__repr__()
    assert var_20 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    binary_node_12 = module_0.BinaryNode(var_21)
    binary_tree_11 = module_0.BinaryTree()
    var_22 = binary_tree_11.__iter__()
    binary_node_13 = module_0.BinaryNode(var_22)

def test_case_2417():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_3.__iter__()
    var_6 = binary_tree_2.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_5 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    var_9 = binary_tree_5.closest(var_8)
    var_10 = var_7.__iter__()
    var_11 = binary_tree_5.remove(var_9)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__repr__()
    assert var_12 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_node_5 = module_0.BinaryNode(var_13)
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()

def test_case_2418():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'

def test_case_2419():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_tree_6.remove(var_7)
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_8)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_10)
    binary_tree_10 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.add(none_type_0)
    assert f'{type(binary_tree_11.root).__module__}.{type(binary_tree_11.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_12 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(none_type_0)
    binary_node_6 = module_0.BinaryNode(var_11)
    var_12 = binary_node_5.removeFromParent(var_11, none_type_0)
    binary_tree_13 = module_0.BinaryTree()
    var_13 = binary_tree_13.__iter__()
    binary_node_7 = module_0.BinaryNode(var_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_14 = binary_node_7.inorder()
    binary_tree_16 = module_0.BinaryTree()
    var_15 = binary_tree_16.__repr__()
    assert var_15 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_15)
    assert binary_node_8.value == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_15)
    assert binary_node_9.value == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    var_16 = binary_tree_17.__iter__()
    var_17 = binary_tree_17.__contains__(binary_tree_17)
    assert var_17 is False
    none_type_1 = None
    binary_tree_18 = module_0.BinaryTree()
    var_18 = binary_tree_18.add(none_type_1)
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    binary_tree_19 = module_0.BinaryTree()
    var_21 = binary_tree_19.__repr__()
    assert var_21 == 'binary:()'
    binary_tree_20 = module_0.BinaryTree()
    var_22 = binary_tree_20.__iter__()
    binary_node_10 = module_0.BinaryNode(var_22)
    var_23 = binary_node_10.inorder()
    var_24 = var_22.__repr__()

def test_case_2420():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_6.__repr__()

def test_case_2421():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    var_8 = binary_node_0.removeFromParent(binary_tree_2, var_7)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_9)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = binary_node_1.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_11 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.add(none_type_0)
    assert f'{type(binary_tree_10.root).__module__}.{type(binary_tree_10.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_11 = module_0.BinaryTree()
    var_13 = binary_tree_11.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__iter__()

def test_case_2422():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(binary_tree_0)
    assert var_0 is False
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_4.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_9 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    var_13 = var_9.__repr__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_14 = binary_tree_9.add(none_type_0)
    assert f'{type(binary_tree_9.root).__module__}.{type(binary_tree_9.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_10 = module_0.BinaryTree()
    var_15 = binary_tree_10.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_4 = module_0.BinaryNode(bytes_0)
    var_16 = binary_node_4.inorder()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_node_5 = module_0.BinaryNode(binary_tree_14)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_19.__iter__()

def test_case_2423():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.closest(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    var_5 = var_2.__iter__()
    var_6 = var_4.__iter__()
    var_7 = binary_tree_1.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_tree_2.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.__iter__()
    with pytest.raises(ValueError):
        binary_tree_3.getMin()

def test_case_2424():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(dict_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_node_0 = module_0.BinaryNode(var_5)
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.add(none_type_0)
    var_9 = var_8.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    var_14 = var_12.__iter__()
    var_15 = binary_tree_4.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()

def test_case_2425():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(none_type_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_1)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_2)
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_2)

def test_case_2426():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()

def test_case_2427():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_5.__repr__()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.add(none_type_0)
    var_11 = var_10.__repr__()
    var_12 = var_11.__iter__()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_13 = binary_tree_4.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_14 = binary_tree_5.__repr__()
    assert var_14 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_14)
    assert binary_node_2.value == 'binary:()'
    binary_node_3 = module_0.BinaryNode(binary_node_1)
    dict_1 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_tree_6.add(dict_1)
    var_16 = var_15.__repr__()
    var_17 = var_16.__iter__()
    var_18 = var_17.__iter__()
    var_19 = binary_tree_6.__iter__()
    bool_0 = False
    binary_node_4 = module_0.BinaryNode(bool_0)
    binary_tree_7 = module_0.BinaryTree()
    var_20 = binary_tree_7.__repr__()
    assert var_20 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_20)
    assert binary_node_5.value == 'binary:()'
    var_21 = binary_node_5.__repr__()
    assert var_21 == '(L: binary:() R:)'
    var_22 = var_20.__repr__()
    assert var_22 == "'binary:()'"
    binary_node_6 = module_0.BinaryNode(var_21)
    assert binary_node_6.value == '(L: binary:() R:)'
    var_23 = var_20.__contains__(var_20)

def test_case_2428():
    bool_0 = True
    binary_node_0 = module_0.BinaryNode(bool_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_2 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    none_type_2 = None
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.add(none_type_2)
    var_4 = var_3.__repr__()
    none_type_3 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_3)
    none_type_4 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_4)
    binary_node_3 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__repr__()
    assert var_8 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_8)
    assert binary_node_4.value == 'binary:()'
    none_type_5 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_5)
    binary_node_5 = module_0.BinaryNode(binary_tree_8)
    none_type_6 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_6)
    var_11 = var_10.__repr__()
    none_type_7 = None
    binary_tree_10 = module_0.BinaryTree()
    var_12 = binary_tree_10.__contains__(none_type_7)
    assert var_12 is False
    var_13 = var_12.__repr__()

def test_case_2429():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.__iter__()
    var_5 = binary_tree_5.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_8 = binary_node_3.inorder()

def test_case_2430():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_6.__iter__()
    var_9 = var_5.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_2 = module_0.BinaryNode(set_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)

def test_case_2431():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__repr__()
    assert var_4 == 'binary:()'
    var_5 = binary_tree_2.remove(var_4)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__repr__()
    assert var_6 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_6)
    assert binary_node_1.value == 'binary:()'
    binary_node_2 = module_0.BinaryNode(binary_node_0)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_8.__iter__()
    var_13 = var_10.__repr__()
    dict_0 = {}
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.add(dict_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    var_18 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_19 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    var_22 = var_21.__iter__()
    none_type_0 = None
    binary_tree_9 = module_0.BinaryTree()
    var_23 = binary_tree_9.add(none_type_0)
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_node_4 = module_0.BinaryNode(var_23)
    binary_tree_11 = module_0.BinaryTree()
    var_24 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_24)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    var_25 = binary_tree_14.__repr__()
    assert var_25 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_25)
    assert binary_node_6.value == 'binary:()'
    var_26 = binary_node_6.__repr__()
    assert var_26 == '(L: binary:() R:)'
    var_27 = var_25.__repr__()
    assert var_27 == "'binary:()'"
    binary_node_7 = module_0.BinaryNode(var_26)
    assert binary_node_7.value == '(L: binary:() R:)'
    binary_tree_15 = module_0.BinaryTree()
    var_28 = binary_tree_15.__repr__()
    assert var_28 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_28)
    assert binary_node_8.value == 'binary:()'
    var_29 = binary_node_8.__repr__()
    assert var_29 == '(L: binary:() R:)'
    var_30 = var_28.__repr__()
    assert var_30 == "'binary:()'"

def test_case_2432():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__repr__()
    assert var_2 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_2)
    assert binary_node_1.value == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_tree_11.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_9 = binary_node_3.inorder()
    var_10 = binary_tree_11.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_11 = binary_tree_14.__repr__()
    assert var_11 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_11)
    assert binary_node_4.value == 'binary:()'
    var_12 = binary_node_4.__repr__()
    assert var_12 == '(L: binary:() R:)'
    var_13 = var_11.__repr__()
    assert var_13 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_12)
    assert binary_node_5.value == '(L: binary:() R:)'
    var_14 = var_11.__contains__(var_11)
    var_15 = var_13.__repr__()
    assert var_15 == '"\'binary:()\'"'
    binary_tree_15 = module_0.BinaryTree()
    var_16 = binary_tree_15.__iter__()
    var_17 = binary_tree_15.closest(var_16)
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_tree_16.__repr__()
    assert var_18 == 'binary:()'
    binary_node_6 = module_0.BinaryNode(var_18)
    assert binary_node_6.value == 'binary:()'
    var_19 = binary_node_6.__repr__()
    assert var_19 == '(L: binary:() R:)'
    var_20 = var_18.__repr__()
    assert var_20 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_7 = module_0.BinaryNode(tuple_1)
    binary_tree_17 = module_0.BinaryTree()
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_8 = module_0.BinaryNode(tuple_3)
    binary_tree_18 = module_0.BinaryTree()
    var_21 = binary_tree_18.__repr__()
    assert var_21 == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_21)
    assert binary_node_9.value == 'binary:()'
    binary_node_10 = module_0.BinaryNode(binary_node_8)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_11 = module_0.BinaryNode(bytes_0)

def test_case_2433():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_node_0.inorder()
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_node_0.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.__repr__()
    assert var_10 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_10)
    assert binary_node_1.value == 'binary:()'
    var_11 = binary_node_1.__repr__()
    assert var_11 == '(L: binary:() R:)'
    var_12 = var_10.__repr__()
    assert var_12 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_11)
    assert binary_node_2.value == '(L: binary:() R:)'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__repr__()
    assert var_13 == 'binary:()'
    var_14 = binary_node_3.__repr__()
    assert var_14 == '(L: ((),) R:)'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_4 = module_0.BinaryNode(tuple_3)
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__repr__()
    assert var_15 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_15)
    assert binary_node_5.value == 'binary:()'
    none_type_0 = None
    binary_node_6 = module_0.BinaryNode(none_type_0)
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__repr__()
    assert var_16 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_16)
    assert binary_node_7.value == 'binary:()'
    binary_tree_13 = module_0.BinaryTree()
    binary_node_8 = module_0.BinaryNode(binary_tree_13)
    var_17 = var_16.__contains__(var_16)
    binary_tree_14 = module_0.BinaryTree()
    var_18 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_19 = var_18.__iter__()
    var_20 = var_18.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_21 = binary_tree_17.__iter__()
    binary_node_9 = module_0.BinaryNode(var_21)
    var_22 = binary_node_9.inorder()
    bytes_0 = b''

def test_case_2434():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_2 = binary_node_0.inorder()
    var_3 = var_2.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_node_1.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_7 = var_4.__contains__(var_4)
    var_8 = binary_tree_1.__iter__()
    with pytest.raises(ValueError):
        binary_tree_1.getMax()

def test_case_2435():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_3 = binary_tree_5.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    var_4 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = binary_tree_7.__iter__()
    var_6 = binary_tree_7.closest(var_5)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_7 = binary_tree_9.__iter__()
    binary_node_2 = module_0.BinaryNode(var_7)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_8 = binary_node_2.inorder()
    binary_tree_12 = module_0.BinaryTree()
    var_9 = binary_node_2.inorder()

def test_case_2436():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_6.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    var_18 = binary_node_2.inorder()
    var_19 = binary_tree_7.__repr__()
    assert var_19 == 'binary:(L: None R:)'
    binary_tree_8 = module_0.BinaryTree()
    var_20 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_21 = var_20.__iter__()
    var_22 = var_21.__repr__()
    var_23 = var_22.__iter__()
    var_24 = binary_tree_8.closest(var_21)
    binary_tree_10 = module_0.BinaryTree()
    var_25 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    var_27 = var_25.__repr__()
    var_28 = var_25.__iter__()
    var_29 = var_27.__iter__()
    var_30 = binary_tree_10.__repr__()
    assert var_30 == 'binary:()'
    var_31 = binary_tree_11.__repr__()
    assert var_31 == 'binary:()'

def test_case_2437():
    bool_0 = False
    binary_node_0 = module_0.BinaryNode(bool_0)
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_4 = binary_tree_1.__repr__()
    assert var_4 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_4)
    assert binary_node_1.value == 'binary:()'
    var_5 = binary_node_1.__repr__()
    assert var_5 == '(L: binary:() R:)'
    var_6 = var_4.__repr__()
    assert var_6 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_5)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_7 = var_4.__contains__(var_4)
    var_8 = var_6.__repr__()
    assert var_8 == '"\'binary:()\'"'

def test_case_2438():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_5 = var_2.__repr__()
    var_6 = binary_tree_6.closest(binary_tree_4)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_node_2 = module_0.BinaryNode(var_7)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_8 = binary_node_3.inorder()
    bool_0 = True
    binary_node_5 = module_0.BinaryNode(bool_0)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    binary_node_7 = module_0.BinaryNode(var_9)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_10 = binary_tree_13.__repr__()
    assert var_10 == 'binary:()'
    binary_node_8 = module_0.BinaryNode(var_10)
    assert binary_node_8.value == 'binary:()'
    var_11 = binary_tree_10.__repr__()
    assert var_11 == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.__iter__()
    binary_tree_15 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_12.__repr__()
    var_15 = var_12.__iter__()
    var_16 = var_14.__iter__()
    var_17 = binary_tree_14.__repr__()
    assert var_17 == 'binary:()'
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_9 = module_0.BinaryNode(set_1)
    binary_node_10 = module_0.BinaryNode(binary_node_9)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    var_18 = binary_tree_17.__iter__()
    binary_node_11 = module_0.BinaryNode(var_18)
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_19 = binary_node_11.inorder()
    dict_0 = {binary_tree_19: binary_tree_16, binary_node_6: binary_tree_11}

def test_case_2439():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_2.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_4)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_2)
    var_7 = var_6.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_8 = binary_tree_6.__repr__()
    assert var_8 == 'binary:()'
    var_9 = binary_node_1.__repr__()
    assert var_9 == '(L: ((),) R:)'
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    var_15 = var_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_11)
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    var_16 = binary_node_3.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_17.__repr__()
    var_20 = var_17.__iter__()
    var_21 = var_19.__iter__()
    var_22 = binary_tree_9.__repr__()
    assert var_22 == 'binary:()'
    str_0 = '%|O?|HtO7M'

def test_case_2440():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_2.__iter__()
    var_5 = binary_tree_0.__repr__()
    assert var_5 == 'binary:()'
    var_6 = binary_tree_1.__repr__()
    assert var_6 == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    var_12 = var_10.__iter__()
    var_13 = binary_tree_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_14 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_15 = var_14.__iter__()
    var_16 = var_14.__repr__()
    var_17 = var_14.__iter__()
    var_18 = var_16.__iter__()
    var_19 = binary_tree_4.__repr__()
    assert var_19 == 'binary:()'
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_6 = module_0.BinaryTree()
    var_20 = binary_tree_6.__repr__()
    assert var_20 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_20)
    assert binary_node_1.value == 'binary:()'
    binary_node_2 = module_0.BinaryNode(binary_node_0)
    var_21 = var_20.__iter__()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_22 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(none_type_0)
    binary_node_4 = module_0.BinaryNode(var_22)
    binary_tree_9 = module_0.BinaryTree()
    var_23 = binary_tree_9.__iter__()
    binary_node_5 = module_0.BinaryNode(var_23)
    binary_tree_10 = module_0.BinaryTree()
    var_24 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_25 = var_24.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_26 = binary_tree_9.__contains__(binary_tree_11)
    assert var_26 is False
    none_type_1 = None
    binary_tree_13 = module_0.BinaryTree()
    var_27 = binary_tree_13.add(none_type_1)
    binary_node_6 = module_0.BinaryNode(binary_tree_13)
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_7 = module_0.BinaryNode(tuple_3)
    var_28 = binary_node_7.inorder()
    var_29 = binary_tree_13.__repr__()
    assert var_29 == 'binary:(L: None R:)'
    dict_0 = {}
    binary_tree_14 = module_0.BinaryTree()
    var_30 = binary_tree_14.add(dict_0)
    var_31 = var_30.__repr__()
    var_32 = var_31.__iter__()
    var_33 = var_32.__iter__()
    var_34 = var_33.__repr__()
    binary_node_8 = module_0.BinaryNode(var_32)
    none_type_2 = None
    binary_tree_15 = module_0.BinaryTree()
    var_35 = binary_tree_15.add(none_type_2)
    none_type_3 = None
    binary_tree_16 = module_0.BinaryTree()
    var_36 = binary_tree_16.add(none_type_3)
    binary_node_9 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    var_37 = binary_tree_15.__iter__()
    none_type_4 = None
    binary_tree_18 = module_0.BinaryTree()
    var_38 = binary_tree_18.add(none_type_4)
    binary_node_10 = module_0.BinaryNode(binary_tree_18)
    none_type_5 = None
    binary_tree_19 = module_0.BinaryTree()
    var_39 = binary_tree_19.add(none_type_5)
    var_40 = var_39.__repr__()

def test_case_2441():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    binary_node_2 = module_0.BinaryNode(var_1)
    var_2 = binary_node_1.removeFromParent(var_1, none_type_0)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    var_3 = binary_node_3.inorder()
    var_4 = var_3.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_4.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_6 = module_0.BinaryTree()
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_7)
    var_12 = binary_tree_7.getMin()

def test_case_2442():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_node_1 = module_0.BinaryNode(var_0)
    dict_0 = {}
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_tree_2.add(dict_0)
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()

def test_case_2443():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_3 = binary_node_1.inorder()
    binary_tree_5 = module_0.BinaryTree()

def test_case_2444():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    binary_tree_7 = module_0.BinaryTree()
    with pytest.raises(ValueError):
        binary_tree_1.getMax()

def test_case_2445():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    var_3 = binary_tree_2.closest(var_2)
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_1.inorder()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    list_0 = [binary_node_0, var_2, binary_node_0]

def test_case_2446():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    var_6 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_7)
    binary_tree_3 = module_0.BinaryTree()
    var_8 = binary_tree_3.__iter__()
    var_9 = binary_tree_3.closest(var_8)
    var_10 = var_7.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_3.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_12 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__repr__()
    assert var_13 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_13)
    assert binary_node_3.value == 'binary:()'
    var_14 = binary_node_3.__repr__()
    assert var_14 == '(L: binary:() R:)'
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_4 = module_0.BinaryNode(set_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_node_6 = module_0.BinaryNode(var_14)
    assert binary_node_6.value == '(L: binary:() R:)'

def test_case_2447():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_node_0.inorder()
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__repr__()
    assert var_3 == 'binary:()'
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_6 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_7 = binary_tree_12.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__iter__()
    var_11 = var_9.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_12 = binary_tree_15.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_13 = var_12.__iter__()
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__repr__()
    binary_tree_17 = module_0.BinaryTree()
    var_17 = binary_tree_17.__iter__()
    binary_node_4 = module_0.BinaryNode(var_17)
    var_18 = binary_node_4.inorder()
    binary_tree_18 = module_0.BinaryTree()
    binary_tree_19 = module_0.BinaryTree()
    var_19 = binary_tree_19.__iter__()
    binary_tree_20 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_21.__iter__()
    var_24 = var_22.__iter__()
    var_25 = binary_tree_19.__iter__()
    binary_tree_21 = module_0.BinaryTree()
    var_26 = binary_tree_21.__repr__()
    assert var_26 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_26)
    assert binary_node_5.value == 'binary:()'
    var_27 = binary_node_5.__repr__()
    assert var_27 == '(L: binary:() R:)'
    binary_tree_22 = module_0.BinaryTree()
    var_28 = binary_tree_22.__iter__()
    binary_node_6 = module_0.BinaryNode(var_28)
    binary_tree_23 = module_0.BinaryTree()
    var_29 = binary_tree_23.__iter__()
    var_30 = binary_tree_23.closest(var_29)
    var_31 = var_28.__iter__()
    var_32 = binary_tree_23.remove(var_30)

def test_case_2448():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()

def test_case_2449():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_2)
    var_3 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_node_1.inorder()
    with pytest.raises(ValueError):
        binary_tree_2.getMin()

def test_case_2450():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_1 = binary_tree_3.__repr__()
    assert var_1 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_1)
    assert binary_node_1.value == 'binary:()'
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_3 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    var_6 = var_3.__iter__()
    var_7 = var_5.__iter__()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    dict_0 = {}
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.add(dict_0)
    var_14 = var_13.__repr__()
    var_15 = var_14.__iter__()
    var_16 = var_15.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_17 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = var_17.__iter__()
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_19.__iter__()
    var_22 = var_20.__iter__()

def test_case_2451():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = binary_tree_2.add(var_0)
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__contains__(none_type_1)
    assert var_4 is False
    var_5 = var_4.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__repr__()
    assert var_7 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_7)
    assert binary_node_1.value == 'binary:()'
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_11.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_13)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_14 = module_0.BinaryTree()
    var_12 = binary_tree_14.__repr__()
    assert var_12 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_12)
    assert binary_node_5.value == 'binary:()'
    var_13 = binary_node_5.__repr__()
    assert var_13 == '(L: binary:() R:)'
    var_14 = var_12.__repr__()
    assert var_14 == "'binary:()'"
    binary_node_6 = module_0.BinaryNode(var_13)
    assert binary_node_6.value == '(L: binary:() R:)'
    var_15 = var_12.__contains__(var_12)
    var_16 = var_14.__repr__()
    assert var_16 == '"\'binary:()\'"'
    binary_tree_15 = module_0.BinaryTree()
    binary_node_7 = module_0.BinaryNode(binary_tree_15)
    var_17 = binary_node_7.inorder()
    binary_node_8 = module_0.BinaryNode(binary_tree_15)
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_tree_16.__repr__()
    assert var_18 == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_18)
    assert binary_node_9.value == 'binary:()'
    binary_tree_17 = module_0.BinaryTree()
    binary_node_10 = module_0.BinaryNode(binary_tree_17)
    var_19 = var_18.__contains__(var_18)
    dict_0 = {}
    binary_tree_18 = module_0.BinaryTree()
    var_20 = binary_tree_18.add(dict_0)
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    binary_tree_19 = module_0.BinaryTree()
    var_25 = binary_tree_19.__iter__()
    binary_node_11 = module_0.BinaryNode(var_25)
    binary_tree_20 = module_0.BinaryTree()
    var_26 = binary_tree_20.__iter__()
    var_27 = binary_tree_20.closest(var_26)
    binary_node_12 = module_0.BinaryNode(var_26)

def test_case_2452():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    binary_tree_5 = module_0.BinaryTree()

def test_case_2453():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__contains__(binary_tree_0)
    assert var_0 is False
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_2.inorder()
    binary_node_3 = module_0.BinaryNode(binary_tree_3)
    none_type_0 = None

def test_case_2454():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: ((),) R:)'
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    var_7 = binary_tree_3.closest(var_6)
    var_8 = var_5.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__iter__()
    binary_node_2 = module_0.BinaryNode(var_9)
    var_10 = binary_node_2.inorder()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_11 = binary_tree_6.add(none_type_1)
    var_12 = binary_tree_5.remove(var_10)
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    var_16 = binary_tree_9.__contains__(binary_tree_9)
    assert var_16 is False
    var_17 = var_16.__repr__()
    dict_0 = {}
    binary_tree_10 = module_0.BinaryTree()
    var_18 = binary_tree_10.add(dict_0)
    var_19 = var_18.__repr__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__iter__()
    var_22 = binary_tree_10.__iter__()

def test_case_2455():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    var_2 = var_1.__repr__()
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_4 = binary_node_0.inorder()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_3 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    none_type_1 = None
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.add(none_type_1)
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.add(none_type_2)
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.__iter__()
    binary_node_3 = module_0.BinaryNode(var_8)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.__iter__()
    var_10 = binary_tree_8.closest(var_9)
    var_11 = var_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()

def test_case_2456():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_1.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__repr__()
    assert var_4 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_4)
    assert binary_node_2.value == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_5)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_6 = binary_node_3.inorder()
    var_7 = binary_tree_4.remove(var_4)

def test_case_2457():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    none_type_0 = None
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_3 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()

def test_case_2458():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.add(dict_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    bool_0 = True
    binary_node_2 = module_0.BinaryNode(bool_0)
    binary_node_3 = module_0.BinaryNode(binary_node_2)
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.add(none_type_0)
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_1)
    binary_node_4 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_5.__iter__()
    none_type_2 = None
    binary_tree_8 = module_0.BinaryTree()
    var_9 = binary_tree_8.add(none_type_2)
    none_type_3 = None
    binary_tree_9 = module_0.BinaryTree()
    var_10 = binary_tree_9.add(none_type_3)
    binary_node_5 = module_0.BinaryNode(binary_tree_9)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_6 = module_0.BinaryNode(tuple_1)
    binary_tree_12 = module_0.BinaryTree()
    var_11 = binary_tree_12.__repr__()
    assert var_11 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_11)
    assert binary_node_7.value == 'binary:()'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_8 = module_0.BinaryNode(tuple_3)
    binary_tree_13 = module_0.BinaryTree()
    var_12 = binary_tree_13.__repr__()
    assert var_12 == 'binary:()'
    var_13 = binary_node_8.__repr__()
    assert var_13 == '(L: ((),) R:)'
    binary_tree_14 = module_0.BinaryTree()
    var_14 = binary_tree_14.__iter__()
    binary_node_9 = module_0.BinaryNode(var_14)
    assert f'{type(binary_node_9.value).__module__}.{type(binary_node_9.value).__qualname__}' == 'builtins.generator'
    binary_tree_15 = module_0.BinaryTree()
    var_15 = binary_tree_15.__iter__()
    var_16 = binary_tree_15.closest(var_15)
    var_17 = var_14.__iter__()
    binary_tree_16 = module_0.BinaryTree()
    var_18 = binary_tree_15.__iter__()

def test_case_2459():
    dict_0 = {}
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(dict_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = var_0.__repr__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    binary_node_0 = module_0.BinaryNode(var_2)
    binary_tree_1 = module_0.BinaryTree()
    var_5 = binary_tree_1.__iter__()
    var_6 = binary_tree_1.__contains__(binary_tree_1)
    assert var_6 is False

def test_case_2460():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_1.__iter__()
    var_6 = var_3.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_tree_2.remove(var_7)
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    var_14 = var_12.__iter__()
    none_type_0 = None
    binary_tree_5 = module_0.BinaryTree()
    var_15 = binary_tree_5.add(none_type_0)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_16 = var_15.__repr__()
    none_type_1 = None
    binary_tree_6 = module_0.BinaryTree()
    var_17 = binary_tree_6.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_6)
    var_18 = binary_tree_6.getMin()
    binary_tree_7 = module_0.BinaryTree()
    var_19 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    list_0 = [var_11, var_5]

def test_case_2461():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_3)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_node_0.inorder()
    var_5 = binary_tree_2.__iter__()

def test_case_2462():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_9)
    assert binary_node_1.value == 'binary:()'
    var_10 = binary_node_1.__repr__()
    assert var_10 == '(L: binary:() R:)'
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"
    binary_node_2 = module_0.BinaryNode(var_10)
    assert binary_node_2.value == '(L: binary:() R:)'
    var_12 = var_9.__contains__(var_9)
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_13)
    binary_tree_6 = module_0.BinaryTree()
    bool_0 = True
    binary_node_4 = module_0.BinaryNode(bool_0)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_7 = module_0.BinaryTree()
    var_14 = binary_tree_7.__repr__()
    assert var_14 == 'binary:()'

def test_case_2463():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_node_0 = module_0.BinaryNode(var_5)
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()

def test_case_2464():
    none_type_0 = None
    binary_node_0 = module_0.BinaryNode(none_type_0)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_1 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()

def test_case_2465():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    var_1 = binary_tree_0.__repr__()
    assert var_1 == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_5 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    var_5 = binary_tree_4.__repr__()
    assert var_5 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_6 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    var_7 = binary_node_6.inorder()
    var_8 = var_6.__repr__()
    bool_0 = True
    binary_node_7 = module_0.BinaryNode(bool_0)
    binary_node_8 = module_0.BinaryNode(binary_node_7)
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__repr__()
    assert var_9 == 'binary:()'
    binary_node_9 = module_0.BinaryNode(var_9)
    assert binary_node_9.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_10 = binary_tree_7.__iter__()
    binary_node_10 = module_0.BinaryNode(var_10)
    assert f'{type(binary_node_10.value).__module__}.{type(binary_node_10.value).__qualname__}' == 'builtins.generator'
    var_11 = binary_node_10.inorder()
    var_12 = binary_tree_6.remove(var_9)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    binary_node_11 = module_0.BinaryNode(binary_tree_9)
    binary_node_12 = module_0.BinaryNode(binary_node_11)
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_node_13 = module_0.BinaryNode(var_13)
    assert f'{type(binary_node_13.value).__module__}.{type(binary_node_13.value).__qualname__}' == 'builtins.generator'
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_node_13.inorder()
    var_15 = binary_tree_10.__iter__()
    binary_node_14 = module_0.BinaryNode(binary_tree_10)
    binary_tree_13 = module_0.BinaryTree()
    var_16 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_17 = var_16.__iter__()
    with pytest.raises(ValueError):
        binary_tree_11.getMin()

def test_case_2466():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    var_1 = binary_tree_0.__contains__(binary_tree_0)
    assert var_1 is False
    none_type_0 = None
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.add(none_type_0)
    assert f'{type(binary_tree_1.root).__module__}.{type(binary_tree_1.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_1)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    var_8 = binary_tree_4.closest(var_7)
    var_9 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_4.__iter__()
    with pytest.raises(ValueError):
        binary_tree_5.getMax()

def test_case_2467():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    var_1 = binary_node_1.inorder()
    var_2 = var_1.__repr__()
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_node_2.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_7.__iter__()
    var_10 = var_8.__iter__()
    var_11 = binary_tree_6.__iter__()
    none_type_1 = None
    binary_tree_8 = module_0.BinaryTree()
    var_12 = binary_tree_8.add(none_type_1)
    binary_node_3 = module_0.BinaryNode(binary_tree_8)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_4 = module_0.BinaryNode(tuple_1)
    var_13 = binary_node_4.inorder()
    var_14 = binary_tree_8.__repr__()
    assert var_14 == 'binary:(L: None R:)'
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_16 = var_15.__iter__()
    var_17 = var_15.__repr__()
    var_18 = var_15.__iter__()
    var_19 = var_15.__repr__()

def test_case_2468():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_6 = binary_node_0.inorder()

def test_case_2469():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_4)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_2.__contains__(binary_tree_4)
    assert var_7 is False

def test_case_2470():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_2 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_7 = binary_tree_8.__iter__()
    binary_node_3 = module_0.BinaryNode(var_7)
    var_8 = binary_node_3.inorder()

def test_case_2471():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    binary_node_1 = module_0.BinaryNode(var_1)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    var_2 = binary_node_1.inorder()
    var_3 = binary_tree_0.remove(var_0)

def test_case_2472():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    var_1 = binary_tree_0.remove(var_0)
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = var_2.__iter__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_6)
    binary_tree_4 = module_0.BinaryTree()
    var_7 = binary_tree_4.__iter__()
    var_8 = binary_tree_4.closest(var_7)
    var_9 = var_6.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_10 = binary_tree_6.__contains__(none_type_0)
    assert var_10 is False
    var_11 = var_10.__repr__()
    binary_tree_7 = module_0.BinaryTree()
    var_12 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_15 = binary_tree_11.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    var_16 = binary_tree_12.__iter__()
    binary_node_3 = module_0.BinaryNode(var_16)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    dict_0 = {}
    binary_tree_15 = module_0.BinaryTree()
    var_17 = binary_tree_15.add(dict_0)
    assert f'{type(binary_tree_15.root).__module__}.{type(binary_tree_15.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_18 = var_17.__repr__()
    var_19 = var_18.__iter__()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    binary_tree_16 = module_0.BinaryTree()
    var_22 = binary_tree_16.__iter__()
    binary_tree_17 = module_0.BinaryTree()
    var_23 = var_22.__iter__()
    var_24 = var_23.__repr__()
    var_25 = var_24.__iter__()
    var_26 = var_24.__iter__()
    binary_tree_18 = module_0.BinaryTree()
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_4 = module_0.BinaryNode(set_1)
    binary_node_5 = module_0.BinaryNode(binary_node_4)
    binary_tree_19 = module_0.BinaryTree()

def test_case_2473():
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_0 = module_0.BinaryNode(set_0)
    binary_node_1 = module_0.BinaryNode(binary_node_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__repr__()
    assert var_1 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_1)
    assert binary_node_2.value == 'binary:()'
    var_2 = binary_node_2.__repr__()
    assert var_2 == '(L: binary:() R:)'
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_3 = module_0.BinaryNode(set_1)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_node_5 = module_0.BinaryNode(var_2)
    assert binary_node_5.value == '(L: binary:() R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__iter__()
    binary_node_6 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_6.value).__module__}.{type(binary_node_6.value).__qualname__}' == 'builtins.generator'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    var_5 = binary_tree_2.closest(var_4)
    var_6 = var_3.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.__repr__()
    assert var_8 == 'binary:()'
    binary_node_7 = module_0.BinaryNode(var_8)
    assert binary_node_7.value == 'binary:()'
    var_9 = binary_node_7.__repr__()
    assert var_9 == '(L: binary:() R:)'
    var_10 = var_8.__repr__()
    assert var_10 == "'binary:()'"
    binary_node_8 = module_0.BinaryNode(var_9)
    assert binary_node_8.value == '(L: binary:() R:)'
    var_11 = var_8.__contains__(var_8)
    var_12 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_17 = binary_tree_7.__iter__()
    binary_node_9 = module_0.BinaryNode(var_17)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_18 = binary_node_9.inorder()
    var_19 = binary_tree_7.add(binary_node_9)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_10.__iter__()
    var_21 = binary_tree_10.__contains__(binary_tree_10)
    assert var_21 is False
    binary_tree_11 = module_0.BinaryTree()
    binary_node_10 = module_0.BinaryNode(binary_tree_11)
    var_22 = binary_node_10.inorder()
    binary_node_11 = module_0.BinaryNode(binary_tree_11)
    binary_tree_12 = module_0.BinaryTree()
    var_23 = binary_tree_12.__iter__()
    binary_node_12 = module_0.BinaryNode(var_23)
    binary_tree_13 = module_0.BinaryTree()
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    var_24 = binary_tree_15.__repr__()
    assert var_24 == 'binary:()'
    binary_node_13 = module_0.BinaryNode(var_24)
    assert binary_node_13.value == 'binary:()'
    var_25 = binary_tree_12.__repr__()
    assert var_25 == 'binary:()'
    binary_tree_16 = module_0.BinaryTree()
    var_26 = binary_tree_16.__iter__()
    binary_node_14 = module_0.BinaryNode(var_26)
    binary_tree_17 = module_0.BinaryTree()
    var_27 = binary_tree_17.__iter__()

def test_case_2474():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_1 = var_0.__contains__(var_0)
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_2 = module_0.BinaryNode(binary_tree_2)
    var_3 = binary_tree_2.getMin()
    with pytest.raises(ValueError):
        binary_tree_1.getMax()

def test_case_2475():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = binary_tree_0.closest(var_1)
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    var_6 = binary_tree_2.closest(var_5)
    binary_tree_3 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    var_7 = binary_node_0.inorder()
    var_8 = var_7.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__repr__()
    assert var_9 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_9)
    assert binary_node_2.value == 'binary:()'
    var_10 = binary_tree_4.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_5 = module_0.BinaryTree()
    binary_tree_6 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_6)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_12.__repr__()
    var_14 = var_13.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_15 = binary_tree_9.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_10 = module_0.BinaryTree()
    var_16 = binary_tree_10.__iter__()
    binary_node_5 = module_0.BinaryNode(var_16)
    var_17 = binary_node_5.inorder()
    var_18 = var_16.__repr__()
    binary_tree_11 = module_0.BinaryTree()
    var_19 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_20.__repr__()
    var_22 = var_21.__iter__()
    var_23 = var_19.__repr__()

def test_case_2476():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_5.__repr__()
    var_8 = var_5.__iter__()
    var_9 = var_7.__iter__()
    var_10 = binary_tree_2.__repr__()
    assert var_10 == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    var_13 = var_11.__repr__()
    var_14 = var_11.__iter__()
    var_15 = var_13.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_16 = binary_tree_6.__repr__()
    assert var_16 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_16)
    assert binary_node_0.value == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    var_17 = var_16.__contains__(var_16)
    none_type_0 = None
    binary_tree_8 = module_0.BinaryTree()
    var_18 = binary_tree_8.add(none_type_0)
    assert f'{type(binary_tree_8.root).__module__}.{type(binary_tree_8.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_9 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_0)
    binary_tree_10 = module_0.BinaryTree()
    var_19 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_20 = var_19.__iter__()
    var_21 = var_19.__repr__()
    var_22 = var_19.__iter__()
    var_23 = var_21.__iter__()
    var_24 = binary_tree_10.__repr__()
    assert var_24 == 'binary:()'
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    var_25 = binary_tree_13.__iter__()
    binary_tree_14 = module_0.BinaryTree()
    var_26 = var_25.__iter__()
    var_27 = var_25.__repr__()
    binary_tree_15 = module_0.BinaryTree()
    var_28 = binary_tree_15.__iter__()
    binary_node_3 = module_0.BinaryNode(var_28)
    binary_tree_16 = module_0.BinaryTree()
    binary_tree_17 = module_0.BinaryTree()
    binary_tree_18 = module_0.BinaryTree()
    var_29 = binary_tree_18.__repr__()
    assert var_29 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_29)
    assert binary_node_4.value == 'binary:()'
    var_30 = binary_tree_15.__repr__()
    assert var_30 == 'binary:()'

def test_case_2477():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    var_1 = binary_node_1.inorder()
    var_2 = binary_tree_0.__repr__()
    assert var_2 == 'binary:(L: None R:)'
    binary_tree_1 = module_0.BinaryTree()
    var_3 = binary_tree_1.__repr__()
    assert var_3 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_3)
    assert binary_node_2.value == 'binary:()'
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_node_3 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    var_5 = binary_node_3.inorder()
    var_6 = binary_tree_1.remove(var_3)
    binary_tree_3 = module_0.BinaryTree()

def test_case_2478():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_2)
    assert binary_node_0.value == 'binary:()'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_3)
    var_4 = binary_node_1.inorder()
    var_5 = binary_tree_2.remove(var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_6 = binary_tree_4.__repr__()
    assert var_6 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_6)
    assert binary_node_2.value == 'binary:()'
    var_7 = binary_node_2.__repr__()
    assert var_7 == '(L: binary:() R:)'
    var_8 = var_6.__repr__()
    assert var_8 == "'binary:()'"
    binary_node_3 = module_0.BinaryNode(var_7)
    assert binary_node_3.value == '(L: binary:() R:)'

def test_case_2479():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    binary_tree_4 = module_0.BinaryTree()

def test_case_2480():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    var_1 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_1.__repr__()
    var_4 = var_1.__iter__()
    var_5 = var_1.__repr__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_10 = module_0.BinaryTree()
    var_8 = binary_tree_10.add(none_type_2)
    binary_tree_11 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(none_type_2)
    binary_node_3 = module_0.BinaryNode(var_8)

def test_case_2481():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = binary_tree_2.closest(var_5)
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_10 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_11 = var_10.__iter__()
    var_12 = var_10.__repr__()
    var_13 = var_10.__iter__()
    var_14 = var_12.__iter__()
    var_15 = binary_tree_5.__repr__()
    assert var_15 == 'binary:()'
    binary_tree_7 = module_0.BinaryTree()
    var_16 = binary_tree_7.__repr__()
    assert var_16 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_16)
    assert binary_node_0.value == 'binary:()'
    var_17 = binary_node_0.__repr__()
    assert var_17 == '(L: binary:() R:)'
    var_18 = var_16.__repr__()
    assert var_18 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_17)
    assert binary_node_1.value == '(L: binary:() R:)'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_8)
    var_19 = binary_node_2.inorder()
    var_20 = var_19.__repr__()
    binary_tree_9 = module_0.BinaryTree()
    binary_tree_10 = module_0.BinaryTree()
    var_21 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_21.__repr__()
    binary_tree_12 = module_0.BinaryTree()
    var_24 = var_21.__repr__()
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_3 = module_0.BinaryNode(set_0)
    binary_node_4 = module_0.BinaryNode(binary_node_3)
    binary_tree_13 = module_0.BinaryTree()
    var_25 = binary_tree_13.__contains__(binary_tree_13)
    assert var_25 is False
    int_1 = 1379
    set_1 = {int_1, int_1}
    binary_node_5 = module_0.BinaryNode(set_1)
    binary_node_6 = module_0.BinaryNode(binary_node_5)
    binary_tree_14 = module_0.BinaryTree()
    var_26 = binary_tree_14.__iter__()
    var_27 = binary_tree_14.__contains__(binary_tree_14)
    none_type_0 = None
    binary_tree_15 = module_0.BinaryTree()
    var_28 = binary_tree_15.add(none_type_0)
    assert f'{type(binary_tree_15.root).__module__}.{type(binary_tree_15.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_29 = var_28.__repr__()
    var_30 = var_29.__iter__()

def test_case_2482():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_4 = var_3.__repr__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    binary_tree_3 = module_0.BinaryTree()
    var_5 = binary_tree_3.__repr__()
    assert var_5 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_5)
    assert binary_node_1.value == 'binary:()'
    binary_tree_4 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_4)
    var_6 = var_5.__contains__(var_5)
    tuple_0 = (binary_tree_3,)

def test_case_2483():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_1 = binary_tree_0.getMax()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = binary_tree_1.__iter__()
    var_3 = binary_tree_1.closest(var_2)
    var_4 = var_2.__repr__()
    none_type_1 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_2)
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.__iter__()
    binary_tree_4 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_6.__repr__()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_11 = binary_tree_5.add(none_type_2)
    var_12 = var_11.__repr__()
    var_13 = var_12.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_14 = binary_tree_6.__iter__()
    binary_node_1 = module_0.BinaryNode(var_14)
    var_15 = binary_node_1.inorder()
    binary_tree_7 = module_0.BinaryTree()
    binary_tree_8 = module_0.BinaryTree()
    var_16 = binary_tree_8.__iter__()
    binary_node_2 = module_0.BinaryNode(var_16)
    binary_tree_9 = module_0.BinaryTree()
    var_17 = binary_tree_9.__iter__()
    var_18 = binary_tree_9.closest(var_17)
    var_19 = var_16.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_20 = binary_tree_9.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_21 = binary_tree_11.__iter__()
    binary_tree_12 = module_0.BinaryTree()
    var_22 = var_21.__iter__()
    var_23 = var_22.__repr__()
    var_24 = var_23.__iter__()
    var_25 = var_23.__iter__()
    var_26 = var_22.__iter__()
    var_27 = var_24.__repr__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    binary_tree_13 = module_0.BinaryTree()
    var_28 = binary_tree_13.__repr__()
    assert var_28 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_28)
    assert binary_node_4.value == 'binary:()'
    binary_node_5 = module_0.BinaryNode(binary_node_3)
    binary_tree_14 = module_0.BinaryTree()
    var_29 = binary_tree_14.__iter__()
    binary_node_6 = module_0.BinaryNode(var_29)
    binary_tree_15 = module_0.BinaryTree()
    var_30 = binary_tree_15.__iter__()
    var_31 = binary_tree_15.closest(var_30)
    var_32 = var_29.__iter__()
    var_33 = binary_node_6.inorder()

def test_case_2484():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    var_3 = var_0.__iter__()
    var_4 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.__repr__()
    assert var_5 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_5)
    assert binary_node_0.value == 'binary:()'
    var_6 = binary_node_0.__repr__()
    assert var_6 == '(L: binary:() R:)'
    var_7 = var_5.__repr__()
    assert var_7 == "'binary:()'"
    binary_node_1 = module_0.BinaryNode(var_6)
    assert binary_node_1.value == '(L: binary:() R:)'
    var_8 = var_5.__contains__(var_5)
    var_9 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_10 = binary_tree_3.__iter__()
    binary_node_2 = module_0.BinaryNode(var_10)
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    var_12 = binary_tree_4.closest(var_11)
    binary_node_3 = module_0.BinaryNode(var_11)
    binary_tree_5 = module_0.BinaryTree()
    var_13 = binary_tree_5.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    var_14 = binary_node_4.inorder()
    binary_tree_6 = module_0.BinaryTree()
    var_15 = binary_node_3.__repr__()

def test_case_2485():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_0 = module_0.BinaryNode(var_0)
    assert binary_node_0.value == 'binary:()'
    var_1 = binary_node_0.__repr__()
    assert var_1 == '(L: binary:() R:)'
    var_2 = var_0.__repr__()
    assert var_2 == "'binary:()'"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.__iter__()
    var_5 = binary_tree_3.closest(var_4)
    var_6 = var_3.__iter__()
    var_7 = var_4.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_8 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_node_3 = module_0.BinaryNode(binary_tree_4)
    binary_tree_5 = module_0.BinaryTree()
    var_9 = binary_tree_5.__repr__()
    assert var_9 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_9)
    assert binary_node_4.value == 'binary:()'
    var_10 = binary_node_4.__repr__()
    assert var_10 == '(L: binary:() R:)'
    var_11 = var_9.__repr__()
    assert var_11 == "'binary:()'"
    binary_node_5 = module_0.BinaryNode(var_10)
    assert binary_node_5.value == '(L: binary:() R:)'
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_6 = module_0.BinaryNode(bytes_0)
    var_12 = binary_node_6.inorder()

def test_case_2486():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    binary_tree_4 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_4)
    var_2 = binary_node_1.inorder()
    var_3 = var_2.__repr__()

def test_case_2487():
    none_type_0 = None
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.add(none_type_0)
    assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_1)
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_1 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_1.value).__module__}.{type(binary_node_1.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    binary_node_2 = module_0.BinaryNode(binary_tree_5)
    binary_tree_6 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_7 = module_0.BinaryTree()
    var_3 = binary_tree_7.add(none_type_2)
    var_4 = var_3.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)
    var_5 = binary_node_3.inorder()
    binary_tree_9 = module_0.BinaryTree()
    var_6 = binary_tree_9.__iter__()
    binary_tree_10 = module_0.BinaryTree()
    var_7 = var_6.__iter__()
    var_8 = var_7.__repr__()
    var_9 = var_8.__iter__()
    var_10 = var_8.__iter__()
    var_11 = var_7.__iter__()
    none_type_3 = None
    binary_tree_11 = module_0.BinaryTree()
    var_12 = binary_tree_11.add(none_type_3)
    binary_node_4 = module_0.BinaryNode(binary_tree_11)
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_13 = binary_tree_12.add(none_type_4)
    var_14 = var_13.__repr__()
    binary_tree_13 = module_0.BinaryTree()
    var_15 = binary_tree_13.__iter__()
    binary_node_5 = module_0.BinaryNode(var_15)
    binary_tree_14 = module_0.BinaryTree()
    var_16 = binary_tree_14.__iter__()
    var_17 = binary_tree_14.closest(var_16)
    var_18 = var_15.__iter__()
    var_19 = var_16.__repr__()

def test_case_2488():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    var_4 = var_1.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_5 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_6 = binary_tree_3.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_2 = module_0.BinaryNode(tuple_1)
    binary_tree_5 = module_0.BinaryTree()
    var_7 = binary_tree_5.__repr__()
    assert var_7 == 'binary:()'
    binary_node_3 = module_0.BinaryNode(var_7)
    assert binary_node_3.value == 'binary:()'
    binary_node_4 = module_0.BinaryNode(binary_node_2)
    var_8 = var_7.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_9 = binary_tree_6.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_10 = var_9.__iter__()
    var_11 = var_9.__repr__()
    var_12 = var_9.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_13 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    var_18 = binary_tree_11.__iter__()
    binary_node_5 = module_0.BinaryNode(var_18)
    binary_tree_12 = module_0.BinaryTree()
    binary_tree_13 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_14 = module_0.BinaryTree()
    var_19 = binary_tree_14.add(none_type_2)
    var_20 = binary_tree_14.getMax()
    binary_tree_15 = module_0.BinaryTree()
    var_21 = binary_tree_15.__iter__()
    var_22 = binary_tree_15.closest(var_21)
    var_23 = var_21.__repr__()

def test_case_2489():
    binary_tree_0 = module_0.BinaryTree()
    binary_node_0 = module_0.BinaryNode(binary_tree_0)
    binary_tree_1 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(binary_tree_1)
    var_0 = binary_node_1.inorder()
    var_1 = var_0.__repr__()
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__iter__()
    binary_node_2 = module_0.BinaryNode(var_2)
    assert f'{type(binary_node_2.value).__module__}.{type(binary_node_2.value).__qualname__}' == 'builtins.generator'
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_3 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_3.value).__module__}.{type(binary_node_3.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    binary_tree_6 = module_0.BinaryTree()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_8 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(none_type_0)
    binary_node_5 = module_0.BinaryNode(var_7)
    binary_tree_9 = module_0.BinaryTree()
    var_8 = binary_tree_9.__iter__()
    binary_node_6 = module_0.BinaryNode(var_8)
    binary_tree_10 = module_0.BinaryTree()
    var_9 = binary_tree_10.__iter__()
    var_10 = binary_tree_10.closest(var_9)
    var_11 = var_8.__iter__()
    var_12 = var_9.__repr__()

def test_case_2490():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    var_1 = binary_node_0.inorder()
    binary_tree_1 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_2 = module_0.BinaryTree()
    var_2 = binary_tree_2.__repr__()
    assert var_2 == 'binary:()'
    binary_node_2 = module_0.BinaryNode(var_2)
    assert binary_node_2.value == 'binary:()'
    binary_node_3 = module_0.BinaryNode(binary_node_1)
    binary_tree_3 = module_0.BinaryTree()
    var_3 = binary_tree_3.__iter__()
    binary_node_4 = module_0.BinaryNode(var_3)
    assert f'{type(binary_node_4.value).__module__}.{type(binary_node_4.value).__qualname__}' == 'builtins.generator'
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_node_5 = module_0.BinaryNode(var_4)
    assert f'{type(binary_node_5.value).__module__}.{type(binary_node_5.value).__qualname__}' == 'builtins.generator'
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    var_6 = var_5.__iter__()
    var_7 = var_6.__repr__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__repr__()
    binary_tree_7 = module_0.BinaryTree()

def test_case_2491():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__iter__()
    var_2 = binary_tree_1.closest(var_1)
    var_3 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_4 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_5.__repr__()
    var_7 = var_6.__iter__()
    var_8 = var_4.__repr__()
    none_type_0 = None
    binary_tree_4 = module_0.BinaryTree()
    var_9 = binary_tree_4.add(none_type_0)
    assert f'{type(binary_tree_4.root).__module__}.{type(binary_tree_4.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    binary_tree_5 = module_0.BinaryTree()
    binary_node_1 = module_0.BinaryNode(none_type_0)
    bool_0 = True
    str_0 = '3aF f'
    bytes_0 = b'\xc9\xe5'
    dict_0 = {binary_tree_4: binary_node_0, var_7: bytes_0}
    tuple_0 = (bool_0, str_0, dict_0)

def test_case_2492():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()
    var_5 = var_3.__iter__()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    var_6 = binary_node_0.inorder()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__repr__()
    assert var_7 == 'binary:()'
    var_8 = binary_tree_2.remove(var_7)
    var_9 = var_7.__repr__()
    assert var_9 == "'binary:()'"
    int_0 = 1379
    set_0 = {int_0, int_0}
    binary_node_1 = module_0.BinaryNode(set_0)
    binary_node_2 = module_0.BinaryNode(binary_node_1)

def test_case_2493():
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_0 = module_0.BinaryNode(bytes_0)
    var_0 = binary_node_0.inorder()
    binary_tree_0 = module_0.BinaryTree()
    var_1 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_2 = var_1.__iter__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__iter__()
    var_5 = var_3.__iter__()
    var_6 = var_4.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    var_7 = binary_tree_2.__iter__()
    binary_node_1 = module_0.BinaryNode(var_7)
    var_8 = binary_node_1.inorder()
    none_type_0 = None
    binary_tree_3 = module_0.BinaryTree()
    var_9 = binary_tree_3.add(none_type_0)
    assert f'{type(binary_tree_3.root).__module__}.{type(binary_tree_3.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_10 = binary_tree_2.remove(var_8)
    binary_tree_4 = module_0.BinaryTree()
    var_11 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_12 = var_11.__iter__()
    binary_tree_6 = module_0.BinaryTree()
    binary_tree_7 = module_0.BinaryTree()
    var_13 = binary_tree_7.__iter__()
    binary_node_2 = module_0.BinaryNode(var_12)
    var_14 = binary_node_2.removeFromParent(binary_tree_4, var_13)
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_3 = module_0.BinaryNode(tuple_1)

def test_case_2494():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__iter__()
    var_4 = var_2.__iter__()

def test_case_2495():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_0 = module_0.BinaryNode(tuple_1)
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__repr__()
    assert var_0 == 'binary:()'
    binary_node_1 = module_0.BinaryNode(var_0)
    assert binary_node_1.value == 'binary:()'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_2 = module_0.BinaryNode(tuple_3)
    binary_tree_1 = module_0.BinaryTree()
    var_1 = binary_tree_1.__repr__()
    assert var_1 == 'binary:()'
    var_2 = binary_node_2.__repr__()
    assert var_2 == '(L: ((),) R:)'
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.__iter__()
    binary_tree_3 = module_0.BinaryTree()
    var_4 = var_3.__iter__()
    var_5 = var_3.__repr__()
    binary_tree_4 = module_0.BinaryTree()
    binary_tree_5 = module_0.BinaryTree()
    var_6 = binary_tree_5.__iter__()
    binary_node_3 = module_0.BinaryNode(var_6)
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.__iter__()
    var_8 = binary_tree_6.closest(var_7)
    var_9 = var_6.__iter__()
    var_10 = binary_node_3.inorder()
    none_type_0 = None
    binary_tree_7 = module_0.BinaryTree()
    var_11 = binary_tree_7.add(none_type_0)
    assert f'{type(binary_tree_7.root).__module__}.{type(binary_tree_7.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    var_12 = var_11.__repr__()
    binary_tree_8 = module_0.BinaryTree()
    binary_tree_9 = module_0.BinaryTree()
    var_13 = binary_tree_9.__iter__()
    binary_node_4 = module_0.BinaryNode(var_13)
    binary_tree_10 = module_0.BinaryTree()
    binary_tree_11 = module_0.BinaryTree()
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.__repr__()
    assert var_14 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_14)
    assert binary_node_5.value == 'binary:()'
    var_15 = binary_tree_9.__repr__()
    assert var_15 == 'binary:()'
    var_16 = var_7.__repr__()

def test_case_2496():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_node_0 = module_0.BinaryNode(var_0)
    assert f'{type(binary_node_0.value).__module__}.{type(binary_node_0.value).__qualname__}' == 'builtins.generator'
    binary_tree_1 = module_0.BinaryTree()
    binary_tree_2 = module_0.BinaryTree()
    var_1 = binary_node_0.inorder()
    binary_tree_3 = module_0.BinaryTree()
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    binary_node_1 = module_0.BinaryNode(tuple_1)
    binary_tree_4 = module_0.BinaryTree()
    var_2 = binary_tree_4.__repr__()
    assert var_2 == 'binary:()'
    var_3 = binary_node_1.__repr__()
    assert var_3 == '(L: ((),) R:)'
    none_type_0 = None
    binary_node_2 = module_0.BinaryNode(none_type_0)
    none_type_1 = None
    binary_tree_5 = module_0.BinaryTree()
    var_4 = binary_tree_5.add(none_type_1)
    assert f'{type(binary_tree_5.root).__module__}.{type(binary_tree_5.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    tuple_2 = ()
    tuple_3 = (tuple_2,)
    binary_node_3 = module_0.BinaryNode(tuple_3)
    binary_tree_6 = module_0.BinaryTree()
    var_5 = binary_tree_6.__repr__()
    assert var_5 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_5)
    assert binary_node_4.value == 'binary:()'
    binary_node_5 = module_0.BinaryNode(binary_node_3)
    var_6 = var_5.__iter__()
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_7.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = var_7.__iter__()
    var_9 = var_7.__repr__()

def test_case_2497():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    binary_tree_2 = module_0.BinaryTree()
    binary_tree_3 = module_0.BinaryTree()
    var_2 = binary_tree_3.__iter__()
    binary_node_0 = module_0.BinaryNode(var_1)
    var_3 = binary_node_0.removeFromParent(binary_tree_0, var_2)
    binary_tree_4 = module_0.BinaryTree()
    var_4 = binary_tree_4.__iter__()
    binary_tree_5 = module_0.BinaryTree()
    var_5 = var_4.__iter__()
    var_6 = var_4.__repr__()
    none_type_0 = None
    binary_tree_6 = module_0.BinaryTree()
    var_7 = binary_tree_6.add(none_type_0)
    assert f'{type(binary_tree_6.root).__module__}.{type(binary_tree_6.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_7 = module_0.BinaryTree()
    var_8 = binary_tree_7.add(none_type_1)
    binary_node_1 = module_0.BinaryNode(binary_tree_7)
    binary_tree_8 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_9 = module_0.BinaryTree()
    var_9 = binary_tree_9.add(none_type_2)
    none_type_3 = None
    binary_tree_10 = module_0.BinaryTree()
    var_10 = binary_tree_10.add(none_type_3)
    binary_node_2 = module_0.BinaryNode(binary_tree_10)
    binary_tree_11 = module_0.BinaryTree()
    var_11 = binary_tree_9.__iter__()
    bytes_0 = b"rj\xfb\x1e:\x89\r{\xd3'\xeaZek\xcbA\xb7\x88\xaf"
    binary_node_3 = module_0.BinaryNode(bytes_0)
    var_12 = binary_node_3.inorder()
    var_13 = var_12.__repr__()
    dict_0 = {}
    binary_tree_12 = module_0.BinaryTree()
    var_14 = binary_tree_12.add(dict_0)
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_16.__iter__()
    binary_tree_13 = module_0.BinaryTree()
    var_18 = binary_tree_13.__repr__()
    assert var_18 == 'binary:()'
    binary_node_4 = module_0.BinaryNode(var_18)
    assert binary_node_4.value == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_18)
    assert binary_node_5.value == 'binary:()'
    binary_tree_14 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_14)

def test_case_2498():
    binary_tree_0 = module_0.BinaryTree()
    var_0 = binary_tree_0.__iter__()
    binary_tree_1 = module_0.BinaryTree()
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    none_type_0 = None
    binary_tree_2 = module_0.BinaryTree()
    var_3 = binary_tree_2.add(none_type_0)
    assert f'{type(binary_tree_2.root).__module__}.{type(binary_tree_2.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
    none_type_1 = None
    binary_tree_3 = module_0.BinaryTree()
    var_4 = binary_tree_3.add(none_type_1)
    binary_node_0 = module_0.BinaryNode(binary_tree_3)
    binary_tree_4 = module_0.BinaryTree()
    none_type_2 = None
    binary_tree_5 = module_0.BinaryTree()
    var_5 = binary_tree_5.add(none_type_2)
    none_type_3 = None
    binary_tree_6 = module_0.BinaryTree()
    var_6 = binary_tree_6.add(none_type_3)
    binary_node_1 = module_0.BinaryNode(binary_tree_6)
    binary_tree_7 = module_0.BinaryTree()
    var_7 = binary_tree_5.__iter__()
    binary_tree_8 = module_0.BinaryTree()
    var_8 = binary_tree_8.__iter__()
    binary_tree_9 = module_0.BinaryTree()
    var_9 = var_8.__iter__()
    var_10 = var_8.__repr__()
    var_11 = var_8.__iter__()
    var_12 = var_8.__repr__()
    binary_tree_10 = module_0.BinaryTree()
    var_13 = binary_tree_10.__iter__()
    binary_tree_11 = module_0.BinaryTree()
    var_14 = var_13.__iter__()
    var_15 = var_14.__repr__()
    var_16 = var_15.__iter__()
    var_17 = var_15.__iter__()
    none_type_4 = None
    binary_tree_12 = module_0.BinaryTree()
    var_18 = binary_tree_12.add(none_type_4)
    none_type_5 = None
    binary_tree_13 = module_0.BinaryTree()
    var_19 = binary_tree_13.add(none_type_5)
    binary_node_2 = module_0.BinaryNode(binary_tree_13)
    binary_tree_14 = module_0.BinaryTree()
    binary_tree_15 = module_0.BinaryTree()
    binary_tree_16 = module_0.BinaryTree()
    binary_node_3 = module_0.BinaryNode(binary_tree_16)
    binary_tree_17 = module_0.BinaryTree()
    binary_node_4 = module_0.BinaryNode(binary_tree_17)
    var_20 = binary_node_4.inorder()
    var_21 = var_20.__repr__()
    binary_tree_18 = module_0.BinaryTree()
    var_22 = binary_tree_18.__repr__()
    assert var_22 == 'binary:()'
    binary_node_5 = module_0.BinaryNode(var_22)
    assert binary_node_5.value == 'binary:()'
    binary_tree_19 = module_0.BinaryTree()
    binary_node_6 = module_0.BinaryNode(binary_tree_19)
    var_23 = var_22.__contains__(var_22)
