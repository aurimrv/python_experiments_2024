[34m[*][0m Start mutation process:
[36m   -[0m targets: binarySearchTree1.py
[36m   -[0m tests: ./WHOLE_SUITE
[34m[*][0m 22 tests passed:
[36m   -[0m test_binarySearchTree1_WHOLE_SUITE [0.28672 s]
[34m[*][0m Start mutants generation and execution:
[36m   -[0m [#   1] AOR binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('(L:' - leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.17461 s] [36mincompetent[0m

TypeError: binarySearchTree1:68: TypeError: unsupported operand type(s) for -: 'str' and 'str'

[36m   -[0m [#   2] AOR binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('(L:' + leftS) - ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.17934 s] [36mincompetent[0m

TypeError: binarySearchTree1:68: TypeError: unsupported operand type(s) for -: 'str' and 'str'

[36m   -[0m [#   3] AOR binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('(L:' + leftS) + ' ') - str(self.value)) + ' R:') + rightS) + ')'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.18124 s] [36mincompetent[0m

TypeError: binarySearchTree1:68: TypeError: unsupported operand type(s) for -: 'str' and 'str'

[36m   -[0m [#   4] AOR binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) - ' R:') + rightS) + ')'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.18095 s] [36mincompetent[0m

TypeError: binarySearchTree1:68: TypeError: unsupported operand type(s) for -: 'str' and 'str'

[36m   -[0m [#   5] AOR binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') - rightS) + ')'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.18087 s] [36mincompetent[0m

TypeError: binarySearchTree1:68: TypeError: unsupported operand type(s) for -: 'str' and 'str'

[36m   -[0m [#   6] AOR binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) - ')'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.24809 s] [36mincompetent[0m

TypeError: binarySearchTree1:68: TypeError: unsupported operand type(s) for -: 'str' and 'str'

[36m   -[0m [#   7] AOR binarySearchTree1: 
--------------------------------------------------------------------------------
  136:         if self.root is None:
  137:             return None
  138:         
  139:         best = node = self.root
[34m- 140:         distance = abs(self.root.value - target)[0m
[32m+ 140:         distance = abs(self.root.value + target)[0m
  141:         while node:
  142:             if abs(node.value - target) < distance:
  143:                 distance = abs(node.value - target)
  144:                 best = node
--------------------------------------------------------------------------------
[0.16229 s] [31msurvived[0m
[36m   -[0m [#   8] AOR binarySearchTree1: 
--------------------------------------------------------------------------------
  138:         
  139:         best = node = self.root
  140:         distance = abs(self.root.value - target)
  141:         while node:
[34m- 142:             if abs(node.value - target) < distance:[0m
[32m+ 142:             if abs(node.value + target) < distance:[0m
  143:                 distance = abs(node.value - target)
  144:                 best = node
  145:             if target < node.value:
  146:                 node = node.left
--------------------------------------------------------------------------------
[0.14443 s] [31msurvived[0m
[36m   -[0m [#   9] AOR binarySearchTree1: 
--------------------------------------------------------------------------------
  139:         best = node = self.root
  140:         distance = abs(self.root.value - target)
  141:         while node:
  142:             if abs(node.value - target) < distance:
[34m- 143:                 distance = abs(node.value - target)[0m
[32m+ 143:                 distance = abs(node.value + target)[0m
  144:                 best = node
  145:             if target < node.value:
  146:                 node = node.left
  147:             elif target > node.value:
--------------------------------------------------------------------------------
[0.16413 s] [31msurvived[0m
[36m   -[0m [#  10] AOR binarySearchTree1: 
--------------------------------------------------------------------------------
  159:     
  160:     def __repr__(self):
  161:         if self.root is None:
  162:             return 'binary:()'
[34m- 163:         return 'binary:' + str(self.root)[0m
[32m+ 163:         return 'binary:' - str(self.root)[0m
  164: 
  165: '''
  166: Change Log:
  167: -----------
--------------------------------------------------------------------------------
[0.15496 s] [31msurvived[0m
[36m   -[0m [#  11] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
    4:     Author: George Heineman    
    5: '''
    6: class BinaryNode:
    7:     
[34m-   8:     def __init__(self, value):[0m
[34m-   9:         '''Create binary node.'''[0m
[34m-  10:         self.value = value[0m
[34m-  11:         self.left = None[0m
[34m-  12:         self.right = None[0m
[34m-  13:     [0m
[32m+   8:     @classmethod[0m
[32m+   9:     def __init__(self, value):[0m
[32m+  10:         '''Create binary node.'''[0m
[32m+  11:         self.value = value[0m
[32m+  12:         self.left = None[0m
[32m+  13:         self.right = None[0m
   14:     def add(self, val):
   15:         '''
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
--------------------------------------------------------------------------------
[0.17423 s] [36mincompetent[0m

TypeError: binarySearchTree1:122: TypeError: '<' not supported between instances of 'list' and 'NoneType'

[36m   -[0m [#  12] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
   10:         self.value = value
   11:         self.left = None
   12:         self.right = None
   13:     
[34m-  14:     def add(self, val):[0m
[34m-  15:         '''[0m
[34m-  16:         Add a new node to the tree with value. Respond based on Set semantics[0m
[34m-  17:         '''[0m
[34m-  18:         if val <= self.value:[0m
[34m-  19:             self.left = self.addToSubTree(self.left, val)[0m
[34m-  20:         elif val > self.value:[0m
[34m-  21:             self.right = self.addToSubTree(self.right, val)[0m
[34m-  22:     [0m
[32m+  14:     @classmethod[0m
[32m+  15:     def add(self, val):[0m
[32m+  16:         '''[0m
[32m+  17:         Add a new node to the tree with value. Respond based on Set semantics[0m
[32m+  18:         '''[0m
[32m+  19:         if val <= self.value:[0m
[32m+  20:             self.left = self.addToSubTree(self.left, val)[0m
[32m+  21:         elif val > self.value:[0m
[32m+  22:             self.right = self.addToSubTree(self.right, val)[0m
   23:     def addToSubTree(self, parent, val):
   24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''
   25:         if parent is None:
   26:             return BinaryNode(val)
--------------------------------------------------------------------------------
[0.18118 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_1 = binary_tree_0.add(list_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:93: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree1.BinaryNode'>, val = []

>   ???
E   AttributeError: type object 'BinaryNode' has no attribute 'value'

binarySearchTree1:19: AttributeError
[36m   -[0m [#  13] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
   19:             self.left = self.addToSubTree(self.left, val)
   20:         elif val > self.value:
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
[34m-  23:     def addToSubTree(self, parent, val):[0m
[34m-  24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''[0m
[34m-  25:         if parent is None:[0m
[34m-  26:             return BinaryNode(val)[0m
[34m-  27:         [0m
[34m-  28:         parent.add(val)[0m
[34m-  29:         return parent[0m
[34m-  30:     [0m
[32m+  23:     @classmethod[0m
[32m+  24:     def addToSubTree(self, parent, val):[0m
[32m+  25:         '''Add val to parent subtree (if exists) and return root of that subtree.'''[0m
[32m+  26:         if parent is None:[0m
[32m+  27:             return BinaryNode(val)[0m
[32m+  28:         [0m
[32m+  29:         parent.add(val)[0m
[32m+  30:         return parent[0m
   31:     def remove(self, val):
   32:         '''
   33:          Remove val of self from BinaryTree. 
   34:         '''
--------------------------------------------------------------------------------
[0.21291 s] [31msurvived[0m
[36m   -[0m [#  14] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
   27:         
   28:         parent.add(val)
   29:         return parent
   30:     
[34m-  31:     def remove(self, val):[0m
[34m-  32:         '''[0m
[34m-  33:          Remove val of self from BinaryTree. [0m
[34m-  34:         '''[0m
[34m-  35:         if val < self.value:[0m
[34m-  36:             self.left = self.removeFromParent(self.left, val)[0m
[34m-  37:         elif val > self.value:[0m
[34m-  38:             self.right = self.removeFromParent(self.right, val)[0m
[34m-  39:         else:[0m
[34m-  40:             if self.left is None:[0m
[34m-  41:                 return self.right[0m
[34m-  42:             [0m
[34m-  43:             child = self.left[0m
[34m-  44:             while child.right:[0m
[34m-  45:                 child = child.right[0m
[34m-  46:             [0m
[34m-  47:             childKey = child.value[0m
[34m-  48:             self.left = self.removeFromParent(self.left, childKey)[0m
[34m-  49:             self.value = childKey[0m
[34m-  50:         [0m
[34m-  51:         return self[0m
[34m-  52:     [0m
[32m+  31:     @classmethod[0m
[32m+  32:     def remove(self, val):[0m
[32m+  33:         '''[0m
[32m+  34:          Remove val of self from BinaryTree. [0m
[32m+  35:         '''[0m
[32m+  36:         if val < self.value:[0m
[32m+  37:             self.left = self.removeFromParent(self.left, val)[0m
[32m+  38:         elif val > self.value:[0m
[32m+  39:             self.right = self.removeFromParent(self.right, val)[0m
[32m+  40:         else:[0m
[32m+  41:             if self.left is None:[0m
[32m+  42:                 return self.right[0m
[32m+  43:             [0m
[32m+  44:             child = self.left[0m
[32m+  45:             while child.right:[0m
[32m+  46:                 child = child.right[0m
[32m+  47:             [0m
[32m+  48:             childKey = child.value[0m
[32m+  49:             self.left = self.removeFromParent(self.left, childKey)[0m
[32m+  50:             self.value = childKey[0m
[32m+  51:         [0m
[32m+  52:         return self[0m
   53:     def removeFromParent(self, parent, val):
   54:         '''Helper method for remove. Ensures proper behavior when removing node that 
   55:         has children.'''
   56:         if parent:
--------------------------------------------------------------------------------
[0.16483 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
>       var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:57: in removeFromParent
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree1.BinaryNode'>, val = True

>   ???
E   AttributeError: type object 'BinaryNode' has no attribute 'value'

binarySearchTree1:36: AttributeError
[36m   -[0m [#  15] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
   49:             self.value = childKey
   50:         
   51:         return self
   52:     
[34m-  53:     def removeFromParent(self, parent, val):[0m
[34m-  54:         '''Helper method for remove. Ensures proper behavior when removing node that [0m
[34m-  55:         has children.'''[0m
[34m-  56:         if parent:[0m
[34m-  57:             return parent.remove(val)[0m
[34m-  58:         return None[0m
[34m-  59:     [0m
[32m+  53:     @classmethod[0m
[32m+  54:     def removeFromParent(self, parent, val):[0m
[32m+  55:         '''Helper method for remove. Ensures proper behavior when removing node that [0m
[32m+  56:         has children.'''[0m
[32m+  57:         if parent:[0m
[32m+  58:             return parent.remove(val)[0m
[32m+  59:         return None[0m
   60:     def __repr__(self):
   61:         '''Useful debugging function to produce linear tree representation.'''
   62:         leftS = ''
   63:         rightS = ''
--------------------------------------------------------------------------------
[0.15935 s] [31msurvived[0m
[36m   -[0m [#  16] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
   56:         if parent:
   57:             return parent.remove(val)
   58:         return None
   59:     
[34m-  60:     def __repr__(self):[0m
[34m-  61:         '''Useful debugging function to produce linear tree representation.'''[0m
[34m-  62:         leftS = ''[0m
[34m-  63:         rightS = ''[0m
[34m-  64:         if self.left:[0m
[34m-  65:             leftS = str(self.left)[0m
[34m-  66:         if self.right:[0m
[34m-  67:             rightS = str(self.right)[0m
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[34m-  69:     [0m
[32m+  60:     @classmethod[0m
[32m+  61:     def __repr__(self):[0m
[32m+  62:         '''Useful debugging function to produce linear tree representation.'''[0m
[32m+  63:         leftS = ''[0m
[32m+  64:         rightS = ''[0m
[32m+  65:         if self.left:[0m
[32m+  66:             leftS = str(self.left)[0m
[32m+  67:         if self.right:[0m
[32m+  68:             rightS = str(self.right)[0m
[32m+  69:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
   73:             for v in self.left.inorder():
--------------------------------------------------------------------------------
[0.17940 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_node_0.__repr__()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree1.BinaryNode'>

>   ???
E   AttributeError: type object 'BinaryNode' has no attribute 'left'

binarySearchTree1:65: AttributeError
[36m   -[0m [#  17] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
   66:         if self.right:
   67:             rightS = str(self.right)
   68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'
   69:     
[34m-  70:     def inorder(self):[0m
[34m-  71:         '''In order traversal generator of tree rooted at given node.'''[0m
[34m-  72:         if self.left:[0m
[34m-  73:             for v in self.left.inorder():[0m
[34m-  74:                 yield v[0m
[34m-  75:         [0m
[34m-  76:         yield self.value[0m
[34m-  77:         [0m
[34m-  78:         if self.right:[0m
[34m-  79:             for v in self.right.inorder():[0m
[34m-  80:                 yield v[0m
[34m-  81: [0m
[32m+  70:     @classmethod[0m
[32m+  71:     def inorder(self):[0m
[32m+  72:         '''In order traversal generator of tree rooted at given node.'''[0m
[32m+  73:         if self.left:[0m
[32m+  74:             for v in self.left.inorder():[0m
[32m+  75:                 yield v[0m
[32m+  76:         [0m
[32m+  77:         yield self.value[0m
[32m+  78:         [0m
[32m+  79:         if self.right:[0m
[32m+  80:             for v in self.right.inorder():[0m
[32m+  81:                 yield v[0m
   82: class BinaryTree:
   83:     
   84:     def __init__(self):
   85:         '''Create empty binary tree.'''
--------------------------------------------------------------------------------
[0.18347 s] [31msurvived[0m
[36m   -[0m [#  18] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
   80:                 yield v
   81: 
   82: class BinaryTree:
   83:     
[34m-  84:     def __init__(self):[0m
[34m-  85:         '''Create empty binary tree.'''[0m
[34m-  86:         self.root = None[0m
[34m-  87:     [0m
[32m+  84:     @classmethod[0m
[32m+  85:     def __init__(self):[0m
[32m+  86:         '''Create empty binary tree.'''[0m
[32m+  87:         self.root = None[0m
   88:     def add(self, value):
   89:         '''Insert value into proper location in Binary Tree.'''
   90:         if self.root is None:
   91:             self.root = BinaryNode(value)
--------------------------------------------------------------------------------
[0.18946 s] [31msurvived[0m
[36m   -[0m [#  19] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
   84:     def __init__(self):
   85:         '''Create empty binary tree.'''
   86:         self.root = None
   87:     
[34m-  88:     def add(self, value):[0m
[34m-  89:         '''Insert value into proper location in Binary Tree.'''[0m
[34m-  90:         if self.root is None:[0m
[34m-  91:             self.root = BinaryNode(value)[0m
[34m-  92:         else:[0m
[34m-  93:             self.root.add(value)[0m
[34m-  94:     [0m
[32m+  88:     @classmethod[0m
[32m+  89:     def add(self, value):[0m
[32m+  90:         '''Insert value into proper location in Binary Tree.'''[0m
[32m+  91:         if self.root is None:[0m
[32m+  92:             self.root = BinaryNode(value)[0m
[32m+  93:         else:[0m
[32m+  94:             self.root.add(value)[0m
   95:     def remove(self, val):
   96:         '''Remove value from tree.'''
   97:         if self.root:
   98:             self.root = self.root.remove(val)
--------------------------------------------------------------------------------
[0.26868 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_1

def test_case_1():
        binary_tree_0 = module_0.BinaryTree()
>       var_0 = binary_tree_0.add(binary_tree_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree1.BinaryTree'>, value = binary:()

>   ???
E   AttributeError: type object 'BinaryTree' has no attribute 'root'

binarySearchTree1:91: AttributeError
[36m   -[0m [#  20] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
   91:             self.root = BinaryNode(value)
   92:         else:
   93:             self.root.add(value)
   94:     
[34m-  95:     def remove(self, val):[0m
[34m-  96:         '''Remove value from tree.'''[0m
[34m-  97:         if self.root:[0m
[34m-  98:             self.root = self.root.remove(val)[0m
[34m-  99:     [0m
[32m+  95:     @classmethod[0m
[32m+  96:     def remove(self, val):[0m
[32m+  97:         '''Remove value from tree.'''[0m
[32m+  98:         if self.root:[0m
[32m+  99:             self.root = self.root.remove(val)[0m
  100:     def getMin(self):
  101:         '''Returns minimum value.'''
  102:         if self.root is None:
  103:             raise ValueError('Binary Tree is empty')
--------------------------------------------------------------------------------
[0.19042 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_3

def test_case_3():
        binary_tree_0 = module_0.BinaryTree()
        float_0 = -1660.53234
        str_0 = 'BhpUfU<<C<'
>       var_0 = binary_tree_0.remove(float_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree1.BinaryTree'>, val = -1660.53234

>   ???
E   AttributeError: type object 'BinaryTree' has no attribute 'root'

binarySearchTree1:98: AttributeError
[36m   -[0m [#  21] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
   96:         '''Remove value from tree.'''
   97:         if self.root:
   98:             self.root = self.root.remove(val)
   99:     
[34m- 100:     def getMin(self):[0m
[34m- 101:         '''Returns minimum value.'''[0m
[34m- 102:         if self.root is None:[0m
[34m- 103:             raise ValueError('Binary Tree is empty')[0m
[34m- 104:         n = self.root[0m
[34m- 105:         while n.left != None:[0m
[34m- 106:             n = n.left[0m
[34m- 107:         return n.value[0m
[34m- 108:     [0m
[32m+ 100:     @classmethod[0m
[32m+ 101:     def getMin(self):[0m
[32m+ 102:         '''Returns minimum value.'''[0m
[32m+ 103:         if self.root is None:[0m
[32m+ 104:             raise ValueError('Binary Tree is empty')[0m
[32m+ 105:         n = self.root[0m
[32m+ 106:         while n.left != None:[0m
[32m+ 107:             n = n.left[0m
[32m+ 108:         return n.value[0m
  109:     def getMax(self):
  110:         '''Returns maximum value.'''
  111:         if self.root is None:
  112:             raise ValueError('Binary Tree is empty')
--------------------------------------------------------------------------------
[0.18090 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_0

def test_case_0():
        bool_0 = True
        list_0 = [bool_0]
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__iter__()
        binary_node_0 = module_0.BinaryNode(list_0)
        binary_tree_1 = module_0.BinaryTree()
        binary_tree_2 = module_0.BinaryTree()
        var_1 = binary_tree_2.__repr__()
        assert var_1 == 'binary:()'
        with pytest.raises(ValueError):
>           binary_tree_1.getMin()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree1.BinaryTree'>

>   ???
E   AttributeError: type object 'BinaryTree' has no attribute 'root'

binarySearchTree1:103: AttributeError
[36m   -[0m [#  22] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
  105:         while n.left != None:
  106:             n = n.left
  107:         return n.value
  108:     
[34m- 109:     def getMax(self):[0m
[34m- 110:         '''Returns maximum value.'''[0m
[34m- 111:         if self.root is None:[0m
[34m- 112:             raise ValueError('Binary Tree is empty')[0m
[34m- 113:         n = self.root[0m
[34m- 114:         while n.right != None:[0m
[34m- 115:             n = n.right[0m
[34m- 116:         return n.value[0m
[34m- 117:     [0m
[32m+ 109:     @classmethod[0m
[32m+ 110:     def getMax(self):[0m
[32m+ 111:         '''Returns maximum value.'''[0m
[32m+ 112:         if self.root is None:[0m
[32m+ 113:             raise ValueError('Binary Tree is empty')[0m
[32m+ 114:         n = self.root[0m
[32m+ 115:         while n.right != None:[0m
[32m+ 116:             n = n.right[0m
[32m+ 117:         return n.value[0m
  118:     def __contains__(self, target):
  119:         '''Check whether BST contains target value.'''
  120:         node = self.root
  121:         while node:
--------------------------------------------------------------------------------
[0.16809 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_3

def test_case_3():
        binary_tree_0 = module_0.BinaryTree()
        float_0 = -1660.53234
        str_0 = 'BhpUfU<<C<'
        var_0 = binary_tree_0.remove(float_0)
        var_1 = binary_tree_0.add(binary_tree_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_tree_0.getMax()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree1.BinaryTree'>

>   ???
E   AttributeError: type object 'BinaryTree' has no attribute 'root'

binarySearchTree1:112: AttributeError
[36m   -[0m [#  23] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
  114:         while n.right != None:
  115:             n = n.right
  116:         return n.value
  117:     
[34m- 118:     def __contains__(self, target):[0m
[34m- 119:         '''Check whether BST contains target value.'''[0m
[34m- 120:         node = self.root[0m
[34m- 121:         while node:[0m
[34m- 122:             if target < node.value:[0m
[34m- 123:                 node = node.left[0m
[34m- 124:             elif target > node.value:[0m
[34m- 125:                 node = node.right[0m
[34m- 126:             else:[0m
[34m- 127:                 return True[0m
[34m- 128:         [0m
[34m- 129:         return False[0m
[34m- 130:     [0m
[32m+ 118:     @classmethod[0m
[32m+ 119:     def __contains__(self, target):[0m
[32m+ 120:         '''Check whether BST contains target value.'''[0m
[32m+ 121:         node = self.root[0m
[32m+ 122:         while node:[0m
[32m+ 123:             if target < node.value:[0m
[32m+ 124:                 node = node.left[0m
[32m+ 125:             elif target > node.value:[0m
[32m+ 126:                 node = node.right[0m
[32m+ 127:             else:[0m
[32m+ 128:                 return True[0m
[32m+ 129:         [0m
[32m+ 130:         return False[0m
  131:     def closest(self, target):
  132:         '''
  133:         Return value closest to target. If there are several, then
  134:         return one of them.
--------------------------------------------------------------------------------
[0.19200 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_1 = binary_tree_0.add(list_0)
        var_2 = binary_tree_0.add(list_0)
        var_3 = binary_tree_0.getMin()
        binary_node_0 = module_0.BinaryNode(var_2)
>       var_4 = binary_tree_0.__contains__(list_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree1.BinaryTree'>, target = []

>   ???
E   AttributeError: type object 'BinaryTree' has no attribute 'root'

binarySearchTree1:121: AttributeError
[36m   -[0m [#  24] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
  127:                 return True
  128:         
  129:         return False
  130:     
[34m- 131:     def closest(self, target):[0m
[34m- 132:         '''[0m
[34m- 133:         Return value closest to target. If there are several, then[0m
[34m- 134:         return one of them.[0m
[34m- 135:         '''[0m
[34m- 136:         if self.root is None:[0m
[34m- 137:             return None[0m
[34m- 138:         [0m
[34m- 139:         best = node = self.root[0m
[34m- 140:         distance = abs(self.root.value - target)[0m
[34m- 141:         while node:[0m
[34m- 142:             if abs(node.value - target) < distance:[0m
[34m- 143:                 distance = abs(node.value - target)[0m
[34m- 144:                 best = node[0m
[34m- 145:             if target < node.value:[0m
[34m- 146:                 node = node.left[0m
[34m- 147:             elif target > node.value:[0m
[34m- 148:                 node = node.right[0m
[34m- 149:             else:[0m
[34m- 150:                 return target[0m
[34m- 151:         [0m
[34m- 152:         return best.value[0m
[34m- 153:     [0m
[32m+ 131:     @classmethod[0m
[32m+ 132:     def closest(self, target):[0m
[32m+ 133:         '''[0m
[32m+ 134:         Return value closest to target. If there are several, then[0m
[32m+ 135:         return one of them.[0m
[32m+ 136:         '''[0m
[32m+ 137:         if self.root is None:[0m
[32m+ 138:             return None[0m
[32m+ 139:         [0m
[32m+ 140:         best = node = self.root[0m
[32m+ 141:         distance = abs(self.root.value - target)[0m
[32m+ 142:         while node:[0m
[32m+ 143:             if abs(node.value - target) < distance:[0m
[32m+ 144:                 distance = abs(node.value - target)[0m
[32m+ 145:                 best = node[0m
[32m+ 146:             if target < node.value:[0m
[32m+ 147:                 node = node.left[0m
[32m+ 148:             elif target > node.value:[0m
[32m+ 149:                 node = node.right[0m
[32m+ 150:             else:[0m
[32m+ 151:                 return target[0m
[32m+ 152:         [0m
[32m+ 153:         return best.value[0m
  154:     def __iter__(self):
  155:         '''In order traversal of elements in the tree.'''
  156:         if self.root:
  157:             for e in self.root.inorder():
--------------------------------------------------------------------------------
[0.21153 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_10

def test_case_10():
        bytes_0 = b'\xd5\x1aDT\x1bg\xd27\xd3\\\x13\xba'
        set_0 = {bytes_0, bytes_0, bytes_0}
        binary_tree_0 = module_0.BinaryTree()
>       var_0 = binary_tree_0.closest(set_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree1.BinaryTree'>
target = {b'\xd5\x1aDT\x1bg\xd27\xd3\\\x13\xba'}

>   ???
E   AttributeError: type object 'BinaryTree' has no attribute 'root'

binarySearchTree1:137: AttributeError
[36m   -[0m [#  25] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
  150:                 return target
  151:         
  152:         return best.value
  153:     
[34m- 154:     def __iter__(self):[0m
[34m- 155:         '''In order traversal of elements in the tree.'''[0m
[34m- 156:         if self.root:[0m
[34m- 157:             for e in self.root.inorder():[0m
[34m- 158:                 yield e[0m
[34m- 159:     [0m
[32m+ 154:     @classmethod[0m
[32m+ 155:     def __iter__(self):[0m
[32m+ 156:         '''In order traversal of elements in the tree.'''[0m
[32m+ 157:         if self.root:[0m
[32m+ 158:             for e in self.root.inorder():[0m
[32m+ 159:                 yield e[0m
  160:     def __repr__(self):
  161:         if self.root is None:
  162:             return 'binary:()'
  163:         return 'binary:' + str(self.root)
--------------------------------------------------------------------------------
[0.20769 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_13

def test_case_13():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(bool_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        none_type_0 = None
        bool_1 = False
        var_1 = binary_tree_0.__contains__(bool_1)
        assert var_1 is False
        bool_2 = False
        set_0 = {bool_2}
        var_2 = binary_tree_0.getMax()
        assert var_2 is True
        var_3 = binary_tree_0.closest(bool_2)
        assert var_3 is True
        binary_tree_1 = module_0.BinaryTree()
>       object_0 = module_1.object(*binary_tree_1)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree1.BinaryTree'>

>   ???
E   AttributeError: type object 'BinaryTree' has no attribute 'root'

binarySearchTree1:157: AttributeError
[36m   -[0m [#  26] CDI binarySearchTree1: 
--------------------------------------------------------------------------------
  156:         if self.root:
  157:             for e in self.root.inorder():
  158:                 yield e
  159:     
[34m- 160:     def __repr__(self):[0m
[34m- 161:         if self.root is None:[0m
[34m- 162:             return 'binary:()'[0m
[34m- 163:         return 'binary:' + str(self.root)[0m
[34m- 164: [0m
[32m+ 160:     @classmethod[0m
[32m+ 161:     def __repr__(self):[0m
[32m+ 162:         if self.root is None:[0m
[32m+ 163:             return 'binary:()'[0m
[32m+ 164:         return 'binary:' + str(self.root)[0m
  165: '''
  166: Change Log:
  167: -----------
  168: 
--------------------------------------------------------------------------------
[0.26953 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_0

def test_case_0():
        bool_0 = True
        list_0 = [bool_0]
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__iter__()
        binary_node_0 = module_0.BinaryNode(list_0)
        binary_tree_1 = module_0.BinaryTree()
        binary_tree_2 = module_0.BinaryTree()
>       var_1 = binary_tree_2.__repr__()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree1.BinaryTree'>

>   ???
E   AttributeError: type object 'BinaryTree' has no attribute 'root'

binarySearchTree1:162: AttributeError
[36m   -[0m [#  27] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   14:     def add(self, val):
   15:         '''
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
[34m-  18:         if val <= self.value:[0m
[32m+  18:         if not (val <= self.value):[0m
   19:             self.left = self.addToSubTree(self.left, val)
   20:         elif val > self.value:
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
--------------------------------------------------------------------------------
[0.18265 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
>       assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:56: AssertionError
[36m   -[0m [#  28] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
   18:         if val <= self.value:
   19:             self.left = self.addToSubTree(self.left, val)
[34m-  20:         elif val > self.value:[0m
[32m+  20:         elif not (val > self.value):[0m
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
   23:     def addToSubTree(self, parent, val):
   24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''
--------------------------------------------------------------------------------
[0.21293 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_19

def test_case_19():
        bool_0 = False
        int_0 = -995
        binary_node_0 = module_0.BinaryNode(int_0)
        var_0 = binary_node_0.add(bool_0)
>       assert f'{type(binary_node_0.right).__module__}.{type(binary_node_0.right).__qualname__}' == 'binarySearchTree1.BinaryNode'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:210: AssertionError
[36m   -[0m [#  29] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
   23:     def addToSubTree(self, parent, val):
   24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''
[34m-  25:         if parent is None:[0m
[32m+  25:         if not (parent is None):[0m
   26:             return BinaryNode(val)
   27:         
   28:         parent.add(val)
   29:         return parent
--------------------------------------------------------------------------------
[0.16544 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_1 = binary_tree_0.add(list_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:93: in add
    ???
binarySearchTree1:19: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: [] R:), parent = None, val = []

>   ???
E   AttributeError: 'NoneType' object has no attribute 'add'

binarySearchTree1:28: AttributeError
[36m   -[0m [#  30] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   31:     def remove(self, val):
   32:         '''
   33:          Remove val of self from BinaryTree. 
   34:         '''
[34m-  35:         if val < self.value:[0m
[32m+  35:         if not (val < self.value):[0m
   36:             self.left = self.removeFromParent(self.left, val)
   37:         elif val > self.value:
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
--------------------------------------------------------------------------------
[0.16635 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
        assert var_2 == '(L:(L: True R:) True R:)'
        var_3 = binary_node_0.inorder()
        var_4 = binary_node_0.remove(bool_0)
>       assert binary_node_0.left is None
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:61: AssertionError
[36m   -[0m [#  31] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   33:          Remove val of self from BinaryTree. 
   34:         '''
   35:         if val < self.value:
   36:             self.left = self.removeFromParent(self.left, val)
[34m-  37:         elif val > self.value:[0m
[32m+  37:         elif not (val > self.value):[0m
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
   40:             if self.left is None:
   41:                 return self.right
--------------------------------------------------------------------------------
[0.17160 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
        assert var_2 == '(L:(L: True R:) True R:)'
        var_3 = binary_node_0.inorder()
        var_4 = binary_node_0.remove(bool_0)
>       assert binary_node_0.left is None
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:61: AssertionError
[36m   -[0m [#  32] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   36:             self.left = self.removeFromParent(self.left, val)
   37:         elif val > self.value:
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
[34m-  40:             if self.left is None:[0m
[32m+  40:             if not (self.left is None):[0m
   41:                 return self.right
   42:             
   43:             child = self.left
   44:             while child.right:
--------------------------------------------------------------------------------
[0.25491 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
>       var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:57: in removeFromParent
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: True R:), val = True

>   ???
E   AttributeError: 'NoneType' object has no attribute 'right'

binarySearchTree1:44: AttributeError
[36m   -[0m [#  33] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   40:             if self.left is None:
   41:                 return self.right
   42:             
   43:             child = self.left
[34m-  44:             while child.right:[0m
[32m+  44:             while not (child.right):[0m
   45:                 child = child.right
   46:             
   47:             childKey = child.value
   48:             self.left = self.removeFromParent(self.left, childKey)
--------------------------------------------------------------------------------
[0.16741 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
        assert var_2 == '(L:(L: True R:) True R:)'
        var_3 = binary_node_0.inorder()
>       var_4 = binary_node_0.remove(bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L:(L: True R:) True R:), val = True

>   ???
E   AttributeError: 'NoneType' object has no attribute 'right'

binarySearchTree1:44: AttributeError
[36m   -[0m [#  34] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   52:     
   53:     def removeFromParent(self, parent, val):
   54:         '''Helper method for remove. Ensures proper behavior when removing node that 
   55:         has children.'''
[34m-  56:         if parent:[0m
[32m+  56:         if not parent:[0m
   57:             return parent.remove(val)
   58:         return None
   59:     
   60:     def __repr__(self):
--------------------------------------------------------------------------------
[0.19176 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_12

def test_case_12():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        bool_1 = False
        binary_tree_0 = module_0.BinaryTree()
>       var_0 = binary_node_0.remove(bool_1)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:36: in remove
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: True R:), parent = None, val = False

>   ???
E   AttributeError: 'NoneType' object has no attribute 'remove'

binarySearchTree1:57: AttributeError
[36m   -[0m [#  35] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   60:     def __repr__(self):
   61:         '''Useful debugging function to produce linear tree representation.'''
   62:         leftS = ''
   63:         rightS = ''
[34m-  64:         if self.left:[0m
[32m+  64:         if not (self.left):[0m
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
   68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'
--------------------------------------------------------------------------------
[0.17666 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
>       assert var_2 == '(L:(L: True R:) True R:)'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:58: AssertionError
[36m   -[0m [#  36] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   62:         leftS = ''
   63:         rightS = ''
   64:         if self.left:
   65:             leftS = str(self.left)
[34m-  66:         if self.right:[0m
[32m+  66:         if not (self.right):[0m
   67:             rightS = str(self.right)
   68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'
   69:     
   70:     def inorder(self):
--------------------------------------------------------------------------------
[0.19112 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
>       assert var_2 == '(L:(L: True R:) True R:)'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:58: AssertionError
[36m   -[0m [#  37] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
[34m-  72:         if self.left:[0m
[32m+  72:         if not (self.left):[0m
   73:             for v in self.left.inorder():
   74:                 yield v
   75:         
   76:         yield self.value
--------------------------------------------------------------------------------
[0.16108 s] [31msurvived[0m
[36m   -[0m [#  38] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   74:                 yield v
   75:         
   76:         yield self.value
   77:         
[34m-  78:         if self.right:[0m
[32m+  78:         if not (self.right):[0m
   79:             for v in self.right.inorder():
   80:                 yield v
   81: 
   82: class BinaryTree:
--------------------------------------------------------------------------------
[0.16344 s] [31msurvived[0m
[36m   -[0m [#  39] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   86:         self.root = None
   87:     
   88:     def add(self, value):
   89:         '''Insert value into proper location in Binary Tree.'''
[34m-  90:         if self.root is None:[0m
[32m+  90:         if not (self.root is None):[0m
   91:             self.root = BinaryNode(value)
   92:         else:
   93:             self.root.add(value)
   94:     
--------------------------------------------------------------------------------
[0.26685 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_1

def test_case_1():
        binary_tree_0 = module_0.BinaryTree()
>       var_0 = binary_tree_0.add(binary_tree_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(), value = binary:()

>   ???
E   AttributeError: 'NoneType' object has no attribute 'add'

binarySearchTree1:93: AttributeError
[36m   -[0m [#  40] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   93:             self.root.add(value)
   94:     
   95:     def remove(self, val):
   96:         '''Remove value from tree.'''
[34m-  97:         if self.root:[0m
[32m+  97:         if not (self.root):[0m
   98:             self.root = self.root.remove(val)
   99:     
  100:     def getMin(self):
  101:         '''Returns minimum value.'''
--------------------------------------------------------------------------------
[0.18680 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_3

def test_case_3():
        binary_tree_0 = module_0.BinaryTree()
        float_0 = -1660.53234
        str_0 = 'BhpUfU<<C<'
>       var_0 = binary_tree_0.remove(float_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(), val = -1660.53234

>   ???
E   AttributeError: 'NoneType' object has no attribute 'remove'

binarySearchTree1:98: AttributeError
[36m   -[0m [#  41] COI binarySearchTree1: 
--------------------------------------------------------------------------------
   98:             self.root = self.root.remove(val)
   99:     
  100:     def getMin(self):
  101:         '''Returns minimum value.'''
[34m- 102:         if self.root is None:[0m
[32m+ 102:         if not (self.root is None):[0m
  103:             raise ValueError('Binary Tree is empty')
  104:         n = self.root
  105:         while n.left != None:
  106:             n = n.left
--------------------------------------------------------------------------------
[0.17366 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_0

def test_case_0():
        bool_0 = True
        list_0 = [bool_0]
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__iter__()
        binary_node_0 = module_0.BinaryNode(list_0)
        binary_tree_1 = module_0.BinaryTree()
        binary_tree_2 = module_0.BinaryTree()
        var_1 = binary_tree_2.__repr__()
        assert var_1 == 'binary:()'
        with pytest.raises(ValueError):
>           binary_tree_1.getMin()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:()

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree1:105: AttributeError
[36m   -[0m [#  42] COI binarySearchTree1: 
--------------------------------------------------------------------------------
  101:         '''Returns minimum value.'''
  102:         if self.root is None:
  103:             raise ValueError('Binary Tree is empty')
  104:         n = self.root
[34m- 105:         while n.left != None:[0m
[32m+ 105:         while not (n.left != None):[0m
  106:             n = n.left
  107:         return n.value
  108:     
  109:     def getMax(self):
--------------------------------------------------------------------------------
[0.21045 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_18

def test_case_18():
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__contains__(binary_tree_0)
        assert var_0 is False
        var_1 = binary_tree_0.add(var_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_tree_0.__contains__(var_0)
        assert var_2 is True
        binary_node_0 = module_0.BinaryNode(var_0)
>       var_3 = binary_tree_0.getMin()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(L: False R:)

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree1:105: AttributeError
[36m   -[0m [#  43] COI binarySearchTree1: 
--------------------------------------------------------------------------------
  107:         return n.value
  108:     
  109:     def getMax(self):
  110:         '''Returns maximum value.'''
[34m- 111:         if self.root is None:[0m
[32m+ 111:         if not (self.root is None):[0m
  112:             raise ValueError('Binary Tree is empty')
  113:         n = self.root
  114:         while n.right != None:
  115:             n = n.right
--------------------------------------------------------------------------------
[0.21672 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_3

def test_case_3():
        binary_tree_0 = module_0.BinaryTree()
        float_0 = -1660.53234
        str_0 = 'BhpUfU<<C<'
        var_0 = binary_tree_0.remove(float_0)
        var_1 = binary_tree_0.add(binary_tree_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_tree_0.getMax()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[RecursionError('maximum recursion depth exceeded while getting the str of an object') raised in repr()] BinaryTree object at 0x7fee800d6560>

>   ???
E   ValueError: Binary Tree is empty

binarySearchTree1:112: ValueError
[36m   -[0m [#  44] COI binarySearchTree1: 
--------------------------------------------------------------------------------
  110:         '''Returns maximum value.'''
  111:         if self.root is None:
  112:             raise ValueError('Binary Tree is empty')
  113:         n = self.root
[34m- 114:         while n.right != None:[0m
[32m+ 114:         while not (n.right != None):[0m
  115:             n = n.right
  116:         return n.value
  117:     
  118:     def __contains__(self, target):
--------------------------------------------------------------------------------
[0.19391 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_3

def test_case_3():
        binary_tree_0 = module_0.BinaryTree()
        float_0 = -1660.53234
        str_0 = 'BhpUfU<<C<'
        var_0 = binary_tree_0.remove(float_0)
        var_1 = binary_tree_0.add(binary_tree_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_tree_0.getMax()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[RecursionError('maximum recursion depth exceeded while getting the str of an object') raised in repr()] BinaryTree object at 0x7fee7feebc40>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'right'

binarySearchTree1:114: AttributeError
[36m   -[0m [#  45] COI binarySearchTree1: 
--------------------------------------------------------------------------------
  117:     
  118:     def __contains__(self, target):
  119:         '''Check whether BST contains target value.'''
  120:         node = self.root
[34m- 121:         while node:[0m
[32m+ 121:         while not node:[0m
  122:             if target < node.value:
  123:                 node = node.left
  124:             elif target > node.value:
  125:                 node = node.right
--------------------------------------------------------------------------------
[0.23338 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_1 = binary_tree_0.add(list_0)
        var_2 = binary_tree_0.add(list_0)
        var_3 = binary_tree_0.getMin()
        binary_node_0 = module_0.BinaryNode(var_2)
        var_4 = binary_tree_0.__contains__(list_0)
>       assert var_4 is True
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:34: AssertionError
[36m   -[0m [#  46] COI binarySearchTree1: 
--------------------------------------------------------------------------------
  118:     def __contains__(self, target):
  119:         '''Check whether BST contains target value.'''
  120:         node = self.root
  121:         while node:
[34m- 122:             if target < node.value:[0m
[32m+ 122:             if not (target < node.value):[0m
  123:                 node = node.left
  124:             elif target > node.value:
  125:                 node = node.right
  126:             else:
--------------------------------------------------------------------------------
[0.17565 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_1 = binary_tree_0.add(list_0)
        var_2 = binary_tree_0.add(list_0)
        var_3 = binary_tree_0.getMin()
        binary_node_0 = module_0.BinaryNode(var_2)
        var_4 = binary_tree_0.__contains__(list_0)
>       assert var_4 is True
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:34: AssertionError
[36m   -[0m [#  47] COI binarySearchTree1: 
--------------------------------------------------------------------------------
  120:         node = self.root
  121:         while node:
  122:             if target < node.value:
  123:                 node = node.left
[34m- 124:             elif target > node.value:[0m
[32m+ 124:             elif not (target > node.value):[0m
  125:                 node = node.right
  126:             else:
  127:                 return True
  128:         
--------------------------------------------------------------------------------
[0.20182 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_1 = binary_tree_0.add(list_0)
        var_2 = binary_tree_0.add(list_0)
        var_3 = binary_tree_0.getMin()
        binary_node_0 = module_0.BinaryNode(var_2)
        var_4 = binary_tree_0.__contains__(list_0)
>       assert var_4 is True
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:34: AssertionError
[36m   -[0m [#  48] COI binarySearchTree1: 
--------------------------------------------------------------------------------
  132:         '''
  133:         Return value closest to target. If there are several, then
  134:         return one of them.
  135:         '''
[34m- 136:         if self.root is None:[0m
[32m+ 136:         if not (self.root is None):[0m
  137:             return None
  138:         
  139:         best = node = self.root
  140:         distance = abs(self.root.value - target)
--------------------------------------------------------------------------------
[0.20359 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_10

def test_case_10():
        bytes_0 = b'\xd5\x1aDT\x1bg\xd27\xd3\\\x13\xba'
        set_0 = {bytes_0, bytes_0, bytes_0}
        binary_tree_0 = module_0.BinaryTree()
>       var_0 = binary_tree_0.closest(set_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(), target = {b'\xd5\x1aDT\x1bg\xd27\xd3\\\x13\xba'}

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree1:140: AttributeError
[36m   -[0m [#  49] COI binarySearchTree1: 
--------------------------------------------------------------------------------
  137:             return None
  138:         
  139:         best = node = self.root
  140:         distance = abs(self.root.value - target)
[34m- 141:         while node:[0m
[32m+ 141:         while not node:[0m
  142:             if abs(node.value - target) < distance:
  143:                 distance = abs(node.value - target)
  144:                 best = node
  145:             if target < node.value:
--------------------------------------------------------------------------------
[0.18044 s] [31msurvived[0m
[36m   -[0m [#  50] COI binarySearchTree1: 
--------------------------------------------------------------------------------
  138:         
  139:         best = node = self.root
  140:         distance = abs(self.root.value - target)
  141:         while node:
[34m- 142:             if abs(node.value - target) < distance:[0m
[32m+ 142:             if not (abs(node.value - target) < distance):[0m
  143:                 distance = abs(node.value - target)
  144:                 best = node
  145:             if target < node.value:
  146:                 node = node.left
--------------------------------------------------------------------------------
[0.15136 s] [31msurvived[0m
[36m   -[0m [#  51] COI binarySearchTree1: 
--------------------------------------------------------------------------------
  141:         while node:
  142:             if abs(node.value - target) < distance:
  143:                 distance = abs(node.value - target)
  144:                 best = node
[34m- 145:             if target < node.value:[0m
[32m+ 145:             if not (target < node.value):[0m
  146:                 node = node.left
  147:             elif target > node.value:
  148:                 node = node.right
  149:             else:
--------------------------------------------------------------------------------
[0.17555 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_13

def test_case_13():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(bool_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        none_type_0 = None
        bool_1 = False
        var_1 = binary_tree_0.__contains__(bool_1)
        assert var_1 is False
        bool_2 = False
        set_0 = {bool_2}
        var_2 = binary_tree_0.getMax()
        assert var_2 is True
        var_3 = binary_tree_0.closest(bool_2)
>       assert var_3 is True
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:139: AssertionError
[36m   -[0m [#  52] COI binarySearchTree1: 
--------------------------------------------------------------------------------
  143:                 distance = abs(node.value - target)
  144:                 best = node
  145:             if target < node.value:
  146:                 node = node.left
[34m- 147:             elif target > node.value:[0m
[32m+ 147:             elif not (target > node.value):[0m
  148:                 node = node.right
  149:             else:
  150:                 return target
  151:         
--------------------------------------------------------------------------------
[0.29971 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_18

def test_case_18():
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__contains__(binary_tree_0)
        assert var_0 is False
        var_1 = binary_tree_0.add(var_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_tree_0.__contains__(var_0)
        assert var_2 is True
        binary_node_0 = module_0.BinaryNode(var_0)
        var_3 = binary_tree_0.getMin()
        assert var_3 is False
        var_4 = binary_tree_0.closest(var_2)
>       assert var_4 is False
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:203: AssertionError
[36m   -[0m [#  53] COI binarySearchTree1: 
--------------------------------------------------------------------------------
  152:         return best.value
  153:     
  154:     def __iter__(self):
  155:         '''In order traversal of elements in the tree.'''
[34m- 156:         if self.root:[0m
[32m+ 156:         if not (self.root):[0m
  157:             for e in self.root.inorder():
  158:                 yield e
  159:     
  160:     def __repr__(self):
--------------------------------------------------------------------------------
[0.21002 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_13

def test_case_13():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(bool_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        none_type_0 = None
        bool_1 = False
        var_1 = binary_tree_0.__contains__(bool_1)
        assert var_1 is False
        bool_2 = False
        set_0 = {bool_2}
        var_2 = binary_tree_0.getMax()
        assert var_2 is True
        var_3 = binary_tree_0.closest(bool_2)
        assert var_3 is True
        binary_tree_1 = module_0.BinaryTree()
>       object_0 = module_1.object(*binary_tree_1)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:()

>   ???
E   AttributeError: 'NoneType' object has no attribute 'inorder'

binarySearchTree1:157: AttributeError
[36m   -[0m [#  54] COI binarySearchTree1: 
--------------------------------------------------------------------------------
  157:             for e in self.root.inorder():
  158:                 yield e
  159:     
  160:     def __repr__(self):
[34m- 161:         if self.root is None:[0m
[32m+ 161:         if not (self.root is None):[0m
  162:             return 'binary:()'
  163:         return 'binary:' + str(self.root)
  164: 
  165: '''
--------------------------------------------------------------------------------
[0.17637 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_0

def test_case_0():
        bool_0 = True
        list_0 = [bool_0]
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__iter__()
        binary_node_0 = module_0.BinaryNode(list_0)
        binary_tree_1 = module_0.BinaryTree()
        binary_tree_2 = module_0.BinaryTree()
        var_1 = binary_tree_2.__repr__()
>       assert var_1 == 'binary:()'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:15: AssertionError
[36m   -[0m [#  55] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
   58:         return None
   59:     
   60:     def __repr__(self):
   61:         '''Useful debugging function to produce linear tree representation.'''
[34m-  62:         leftS = ''[0m
[32m+  62:         leftS = 'mutpy'[0m
   63:         rightS = ''
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
--------------------------------------------------------------------------------
[0.17633 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
>       assert var_2 == '(L:(L: True R:) True R:)'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:58: AssertionError
[36m   -[0m [#  56] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
   59:     
   60:     def __repr__(self):
   61:         '''Useful debugging function to produce linear tree representation.'''
   62:         leftS = ''
[34m-  63:         rightS = ''[0m
[32m+  63:         rightS = 'mutpy'[0m
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
--------------------------------------------------------------------------------
[0.18397 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
>       assert var_2 == '(L:(L: True R:) True R:)'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:58: AssertionError
[36m   -[0m [#  57] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('mutpy' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.18067 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
>       assert var_2 == '(L:(L: True R:) True R:)'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:58: AssertionError
[36m   -[0m [#  58] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.25760 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
>       assert var_2 == '(L:(L: True R:) True R:)'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:58: AssertionError
[36m   -[0m [#  59] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('(L:' + leftS) + 'mutpy') + str(self.value)) + ' R:') + rightS) + ')'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.18126 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
>       assert var_2 == '(L:(L: True R:) True R:)'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:58: AssertionError
[36m   -[0m [#  60] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('(L:' + leftS) + '') + str(self.value)) + ' R:') + rightS) + ')'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.20080 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
>       assert var_2 == '(L:(L: True R:) True R:)'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:58: AssertionError
[36m   -[0m [#  61] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + 'mutpy') + rightS) + ')'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.20034 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
>       assert var_2 == '(L:(L: True R:) True R:)'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:58: AssertionError
[36m   -[0m [#  62] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + '') + rightS) + ')'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.19414 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
>       assert var_2 == '(L:(L: True R:) True R:)'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:58: AssertionError
[36m   -[0m [#  63] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + 'mutpy'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.19212 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
>       assert var_2 == '(L:(L: True R:) True R:)'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:58: AssertionError
[36m   -[0m [#  64] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ''[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.18350 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
>       assert var_2 == '(L:(L: True R:) True R:)'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:58: AssertionError
[36m   -[0m [#  65] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
   99:     
  100:     def getMin(self):
  101:         '''Returns minimum value.'''
  102:         if self.root is None:
[34m- 103:             raise ValueError('Binary Tree is empty')[0m
[32m+ 103:             raise ValueError('mutpy')[0m
  104:         n = self.root
  105:         while n.left != None:
  106:             n = n.left
  107:         return n.value
--------------------------------------------------------------------------------
[0.24460 s] [31msurvived[0m
[36m   -[0m [#  66] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
   99:     
  100:     def getMin(self):
  101:         '''Returns minimum value.'''
  102:         if self.root is None:
[34m- 103:             raise ValueError('Binary Tree is empty')[0m
[32m+ 103:             raise ValueError('')[0m
  104:         n = self.root
  105:         while n.left != None:
  106:             n = n.left
  107:         return n.value
--------------------------------------------------------------------------------
[0.16724 s] [31msurvived[0m
[36m   -[0m [#  67] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
  108:     
  109:     def getMax(self):
  110:         '''Returns maximum value.'''
  111:         if self.root is None:
[34m- 112:             raise ValueError('Binary Tree is empty')[0m
[32m+ 112:             raise ValueError('mutpy')[0m
  113:         n = self.root
  114:         while n.right != None:
  115:             n = n.right
  116:         return n.value
--------------------------------------------------------------------------------
[0.15880 s] [31msurvived[0m
[36m   -[0m [#  68] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
  108:     
  109:     def getMax(self):
  110:         '''Returns maximum value.'''
  111:         if self.root is None:
[34m- 112:             raise ValueError('Binary Tree is empty')[0m
[32m+ 112:             raise ValueError('')[0m
  113:         n = self.root
  114:         while n.right != None:
  115:             n = n.right
  116:         return n.value
--------------------------------------------------------------------------------
[0.16418 s] [31msurvived[0m
[36m   -[0m [#  69] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
  158:                 yield e
  159:     
  160:     def __repr__(self):
  161:         if self.root is None:
[34m- 162:             return 'binary:()'[0m
[32m+ 162:             return 'mutpy'[0m
  163:         return 'binary:' + str(self.root)
  164: 
  165: '''
  166: Change Log:
--------------------------------------------------------------------------------
[0.17571 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_0

def test_case_0():
        bool_0 = True
        list_0 = [bool_0]
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__iter__()
        binary_node_0 = module_0.BinaryNode(list_0)
        binary_tree_1 = module_0.BinaryTree()
        binary_tree_2 = module_0.BinaryTree()
        var_1 = binary_tree_2.__repr__()
>       assert var_1 == 'binary:()'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:15: AssertionError
[36m   -[0m [#  70] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
  158:                 yield e
  159:     
  160:     def __repr__(self):
  161:         if self.root is None:
[34m- 162:             return 'binary:()'[0m
[32m+ 162:             return ''[0m
  163:         return 'binary:' + str(self.root)
  164: 
  165: '''
  166: Change Log:
--------------------------------------------------------------------------------
[0.18036 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_0

def test_case_0():
        bool_0 = True
        list_0 = [bool_0]
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__iter__()
        binary_node_0 = module_0.BinaryNode(list_0)
        binary_tree_1 = module_0.BinaryTree()
        binary_tree_2 = module_0.BinaryTree()
        var_1 = binary_tree_2.__repr__()
>       assert var_1 == 'binary:()'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:15: AssertionError
[36m   -[0m [#  71] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
  159:     
  160:     def __repr__(self):
  161:         if self.root is None:
  162:             return 'binary:()'
[34m- 163:         return 'binary:' + str(self.root)[0m
[32m+ 163:         return 'mutpy' + str(self.root)[0m
  164: 
  165: '''
  166: Change Log:
  167: -----------
--------------------------------------------------------------------------------
[0.16052 s] [31msurvived[0m
[36m   -[0m [#  72] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
  159:     
  160:     def __repr__(self):
  161:         if self.root is None:
  162:             return 'binary:()'
[34m- 163:         return 'binary:' + str(self.root)[0m
[32m+ 163:         return '' + str(self.root)[0m
  164: 
  165: '''
  166: Change Log:
  167: -----------
--------------------------------------------------------------------------------
[0.22362 s] [31msurvived[0m
[36m   -[0m [#  73] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
  161:         if self.root is None:
  162:             return 'binary:()'
  163:         return 'binary:' + str(self.root)
  164: 
[34m- 165: '''[0m
[34m- 166: Change Log:[0m
[34m- 167: -----------[0m
[34m- 168: [0m
[34m- 169: '''[0m
[32m+ 165: '''mutpy'''[0m
--------------------------------------------------------------------------------
[0.14753 s] [31msurvived[0m
[36m   -[0m [#  74] CRP binarySearchTree1: 
--------------------------------------------------------------------------------
  161:         if self.root is None:
  162:             return 'binary:()'
  163:         return 'binary:' + str(self.root)
  164: 
[34m- 165: '''[0m
[34m- 166: Change Log:[0m
[34m- 167: -----------[0m
[34m- 168: [0m
[34m- 169: '''[0m
[32m+ 165: ''''''[0m
--------------------------------------------------------------------------------
[0.16293 s] [31msurvived[0m
[36m   -[0m [#  75] OIL binarySearchTree1: 
--------------------------------------------------------------------------------
   42:             
   43:             child = self.left
   44:             while child.right:
   45:                 child = child.right
[34m-  46:             [0m
[32m+  46:                 break[0m
   47:             childKey = child.value
   48:             self.left = self.removeFromParent(self.left, childKey)
   49:             self.value = childKey
   50:         
--------------------------------------------------------------------------------
[0.16534 s] [31msurvived[0m
[36m   -[0m [#  76] OIL binarySearchTree1: 
--------------------------------------------------------------------------------
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
   73:             for v in self.left.inorder():
   74:                 yield v
[34m-  75:         [0m
[32m+  75:                 break[0m
   76:         yield self.value
   77:         
   78:         if self.right:
   79:             for v in self.right.inorder():
--------------------------------------------------------------------------------
[0.14938 s] [31msurvived[0m
[36m   -[0m [#  77] OIL binarySearchTree1: 
--------------------------------------------------------------------------------
   77:         
   78:         if self.right:
   79:             for v in self.right.inorder():
   80:                 yield v
[34m-  81: [0m
[32m+  81:                 break[0m
   82: class BinaryTree:
   83:     
   84:     def __init__(self):
   85:         '''Create empty binary tree.'''
--------------------------------------------------------------------------------
[0.16432 s] [31msurvived[0m
[36m   -[0m [#  78] OIL binarySearchTree1: 
--------------------------------------------------------------------------------
  103:             raise ValueError('Binary Tree is empty')
  104:         n = self.root
  105:         while n.left != None:
  106:             n = n.left
[34m- 107:         return n.value[0m
[34m- 108:     [0m
[32m+ 107:             break[0m
[32m+ 108:         return n.value[0m
  109:     def getMax(self):
  110:         '''Returns maximum value.'''
  111:         if self.root is None:
  112:             raise ValueError('Binary Tree is empty')
--------------------------------------------------------------------------------
[0.22031 s] [31msurvived[0m
[36m   -[0m [#  79] OIL binarySearchTree1: 
--------------------------------------------------------------------------------
  112:             raise ValueError('Binary Tree is empty')
  113:         n = self.root
  114:         while n.right != None:
  115:             n = n.right
[34m- 116:         return n.value[0m
[34m- 117:     [0m
[32m+ 116:             break[0m
[32m+ 117:         return n.value[0m
  118:     def __contains__(self, target):
  119:         '''Check whether BST contains target value.'''
  120:         node = self.root
  121:         while node:
--------------------------------------------------------------------------------
[0.14786 s] [31msurvived[0m
[36m   -[0m [#  80] OIL binarySearchTree1: 
--------------------------------------------------------------------------------
  123:                 node = node.left
  124:             elif target > node.value:
  125:                 node = node.right
  126:             else:
[34m- 127:                 return True[0m
[32m+ 127:                 return Truebreak[0m
  128:         
  129:         return False
  130:     
  131:     def closest(self, target):
--------------------------------------------------------------------------------
[0.15833 s] [31msurvived[0m
[36m   -[0m [#  81] OIL binarySearchTree1: 
--------------------------------------------------------------------------------
  146:                 node = node.left
  147:             elif target > node.value:
  148:                 node = node.right
  149:             else:
[34m- 150:                 return target[0m
[32m+ 150:                 return targetbreak[0m
  151:         
  152:         return best.value
  153:     
  154:     def __iter__(self):
--------------------------------------------------------------------------------
[0.16519 s] [31msurvived[0m
[36m   -[0m [#  82] OIL binarySearchTree1: 
--------------------------------------------------------------------------------
  155:         '''In order traversal of elements in the tree.'''
  156:         if self.root:
  157:             for e in self.root.inorder():
  158:                 yield e
[34m- 159:     [0m
[32m+ 159:                 break[0m
  160:     def __repr__(self):
  161:         if self.root is None:
  162:             return 'binary:()'
  163:         return 'binary:' + str(self.root)
--------------------------------------------------------------------------------
[0.15631 s] [31msurvived[0m
[36m   -[0m [#  83] RIL binarySearchTree1: 
--------------------------------------------------------------------------------
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
[34m-  73:             for v in self.left.inorder():[0m
[32m+  73:             for v in reversed(self.left.inorder()):[0m
   74:                 yield v
   75:         
   76:         yield self.value
   77:         
--------------------------------------------------------------------------------
[0.16728 s] [31msurvived[0m
[36m   -[0m [#  84] RIL binarySearchTree1: 
--------------------------------------------------------------------------------
   75:         
   76:         yield self.value
   77:         
   78:         if self.right:
[34m-  79:             for v in self.right.inorder():[0m
[32m+  79:             for v in reversed(self.right.inorder()):[0m
   80:                 yield v
   81: 
   82: class BinaryTree:
   83:     
--------------------------------------------------------------------------------
[0.14683 s] [31msurvived[0m
[36m   -[0m [#  85] RIL binarySearchTree1: 
--------------------------------------------------------------------------------
  153:     
  154:     def __iter__(self):
  155:         '''In order traversal of elements in the tree.'''
  156:         if self.root:
[34m- 157:             for e in self.root.inorder():[0m
[32m+ 157:             for e in reversed(self.root.inorder()):[0m
  158:                 yield e
  159:     
  160:     def __repr__(self):
  161:         if self.root is None:
--------------------------------------------------------------------------------
[0.16251 s] [31msurvived[0m
[36m   -[0m [#  86] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
   14:     def add(self, val):
   15:         '''
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
[34m-  18:         if val <= self.value:[0m
[32m+  18:         if val >= self.value:[0m
   19:             self.left = self.addToSubTree(self.left, val)
   20:         elif val > self.value:
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
--------------------------------------------------------------------------------
[0.19703 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_19

def test_case_19():
        bool_0 = False
        int_0 = -995
        binary_node_0 = module_0.BinaryNode(int_0)
        var_0 = binary_node_0.add(bool_0)
>       assert f'{type(binary_node_0.right).__module__}.{type(binary_node_0.right).__qualname__}' == 'binarySearchTree1.BinaryNode'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:210: AssertionError
[36m   -[0m [#  87] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
   14:     def add(self, val):
   15:         '''
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
[34m-  18:         if val <= self.value:[0m
[32m+  18:         if val < self.value:[0m
   19:             self.left = self.addToSubTree(self.left, val)
   20:         elif val > self.value:
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
--------------------------------------------------------------------------------
[0.16659 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
>       assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:56: AssertionError
[36m   -[0m [#  88] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
   18:         if val <= self.value:
   19:             self.left = self.addToSubTree(self.left, val)
[34m-  20:         elif val > self.value:[0m
[32m+  20:         elif val < self.value:[0m
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
   23:     def addToSubTree(self, parent, val):
   24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''
--------------------------------------------------------------------------------
[0.20034 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_19

def test_case_19():
        bool_0 = False
        int_0 = -995
        binary_node_0 = module_0.BinaryNode(int_0)
        var_0 = binary_node_0.add(bool_0)
>       assert f'{type(binary_node_0.right).__module__}.{type(binary_node_0.right).__qualname__}' == 'binarySearchTree1.BinaryNode'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:210: AssertionError
[36m   -[0m [#  89] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
   18:         if val <= self.value:
   19:             self.left = self.addToSubTree(self.left, val)
[34m-  20:         elif val > self.value:[0m
[32m+  20:         elif val >= self.value:[0m
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
   23:     def addToSubTree(self, parent, val):
   24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''
--------------------------------------------------------------------------------
[0.16128 s] [31msurvived[0m
[36m   -[0m [#  90] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
   31:     def remove(self, val):
   32:         '''
   33:          Remove val of self from BinaryTree. 
   34:         '''
[34m-  35:         if val < self.value:[0m
[32m+  35:         if val > self.value:[0m
   36:             self.left = self.removeFromParent(self.left, val)
   37:         elif val > self.value:
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
--------------------------------------------------------------------------------
[0.17197 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_12

def test_case_12():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        bool_1 = False
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_node_0.remove(bool_1)
>       assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree1.BinaryNode'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:115: AssertionError
[36m   -[0m [#  91] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
   31:     def remove(self, val):
   32:         '''
   33:          Remove val of self from BinaryTree. 
   34:         '''
[34m-  35:         if val < self.value:[0m
[32m+  35:         if val <= self.value:[0m
   36:             self.left = self.removeFromParent(self.left, val)
   37:         elif val > self.value:
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
--------------------------------------------------------------------------------
[0.23900 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
        assert var_2 == '(L:(L: True R:) True R:)'
        var_3 = binary_node_0.inorder()
        var_4 = binary_node_0.remove(bool_0)
>       assert binary_node_0.left is None
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:61: AssertionError
[36m   -[0m [#  92] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
   33:          Remove val of self from BinaryTree. 
   34:         '''
   35:         if val < self.value:
   36:             self.left = self.removeFromParent(self.left, val)
[34m-  37:         elif val > self.value:[0m
[32m+  37:         elif val < self.value:[0m
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
   40:             if self.left is None:
   41:                 return self.right
--------------------------------------------------------------------------------
[0.20181 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_21

def test_case_21():
        int_0 = 2683
        float_0 = 112.342
        binary_node_0 = module_0.BinaryNode(float_0)
        var_0 = binary_node_0.remove(int_0)
>       assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree1.BinaryNode'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:226: AssertionError
[36m   -[0m [#  93] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
   33:          Remove val of self from BinaryTree. 
   34:         '''
   35:         if val < self.value:
   36:             self.left = self.removeFromParent(self.left, val)
[34m-  37:         elif val > self.value:[0m
[32m+  37:         elif val >= self.value:[0m
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
   40:             if self.left is None:
   41:                 return self.right
--------------------------------------------------------------------------------
[0.16541 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
        assert var_2 == '(L:(L: True R:) True R:)'
        var_3 = binary_node_0.inorder()
        var_4 = binary_node_0.remove(bool_0)
>       assert binary_node_0.left is None
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:61: AssertionError
[36m   -[0m [#  94] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
  101:         '''Returns minimum value.'''
  102:         if self.root is None:
  103:             raise ValueError('Binary Tree is empty')
  104:         n = self.root
[34m- 105:         while n.left != None:[0m
[32m+ 105:         while n.left == None:[0m
  106:             n = n.left
  107:         return n.value
  108:     
  109:     def getMax(self):
--------------------------------------------------------------------------------
[0.19068 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_18

def test_case_18():
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__contains__(binary_tree_0)
        assert var_0 is False
        var_1 = binary_tree_0.add(var_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_tree_0.__contains__(var_0)
        assert var_2 is True
        binary_node_0 = module_0.BinaryNode(var_0)
>       var_3 = binary_tree_0.getMin()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(L: False R:)

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree1:105: AttributeError
[36m   -[0m [#  95] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
  110:         '''Returns maximum value.'''
  111:         if self.root is None:
  112:             raise ValueError('Binary Tree is empty')
  113:         n = self.root
[34m- 114:         while n.right != None:[0m
[32m+ 114:         while n.right == None:[0m
  115:             n = n.right
  116:         return n.value
  117:     
  118:     def __contains__(self, target):
--------------------------------------------------------------------------------
[0.17582 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_3

def test_case_3():
        binary_tree_0 = module_0.BinaryTree()
        float_0 = -1660.53234
        str_0 = 'BhpUfU<<C<'
        var_0 = binary_tree_0.remove(float_0)
        var_1 = binary_tree_0.add(binary_tree_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_tree_0.getMax()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[RecursionError('maximum recursion depth exceeded while getting the str of an object') raised in repr()] BinaryTree object at 0x7fee800a2a10>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'right'

binarySearchTree1:114: AttributeError
[36m   -[0m [#  96] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
  118:     def __contains__(self, target):
  119:         '''Check whether BST contains target value.'''
  120:         node = self.root
  121:         while node:
[34m- 122:             if target < node.value:[0m
[32m+ 122:             if target > node.value:[0m
  123:                 node = node.left
  124:             elif target > node.value:
  125:                 node = node.right
  126:             else:
--------------------------------------------------------------------------------
[0.19126 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_13

def test_case_13():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(bool_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        none_type_0 = None
        bool_1 = False
        var_1 = binary_tree_0.__contains__(bool_1)
>       assert var_1 is False
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:133: AssertionError
[36m   -[0m [#  97] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
  118:     def __contains__(self, target):
  119:         '''Check whether BST contains target value.'''
  120:         node = self.root
  121:         while node:
[34m- 122:             if target < node.value:[0m
[32m+ 122:             if target <= node.value:[0m
  123:                 node = node.left
  124:             elif target > node.value:
  125:                 node = node.right
  126:             else:
--------------------------------------------------------------------------------
[0.18131 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_1 = binary_tree_0.add(list_0)
        var_2 = binary_tree_0.add(list_0)
        var_3 = binary_tree_0.getMin()
        binary_node_0 = module_0.BinaryNode(var_2)
        var_4 = binary_tree_0.__contains__(list_0)
>       assert var_4 is True
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:34: AssertionError
[36m   -[0m [#  98] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
  120:         node = self.root
  121:         while node:
  122:             if target < node.value:
  123:                 node = node.left
[34m- 124:             elif target > node.value:[0m
[32m+ 124:             elif target < node.value:[0m
  125:                 node = node.right
  126:             else:
  127:                 return True
  128:         
--------------------------------------------------------------------------------
[0.24186 s] [31msurvived[0m
[36m   -[0m [#  99] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
  120:         node = self.root
  121:         while node:
  122:             if target < node.value:
  123:                 node = node.left
[34m- 124:             elif target > node.value:[0m
[32m+ 124:             elif target >= node.value:[0m
  125:                 node = node.right
  126:             else:
  127:                 return True
  128:         
--------------------------------------------------------------------------------
[0.17085 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_1 = binary_tree_0.add(list_0)
        var_2 = binary_tree_0.add(list_0)
        var_3 = binary_tree_0.getMin()
        binary_node_0 = module_0.BinaryNode(var_2)
        var_4 = binary_tree_0.__contains__(list_0)
>       assert var_4 is True
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:34: AssertionError
[36m   -[0m [# 100] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
  138:         
  139:         best = node = self.root
  140:         distance = abs(self.root.value - target)
  141:         while node:
[34m- 142:             if abs(node.value - target) < distance:[0m
[32m+ 142:             if abs(node.value - target) > distance:[0m
  143:                 distance = abs(node.value - target)
  144:                 best = node
  145:             if target < node.value:
  146:                 node = node.left
--------------------------------------------------------------------------------
[0.15822 s] [31msurvived[0m
[36m   -[0m [# 101] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
  138:         
  139:         best = node = self.root
  140:         distance = abs(self.root.value - target)
  141:         while node:
[34m- 142:             if abs(node.value - target) < distance:[0m
[32m+ 142:             if abs(node.value - target) <= distance:[0m
  143:                 distance = abs(node.value - target)
  144:                 best = node
  145:             if target < node.value:
  146:                 node = node.left
--------------------------------------------------------------------------------
[0.16475 s] [31msurvived[0m
[36m   -[0m [# 102] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
  141:         while node:
  142:             if abs(node.value - target) < distance:
  143:                 distance = abs(node.value - target)
  144:                 best = node
[34m- 145:             if target < node.value:[0m
[32m+ 145:             if target > node.value:[0m
  146:                 node = node.left
  147:             elif target > node.value:
  148:                 node = node.right
  149:             else:
--------------------------------------------------------------------------------
[0.18588 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_13

def test_case_13():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(bool_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        none_type_0 = None
        bool_1 = False
        var_1 = binary_tree_0.__contains__(bool_1)
        assert var_1 is False
        bool_2 = False
        set_0 = {bool_2}
        var_2 = binary_tree_0.getMax()
        assert var_2 is True
        var_3 = binary_tree_0.closest(bool_2)
>       assert var_3 is True
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:139: AssertionError
[36m   -[0m [# 103] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
  141:         while node:
  142:             if abs(node.value - target) < distance:
  143:                 distance = abs(node.value - target)
  144:                 best = node
[34m- 145:             if target < node.value:[0m
[32m+ 145:             if target <= node.value:[0m
  146:                 node = node.left
  147:             elif target > node.value:
  148:                 node = node.right
  149:             else:
--------------------------------------------------------------------------------
[0.14837 s] [31msurvived[0m
[36m   -[0m [# 104] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
  143:                 distance = abs(node.value - target)
  144:                 best = node
  145:             if target < node.value:
  146:                 node = node.left
[34m- 147:             elif target > node.value:[0m
[32m+ 147:             elif target < node.value:[0m
  148:                 node = node.right
  149:             else:
  150:                 return target
  151:         
--------------------------------------------------------------------------------
[0.27829 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_18

def test_case_18():
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__contains__(binary_tree_0)
        assert var_0 is False
        var_1 = binary_tree_0.add(var_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_tree_0.__contains__(var_0)
        assert var_2 is True
        binary_node_0 = module_0.BinaryNode(var_0)
        var_3 = binary_tree_0.getMin()
        assert var_3 is False
        var_4 = binary_tree_0.closest(var_2)
>       assert var_4 is False
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:203: AssertionError
[36m   -[0m [# 105] ROR binarySearchTree1: 
--------------------------------------------------------------------------------
  143:                 distance = abs(node.value - target)
  144:                 best = node
  145:             if target < node.value:
  146:                 node = node.left
[34m- 147:             elif target > node.value:[0m
[32m+ 147:             elif target >= node.value:[0m
  148:                 node = node.right
  149:             else:
  150:                 return target
  151:         
--------------------------------------------------------------------------------
[0.15927 s] [31msurvived[0m
[36m   -[0m [# 106] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
    4:     Author: George Heineman    
    5: '''
    6: class BinaryNode:
    7:     
[34m-   8:     def __init__(self, value):[0m
[34m-   9:         '''Create binary node.'''[0m
[34m-  10:         self.value = value[0m
[34m-  11:         self.left = None[0m
[34m-  12:         self.right = None[0m
[34m-  13:     [0m
[32m+   8:     @staticmethod[0m
[32m+   9:     def __init__(self, value):[0m
[32m+  10:         '''Create binary node.'''[0m
[32m+  11:         self.value = value[0m
[32m+  12:         self.left = None[0m
[32m+  13:         self.right = None[0m
   14:     def add(self, val):
   15:         '''
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
--------------------------------------------------------------------------------
[0.17717 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:11: TypeError: BinaryNode.__init__() missing 1 required positional argument: 'value'

[36m   -[0m [# 107] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
   10:         self.value = value
   11:         self.left = None
   12:         self.right = None
   13:     
[34m-  14:     def add(self, val):[0m
[34m-  15:         '''[0m
[34m-  16:         Add a new node to the tree with value. Respond based on Set semantics[0m
[34m-  17:         '''[0m
[34m-  18:         if val <= self.value:[0m
[34m-  19:             self.left = self.addToSubTree(self.left, val)[0m
[34m-  20:         elif val > self.value:[0m
[34m-  21:             self.right = self.addToSubTree(self.right, val)[0m
[34m-  22:     [0m
[32m+  14:     @staticmethod[0m
[32m+  15:     def add(self, val):[0m
[32m+  16:         '''[0m
[32m+  17:         Add a new node to the tree with value. Respond based on Set semantics[0m
[32m+  18:         '''[0m
[32m+  19:         if val <= self.value:[0m
[32m+  20:             self.left = self.addToSubTree(self.left, val)[0m
[32m+  21:         elif val > self.value:[0m
[32m+  22:             self.right = self.addToSubTree(self.right, val)[0m
   23:     def addToSubTree(self, parent, val):
   24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''
   25:         if parent is None:
   26:             return BinaryNode(val)
--------------------------------------------------------------------------------
[0.16261 s] [36mincompetent[0m

TypeError: binarySearchTree1:93: TypeError: BinaryNode.add() missing 1 required positional argument: 'val'

[36m   -[0m [# 108] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
   19:             self.left = self.addToSubTree(self.left, val)
   20:         elif val > self.value:
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
[34m-  23:     def addToSubTree(self, parent, val):[0m
[34m-  24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''[0m
[34m-  25:         if parent is None:[0m
[34m-  26:             return BinaryNode(val)[0m
[34m-  27:         [0m
[34m-  28:         parent.add(val)[0m
[34m-  29:         return parent[0m
[34m-  30:     [0m
[32m+  23:     @staticmethod[0m
[32m+  24:     def addToSubTree(self, parent, val):[0m
[32m+  25:         '''Add val to parent subtree (if exists) and return root of that subtree.'''[0m
[32m+  26:         if parent is None:[0m
[32m+  27:             return BinaryNode(val)[0m
[32m+  28:         [0m
[32m+  29:         parent.add(val)[0m
[32m+  30:         return parent[0m
   31:     def remove(self, val):
   32:         '''
   33:          Remove val of self from BinaryTree. 
   34:         '''
--------------------------------------------------------------------------------
[0.16570 s] [36mincompetent[0m

TypeError: binarySearchTree1:19: TypeError: BinaryNode.addToSubTree() missing 1 required positional argument: 'val'

[36m   -[0m [# 109] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
   27:         
   28:         parent.add(val)
   29:         return parent
   30:     
[34m-  31:     def remove(self, val):[0m
[34m-  32:         '''[0m
[34m-  33:          Remove val of self from BinaryTree. [0m
[34m-  34:         '''[0m
[34m-  35:         if val < self.value:[0m
[34m-  36:             self.left = self.removeFromParent(self.left, val)[0m
[34m-  37:         elif val > self.value:[0m
[34m-  38:             self.right = self.removeFromParent(self.right, val)[0m
[34m-  39:         else:[0m
[34m-  40:             if self.left is None:[0m
[34m-  41:                 return self.right[0m
[34m-  42:             [0m
[34m-  43:             child = self.left[0m
[34m-  44:             while child.right:[0m
[34m-  45:                 child = child.right[0m
[34m-  46:             [0m
[34m-  47:             childKey = child.value[0m
[34m-  48:             self.left = self.removeFromParent(self.left, childKey)[0m
[34m-  49:             self.value = childKey[0m
[34m-  50:         [0m
[34m-  51:         return self[0m
[34m-  52:     [0m
[32m+  31:     @staticmethod[0m
[32m+  32:     def remove(self, val):[0m
[32m+  33:         '''[0m
[32m+  34:          Remove val of self from BinaryTree. [0m
[32m+  35:         '''[0m
[32m+  36:         if val < self.value:[0m
[32m+  37:             self.left = self.removeFromParent(self.left, val)[0m
[32m+  38:         elif val > self.value:[0m
[32m+  39:             self.right = self.removeFromParent(self.right, val)[0m
[32m+  40:         else:[0m
[32m+  41:             if self.left is None:[0m
[32m+  42:                 return self.right[0m
[32m+  43:             [0m
[32m+  44:             child = self.left[0m
[32m+  45:             while child.right:[0m
[32m+  46:                 child = child.right[0m
[32m+  47:             [0m
[32m+  48:             childKey = child.value[0m
[32m+  49:             self.left = self.removeFromParent(self.left, childKey)[0m
[32m+  50:             self.value = childKey[0m
[32m+  51:         [0m
[32m+  52:         return self[0m
   53:     def removeFromParent(self, parent, val):
   54:         '''Helper method for remove. Ensures proper behavior when removing node that 
   55:         has children.'''
   56:         if parent:
--------------------------------------------------------------------------------
[0.17114 s] [36mincompetent[0m

TypeError: binarySearchTree1:57: TypeError: BinaryNode.remove() missing 1 required positional argument: 'val'

[36m   -[0m [# 110] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
   49:             self.value = childKey
   50:         
   51:         return self
   52:     
[34m-  53:     def removeFromParent(self, parent, val):[0m
[34m-  54:         '''Helper method for remove. Ensures proper behavior when removing node that [0m
[34m-  55:         has children.'''[0m
[34m-  56:         if parent:[0m
[34m-  57:             return parent.remove(val)[0m
[34m-  58:         return None[0m
[34m-  59:     [0m
[32m+  53:     @staticmethod[0m
[32m+  54:     def removeFromParent(self, parent, val):[0m
[32m+  55:         '''Helper method for remove. Ensures proper behavior when removing node that [0m
[32m+  56:         has children.'''[0m
[32m+  57:         if parent:[0m
[32m+  58:             return parent.remove(val)[0m
[32m+  59:         return None[0m
   60:     def __repr__(self):
   61:         '''Useful debugging function to produce linear tree representation.'''
   62:         leftS = ''
   63:         rightS = ''
--------------------------------------------------------------------------------
[0.18266 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:54: TypeError: BinaryNode.removeFromParent() missing 1 required positional argument: 'val'

[36m   -[0m [# 111] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
   56:         if parent:
   57:             return parent.remove(val)
   58:         return None
   59:     
[34m-  60:     def __repr__(self):[0m
[34m-  61:         '''Useful debugging function to produce linear tree representation.'''[0m
[34m-  62:         leftS = ''[0m
[34m-  63:         rightS = ''[0m
[34m-  64:         if self.left:[0m
[34m-  65:             leftS = str(self.left)[0m
[34m-  66:         if self.right:[0m
[34m-  67:             rightS = str(self.right)[0m
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[34m-  69:     [0m
[32m+  60:     @staticmethod[0m
[32m+  61:     def __repr__(self):[0m
[32m+  62:         '''Useful debugging function to produce linear tree representation.'''[0m
[32m+  63:         leftS = ''[0m
[32m+  64:         rightS = ''[0m
[32m+  65:         if self.left:[0m
[32m+  66:             leftS = str(self.left)[0m
[32m+  67:         if self.right:[0m
[32m+  68:             rightS = str(self.right)[0m
[32m+  69:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
   73:             for v in self.left.inorder():
--------------------------------------------------------------------------------
[0.16415 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:57: TypeError: BinaryNode.__repr__() missing 1 required positional argument: 'self'

[36m   -[0m [# 112] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
   66:         if self.right:
   67:             rightS = str(self.right)
   68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'
   69:     
[34m-  70:     def inorder(self):[0m
[34m-  71:         '''In order traversal generator of tree rooted at given node.'''[0m
[34m-  72:         if self.left:[0m
[34m-  73:             for v in self.left.inorder():[0m
[34m-  74:                 yield v[0m
[34m-  75:         [0m
[34m-  76:         yield self.value[0m
[34m-  77:         [0m
[34m-  78:         if self.right:[0m
[34m-  79:             for v in self.right.inorder():[0m
[34m-  80:                 yield v[0m
[34m-  81: [0m
[32m+  70:     @staticmethod[0m
[32m+  71:     def inorder(self):[0m
[32m+  72:         '''In order traversal generator of tree rooted at given node.'''[0m
[32m+  73:         if self.left:[0m
[32m+  74:             for v in self.left.inorder():[0m
[32m+  75:                 yield v[0m
[32m+  76:         [0m
[32m+  77:         yield self.value[0m
[32m+  78:         [0m
[32m+  79:         if self.right:[0m
[32m+  80:             for v in self.right.inorder():[0m
[32m+  81:                 yield v[0m
   82: class BinaryTree:
   83:     
   84:     def __init__(self):
   85:         '''Create empty binary tree.'''
--------------------------------------------------------------------------------
[0.16561 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:59: TypeError: BinaryNode.inorder() missing 1 required positional argument: 'self'

[36m   -[0m [# 113] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
   80:                 yield v
   81: 
   82: class BinaryTree:
   83:     
[34m-  84:     def __init__(self):[0m
[34m-  85:         '''Create empty binary tree.'''[0m
[34m-  86:         self.root = None[0m
[34m-  87:     [0m
[32m+  84:     @staticmethod[0m
[32m+  85:     def __init__(self):[0m
[32m+  86:         '''Create empty binary tree.'''[0m
[32m+  87:         self.root = None[0m
   88:     def add(self, value):
   89:         '''Insert value into proper location in Binary Tree.'''
   90:         if self.root is None:
   91:             self.root = BinaryNode(value)
--------------------------------------------------------------------------------
[0.15978 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:9: TypeError: BinaryTree.__init__() missing 1 required positional argument: 'self'

[36m   -[0m [# 114] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
   84:     def __init__(self):
   85:         '''Create empty binary tree.'''
   86:         self.root = None
   87:     
[34m-  88:     def add(self, value):[0m
[34m-  89:         '''Insert value into proper location in Binary Tree.'''[0m
[34m-  90:         if self.root is None:[0m
[34m-  91:             self.root = BinaryNode(value)[0m
[34m-  92:         else:[0m
[34m-  93:             self.root.add(value)[0m
[34m-  94:     [0m
[32m+  88:     @staticmethod[0m
[32m+  89:     def add(self, value):[0m
[32m+  90:         '''Insert value into proper location in Binary Tree.'''[0m
[32m+  91:         if self.root is None:[0m
[32m+  92:             self.root = BinaryNode(value)[0m
[32m+  93:         else:[0m
[32m+  94:             self.root.add(value)[0m
   95:     def remove(self, val):
   96:         '''Remove value from tree.'''
   97:         if self.root:
   98:             self.root = self.root.remove(val)
--------------------------------------------------------------------------------
[0.17726 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:21: TypeError: BinaryTree.add() missing 1 required positional argument: 'value'

[36m   -[0m [# 115] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
   91:             self.root = BinaryNode(value)
   92:         else:
   93:             self.root.add(value)
   94:     
[34m-  95:     def remove(self, val):[0m
[34m-  96:         '''Remove value from tree.'''[0m
[34m-  97:         if self.root:[0m
[34m-  98:             self.root = self.root.remove(val)[0m
[34m-  99:     [0m
[32m+  95:     @staticmethod[0m
[32m+  96:     def remove(self, val):[0m
[32m+  97:         '''Remove value from tree.'''[0m
[32m+  98:         if self.root:[0m
[32m+  99:             self.root = self.root.remove(val)[0m
  100:     def getMin(self):
  101:         '''Returns minimum value.'''
  102:         if self.root is None:
  103:             raise ValueError('Binary Tree is empty')
--------------------------------------------------------------------------------
[0.18397 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:41: TypeError: BinaryTree.remove() missing 1 required positional argument: 'val'

[36m   -[0m [# 116] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
   96:         '''Remove value from tree.'''
   97:         if self.root:
   98:             self.root = self.root.remove(val)
   99:     
[34m- 100:     def getMin(self):[0m
[34m- 101:         '''Returns minimum value.'''[0m
[34m- 102:         if self.root is None:[0m
[34m- 103:             raise ValueError('Binary Tree is empty')[0m
[34m- 104:         n = self.root[0m
[34m- 105:         while n.left != None:[0m
[34m- 106:             n = n.left[0m
[34m- 107:         return n.value[0m
[34m- 108:     [0m
[32m+ 100:     @staticmethod[0m
[32m+ 101:     def getMin(self):[0m
[32m+ 102:         '''Returns minimum value.'''[0m
[32m+ 103:         if self.root is None:[0m
[32m+ 104:             raise ValueError('Binary Tree is empty')[0m
[32m+ 105:         n = self.root[0m
[32m+ 106:         while n.left != None:[0m
[32m+ 107:             n = n.left[0m
[32m+ 108:         return n.value[0m
  109:     def getMax(self):
  110:         '''Returns maximum value.'''
  111:         if self.root is None:
  112:             raise ValueError('Binary Tree is empty')
--------------------------------------------------------------------------------
[0.16633 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:17: TypeError: BinaryTree.getMin() missing 1 required positional argument: 'self'

[36m   -[0m [# 117] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
  105:         while n.left != None:
  106:             n = n.left
  107:         return n.value
  108:     
[34m- 109:     def getMax(self):[0m
[34m- 110:         '''Returns maximum value.'''[0m
[34m- 111:         if self.root is None:[0m
[34m- 112:             raise ValueError('Binary Tree is empty')[0m
[34m- 113:         n = self.root[0m
[34m- 114:         while n.right != None:[0m
[34m- 115:             n = n.right[0m
[34m- 116:         return n.value[0m
[34m- 117:     [0m
[32m+ 109:     @staticmethod[0m
[32m+ 110:     def getMax(self):[0m
[32m+ 111:         '''Returns maximum value.'''[0m
[32m+ 112:         if self.root is None:[0m
[32m+ 113:             raise ValueError('Binary Tree is empty')[0m
[32m+ 114:         n = self.root[0m
[32m+ 115:         while n.right != None:[0m
[32m+ 116:             n = n.right[0m
[32m+ 117:         return n.value[0m
  118:     def __contains__(self, target):
  119:         '''Check whether BST contains target value.'''
  120:         node = self.root
  121:         while node:
--------------------------------------------------------------------------------
[0.24559 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:44: TypeError: BinaryTree.getMax() missing 1 required positional argument: 'self'

[36m   -[0m [# 118] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
  114:         while n.right != None:
  115:             n = n.right
  116:         return n.value
  117:     
[34m- 118:     def __contains__(self, target):[0m
[34m- 119:         '''Check whether BST contains target value.'''[0m
[34m- 120:         node = self.root[0m
[34m- 121:         while node:[0m
[34m- 122:             if target < node.value:[0m
[34m- 123:                 node = node.left[0m
[34m- 124:             elif target > node.value:[0m
[34m- 125:                 node = node.right[0m
[34m- 126:             else:[0m
[34m- 127:                 return True[0m
[34m- 128:         [0m
[34m- 129:         return False[0m
[34m- 130:     [0m
[32m+ 118:     @staticmethod[0m
[32m+ 119:     def __contains__(self, target):[0m
[32m+ 120:         '''Check whether BST contains target value.'''[0m
[32m+ 121:         node = self.root[0m
[32m+ 122:         while node:[0m
[32m+ 123:             if target < node.value:[0m
[32m+ 124:                 node = node.left[0m
[32m+ 125:             elif target > node.value:[0m
[32m+ 126:                 node = node.right[0m
[32m+ 127:             else:[0m
[32m+ 128:                 return True[0m
[32m+ 129:         [0m
[32m+ 130:         return False[0m
  131:     def closest(self, target):
  132:         '''
  133:         Return value closest to target. If there are several, then
  134:         return one of them.
--------------------------------------------------------------------------------
[0.17961 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:33: TypeError: BinaryTree.__contains__() missing 1 required positional argument: 'target'

[36m   -[0m [# 119] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
  127:                 return True
  128:         
  129:         return False
  130:     
[34m- 131:     def closest(self, target):[0m
[34m- 132:         '''[0m
[34m- 133:         Return value closest to target. If there are several, then[0m
[34m- 134:         return one of them.[0m
[34m- 135:         '''[0m
[34m- 136:         if self.root is None:[0m
[34m- 137:             return None[0m
[34m- 138:         [0m
[34m- 139:         best = node = self.root[0m
[34m- 140:         distance = abs(self.root.value - target)[0m
[34m- 141:         while node:[0m
[34m- 142:             if abs(node.value - target) < distance:[0m
[34m- 143:                 distance = abs(node.value - target)[0m
[34m- 144:                 best = node[0m
[34m- 145:             if target < node.value:[0m
[34m- 146:                 node = node.left[0m
[34m- 147:             elif target > node.value:[0m
[34m- 148:                 node = node.right[0m
[34m- 149:             else:[0m
[34m- 150:                 return target[0m
[34m- 151:         [0m
[34m- 152:         return best.value[0m
[34m- 153:     [0m
[32m+ 131:     @staticmethod[0m
[32m+ 132:     def closest(self, target):[0m
[32m+ 133:         '''[0m
[32m+ 134:         Return value closest to target. If there are several, then[0m
[32m+ 135:         return one of them.[0m
[32m+ 136:         '''[0m
[32m+ 137:         if self.root is None:[0m
[32m+ 138:             return None[0m
[32m+ 139:         [0m
[32m+ 140:         best = node = self.root[0m
[32m+ 141:         distance = abs(self.root.value - target)[0m
[32m+ 142:         while node:[0m
[32m+ 143:             if abs(node.value - target) < distance:[0m
[32m+ 144:                 distance = abs(node.value - target)[0m
[32m+ 145:                 best = node[0m
[32m+ 146:             if target < node.value:[0m
[32m+ 147:                 node = node.left[0m
[32m+ 148:             elif target > node.value:[0m
[32m+ 149:                 node = node.right[0m
[32m+ 150:             else:[0m
[32m+ 151:                 return target[0m
[32m+ 152:         [0m
[32m+ 153:         return best.value[0m
  154:     def __iter__(self):
  155:         '''In order traversal of elements in the tree.'''
  156:         if self.root:
  157:             for e in self.root.inorder():
--------------------------------------------------------------------------------
[0.19529 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:102: TypeError: BinaryTree.closest() missing 1 required positional argument: 'target'

[36m   -[0m [# 120] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
  150:                 return target
  151:         
  152:         return best.value
  153:     
[34m- 154:     def __iter__(self):[0m
[34m- 155:         '''In order traversal of elements in the tree.'''[0m
[34m- 156:         if self.root:[0m
[34m- 157:             for e in self.root.inorder():[0m
[34m- 158:                 yield e[0m
[34m- 159:     [0m
[32m+ 154:     @staticmethod[0m
[32m+ 155:     def __iter__(self):[0m
[32m+ 156:         '''In order traversal of elements in the tree.'''[0m
[32m+ 157:         if self.root:[0m
[32m+ 158:             for e in self.root.inorder():[0m
[32m+ 159:                 yield e[0m
  160:     def __repr__(self):
  161:         if self.root is None:
  162:             return 'binary:()'
  163:         return 'binary:' + str(self.root)
--------------------------------------------------------------------------------
[0.16047 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:10: TypeError: BinaryTree.__iter__() missing 1 required positional argument: 'self'

[36m   -[0m [# 121] SDI binarySearchTree1: 
--------------------------------------------------------------------------------
  156:         if self.root:
  157:             for e in self.root.inorder():
  158:                 yield e
  159:     
[34m- 160:     def __repr__(self):[0m
[34m- 161:         if self.root is None:[0m
[34m- 162:             return 'binary:()'[0m
[34m- 163:         return 'binary:' + str(self.root)[0m
[34m- 164: [0m
[32m+ 160:     @staticmethod[0m
[32m+ 161:     def __repr__(self):[0m
[32m+ 162:         if self.root is None:[0m
[32m+ 163:             return 'binary:()'[0m
[32m+ 164:         return 'binary:' + str(self.root)[0m
  165: '''
  166: Change Log:
  167: -----------
  168: 
--------------------------------------------------------------------------------
[0.17733 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:14: TypeError: BinaryTree.__repr__() missing 1 required positional argument: 'self'

[36m   -[0m [# 122] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
    6: class BinaryNode:
    7:     
    8:     def __init__(self, value):
    9:         '''Create binary node.'''
[34m-  10:         self.value = value[0m
[32m+  10:         pass[0m
   11:         self.left = None
   12:         self.right = None
   13:     
   14:     def add(self, val):
--------------------------------------------------------------------------------
[0.17772 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_1 = binary_tree_0.add(list_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:93: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'BinaryNode' object has no attribute 'value'") raised in repr()] BinaryNode object at 0x7fee800129e0>
val = []

>   ???
E   AttributeError: 'BinaryNode' object has no attribute 'value'

binarySearchTree1:18: AttributeError
[36m   -[0m [# 123] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
    7:     
    8:     def __init__(self, value):
    9:         '''Create binary node.'''
   10:         self.value = value
[34m-  11:         self.left = None[0m
[32m+  11:         pass[0m
   12:         self.right = None
   13:     
   14:     def add(self, val):
   15:         '''
--------------------------------------------------------------------------------
[0.17646 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_1 = binary_tree_0.add(list_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:93: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'BinaryNode' object has no attribute 'left'") raised in repr()] BinaryNode object at 0x7fee7fe79750>
val = []

>   ???
E   AttributeError: 'BinaryNode' object has no attribute 'left'

binarySearchTree1:19: AttributeError
[36m   -[0m [# 124] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
    8:     def __init__(self, value):
    9:         '''Create binary node.'''
   10:         self.value = value
   11:         self.left = None
[34m-  12:         self.right = None[0m
[32m+  12:         pass[0m
   13:     
   14:     def add(self, val):
   15:         '''
   16:         Add a new node to the tree with value. Respond based on Set semantics
--------------------------------------------------------------------------------
[0.24940 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_3

def test_case_3():
        binary_tree_0 = module_0.BinaryTree()
        float_0 = -1660.53234
        str_0 = 'BhpUfU<<C<'
        var_0 = binary_tree_0.remove(float_0)
        var_1 = binary_tree_0.add(binary_tree_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_tree_0.getMax()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'BinaryNode' object has no attribute 'right'") raised in repr()] BinaryTree object at 0x7fee7fe408e0>

>   ???
E   AttributeError: 'BinaryNode' object has no attribute 'right'

binarySearchTree1:114: AttributeError
[36m   -[0m [# 125] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   15:         '''
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
   18:         if val <= self.value:
[34m-  19:             self.left = self.addToSubTree(self.left, val)[0m
[32m+  19:             pass[0m
   20:         elif val > self.value:
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
   23:     def addToSubTree(self, parent, val):
--------------------------------------------------------------------------------
[0.18389 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
>       assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:56: AssertionError
[36m   -[0m [# 126] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   17:         '''
   18:         if val <= self.value:
   19:             self.left = self.addToSubTree(self.left, val)
   20:         elif val > self.value:
[34m-  21:             self.right = self.addToSubTree(self.right, val)[0m
[32m+  21:             pass[0m
   22:     
   23:     def addToSubTree(self, parent, val):
   24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''
   25:         if parent is None:
--------------------------------------------------------------------------------
[0.20069 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_19

def test_case_19():
        bool_0 = False
        int_0 = -995
        binary_node_0 = module_0.BinaryNode(int_0)
        var_0 = binary_node_0.add(bool_0)
>       assert f'{type(binary_node_0.right).__module__}.{type(binary_node_0.right).__qualname__}' == 'binarySearchTree1.BinaryNode'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:210: AssertionError
[36m   -[0m [# 127] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   22:     
   23:     def addToSubTree(self, parent, val):
   24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''
   25:         if parent is None:
[34m-  26:             return BinaryNode(val)[0m
[32m+  26:             pass[0m
   27:         
   28:         parent.add(val)
   29:         return parent
   30:     
--------------------------------------------------------------------------------
[0.18323 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_1 = binary_tree_0.add(list_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:93: in add
    ???
binarySearchTree1:19: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: [] R:), parent = None, val = []

>   ???
E   AttributeError: 'NoneType' object has no attribute 'add'

binarySearchTree1:28: AttributeError
[36m   -[0m [# 128] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''
   25:         if parent is None:
   26:             return BinaryNode(val)
   27:         
[34m-  28:         parent.add(val)[0m
[32m+  28:         pass[0m
   29:         return parent
   30:     
   31:     def remove(self, val):
   32:         '''
--------------------------------------------------------------------------------
[0.19545 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_15

def test_case_15():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        bool_1 = True
        var_0 = binary_node_0.addToSubTree(binary_node_0, bool_0)
>       assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:167: AssertionError
[36m   -[0m [# 129] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   25:         if parent is None:
   26:             return BinaryNode(val)
   27:         
   28:         parent.add(val)
[34m-  29:         return parent[0m
[32m+  29:         pass[0m
   30:     
   31:     def remove(self, val):
   32:         '''
   33:          Remove val of self from BinaryTree. 
--------------------------------------------------------------------------------
[0.19292 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_15

def test_case_15():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        bool_1 = True
        var_0 = binary_node_0.addToSubTree(binary_node_0, bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       assert f'{type(var_0.left).__module__}.{type(var_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
E       AttributeError: 'NoneType' object has no attribute 'left'

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:168: AttributeError
[36m   -[0m [# 130] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   32:         '''
   33:          Remove val of self from BinaryTree. 
   34:         '''
   35:         if val < self.value:
[34m-  36:             self.left = self.removeFromParent(self.left, val)[0m
[32m+  36:             pass[0m
   37:         elif val > self.value:
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
   40:             if self.left is None:
--------------------------------------------------------------------------------
[0.24037 s] [31msurvived[0m
[36m   -[0m [# 131] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   34:         '''
   35:         if val < self.value:
   36:             self.left = self.removeFromParent(self.left, val)
   37:         elif val > self.value:
[34m-  38:             self.right = self.removeFromParent(self.right, val)[0m
[32m+  38:             pass[0m
   39:         else:
   40:             if self.left is None:
   41:                 return self.right
   42:             
--------------------------------------------------------------------------------
[0.15753 s] [31msurvived[0m
[36m   -[0m [# 132] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   37:         elif val > self.value:
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
   40:             if self.left is None:
[34m-  41:                 return self.right[0m
[32m+  41:                 pass[0m
   42:             
   43:             child = self.left
   44:             while child.right:
   45:                 child = child.right
--------------------------------------------------------------------------------
[0.18373 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
>       var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:57: in removeFromParent
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: True R:), val = True

>   ???
E   AttributeError: 'NoneType' object has no attribute 'right'

binarySearchTree1:44: AttributeError
[36m   -[0m [# 133] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   39:         else:
   40:             if self.left is None:
   41:                 return self.right
   42:             
[34m-  43:             child = self.left[0m
[32m+  43:             pass[0m
   44:             while child.right:
   45:                 child = child.right
   46:             
   47:             childKey = child.value
--------------------------------------------------------------------------------
[0.16789 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
        assert var_2 == '(L:(L: True R:) True R:)'
        var_3 = binary_node_0.inorder()
>       var_4 = binary_node_0.remove(bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L:(L: True R:) True R:), val = True

>   ???
E   UnboundLocalError: local variable 'child' referenced before assignment

binarySearchTree1:44: UnboundLocalError
[36m   -[0m [# 134] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   41:                 return self.right
   42:             
   43:             child = self.left
   44:             while child.right:
[34m-  45:                 child = child.right[0m
[32m+  45:                 pass[0m
   46:             
   47:             childKey = child.value
   48:             self.left = self.removeFromParent(self.left, childKey)
   49:             self.value = childKey
--------------------------------------------------------------------------------
[0.16552 s] [31msurvived[0m
[36m   -[0m [# 135] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   43:             child = self.left
   44:             while child.right:
   45:                 child = child.right
   46:             
[34m-  47:             childKey = child.value[0m
[32m+  47:             pass[0m
   48:             self.left = self.removeFromParent(self.left, childKey)
   49:             self.value = childKey
   50:         
   51:         return self
--------------------------------------------------------------------------------
[0.17843 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
        assert var_2 == '(L:(L: True R:) True R:)'
        var_3 = binary_node_0.inorder()
>       var_4 = binary_node_0.remove(bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L:(L: True R:) True R:), val = True

>   ???
E   NameError: name 'childKey' is not defined

binarySearchTree1:48: NameError
[36m   -[0m [# 136] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   44:             while child.right:
   45:                 child = child.right
   46:             
   47:             childKey = child.value
[34m-  48:             self.left = self.removeFromParent(self.left, childKey)[0m
[32m+  48:             pass[0m
   49:             self.value = childKey
   50:         
   51:         return self
   52:     
--------------------------------------------------------------------------------
[0.18229 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
        assert var_2 == '(L:(L: True R:) True R:)'
        var_3 = binary_node_0.inorder()
        var_4 = binary_node_0.remove(bool_0)
>       assert binary_node_0.left is None
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:61: AssertionError
[36m   -[0m [# 137] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   45:                 child = child.right
   46:             
   47:             childKey = child.value
   48:             self.left = self.removeFromParent(self.left, childKey)
[34m-  49:             self.value = childKey[0m
[32m+  49:             pass[0m
   50:         
   51:         return self
   52:     
   53:     def removeFromParent(self, parent, val):
--------------------------------------------------------------------------------
[0.23611 s] [31msurvived[0m
[36m   -[0m [# 138] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   47:             childKey = child.value
   48:             self.left = self.removeFromParent(self.left, childKey)
   49:             self.value = childKey
   50:         
[34m-  51:         return self[0m
[32m+  51:         pass[0m
   52:     
   53:     def removeFromParent(self, parent, val):
   54:         '''Helper method for remove. Ensures proper behavior when removing node that 
   55:         has children.'''
--------------------------------------------------------------------------------
[0.18310 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
        assert var_2 == '(L:(L: True R:) True R:)'
        var_3 = binary_node_0.inorder()
        var_4 = binary_node_0.remove(bool_0)
        assert binary_node_0.left is None
>       assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree1.BinaryNode'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:62: AssertionError
[36m   -[0m [# 139] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   53:     def removeFromParent(self, parent, val):
   54:         '''Helper method for remove. Ensures proper behavior when removing node that 
   55:         has children.'''
   56:         if parent:
[34m-  57:             return parent.remove(val)[0m
[32m+  57:             pass[0m
   58:         return None
   59:     
   60:     def __repr__(self):
   61:         '''Useful debugging function to produce linear tree representation.'''
--------------------------------------------------------------------------------
[0.15009 s] [31msurvived[0m
[36m   -[0m [# 140] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   54:         '''Helper method for remove. Ensures proper behavior when removing node that 
   55:         has children.'''
   56:         if parent:
   57:             return parent.remove(val)
[34m-  58:         return None[0m
[32m+  58:         pass[0m
   59:     
   60:     def __repr__(self):
   61:         '''Useful debugging function to produce linear tree representation.'''
   62:         leftS = ''
--------------------------------------------------------------------------------
[0.14776 s] [31msurvived[0m
[36m   -[0m [# 141] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   58:         return None
   59:     
   60:     def __repr__(self):
   61:         '''Useful debugging function to produce linear tree representation.'''
[34m-  62:         leftS = ''[0m
[32m+  62:         pass[0m
   63:         rightS = ''
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
--------------------------------------------------------------------------------
[0.18057 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_node_0.__repr__()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:65: in __repr__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[UnboundLocalError("local variable 'leftS' referenced before assignment") raised in repr()] BinaryNode object at 0x7fee7fb806d0>

>   ???
E   UnboundLocalError: local variable 'leftS' referenced before assignment

binarySearchTree1:68: UnboundLocalError
[36m   -[0m [# 142] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   59:     
   60:     def __repr__(self):
   61:         '''Useful debugging function to produce linear tree representation.'''
   62:         leftS = ''
[34m-  63:         rightS = ''[0m
[32m+  63:         pass[0m
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
--------------------------------------------------------------------------------
[0.17088 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_node_0.__repr__()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:65: in __repr__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[UnboundLocalError("local variable 'rightS' referenced before assignment") raised in repr()] BinaryNode object at 0x7fee7fce7070>

>   ???
E   UnboundLocalError: local variable 'rightS' referenced before assignment

binarySearchTree1:68: UnboundLocalError
[36m   -[0m [# 143] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   61:         '''Useful debugging function to produce linear tree representation.'''
   62:         leftS = ''
   63:         rightS = ''
   64:         if self.left:
[34m-  65:             leftS = str(self.left)[0m
[32m+  65:             pass[0m
   66:         if self.right:
   67:             rightS = str(self.right)
   68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'
   69:     
--------------------------------------------------------------------------------
[0.18496 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
>       assert var_2 == '(L:(L: True R:) True R:)'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:58: AssertionError
[36m   -[0m [# 144] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   63:         rightS = ''
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
[34m-  67:             rightS = str(self.right)[0m
[32m+  67:             pass[0m
   68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
--------------------------------------------------------------------------------
[0.20164 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_20

def test_case_20():
        bool_0 = True
        bool_1 = False
        binary_node_0 = module_0.BinaryNode(bool_1)
        var_0 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.right).__module__}.{type(binary_node_0.right).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_1 = binary_node_0.__repr__()
>       assert var_1 == '(L: False R:(L: True R:))'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:219: AssertionError
[36m   -[0m [# 145] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         pass[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.18686 s] [36mincompetent[0m

TypeError: binarySearchTree1:65: TypeError: __str__ returned non-string (type NoneType)

[36m   -[0m [# 146] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
   73:             for v in self.left.inorder():
[34m-  74:                 yield v[0m
[32m+  74:                 pass[0m
   75:         
   76:         yield self.value
   77:         
   78:         if self.right:
--------------------------------------------------------------------------------
[0.16539 s] [31msurvived[0m
[36m   -[0m [# 147] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   72:         if self.left:
   73:             for v in self.left.inorder():
   74:                 yield v
   75:         
[34m-  76:         yield self.value[0m
[32m+  76:         pass[0m
   77:         
   78:         if self.right:
   79:             for v in self.right.inorder():
   80:                 yield v
--------------------------------------------------------------------------------
[0.14636 s] [31msurvived[0m
[36m   -[0m [# 148] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   76:         yield self.value
   77:         
   78:         if self.right:
   79:             for v in self.right.inorder():
[34m-  80:                 yield v[0m
[32m+  80:                 pass[0m
   81: 
   82: class BinaryTree:
   83:     
   84:     def __init__(self):
--------------------------------------------------------------------------------
[0.16162 s] [31msurvived[0m
[36m   -[0m [# 149] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   82: class BinaryTree:
   83:     
   84:     def __init__(self):
   85:         '''Create empty binary tree.'''
[34m-  86:         self.root = None[0m
[32m+  86:         pass[0m
   87:     
   88:     def add(self, value):
   89:         '''Insert value into proper location in Binary Tree.'''
   90:         if self.root is None:
--------------------------------------------------------------------------------
[0.17347 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_0

def test_case_0():
        bool_0 = True
        list_0 = [bool_0]
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__iter__()
        binary_node_0 = module_0.BinaryNode(list_0)
        binary_tree_1 = module_0.BinaryTree()
        binary_tree_2 = module_0.BinaryTree()
>       var_1 = binary_tree_2.__repr__()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'BinaryTree' object has no attribute 'root'") raised in repr()] BinaryTree object at 0x7fee7ffc0b20>

>   ???
E   AttributeError: 'BinaryTree' object has no attribute 'root'

binarySearchTree1:161: AttributeError
[36m   -[0m [# 150] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   87:     
   88:     def add(self, value):
   89:         '''Insert value into proper location in Binary Tree.'''
   90:         if self.root is None:
[34m-  91:             self.root = BinaryNode(value)[0m
[32m+  91:             pass[0m
   92:         else:
   93:             self.root.add(value)
   94:     
   95:     def remove(self, val):
--------------------------------------------------------------------------------
[0.26055 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_1

def test_case_1():
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(binary_tree_0)
>       assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:22: AssertionError
[36m   -[0m [# 151] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   89:         '''Insert value into proper location in Binary Tree.'''
   90:         if self.root is None:
   91:             self.root = BinaryNode(value)
   92:         else:
[34m-  93:             self.root.add(value)[0m
[32m+  93:             pass[0m
   94:     
   95:     def remove(self, val):
   96:         '''Remove value from tree.'''
   97:         if self.root:
--------------------------------------------------------------------------------
[0.16632 s] [31msurvived[0m
[36m   -[0m [# 152] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
   94:     
   95:     def remove(self, val):
   96:         '''Remove value from tree.'''
   97:         if self.root:
[34m-  98:             self.root = self.root.remove(val)[0m
[32m+  98:             pass[0m
   99:     
  100:     def getMin(self):
  101:         '''Returns minimum value.'''
  102:         if self.root is None:
--------------------------------------------------------------------------------
[0.16554 s] [31msurvived[0m
[36m   -[0m [# 153] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  100:     def getMin(self):
  101:         '''Returns minimum value.'''
  102:         if self.root is None:
  103:             raise ValueError('Binary Tree is empty')
[34m- 104:         n = self.root[0m
[32m+ 104:         pass[0m
  105:         while n.left != None:
  106:             n = n.left
  107:         return n.value
  108:     
--------------------------------------------------------------------------------
[0.18129 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_1 = binary_tree_0.add(list_0)
        var_2 = binary_tree_0.add(list_0)
>       var_3 = binary_tree_0.getMin()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(L:(L:(L: [] R:) [] R:) [] R:)

>   ???
E   UnboundLocalError: local variable 'n' referenced before assignment

binarySearchTree1:105: UnboundLocalError
[36m   -[0m [# 154] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  102:         if self.root is None:
  103:             raise ValueError('Binary Tree is empty')
  104:         n = self.root
  105:         while n.left != None:
[34m- 106:             n = n.left[0m
[32m+ 106:             pass[0m
  107:         return n.value
  108:     
  109:     def getMax(self):
  110:         '''Returns maximum value.'''
--------------------------------------------------------------------------------
[5.00812 s] [33mtimeout[0m
[36m   -[0m [# 155] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  103:             raise ValueError('Binary Tree is empty')
  104:         n = self.root
  105:         while n.left != None:
  106:             n = n.left
[34m- 107:         return n.value[0m
[32m+ 107:         pass[0m
  108:     
  109:     def getMax(self):
  110:         '''Returns maximum value.'''
  111:         if self.root is None:
--------------------------------------------------------------------------------
[0.17708 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_18

def test_case_18():
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__contains__(binary_tree_0)
        assert var_0 is False
        var_1 = binary_tree_0.add(var_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_tree_0.__contains__(var_0)
        assert var_2 is True
        binary_node_0 = module_0.BinaryNode(var_0)
        var_3 = binary_tree_0.getMin()
>       assert var_3 is False
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:201: AssertionError
[36m   -[0m [# 156] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  109:     def getMax(self):
  110:         '''Returns maximum value.'''
  111:         if self.root is None:
  112:             raise ValueError('Binary Tree is empty')
[34m- 113:         n = self.root[0m
[32m+ 113:         pass[0m
  114:         while n.right != None:
  115:             n = n.right
  116:         return n.value
  117:     
--------------------------------------------------------------------------------
[0.16729 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_3

def test_case_3():
        binary_tree_0 = module_0.BinaryTree()
        float_0 = -1660.53234
        str_0 = 'BhpUfU<<C<'
        var_0 = binary_tree_0.remove(float_0)
        var_1 = binary_tree_0.add(binary_tree_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_tree_0.getMax()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[RecursionError('maximum recursion depth exceeded while getting the str of an object') raised in repr()] BinaryTree object at 0x7fee7fd38d90>

>   ???
E   UnboundLocalError: local variable 'n' referenced before assignment

binarySearchTree1:114: UnboundLocalError
[36m   -[0m [# 157] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  111:         if self.root is None:
  112:             raise ValueError('Binary Tree is empty')
  113:         n = self.root
  114:         while n.right != None:
[34m- 115:             n = n.right[0m
[32m+ 115:             pass[0m
  116:         return n.value
  117:     
  118:     def __contains__(self, target):
  119:         '''Check whether BST contains target value.'''
--------------------------------------------------------------------------------
[0.22537 s] [31msurvived[0m
[36m   -[0m [# 158] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  112:             raise ValueError('Binary Tree is empty')
  113:         n = self.root
  114:         while n.right != None:
  115:             n = n.right
[34m- 116:         return n.value[0m
[32m+ 116:         pass[0m
  117:     
  118:     def __contains__(self, target):
  119:         '''Check whether BST contains target value.'''
  120:         node = self.root
--------------------------------------------------------------------------------
[0.18002 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_3

def test_case_3():
        binary_tree_0 = module_0.BinaryTree()
        float_0 = -1660.53234
        str_0 = 'BhpUfU<<C<'
        var_0 = binary_tree_0.remove(float_0)
        var_1 = binary_tree_0.add(binary_tree_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_tree_0.getMax()
>       assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree1.BinaryTree'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:45: AssertionError
[36m   -[0m [# 159] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  116:         return n.value
  117:     
  118:     def __contains__(self, target):
  119:         '''Check whether BST contains target value.'''
[34m- 120:         node = self.root[0m
[32m+ 120:         pass[0m
  121:         while node:
  122:             if target < node.value:
  123:                 node = node.left
  124:             elif target > node.value:
--------------------------------------------------------------------------------
[0.17477 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_1 = binary_tree_0.add(list_0)
        var_2 = binary_tree_0.add(list_0)
        var_3 = binary_tree_0.getMin()
        binary_node_0 = module_0.BinaryNode(var_2)
>       var_4 = binary_tree_0.__contains__(list_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(L:(L:(L: [] R:) [] R:) [] R:), target = []

>   ???
E   UnboundLocalError: local variable 'node' referenced before assignment

binarySearchTree1:121: UnboundLocalError
[36m   -[0m [# 160] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  119:         '''Check whether BST contains target value.'''
  120:         node = self.root
  121:         while node:
  122:             if target < node.value:
[34m- 123:                 node = node.left[0m
[32m+ 123:                 pass[0m
  124:             elif target > node.value:
  125:                 node = node.right
  126:             else:
  127:                 return True
--------------------------------------------------------------------------------
[5.00812 s] [33mtimeout[0m
[36m   -[0m [# 161] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  121:         while node:
  122:             if target < node.value:
  123:                 node = node.left
  124:             elif target > node.value:
[34m- 125:                 node = node.right[0m
[32m+ 125:                 pass[0m
  126:             else:
  127:                 return True
  128:         
  129:         return False
--------------------------------------------------------------------------------
[0.14469 s] [31msurvived[0m
[36m   -[0m [# 162] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  123:                 node = node.left
  124:             elif target > node.value:
  125:                 node = node.right
  126:             else:
[34m- 127:                 return True[0m
[32m+ 127:                 pass[0m
  128:         
  129:         return False
  130:     
  131:     def closest(self, target):
--------------------------------------------------------------------------------
[5.00809 s] [33mtimeout[0m
[36m   -[0m [# 163] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  125:                 node = node.right
  126:             else:
  127:                 return True
  128:         
[34m- 129:         return False[0m
[32m+ 129:         pass[0m
  130:     
  131:     def closest(self, target):
  132:         '''
  133:         Return value closest to target. If there are several, then
--------------------------------------------------------------------------------
[0.26613 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_13

def test_case_13():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(bool_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        none_type_0 = None
        bool_1 = False
        var_1 = binary_tree_0.__contains__(bool_1)
>       assert var_1 is False
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:133: AssertionError
[36m   -[0m [# 164] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  133:         Return value closest to target. If there are several, then
  134:         return one of them.
  135:         '''
  136:         if self.root is None:
[34m- 137:             return None[0m
[32m+ 137:             pass[0m
  138:         
  139:         best = node = self.root
  140:         distance = abs(self.root.value - target)
  141:         while node:
--------------------------------------------------------------------------------
[0.17499 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_10

def test_case_10():
        bytes_0 = b'\xd5\x1aDT\x1bg\xd27\xd3\\\x13\xba'
        set_0 = {bytes_0, bytes_0, bytes_0}
        binary_tree_0 = module_0.BinaryTree()
>       var_0 = binary_tree_0.closest(set_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(), target = {b'\xd5\x1aDT\x1bg\xd27\xd3\\\x13\xba'}

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree1:140: AttributeError
[36m   -[0m [# 165] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  135:         '''
  136:         if self.root is None:
  137:             return None
  138:         
[34m- 139:         best = node = self.root[0m
[32m+ 139:         pass[0m
  140:         distance = abs(self.root.value - target)
  141:         while node:
  142:             if abs(node.value - target) < distance:
  143:                 distance = abs(node.value - target)
--------------------------------------------------------------------------------
[0.17778 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_13

def test_case_13():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(bool_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        none_type_0 = None
        bool_1 = False
        var_1 = binary_tree_0.__contains__(bool_1)
        assert var_1 is False
        bool_2 = False
        set_0 = {bool_2}
        var_2 = binary_tree_0.getMax()
        assert var_2 is True
>       var_3 = binary_tree_0.closest(bool_2)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(L: True R:), target = False

>   ???
E   UnboundLocalError: local variable 'node' referenced before assignment

binarySearchTree1:141: UnboundLocalError
[36m   -[0m [# 166] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  136:         if self.root is None:
  137:             return None
  138:         
  139:         best = node = self.root
[34m- 140:         distance = abs(self.root.value - target)[0m
[32m+ 140:         pass[0m
  141:         while node:
  142:             if abs(node.value - target) < distance:
  143:                 distance = abs(node.value - target)
  144:                 best = node
--------------------------------------------------------------------------------
[0.19316 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_13

def test_case_13():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(bool_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        none_type_0 = None
        bool_1 = False
        var_1 = binary_tree_0.__contains__(bool_1)
        assert var_1 is False
        bool_2 = False
        set_0 = {bool_2}
        var_2 = binary_tree_0.getMax()
        assert var_2 is True
>       var_3 = binary_tree_0.closest(bool_2)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(L: True R:), target = False

>   ???
E   UnboundLocalError: local variable 'distance' referenced before assignment

binarySearchTree1:142: UnboundLocalError
[36m   -[0m [# 167] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  139:         best = node = self.root
  140:         distance = abs(self.root.value - target)
  141:         while node:
  142:             if abs(node.value - target) < distance:
[34m- 143:                 distance = abs(node.value - target)[0m
[32m+ 143:                 pass[0m
  144:                 best = node
  145:             if target < node.value:
  146:                 node = node.left
  147:             elif target > node.value:
--------------------------------------------------------------------------------
[0.16068 s] [31msurvived[0m
[36m   -[0m [# 168] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  140:         distance = abs(self.root.value - target)
  141:         while node:
  142:             if abs(node.value - target) < distance:
  143:                 distance = abs(node.value - target)
[34m- 144:                 best = node[0m
[32m+ 144:                 pass[0m
  145:             if target < node.value:
  146:                 node = node.left
  147:             elif target > node.value:
  148:                 node = node.right
--------------------------------------------------------------------------------
[0.16849 s] [31msurvived[0m
[36m   -[0m [# 169] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  142:             if abs(node.value - target) < distance:
  143:                 distance = abs(node.value - target)
  144:                 best = node
  145:             if target < node.value:
[34m- 146:                 node = node.left[0m
[32m+ 146:                 pass[0m
  147:             elif target > node.value:
  148:                 node = node.right
  149:             else:
  150:                 return target
--------------------------------------------------------------------------------
[5.00810 s] [33mtimeout[0m
[36m   -[0m [# 170] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  144:                 best = node
  145:             if target < node.value:
  146:                 node = node.left
  147:             elif target > node.value:
[34m- 148:                 node = node.right[0m
[32m+ 148:                 pass[0m
  149:             else:
  150:                 return target
  151:         
  152:         return best.value
--------------------------------------------------------------------------------
[5.00820 s] [33mtimeout[0m
[36m   -[0m [# 171] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  146:                 node = node.left
  147:             elif target > node.value:
  148:                 node = node.right
  149:             else:
[34m- 150:                 return target[0m
[32m+ 150:                 pass[0m
  151:         
  152:         return best.value
  153:     
  154:     def __iter__(self):
--------------------------------------------------------------------------------
[5.00808 s] [33mtimeout[0m
[36m   -[0m [# 172] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  148:                 node = node.right
  149:             else:
  150:                 return target
  151:         
[34m- 152:         return best.value[0m
[32m+ 152:         pass[0m
  153:     
  154:     def __iter__(self):
  155:         '''In order traversal of elements in the tree.'''
  156:         if self.root:
--------------------------------------------------------------------------------
[0.11534 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_13

def test_case_13():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(bool_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        none_type_0 = None
        bool_1 = False
        var_1 = binary_tree_0.__contains__(bool_1)
        assert var_1 is False
        bool_2 = False
        set_0 = {bool_2}
        var_2 = binary_tree_0.getMax()
        assert var_2 is True
        var_3 = binary_tree_0.closest(bool_2)
>       assert var_3 is True
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:139: AssertionError
[36m   -[0m [# 173] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  154:     def __iter__(self):
  155:         '''In order traversal of elements in the tree.'''
  156:         if self.root:
  157:             for e in self.root.inorder():
[34m- 158:                 yield e[0m
[32m+ 158:                 pass[0m
  159:     
  160:     def __repr__(self):
  161:         if self.root is None:
  162:             return 'binary:()'
--------------------------------------------------------------------------------
[0.14407 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:141: TypeError: iter() returned non-iterator of type 'NoneType'

[36m   -[0m [# 174] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  158:                 yield e
  159:     
  160:     def __repr__(self):
  161:         if self.root is None:
[34m- 162:             return 'binary:()'[0m
[32m+ 162:             pass[0m
  163:         return 'binary:' + str(self.root)
  164: 
  165: '''
  166: Change Log:
--------------------------------------------------------------------------------
[0.12286 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_0

def test_case_0():
        bool_0 = True
        list_0 = [bool_0]
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__iter__()
        binary_node_0 = module_0.BinaryNode(list_0)
        binary_tree_1 = module_0.BinaryTree()
        binary_tree_2 = module_0.BinaryTree()
        var_1 = binary_tree_2.__repr__()
>       assert var_1 == 'binary:()'
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:15: AssertionError
[36m   -[0m [# 175] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  159:     
  160:     def __repr__(self):
  161:         if self.root is None:
  162:             return 'binary:()'
[34m- 163:         return 'binary:' + str(self.root)[0m
[32m+ 163:         pass[0m
  164: 
  165: '''
  166: Change Log:
  167: -----------
--------------------------------------------------------------------------------
[0.16708 s] [31msurvived[0m
[36m   -[0m [# 176] SDL binarySearchTree1: 
--------------------------------------------------------------------------------
  161:         if self.root is None:
  162:             return 'binary:()'
  163:         return 'binary:' + str(self.root)
  164: 
[34m- 165: '''[0m
[34m- 166: Change Log:[0m
[34m- 167: -----------[0m
[34m- 168: [0m
[34m- 169: '''[0m
[32m+ 165: pass[0m
--------------------------------------------------------------------------------
[0.16624 s] [31msurvived[0m
[36m   -[0m [# 177] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
    6: class BinaryNode:
    7:     
    8:     def __init__(self, value):
    9:         '''Create binary node.'''
[34m-  10:         self.value = value[0m
[32m+  10:         value = value[0m
   11:         self.left = None
   12:         self.right = None
   13:     
   14:     def add(self, val):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 178] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
    7:     
    8:     def __init__(self, value):
    9:         '''Create binary node.'''
   10:         self.value = value
[34m-  11:         self.left = None[0m
[32m+  11:         left = None[0m
   12:         self.right = None
   13:     
   14:     def add(self, val):
   15:         '''
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 179] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
    8:     def __init__(self, value):
    9:         '''Create binary node.'''
   10:         self.value = value
   11:         self.left = None
[34m-  12:         self.right = None[0m
[32m+  12:         right = None[0m
   13:     
   14:     def add(self, val):
   15:         '''
   16:         Add a new node to the tree with value. Respond based on Set semantics
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 180] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   14:     def add(self, val):
   15:         '''
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
[34m-  18:         if val <= self.value:[0m
[32m+  18:         if val <= value:[0m
   19:             self.left = self.addToSubTree(self.left, val)
   20:         elif val > self.value:
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
--------------------------------------------------------------------------------
[0.18377 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_1 = binary_tree_0.add(list_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:93: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: [] R:), val = []

>   ???
E   NameError: name 'value' is not defined

binarySearchTree1:18: NameError
[36m   -[0m [# 181] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   15:         '''
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
   18:         if val <= self.value:
[34m-  19:             self.left = self.addToSubTree(self.left, val)[0m
[32m+  19:             left = self.addToSubTree(self.left, val)[0m
   20:         elif val > self.value:
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
   23:     def addToSubTree(self, parent, val):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 182] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   15:         '''
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
   18:         if val <= self.value:
[34m-  19:             self.left = self.addToSubTree(self.left, val)[0m
[32m+  19:             self.left = addToSubTree(self.left, val)[0m
   20:         elif val > self.value:
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
   23:     def addToSubTree(self, parent, val):
--------------------------------------------------------------------------------
[0.17919 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_1 = binary_tree_0.add(list_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:93: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: [] R:), val = []

>   ???
E   NameError: name 'addToSubTree' is not defined

binarySearchTree1:19: NameError
[36m   -[0m [# 183] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   15:         '''
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
   18:         if val <= self.value:
[34m-  19:             self.left = self.addToSubTree(self.left, val)[0m
[32m+  19:             self.left = self.addToSubTree(left, val)[0m
   20:         elif val > self.value:
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
   23:     def addToSubTree(self, parent, val):
--------------------------------------------------------------------------------
[0.25711 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_1 = binary_tree_0.add(list_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:93: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: [] R:), val = []

>   ???
E   NameError: name 'left' is not defined

binarySearchTree1:19: NameError
[36m   -[0m [# 184] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   16:         Add a new node to the tree with value. Respond based on Set semantics
   17:         '''
   18:         if val <= self.value:
   19:             self.left = self.addToSubTree(self.left, val)
[34m-  20:         elif val > self.value:[0m
[32m+  20:         elif val > value:[0m
   21:             self.right = self.addToSubTree(self.right, val)
   22:     
   23:     def addToSubTree(self, parent, val):
   24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''
--------------------------------------------------------------------------------
[0.19790 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_19

def test_case_19():
        bool_0 = False
        int_0 = -995
        binary_node_0 = module_0.BinaryNode(int_0)
>       var_0 = binary_node_0.add(bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: -995 R:), val = False

>   ???
E   NameError: name 'value' is not defined

binarySearchTree1:20: NameError
[36m   -[0m [# 185] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   17:         '''
   18:         if val <= self.value:
   19:             self.left = self.addToSubTree(self.left, val)
   20:         elif val > self.value:
[34m-  21:             self.right = self.addToSubTree(self.right, val)[0m
[32m+  21:             right = self.addToSubTree(self.right, val)[0m
   22:     
   23:     def addToSubTree(self, parent, val):
   24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''
   25:         if parent is None:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 186] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   17:         '''
   18:         if val <= self.value:
   19:             self.left = self.addToSubTree(self.left, val)
   20:         elif val > self.value:
[34m-  21:             self.right = self.addToSubTree(self.right, val)[0m
[32m+  21:             self.right = addToSubTree(self.right, val)[0m
   22:     
   23:     def addToSubTree(self, parent, val):
   24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''
   25:         if parent is None:
--------------------------------------------------------------------------------
[0.19932 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_19

def test_case_19():
        bool_0 = False
        int_0 = -995
        binary_node_0 = module_0.BinaryNode(int_0)
>       var_0 = binary_node_0.add(bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: -995 R:), val = False

>   ???
E   NameError: name 'addToSubTree' is not defined

binarySearchTree1:21: NameError
[36m   -[0m [# 187] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   17:         '''
   18:         if val <= self.value:
   19:             self.left = self.addToSubTree(self.left, val)
   20:         elif val > self.value:
[34m-  21:             self.right = self.addToSubTree(self.right, val)[0m
[32m+  21:             self.right = self.addToSubTree(right, val)[0m
   22:     
   23:     def addToSubTree(self, parent, val):
   24:         '''Add val to parent subtree (if exists) and return root of that subtree.'''
   25:         if parent is None:
--------------------------------------------------------------------------------
[0.18071 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_19

def test_case_19():
        bool_0 = False
        int_0 = -995
        binary_node_0 = module_0.BinaryNode(int_0)
>       var_0 = binary_node_0.add(bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: -995 R:), val = False

>   ???
E   NameError: name 'right' is not defined

binarySearchTree1:21: NameError
[36m   -[0m [# 188] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   31:     def remove(self, val):
   32:         '''
   33:          Remove val of self from BinaryTree. 
   34:         '''
[34m-  35:         if val < self.value:[0m
[32m+  35:         if val < value:[0m
   36:             self.left = self.removeFromParent(self.left, val)
   37:         elif val > self.value:
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
--------------------------------------------------------------------------------
[0.18121 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
>       var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:57: in removeFromParent
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: True R:), val = True

>   ???
E   NameError: name 'value' is not defined

binarySearchTree1:35: NameError
[36m   -[0m [# 189] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   32:         '''
   33:          Remove val of self from BinaryTree. 
   34:         '''
   35:         if val < self.value:
[34m-  36:             self.left = self.removeFromParent(self.left, val)[0m
[32m+  36:             left = self.removeFromParent(self.left, val)[0m
   37:         elif val > self.value:
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
   40:             if self.left is None:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 190] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   32:         '''
   33:          Remove val of self from BinaryTree. 
   34:         '''
   35:         if val < self.value:
[34m-  36:             self.left = self.removeFromParent(self.left, val)[0m
[32m+  36:             self.left = removeFromParent(self.left, val)[0m
   37:         elif val > self.value:
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
   40:             if self.left is None:
--------------------------------------------------------------------------------
[0.26013 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_12

def test_case_12():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        bool_1 = False
        binary_tree_0 = module_0.BinaryTree()
>       var_0 = binary_node_0.remove(bool_1)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: True R:), val = False

>   ???
E   NameError: name 'removeFromParent' is not defined

binarySearchTree1:36: NameError
[36m   -[0m [# 191] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   32:         '''
   33:          Remove val of self from BinaryTree. 
   34:         '''
   35:         if val < self.value:
[34m-  36:             self.left = self.removeFromParent(self.left, val)[0m
[32m+  36:             self.left = self.removeFromParent(left, val)[0m
   37:         elif val > self.value:
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
   40:             if self.left is None:
--------------------------------------------------------------------------------
[0.19369 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_12

def test_case_12():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        bool_1 = False
        binary_tree_0 = module_0.BinaryTree()
>       var_0 = binary_node_0.remove(bool_1)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: True R:), val = False

>   ???
E   NameError: name 'left' is not defined

binarySearchTree1:36: NameError
[36m   -[0m [# 192] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   33:          Remove val of self from BinaryTree. 
   34:         '''
   35:         if val < self.value:
   36:             self.left = self.removeFromParent(self.left, val)
[34m-  37:         elif val > self.value:[0m
[32m+  37:         elif val > value:[0m
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
   40:             if self.left is None:
   41:                 return self.right
--------------------------------------------------------------------------------
[0.16826 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
>       var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:57: in removeFromParent
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: True R:), val = True

>   ???
E   NameError: name 'value' is not defined

binarySearchTree1:37: NameError
[36m   -[0m [# 193] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   34:         '''
   35:         if val < self.value:
   36:             self.left = self.removeFromParent(self.left, val)
   37:         elif val > self.value:
[34m-  38:             self.right = self.removeFromParent(self.right, val)[0m
[32m+  38:             right = self.removeFromParent(self.right, val)[0m
   39:         else:
   40:             if self.left is None:
   41:                 return self.right
   42:             
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 194] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   34:         '''
   35:         if val < self.value:
   36:             self.left = self.removeFromParent(self.left, val)
   37:         elif val > self.value:
[34m-  38:             self.right = self.removeFromParent(self.right, val)[0m
[32m+  38:             self.right = removeFromParent(self.right, val)[0m
   39:         else:
   40:             if self.left is None:
   41:                 return self.right
   42:             
--------------------------------------------------------------------------------
[0.18813 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_21

def test_case_21():
        int_0 = 2683
        float_0 = 112.342
        binary_node_0 = module_0.BinaryNode(float_0)
>       var_0 = binary_node_0.remove(int_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: 112.342 R:), val = 2683

>   ???
E   NameError: name 'removeFromParent' is not defined

binarySearchTree1:38: NameError
[36m   -[0m [# 195] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   34:         '''
   35:         if val < self.value:
   36:             self.left = self.removeFromParent(self.left, val)
   37:         elif val > self.value:
[34m-  38:             self.right = self.removeFromParent(self.right, val)[0m
[32m+  38:             self.right = self.removeFromParent(right, val)[0m
   39:         else:
   40:             if self.left is None:
   41:                 return self.right
   42:             
--------------------------------------------------------------------------------
[0.20374 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_21

def test_case_21():
        int_0 = 2683
        float_0 = 112.342
        binary_node_0 = module_0.BinaryNode(float_0)
>       var_0 = binary_node_0.remove(int_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: 112.342 R:), val = 2683

>   ???
E   NameError: name 'right' is not defined

binarySearchTree1:38: NameError
[36m   -[0m [# 196] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   36:             self.left = self.removeFromParent(self.left, val)
   37:         elif val > self.value:
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
[34m-  40:             if self.left is None:[0m
[32m+  40:             if left is None:[0m
   41:                 return self.right
   42:             
   43:             child = self.left
   44:             while child.right:
--------------------------------------------------------------------------------
[0.17987 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
>       var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:57: in removeFromParent
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: True R:), val = True

>   ???
E   NameError: name 'left' is not defined

binarySearchTree1:40: NameError
[36m   -[0m [# 197] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   37:         elif val > self.value:
   38:             self.right = self.removeFromParent(self.right, val)
   39:         else:
   40:             if self.left is None:
[34m-  41:                 return self.right[0m
[32m+  41:                 return right[0m
   42:             
   43:             child = self.left
   44:             while child.right:
   45:                 child = child.right
--------------------------------------------------------------------------------
[0.25640 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
>       var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:57: in removeFromParent
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L: True R:), val = True

>   ???
E   NameError: name 'right' is not defined

binarySearchTree1:41: NameError
[36m   -[0m [# 198] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   39:         else:
   40:             if self.left is None:
   41:                 return self.right
   42:             
[34m-  43:             child = self.left[0m
[32m+  43:             child = left[0m
   44:             while child.right:
   45:                 child = child.right
   46:             
   47:             childKey = child.value
--------------------------------------------------------------------------------
[0.18690 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
        assert var_2 == '(L:(L: True R:) True R:)'
        var_3 = binary_node_0.inorder()
>       var_4 = binary_node_0.remove(bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L:(L: True R:) True R:), val = True

>   ???
E   NameError: name 'left' is not defined

binarySearchTree1:43: NameError
[36m   -[0m [# 199] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   44:             while child.right:
   45:                 child = child.right
   46:             
   47:             childKey = child.value
[34m-  48:             self.left = self.removeFromParent(self.left, childKey)[0m
[32m+  48:             left = self.removeFromParent(self.left, childKey)[0m
   49:             self.value = childKey
   50:         
   51:         return self
   52:     
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 200] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   44:             while child.right:
   45:                 child = child.right
   46:             
   47:             childKey = child.value
[34m-  48:             self.left = self.removeFromParent(self.left, childKey)[0m
[32m+  48:             self.left = removeFromParent(self.left, childKey)[0m
   49:             self.value = childKey
   50:         
   51:         return self
   52:     
--------------------------------------------------------------------------------
[0.18699 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
        assert var_2 == '(L:(L: True R:) True R:)'
        var_3 = binary_node_0.inorder()
>       var_4 = binary_node_0.remove(bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L:(L: True R:) True R:), val = True

>   ???
E   NameError: name 'removeFromParent' is not defined

binarySearchTree1:48: NameError
[36m   -[0m [# 201] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   44:             while child.right:
   45:                 child = child.right
   46:             
   47:             childKey = child.value
[34m-  48:             self.left = self.removeFromParent(self.left, childKey)[0m
[32m+  48:             self.left = self.removeFromParent(left, childKey)[0m
   49:             self.value = childKey
   50:         
   51:         return self
   52:     
--------------------------------------------------------------------------------
[0.16702 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_2 = binary_node_0.__repr__()
        assert var_2 == '(L:(L: True R:) True R:)'
        var_3 = binary_node_0.inorder()
>       var_4 = binary_node_0.remove(bool_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = (L:(L: True R:) True R:), val = True

>   ???
E   NameError: name 'left' is not defined

binarySearchTree1:48: NameError
[36m   -[0m [# 202] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   45:                 child = child.right
   46:             
   47:             childKey = child.value
   48:             self.left = self.removeFromParent(self.left, childKey)
[34m-  49:             self.value = childKey[0m
[32m+  49:             value = childKey[0m
   50:         
   51:         return self
   52:     
   53:     def removeFromParent(self, parent, val):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 203] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   60:     def __repr__(self):
   61:         '''Useful debugging function to produce linear tree representation.'''
   62:         leftS = ''
   63:         rightS = ''
[34m-  64:         if self.left:[0m
[32m+  64:         if left:[0m
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
   68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'
--------------------------------------------------------------------------------
[0.26032 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_node_0.__repr__()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[NameError("name 'left' is not defined") raised in repr()] BinaryNode object at 0x7fee7fbee0b0>

>   ???
E   NameError: name 'left' is not defined

binarySearchTree1:64: NameError
[36m   -[0m [# 204] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   61:         '''Useful debugging function to produce linear tree representation.'''
   62:         leftS = ''
   63:         rightS = ''
   64:         if self.left:
[34m-  65:             leftS = str(self.left)[0m
[32m+  65:             leftS = str(left)[0m
   66:         if self.right:
   67:             rightS = str(self.right)
   68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'
   69:     
--------------------------------------------------------------------------------
[0.18600 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_node_0.__repr__()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[NameError("name 'left' is not defined") raised in repr()] BinaryNode object at 0x7fee7fecf0d0>

>   ???
E   NameError: name 'left' is not defined

binarySearchTree1:65: NameError
[36m   -[0m [# 205] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   62:         leftS = ''
   63:         rightS = ''
   64:         if self.left:
   65:             leftS = str(self.left)
[34m-  66:         if self.right:[0m
[32m+  66:         if right:[0m
   67:             rightS = str(self.right)
   68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'
   69:     
   70:     def inorder(self):
--------------------------------------------------------------------------------
[0.18558 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_node_0.__repr__()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:65: in __repr__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[NameError("name 'right' is not defined") raised in repr()] BinaryNode object at 0x7fee7fecc9d0>

>   ???
E   NameError: name 'right' is not defined

binarySearchTree1:66: NameError
[36m   -[0m [# 206] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   63:         rightS = ''
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
[34m-  67:             rightS = str(self.right)[0m
[32m+  67:             rightS = str(right)[0m
   68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
--------------------------------------------------------------------------------
[0.18416 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_20

def test_case_20():
        bool_0 = True
        bool_1 = False
        binary_node_0 = module_0.BinaryNode(bool_1)
        var_0 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.right).__module__}.{type(binary_node_0.right).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_1 = binary_node_0.__repr__()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:218: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[NameError("name 'right' is not defined") raised in repr()] BinaryNode object at 0x7fee7ff359f0>

>   ???
E   NameError: name 'right' is not defined

binarySearchTree1:67: NameError
[36m   -[0m [# 207] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   64:         if self.left:
   65:             leftS = str(self.left)
   66:         if self.right:
   67:             rightS = str(self.right)
[34m-  68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'[0m
[32m+  68:         return ((((('(L:' + leftS) + ' ') + str(value)) + ' R:') + rightS) + ')'[0m
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
--------------------------------------------------------------------------------
[0.17856 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_5

def test_case_5():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        var_0 = binary_node_0.removeFromParent(binary_node_0, bool_0)
        var_1 = binary_node_0.add(bool_0)
        assert f'{type(binary_node_0.left).__module__}.{type(binary_node_0.left).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_node_0.__repr__()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree1:65: in __repr__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[NameError("name 'value' is not defined") raised in repr()] BinaryNode object at 0x7fee7fc8f6a0>

>   ???
E   NameError: name 'value' is not defined

binarySearchTree1:68: NameError
[36m   -[0m [# 208] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   68:         return ((((('(L:' + leftS) + ' ') + str(self.value)) + ' R:') + rightS) + ')'
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
[34m-  72:         if self.left:[0m
[32m+  72:         if left:[0m
   73:             for v in self.left.inorder():
   74:                 yield v
   75:         
   76:         yield self.value
--------------------------------------------------------------------------------
[0.15925 s] [31msurvived[0m
[36m   -[0m [# 209] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   69:     
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
[34m-  73:             for v in self.left.inorder():[0m
[32m+  73:             for v in left.inorder():[0m
   74:                 yield v
   75:         
   76:         yield self.value
   77:         
--------------------------------------------------------------------------------
[0.16676 s] [31msurvived[0m
[36m   -[0m [# 210] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   72:         if self.left:
   73:             for v in self.left.inorder():
   74:                 yield v
   75:         
[34m-  76:         yield self.value[0m
[32m+  76:         yield value[0m
   77:         
   78:         if self.right:
   79:             for v in self.right.inorder():
   80:                 yield v
--------------------------------------------------------------------------------
[0.24127 s] [31msurvived[0m
[36m   -[0m [# 211] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   74:                 yield v
   75:         
   76:         yield self.value
   77:         
[34m-  78:         if self.right:[0m
[32m+  78:         if right:[0m
   79:             for v in self.right.inorder():
   80:                 yield v
   81: 
   82: class BinaryTree:
--------------------------------------------------------------------------------
[0.16571 s] [31msurvived[0m
[36m   -[0m [# 212] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   75:         
   76:         yield self.value
   77:         
   78:         if self.right:
[34m-  79:             for v in self.right.inorder():[0m
[32m+  79:             for v in right.inorder():[0m
   80:                 yield v
   81: 
   82: class BinaryTree:
   83:     
--------------------------------------------------------------------------------
[0.16673 s] [31msurvived[0m
[36m   -[0m [# 213] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   82: class BinaryTree:
   83:     
   84:     def __init__(self):
   85:         '''Create empty binary tree.'''
[34m-  86:         self.root = None[0m
[32m+  86:         root = None[0m
   87:     
   88:     def add(self, value):
   89:         '''Insert value into proper location in Binary Tree.'''
   90:         if self.root is None:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 214] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   86:         self.root = None
   87:     
   88:     def add(self, value):
   89:         '''Insert value into proper location in Binary Tree.'''
[34m-  90:         if self.root is None:[0m
[32m+  90:         if root is None:[0m
   91:             self.root = BinaryNode(value)
   92:         else:
   93:             self.root.add(value)
   94:     
--------------------------------------------------------------------------------
[0.16337 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_1

def test_case_1():
        binary_tree_0 = module_0.BinaryTree()
>       var_0 = binary_tree_0.add(binary_tree_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(), value = binary:()

>   ???
E   NameError: name 'root' is not defined

binarySearchTree1:90: NameError
[36m   -[0m [# 215] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   87:     
   88:     def add(self, value):
   89:         '''Insert value into proper location in Binary Tree.'''
   90:         if self.root is None:
[34m-  91:             self.root = BinaryNode(value)[0m
[32m+  91:             root = BinaryNode(value)[0m
   92:         else:
   93:             self.root.add(value)
   94:     
   95:     def remove(self, val):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 216] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   89:         '''Insert value into proper location in Binary Tree.'''
   90:         if self.root is None:
   91:             self.root = BinaryNode(value)
   92:         else:
[34m-  93:             self.root.add(value)[0m
[32m+  93:             root.add(value)[0m
   94:     
   95:     def remove(self, val):
   96:         '''Remove value from tree.'''
   97:         if self.root:
--------------------------------------------------------------------------------
[0.18288 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_1 = binary_tree_0.add(list_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(L: [] R:), value = []

>   ???
E   NameError: name 'root' is not defined

binarySearchTree1:93: NameError
[36m   -[0m [# 217] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   93:             self.root.add(value)
   94:     
   95:     def remove(self, val):
   96:         '''Remove value from tree.'''
[34m-  97:         if self.root:[0m
[32m+  97:         if root:[0m
   98:             self.root = self.root.remove(val)
   99:     
  100:     def getMin(self):
  101:         '''Returns minimum value.'''
--------------------------------------------------------------------------------
[0.23370 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_3

def test_case_3():
        binary_tree_0 = module_0.BinaryTree()
        float_0 = -1660.53234
        str_0 = 'BhpUfU<<C<'
>       var_0 = binary_tree_0.remove(float_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(), val = -1660.53234

>   ???
E   NameError: name 'root' is not defined

binarySearchTree1:97: NameError
[36m   -[0m [# 218] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   94:     
   95:     def remove(self, val):
   96:         '''Remove value from tree.'''
   97:         if self.root:
[34m-  98:             self.root = self.root.remove(val)[0m
[32m+  98:             root = self.root.remove(val)[0m
   99:     
  100:     def getMin(self):
  101:         '''Returns minimum value.'''
  102:         if self.root is None:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 219] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   94:     
   95:     def remove(self, val):
   96:         '''Remove value from tree.'''
   97:         if self.root:
[34m-  98:             self.root = self.root.remove(val)[0m
[32m+  98:             self.root = root.remove(val)[0m
   99:     
  100:     def getMin(self):
  101:         '''Returns minimum value.'''
  102:         if self.root is None:
--------------------------------------------------------------------------------
[0.14926 s] [31msurvived[0m
[36m   -[0m [# 220] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
   98:             self.root = self.root.remove(val)
   99:     
  100:     def getMin(self):
  101:         '''Returns minimum value.'''
[34m- 102:         if self.root is None:[0m
[32m+ 102:         if root is None:[0m
  103:             raise ValueError('Binary Tree is empty')
  104:         n = self.root
  105:         while n.left != None:
  106:             n = n.left
--------------------------------------------------------------------------------
[0.18751 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_0

def test_case_0():
        bool_0 = True
        list_0 = [bool_0]
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__iter__()
        binary_node_0 = module_0.BinaryNode(list_0)
        binary_tree_1 = module_0.BinaryTree()
        binary_tree_2 = module_0.BinaryTree()
        var_1 = binary_tree_2.__repr__()
        assert var_1 == 'binary:()'
        with pytest.raises(ValueError):
>           binary_tree_1.getMin()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:()

>   ???
E   NameError: name 'root' is not defined

binarySearchTree1:102: NameError
[36m   -[0m [# 221] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
  100:     def getMin(self):
  101:         '''Returns minimum value.'''
  102:         if self.root is None:
  103:             raise ValueError('Binary Tree is empty')
[34m- 104:         n = self.root[0m
[32m+ 104:         n = root[0m
  105:         while n.left != None:
  106:             n = n.left
  107:         return n.value
  108:     
--------------------------------------------------------------------------------
[0.18038 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_1 = binary_tree_0.add(list_0)
        var_2 = binary_tree_0.add(list_0)
>       var_3 = binary_tree_0.getMin()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(L:(L:(L: [] R:) [] R:) [] R:)

>   ???
E   NameError: name 'root' is not defined

binarySearchTree1:104: NameError
[36m   -[0m [# 222] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
  107:         return n.value
  108:     
  109:     def getMax(self):
  110:         '''Returns maximum value.'''
[34m- 111:         if self.root is None:[0m
[32m+ 111:         if root is None:[0m
  112:             raise ValueError('Binary Tree is empty')
  113:         n = self.root
  114:         while n.right != None:
  115:             n = n.right
--------------------------------------------------------------------------------
[0.18096 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_3

def test_case_3():
        binary_tree_0 = module_0.BinaryTree()
        float_0 = -1660.53234
        str_0 = 'BhpUfU<<C<'
        var_0 = binary_tree_0.remove(float_0)
        var_1 = binary_tree_0.add(binary_tree_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_tree_0.getMax()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[RecursionError('maximum recursion depth exceeded while getting the str of an object') raised in repr()] BinaryTree object at 0x7fee7fb80a60>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree1:111: NameError
[36m   -[0m [# 223] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
  109:     def getMax(self):
  110:         '''Returns maximum value.'''
  111:         if self.root is None:
  112:             raise ValueError('Binary Tree is empty')
[34m- 113:         n = self.root[0m
[32m+ 113:         n = root[0m
  114:         while n.right != None:
  115:             n = n.right
  116:         return n.value
  117:     
--------------------------------------------------------------------------------
[0.25671 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_3

def test_case_3():
        binary_tree_0 = module_0.BinaryTree()
        float_0 = -1660.53234
        str_0 = 'BhpUfU<<C<'
        var_0 = binary_tree_0.remove(float_0)
        var_1 = binary_tree_0.add(binary_tree_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
>       var_2 = binary_tree_0.getMax()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[RecursionError('maximum recursion depth exceeded while getting the str of an object') raised in repr()] BinaryTree object at 0x7fee7fc895d0>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree1:113: NameError
[36m   -[0m [# 224] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
  116:         return n.value
  117:     
  118:     def __contains__(self, target):
  119:         '''Check whether BST contains target value.'''
[34m- 120:         node = self.root[0m
[32m+ 120:         node = root[0m
  121:         while node:
  122:             if target < node.value:
  123:                 node = node.left
  124:             elif target > node.value:
--------------------------------------------------------------------------------
[0.17490 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_1 = binary_tree_0.add(list_0)
        var_2 = binary_tree_0.add(list_0)
        var_3 = binary_tree_0.getMin()
        binary_node_0 = module_0.BinaryNode(var_2)
>       var_4 = binary_tree_0.__contains__(list_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(L:(L:(L: [] R:) [] R:) [] R:), target = []

>   ???
E   NameError: name 'root' is not defined

binarySearchTree1:120: NameError
[36m   -[0m [# 225] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
  132:         '''
  133:         Return value closest to target. If there are several, then
  134:         return one of them.
  135:         '''
[34m- 136:         if self.root is None:[0m
[32m+ 136:         if root is None:[0m
  137:             return None
  138:         
  139:         best = node = self.root
  140:         distance = abs(self.root.value - target)
--------------------------------------------------------------------------------
[0.19358 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_10

def test_case_10():
        bytes_0 = b'\xd5\x1aDT\x1bg\xd27\xd3\\\x13\xba'
        set_0 = {bytes_0, bytes_0, bytes_0}
        binary_tree_0 = module_0.BinaryTree()
>       var_0 = binary_tree_0.closest(set_0)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(), target = {b'\xd5\x1aDT\x1bg\xd27\xd3\\\x13\xba'}

>   ???
E   NameError: name 'root' is not defined

binarySearchTree1:136: NameError
[36m   -[0m [# 226] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
  135:         '''
  136:         if self.root is None:
  137:             return None
  138:         
[34m- 139:         best = node = self.root[0m
[32m+ 139:         best = node = root[0m
  140:         distance = abs(self.root.value - target)
  141:         while node:
  142:             if abs(node.value - target) < distance:
  143:                 distance = abs(node.value - target)
--------------------------------------------------------------------------------
[0.19504 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_13

def test_case_13():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(bool_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        none_type_0 = None
        bool_1 = False
        var_1 = binary_tree_0.__contains__(bool_1)
        assert var_1 is False
        bool_2 = False
        set_0 = {bool_2}
        var_2 = binary_tree_0.getMax()
        assert var_2 is True
>       var_3 = binary_tree_0.closest(bool_2)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(L: True R:), target = False

>   ???
E   NameError: name 'root' is not defined

binarySearchTree1:139: NameError
[36m   -[0m [# 227] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
  136:         if self.root is None:
  137:             return None
  138:         
  139:         best = node = self.root
[34m- 140:         distance = abs(self.root.value - target)[0m
[32m+ 140:         distance = abs(root.value - target)[0m
  141:         while node:
  142:             if abs(node.value - target) < distance:
  143:                 distance = abs(node.value - target)
  144:                 best = node
--------------------------------------------------------------------------------
[0.17345 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_13

def test_case_13():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(bool_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        none_type_0 = None
        bool_1 = False
        var_1 = binary_tree_0.__contains__(bool_1)
        assert var_1 is False
        bool_2 = False
        set_0 = {bool_2}
        var_2 = binary_tree_0.getMax()
        assert var_2 is True
>       var_3 = binary_tree_0.closest(bool_2)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:(L: True R:), target = False

>   ???
E   NameError: name 'root' is not defined

binarySearchTree1:140: NameError
[36m   -[0m [# 228] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
  152:         return best.value
  153:     
  154:     def __iter__(self):
  155:         '''In order traversal of elements in the tree.'''
[34m- 156:         if self.root:[0m
[32m+ 156:         if root:[0m
  157:             for e in self.root.inorder():
  158:                 yield e
  159:     
  160:     def __repr__(self):
--------------------------------------------------------------------------------
[0.18792 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_13

def test_case_13():
        bool_0 = True
        binary_node_0 = module_0.BinaryNode(bool_0)
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(bool_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        none_type_0 = None
        bool_1 = False
        var_1 = binary_tree_0.__contains__(bool_1)
        assert var_1 is False
        bool_2 = False
        set_0 = {bool_2}
        var_2 = binary_tree_0.getMax()
        assert var_2 is True
        var_3 = binary_tree_0.closest(bool_2)
        assert var_3 is True
        binary_tree_1 = module_0.BinaryTree()
>       object_0 = module_1.object(*binary_tree_1)

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = binary:()

>   ???
E   NameError: name 'root' is not defined

binarySearchTree1:156: NameError
[36m   -[0m [# 229] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
  153:     
  154:     def __iter__(self):
  155:         '''In order traversal of elements in the tree.'''
  156:         if self.root:
[34m- 157:             for e in self.root.inorder():[0m
[32m+ 157:             for e in root.inorder():[0m
  158:                 yield e
  159:     
  160:     def __repr__(self):
  161:         if self.root is None:
--------------------------------------------------------------------------------
[0.16707 s] [31msurvived[0m
[36m   -[0m [# 230] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
  157:             for e in self.root.inorder():
  158:                 yield e
  159:     
  160:     def __repr__(self):
[34m- 161:         if self.root is None:[0m
[32m+ 161:         if root is None:[0m
  162:             return 'binary:()'
  163:         return 'binary:' + str(self.root)
  164: 
  165: '''
--------------------------------------------------------------------------------
[0.25532 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_0

def test_case_0():
        bool_0 = True
        list_0 = [bool_0]
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.__iter__()
        binary_node_0 = module_0.BinaryNode(list_0)
        binary_tree_1 = module_0.BinaryTree()
        binary_tree_2 = module_0.BinaryTree()
>       var_1 = binary_tree_2.__repr__()

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[NameError("name 'root' is not defined") raised in repr()] BinaryTree object at 0x7fee7fd380a0>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree1:161: NameError
[36m   -[0m [# 231] SVD binarySearchTree1: 
--------------------------------------------------------------------------------
  159:     
  160:     def __repr__(self):
  161:         if self.root is None:
  162:             return 'binary:()'
[34m- 163:         return 'binary:' + str(self.root)[0m
[32m+ 163:         return 'binary:' + str(root)[0m
  164: 
  165: '''
  166: Change Log:
  167: -----------
--------------------------------------------------------------------------------
[0.16606 s] [31msurvived[0m
[36m   -[0m [# 232] ZIL binarySearchTree1: 
--------------------------------------------------------------------------------
   41:                 return self.right
   42:             
   43:             child = self.left
   44:             while child.right:
[34m-  45:                 child = child.right[0m
[32m+  45:                 break[0m
   46:             
   47:             childKey = child.value
   48:             self.left = self.removeFromParent(self.left, childKey)
   49:             self.value = childKey
--------------------------------------------------------------------------------
[0.16435 s] [31msurvived[0m
[36m   -[0m [# 233] ZIL binarySearchTree1: 
--------------------------------------------------------------------------------
   70:     def inorder(self):
   71:         '''In order traversal generator of tree rooted at given node.'''
   72:         if self.left:
   73:             for v in self.left.inorder():
[34m-  74:                 yield v[0m
[32m+  74:                 break[0m
   75:         
   76:         yield self.value
   77:         
   78:         if self.right:
--------------------------------------------------------------------------------
[0.16501 s] [31msurvived[0m
[36m   -[0m [# 234] ZIL binarySearchTree1: 
--------------------------------------------------------------------------------
   76:         yield self.value
   77:         
   78:         if self.right:
   79:             for v in self.right.inorder():
[34m-  80:                 yield v[0m
[32m+  80:                 break[0m
   81: 
   82: class BinaryTree:
   83:     
   84:     def __init__(self):
--------------------------------------------------------------------------------
[0.16146 s] [31msurvived[0m
[36m   -[0m [# 235] ZIL binarySearchTree1: 
--------------------------------------------------------------------------------
  102:         if self.root is None:
  103:             raise ValueError('Binary Tree is empty')
  104:         n = self.root
  105:         while n.left != None:
[34m- 106:             n = n.left[0m
[32m+ 106:             break[0m
  107:         return n.value
  108:     
  109:     def getMax(self):
  110:         '''Returns maximum value.'''
--------------------------------------------------------------------------------
[0.16440 s] [31msurvived[0m
[36m   -[0m [# 236] ZIL binarySearchTree1: 
--------------------------------------------------------------------------------
  111:         if self.root is None:
  112:             raise ValueError('Binary Tree is empty')
  113:         n = self.root
  114:         while n.right != None:
[34m- 115:             n = n.right[0m
[32m+ 115:             break[0m
  116:         return n.value
  117:     
  118:     def __contains__(self, target):
  119:         '''Check whether BST contains target value.'''
--------------------------------------------------------------------------------
[0.16622 s] [31msurvived[0m
[36m   -[0m [# 237] ZIL binarySearchTree1: 
--------------------------------------------------------------------------------
  118:     def __contains__(self, target):
  119:         '''Check whether BST contains target value.'''
  120:         node = self.root
  121:         while node:
[34m- 122:             if target < node.value:[0m
[34m- 123:                 node = node.left[0m
[34m- 124:             elif target > node.value:[0m
[34m- 125:                 node = node.right[0m
[34m- 126:             else:[0m
[34m- 127:                 return True[0m
[32m+ 122:             break[0m
[32m+ 123:         [0m
[32m+ 124:         [0m
[32m+ 125:         [0m
[32m+ 126:         [0m
[32m+ 127:         [0m
  128:         
  129:         return False
  130:     
  131:     def closest(self, target):
--------------------------------------------------------------------------------
[0.25252 s] [32mkilled[0m by WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py::test_case_2

def test_case_2():
        list_0 = []
        binary_tree_0 = module_0.BinaryTree()
        var_0 = binary_tree_0.add(list_0)
        assert f'{type(binary_tree_0.root).__module__}.{type(binary_tree_0.root).__qualname__}' == 'binarySearchTree1.BinaryNode'
        var_1 = binary_tree_0.add(list_0)
        var_2 = binary_tree_0.add(list_0)
        var_3 = binary_tree_0.getMin()
        binary_node_0 = module_0.BinaryNode(var_2)
        var_4 = binary_tree_0.__contains__(list_0)
>       assert var_4 is True
E       AssertionError

WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:34: AssertionError
[36m   -[0m [# 238] ZIL binarySearchTree1: 
--------------------------------------------------------------------------------
  138:         
  139:         best = node = self.root
  140:         distance = abs(self.root.value - target)
  141:         while node:
[34m- 142:             if abs(node.value - target) < distance:[0m
[34m- 143:                 distance = abs(node.value - target)[0m
[34m- 144:                 best = node[0m
[34m- 145:             if target < node.value:[0m
[34m- 146:                 node = node.left[0m
[34m- 147:             elif target > node.value:[0m
[34m- 148:                 node = node.right[0m
[34m- 149:             else:[0m
[34m- 150:                 return target[0m
[32m+ 142:             break[0m
[32m+ 143:         [0m
[32m+ 144:         [0m
[32m+ 145:         [0m
[32m+ 146:         [0m
[32m+ 147:         [0m
[32m+ 148:         [0m
[32m+ 149:         [0m
[32m+ 150:         [0m
  151:         
  152:         return best.value
  153:     
  154:     def __iter__(self):
--------------------------------------------------------------------------------
[0.15769 s] [31msurvived[0m
[36m   -[0m [# 239] ZIL binarySearchTree1: 
--------------------------------------------------------------------------------
  154:     def __iter__(self):
  155:         '''In order traversal of elements in the tree.'''
  156:         if self.root:
  157:             for e in self.root.inorder():
[34m- 158:                 yield e[0m
[32m+ 158:                 break[0m
  159:     
  160:     def __repr__(self):
  161:         if self.root is None:
  162:             return 'binary:()'
--------------------------------------------------------------------------------
[0.20017 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree1/WHOLE_SUITE/test_binarySearchTree1_WHOLE_SUITE.py:141: TypeError: iter() returned non-iterator of type 'NoneType'

[34m[*][0m Mutation score [102.60274 s]: [1m[34m66.2%[0m
[36m   -[0m all: 239
[36m   -[0m killed: 127 (53.1%)
[36m   -[0m survived: 68 (28.5%)
[36m   -[0m incompetent: 38 (15.9%)
[36m   -[0m timeout: 6 (2.5%)
