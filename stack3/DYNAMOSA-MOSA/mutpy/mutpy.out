[*] Start mutation process:
   - targets: stack3.py
   - tests: ./DYNAMOSA-MOSA
[*] 34 tests passed:
   - test_stack3_DYNAMOSA [0.45598 s]
   - test_stack3_MOSA [0.35662 s]
[*] Start mutants generation and execution:
   - [#   1] AOD stack3: 
--------------------------------------------------------------------------------
  133:     def __str__(self) -> str:
  134:         
  135:         '''Get string representation of the stack.'''
  136:         
- 137:         return str(self.__stack.toArray()[::-1])
+ 137:         return str(self.__stack.toArray()[::1])
  138: 
  139: 
  140: if __name__ == '__main__':
  141:     pass
--------------------------------------------------------------------------------
[0.52920 s] survived
   - [#   2] AOR stack3: 
--------------------------------------------------------------------------------
  133:     def __str__(self) -> str:
  134:         
  135:         '''Get string representation of the stack.'''
  136:         
- 137:         return str(self.__stack.toArray()[::-1])
+ 137:         return str(self.__stack.toArray()[::+1])
  138: 
  139: 
  140: if __name__ == '__main__':
  141:     pass
--------------------------------------------------------------------------------
[0.54162 s] survived
   - [#   3] ASR stack3: 
--------------------------------------------------------------------------------
   23:         newNode = Node(value)
   24:         if self.__size == 0:
   25:             self.__head.next = newNode
   26:             self.__head = newNode
-  27:             self.__size += 1
+  27:             self.__size -= 1
   28:         else:
   29:             self.__sentinel.next = newNode
   30:             newNode.next = self.__head
   31:             self.__head = newNode
--------------------------------------------------------------------------------
[0.62077 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_9

def test_case_9():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        str_0 = singly_linked_list_0.__str__()
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
        assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'stack3.SinglyLinkedList'
        assert var_0.next is None
        node_0 = singly_linked_list_0.getHeadNode()
>       assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'stack3.Node'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:77: AssertionError
   - [#   4] ASR stack3: 
--------------------------------------------------------------------------------
   28:         else:
   29:             self.__sentinel.next = newNode
   30:             newNode.next = self.__head
   31:             self.__head = newNode
-  32:             self.__size += 1
+  32:             self.__size -= 1
   33:     
   34:     def remove(self):
   35:         
   36:         '''Remove node from linkedlist.'''
--------------------------------------------------------------------------------
[0.58347 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_15

def test_case_15():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        list_0 = singly_linked_list_0.toArray()
        str_0 = singly_linked_list_0.__str__()
        assert str_0 == '[None]'
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        bool_0 = singly_linked_list_0.isEmpty()
        assert bool_0 is False
        none_type_1 = singly_linked_list_0.add(list_0)
        bool_1 = singly_linked_list_0.isEmpty()
>       assert bool_1 is False
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:136: AssertionError
   - [#   5] ASR stack3: 
--------------------------------------------------------------------------------
   40:         if self.__size >= 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
   43:             self.__head = self.__sentinel
-  44:             self.__size -= 1
+  44:             self.__size += 1
   45:             return nodeToRemove
   46:         else:
   47:             nodeToRemove = self.__head
   48:             self.__sentinel.next = self.__head.next
--------------------------------------------------------------------------------
[0.43945 s] survived
   - [#   6] ASR stack3: 
--------------------------------------------------------------------------------
   46:         else:
   47:             nodeToRemove = self.__head
   48:             self.__sentinel.next = self.__head.next
   49:             self.__head = self.__sentinel.next
-  50:             self.__size -= 1
+  50:             self.__size += 1
   51:             return nodeToRemove
   52:     
   53:     def getHead(self) -> T:
   54:         
--------------------------------------------------------------------------------
[0.46005 s] survived
   - [#   7] CDI stack3: 
--------------------------------------------------------------------------------
    4: 
    5: T = TypeVar('T')
    6: 
    7: class Node:
-   8:     def __init__(self, value: T):
-   9:         self.value = value
-  10:         self.next = None
-  11: 
+   8:     @classmethod
+   9:     def __init__(self, value: T):
+  10:         self.value = value
+  11:         self.next = None
   12: 
   13: class SinglyLinkedList:
   14:     def __init__(self):
   15:         self.__sentinel = Node(None)
--------------------------------------------------------------------------------
[0.56701 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_9

def test_case_9():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        str_0 = singly_linked_list_0.__str__()
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
        assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'stack3.SinglyLinkedList'
        assert var_0.next is None
        node_0 = singly_linked_list_0.getHeadNode()
        assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'stack3.Node'
>       assert node_0.value is None
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:78: AssertionError
   - [#   8] CDI stack3: 
--------------------------------------------------------------------------------
   10:         self.next = None
   11: 
   12: 
   13: class SinglyLinkedList:
-  14:     def __init__(self):
-  15:         self.__sentinel = Node(None)
-  16:         self.__head = self.__sentinel
-  17:         self.__size = 0
-  18:     
+  14:     @classmethod
+  15:     def __init__(self):
+  16:         self.__sentinel = Node(None)
+  17:         self.__head = self.__sentinel
+  18:         self.__size = 0
   19:     def add(self, value: T) -> None:
   20:         
   21:         '''Add element to linked list.'''
   22:         
--------------------------------------------------------------------------------
[0.44322 s] survived
   - [#   9] CDI stack3: 
--------------------------------------------------------------------------------
   15:         self.__sentinel = Node(None)
   16:         self.__head = self.__sentinel
   17:         self.__size = 0
   18:     
-  19:     def add(self, value: T) -> None:
-  20:         
-  21:         '''Add element to linked list.'''
-  22:         
-  23:         newNode = Node(value)
-  24:         if self.__size == 0:
-  25:             self.__head.next = newNode
-  26:             self.__head = newNode
-  27:             self.__size += 1
-  28:         else:
-  29:             self.__sentinel.next = newNode
-  30:             newNode.next = self.__head
-  31:             self.__head = newNode
-  32:             self.__size += 1
-  33:     
+  19:     @classmethod
+  20:     def add(self, value: T) -> None:
+  21:         
+  22:         '''Add element to linked list.'''
+  23:         
+  24:         newNode = Node(value)
+  25:         if self.__size == 0:
+  26:             self.__head.next = newNode
+  27:             self.__head = newNode
+  28:             self.__size += 1
+  29:         else:
+  30:             self.__sentinel.next = newNode
+  31:             newNode.next = self.__head
+  32:             self.__head = newNode
+  33:             self.__size += 1
   34:     def remove(self):
   35:         
   36:         '''Remove node from linkedlist.'''
   37:         
--------------------------------------------------------------------------------
[0.51198 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       none_type_0 = singly_linked_list_0.add(singly_linked_list_0)

DYNAMOSA-MOSA/test_stack3_MOSA.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.SinglyLinkedList'>
value = <stack3.SinglyLinkedList object at 0x7febb7adbb50>

>   ???
E   AttributeError: type object 'SinglyLinkedList' has no attribute '_SinglyLinkedList__size'

stack3:25: AttributeError
   - [#  10] CDI stack3: 
--------------------------------------------------------------------------------
   30:             newNode.next = self.__head
   31:             self.__head = newNode
   32:             self.__size += 1
   33:     
-  34:     def remove(self):
-  35:         
-  36:         '''Remove node from linkedlist.'''
-  37:         
-  38:         if self.__size == 0:
-  39:             return None
-  40:         if self.__size >= 1:
-  41:             nodeToRemove = self.__head
-  42:             self.__sentinel.next = None
-  43:             self.__head = self.__sentinel
-  44:             self.__size -= 1
-  45:             return nodeToRemove
-  46:         else:
-  47:             nodeToRemove = self.__head
-  48:             self.__sentinel.next = self.__head.next
-  49:             self.__head = self.__sentinel.next
-  50:             self.__size -= 1
-  51:             return nodeToRemove
-  52:     
+  34:     @classmethod
+  35:     def remove(self):
+  36:         
+  37:         '''Remove node from linkedlist.'''
+  38:         
+  39:         if self.__size == 0:
+  40:             return None
+  41:         if self.__size >= 1:
+  42:             nodeToRemove = self.__head
+  43:             self.__sentinel.next = None
+  44:             self.__head = self.__sentinel
+  45:             self.__size -= 1
+  46:             return nodeToRemove
+  47:         else:
+  48:             nodeToRemove = self.__head
+  49:             self.__sentinel.next = self.__head.next
+  50:             self.__head = self.__sentinel.next
+  51:             self.__size -= 1
+  52:             return nodeToRemove
   53:     def getHead(self) -> T:
   54:         
   55:         '''Get value of the linkedlist head node.'''
   56:         
--------------------------------------------------------------------------------
[0.62165 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
>       var_0 = singly_linked_list_0.remove()

DYNAMOSA-MOSA/test_stack3_MOSA.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.SinglyLinkedList'>

>   ???
E   AttributeError: type object 'SinglyLinkedList' has no attribute '_SinglyLinkedList__size'

stack3:39: AttributeError
   - [#  11] CDI stack3: 
--------------------------------------------------------------------------------
   49:             self.__head = self.__sentinel.next
   50:             self.__size -= 1
   51:             return nodeToRemove
   52:     
-  53:     def getHead(self) -> T:
-  54:         
-  55:         '''Get value of the linkedlist head node.'''
-  56:         
-  57:         return self.__head.value
-  58:     
+  53:     @classmethod
+  54:     def getHead(self) -> T:
+  55:         
+  56:         '''Get value of the linkedlist head node.'''
+  57:         
+  58:         return self.__head.value
   59:     def getHeadNode(self) -> Node:
   60:         
   61:         '''Get head node referance.'''
   62:         
--------------------------------------------------------------------------------
[0.61263 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_8

def test_case_8():
        int_0 = 4462
        node_0 = module_0.Node(int_0)
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       var_0 = singly_linked_list_0.getHead()

DYNAMOSA-MOSA/test_stack3_MOSA.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.SinglyLinkedList'>

>   ???
E   AttributeError: type object 'SinglyLinkedList' has no attribute '_SinglyLinkedList__head'

stack3:58: AttributeError
   - [#  12] CDI stack3: 
--------------------------------------------------------------------------------
   55:         '''Get value of the linkedlist head node.'''
   56:         
   57:         return self.__head.value
   58:     
-  59:     def getHeadNode(self) -> Node:
-  60:         
-  61:         '''Get head node referance.'''
-  62:         
-  63:         return self.__head
-  64:     
+  59:     @classmethod
+  60:     def getHeadNode(self) -> Node:
+  61:         
+  62:         '''Get head node referance.'''
+  63:         
+  64:         return self.__head
   65:     def getSize(self) -> int:
   66:         
   67:         '''Return size of the linkedlist.'''
   68:         
--------------------------------------------------------------------------------
[0.55301 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_4

def test_case_4():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       node_0 = singly_linked_list_0.getHeadNode()

DYNAMOSA-MOSA/test_stack3_MOSA.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.SinglyLinkedList'>

>   ???
E   AttributeError: type object 'SinglyLinkedList' has no attribute '_SinglyLinkedList__head'

stack3:64: AttributeError
   - [#  13] CDI stack3: 
--------------------------------------------------------------------------------
   61:         '''Get head node referance.'''
   62:         
   63:         return self.__head
   64:     
-  65:     def getSize(self) -> int:
-  66:         
-  67:         '''Return size of the linkedlist.'''
-  68:         
-  69:         return self.__size
-  70:     
+  65:     @classmethod
+  66:     def getSize(self) -> int:
+  67:         
+  68:         '''Return size of the linkedlist.'''
+  69:         
+  70:         return self.__size
   71:     def isEmpty(self) -> bool:
   72:         
   73:         '''Checks if linkedlist is empty.'''
   74:         
--------------------------------------------------------------------------------
[0.57609 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_2

def test_case_2():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       int_0 = singly_linked_list_0.getSize()

DYNAMOSA-MOSA/test_stack3_MOSA.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.SinglyLinkedList'>

>   ???
E   AttributeError: type object 'SinglyLinkedList' has no attribute '_SinglyLinkedList__size'

stack3:70: AttributeError
   - [#  14] CDI stack3: 
--------------------------------------------------------------------------------
   67:         '''Return size of the linkedlist.'''
   68:         
   69:         return self.__size
   70:     
-  71:     def isEmpty(self) -> bool:
-  72:         
-  73:         '''Checks if linkedlist is empty.'''
-  74:         
-  75:         return True if self.__size == 0 else False
-  76:     
+  71:     @classmethod
+  72:     def isEmpty(self) -> bool:
+  73:         
+  74:         '''Checks if linkedlist is empty.'''
+  75:         
+  76:         return True if self.__size == 0 else False
   77:     def toArray(self) -> list:
   78:         
   79:         '''Converts linkedlist to list.'''
   80:         
--------------------------------------------------------------------------------
[0.53052 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_3

def test_case_3():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       bool_0 = singly_linked_list_0.isEmpty()

DYNAMOSA-MOSA/test_stack3_MOSA.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.SinglyLinkedList'>

>   ???
E   AttributeError: type object 'SinglyLinkedList' has no attribute '_SinglyLinkedList__size'

stack3:76: AttributeError
   - [#  15] CDI stack3: 
--------------------------------------------------------------------------------
   73:         '''Checks if linkedlist is empty.'''
   74:         
   75:         return True if self.__size == 0 else False
   76:     
-  77:     def toArray(self) -> list:
-  78:         
-  79:         '''Converts linkedlist to list.'''
-  80:         
-  81:         arr = []
-  82:         current = self.__head
-  83:         while current:
-  84:             arr.append(current.value)
-  85:             current = current.next
-  86:         return arr
-  87:     
+  77:     @classmethod
+  78:     def toArray(self) -> list:
+  79:         
+  80:         '''Converts linkedlist to list.'''
+  81:         
+  82:         arr = []
+  83:         current = self.__head
+  84:         while current:
+  85:             arr.append(current.value)
+  86:             current = current.next
+  87:         return arr
   88:     def __str__(self) -> str:
   89:         
   90:         '''Return String representation of linkedlist values.'''
   91:         
--------------------------------------------------------------------------------
[0.56438 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_4

def test_case_4():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        node_0 = singly_linked_list_0.getHeadNode()
        int_0 = singly_linked_list_0.getSize()
>       list_0 = singly_linked_list_0.toArray()

DYNAMOSA-MOSA/test_stack3_MOSA.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.SinglyLinkedList'>

>   ???
E   AttributeError: type object 'SinglyLinkedList' has no attribute '_SinglyLinkedList__head'

stack3:83: AttributeError
   - [#  16] CDI stack3: 
--------------------------------------------------------------------------------
   84:             arr.append(current.value)
   85:             current = current.next
   86:         return arr
   87:     
-  88:     def __str__(self) -> str:
-  89:         
-  90:         '''Return String representation of linkedlist values.'''
-  91:         
-  92:         arr = []
-  93:         current = self.__head
-  94:         while current:
-  95:             arr.append(current.value)
-  96:             current = current.next
-  97:         return str(arr)
-  98: 
+  88:     @classmethod
+  89:     def __str__(self) -> str:
+  90:         
+  91:         '''Return String representation of linkedlist values.'''
+  92:         
+  93:         arr = []
+  94:         current = self.__head
+  95:         while current:
+  96:             arr.append(current.value)
+  97:             current = current.next
+  98:         return str(arr)
   99: class Stack:
  100:     def __init__(self):
  101:         self.__stack = SinglyLinkedList()
  102:     
--------------------------------------------------------------------------------
[0.61496 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_6

def test_case_6():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       str_0 = singly_linked_list_0.__str__()

DYNAMOSA-MOSA/test_stack3_MOSA.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.SinglyLinkedList'>

>   ???
E   AttributeError: type object 'SinglyLinkedList' has no attribute '_SinglyLinkedList__head'

stack3:94: AttributeError
   - [#  17] CDI stack3: 
--------------------------------------------------------------------------------
   96:             current = current.next
   97:         return str(arr)
   98: 
   99: class Stack:
- 100:     def __init__(self):
- 101:         self.__stack = SinglyLinkedList()
- 102:     
+ 100:     @classmethod
+ 101:     def __init__(self):
+ 102:         self.__stack = SinglyLinkedList()
  103:     def push(self, value: T) -> None:
  104:         
  105:         '''Add element to the top of the stack.'''
  106:         
--------------------------------------------------------------------------------
[0.64197 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_13

def test_case_13():
        stack_0 = module_0.Stack()
        none_type_0 = stack_0.push(stack_0)
        var_0 = stack_0.peek()
        bool_0 = var_0.isEmpty()
        assert bool_0 is False
        stack_1 = module_0.Stack()
        var_1 = stack_0.pop()
>       assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'stack3.Node'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:111: AssertionError
   - [#  18] CDI stack3: 
--------------------------------------------------------------------------------
   99: class Stack:
  100:     def __init__(self):
  101:         self.__stack = SinglyLinkedList()
  102:     
- 103:     def push(self, value: T) -> None:
- 104:         
- 105:         '''Add element to the top of the stack.'''
- 106:         
- 107:         self.__stack.add(value)
- 108:     
+ 103:     @classmethod
+ 104:     def push(self, value: T) -> None:
+ 105:         
+ 106:         '''Add element to the top of the stack.'''
+ 107:         
+ 108:         self.__stack.add(value)
  109:     def pop(self) -> T:
  110:         
  111:         '''Remove element from the top of the stack.'''
  112:         
--------------------------------------------------------------------------------
[0.63322 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_10

def test_case_10():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        stack_0 = module_0.Stack()
        bool_0 = False
        none_type_0 = singly_linked_list_0.add(bool_0)
>       none_type_1 = stack_0.push(singly_linked_list_0)

DYNAMOSA-MOSA/test_stack3_MOSA.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.Stack'>
value = <stack3.SinglyLinkedList object at 0x7febb7c3dc00>

>   ???
E   AttributeError: type object 'Stack' has no attribute '_Stack__stack'

stack3:108: AttributeError
   - [#  19] CDI stack3: 
--------------------------------------------------------------------------------
  105:         '''Add element to the top of the stack.'''
  106:         
  107:         self.__stack.add(value)
  108:     
- 109:     def pop(self) -> T:
- 110:         
- 111:         '''Remove element from the top of the stack.'''
- 112:         
- 113:         return self.__stack.remove()
- 114:     
+ 109:     @classmethod
+ 110:     def pop(self) -> T:
+ 111:         
+ 112:         '''Remove element from the top of the stack.'''
+ 113:         
+ 114:         return self.__stack.remove()
  115:     def peek(self) -> T:
  116:         
  117:         '''View top element in the stack.'''
  118:         
--------------------------------------------------------------------------------
[0.59986 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_7

def test_case_7():
        stack_0 = module_0.Stack()
        bool_0 = stack_0.isEmpty()
        assert bool_0 is True
>       var_0 = stack_0.pop()

DYNAMOSA-MOSA/test_stack3_MOSA.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.Stack'>

>   ???
E   AttributeError: type object 'Stack' has no attribute '_Stack__stack'

stack3:114: AttributeError
   - [#  20] CDI stack3: 
--------------------------------------------------------------------------------
  111:         '''Remove element from the top of the stack.'''
  112:         
  113:         return self.__stack.remove()
  114:     
- 115:     def peek(self) -> T:
- 116:         
- 117:         '''View top element in the stack.'''
- 118:         
- 119:         return self.__stack.getHead()
- 120:     
+ 115:     @classmethod
+ 116:     def peek(self) -> T:
+ 117:         
+ 118:         '''View top element in the stack.'''
+ 119:         
+ 120:         return self.__stack.getHead()
  121:     def isEmpty(self) -> bool:
  122:         
  123:         '''Check if stack is empty.'''
  124:         
--------------------------------------------------------------------------------
[0.62581 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_11

def test_case_11():
        stack_0 = module_0.Stack()
>       var_0 = stack_0.peek()

DYNAMOSA-MOSA/test_stack3_MOSA.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.Stack'>

>   ???
E   AttributeError: type object 'Stack' has no attribute '_Stack__stack'

stack3:120: AttributeError
   - [#  21] CDI stack3: 
--------------------------------------------------------------------------------
  117:         '''View top element in the stack.'''
  118:         
  119:         return self.__stack.getHead()
  120:     
- 121:     def isEmpty(self) -> bool:
- 122:         
- 123:         '''Check if stack is empty.'''
- 124:         
- 125:         return True if self.__stack.getSize() == 0 else False
- 126:     
+ 121:     @classmethod
+ 122:     def isEmpty(self) -> bool:
+ 123:         
+ 124:         '''Check if stack is empty.'''
+ 125:         
+ 126:         return True if self.__stack.getSize() == 0 else False
  127:     def getSize(self) -> int:
  128:         
  129:         '''Get size of the stack.'''
  130:         
--------------------------------------------------------------------------------
[0.58127 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_7

def test_case_7():
        stack_0 = module_0.Stack()
>       bool_0 = stack_0.isEmpty()

DYNAMOSA-MOSA/test_stack3_MOSA.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.Stack'>

>   ???
E   AttributeError: type object 'Stack' has no attribute '_Stack__stack'

stack3:126: AttributeError
   - [#  22] CDI stack3: 
--------------------------------------------------------------------------------
  123:         '''Check if stack is empty.'''
  124:         
  125:         return True if self.__stack.getSize() == 0 else False
  126:     
- 127:     def getSize(self) -> int:
- 128:         
- 129:         '''Get size of the stack.'''
- 130:         
- 131:         return self.__stack.getSize()
- 132:     
+ 127:     @classmethod
+ 128:     def getSize(self) -> int:
+ 129:         
+ 130:         '''Get size of the stack.'''
+ 131:         
+ 132:         return self.__stack.getSize()
  133:     def __str__(self) -> str:
  134:         
  135:         '''Get string representation of the stack.'''
  136:         
--------------------------------------------------------------------------------
[0.65377 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_12

def test_case_12():
        stack_0 = module_0.Stack()
        str_0 = stack_0.__str__()
        assert str_0 == '[None]'
        var_0 = stack_0.peek()
>       int_0 = stack_0.getSize()

DYNAMOSA-MOSA/test_stack3_MOSA.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.Stack'>

>   ???
E   AttributeError: type object 'Stack' has no attribute '_Stack__stack'

stack3:132: AttributeError
   - [#  23] CDI stack3: 
--------------------------------------------------------------------------------
  129:         '''Get size of the stack.'''
  130:         
  131:         return self.__stack.getSize()
  132:     
- 133:     def __str__(self) -> str:
- 134:         
- 135:         '''Get string representation of the stack.'''
- 136:         
- 137:         return str(self.__stack.toArray()[::-1])
- 138: 
+ 133:     @classmethod
+ 134:     def __str__(self) -> str:
+ 135:         
+ 136:         '''Get string representation of the stack.'''
+ 137:         
+ 138:         return str(self.__stack.toArray()[::-1])
  139: 
  140: if __name__ == '__main__':
  141:     pass
--------------------------------------------------------------------------------
[0.59037 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_5

def test_case_5():
        stack_0 = module_0.Stack()
>       str_0 = stack_0.__str__()

DYNAMOSA-MOSA/test_stack3_MOSA.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack3.Stack'>

>   ???
E   AttributeError: type object 'Stack' has no attribute '_Stack__stack'

stack3:138: AttributeError
   - [#  24] COI stack3: 
--------------------------------------------------------------------------------
   20:         
   21:         '''Add element to linked list.'''
   22:         
   23:         newNode = Node(value)
-  24:         if self.__size == 0:
+  24:         if not (self.__size == 0):
   25:             self.__head.next = newNode
   26:             self.__head = newNode
   27:             self.__size += 1
   28:         else:
--------------------------------------------------------------------------------
[0.53766 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
        assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'stack3.SinglyLinkedList'
>       assert var_0.next is None
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:14: AssertionError
   - [#  25] COI stack3: 
--------------------------------------------------------------------------------
   34:     def remove(self):
   35:         
   36:         '''Remove node from linkedlist.'''
   37:         
-  38:         if self.__size == 0:
+  38:         if not (self.__size == 0):
   39:             return None
   40:         if self.__size >= 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
--------------------------------------------------------------------------------
[0.55015 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        var_0 = singly_linked_list_0.remove()
>       assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:12: AssertionError
   - [#  26] COI stack3: 
--------------------------------------------------------------------------------
   36:         '''Remove node from linkedlist.'''
   37:         
   38:         if self.__size == 0:
   39:             return None
-  40:         if self.__size >= 1:
+  40:         if not (self.__size >= 1):
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
   43:             self.__head = self.__sentinel
   44:             self.__size -= 1
--------------------------------------------------------------------------------
[0.60576 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_9

def test_case_9():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        str_0 = singly_linked_list_0.__str__()
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
        assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'stack3.SinglyLinkedList'
        assert var_0.next is None
        node_0 = singly_linked_list_0.getHeadNode()
>       assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'stack3.Node'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:77: AssertionError
   - [#  27] COI stack3: 
--------------------------------------------------------------------------------
   79:         '''Converts linkedlist to list.'''
   80:         
   81:         arr = []
   82:         current = self.__head
-  83:         while current:
+  83:         while not current:
   84:             arr.append(current.value)
   85:             current = current.next
   86:         return arr
   87:     
--------------------------------------------------------------------------------
[0.57510 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_4

def test_case_4():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        node_0 = singly_linked_list_0.getHeadNode()
        int_0 = singly_linked_list_0.getSize()
        list_0 = singly_linked_list_0.toArray()
        none_type_0 = singly_linked_list_0.add(list_0)
        bool_0 = singly_linked_list_0.isEmpty()
        assert bool_0 is False
        var_0 = singly_linked_list_0.remove()
        assert node_0.next is None
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
>       assert var_0.value == [None]
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:39: AssertionError
   - [#  28] COI stack3: 
--------------------------------------------------------------------------------
   90:         '''Return String representation of linkedlist values.'''
   91:         
   92:         arr = []
   93:         current = self.__head
-  94:         while current:
+  94:         while not current:
   95:             arr.append(current.value)
   96:             current = current.next
   97:         return str(arr)
   98: 
--------------------------------------------------------------------------------
[0.60923 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_6

def test_case_6():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        str_0 = singly_linked_list_0.__str__()
>       assert str_0 == '[None]'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:54: AssertionError
   - [#  29] COI stack3: 
--------------------------------------------------------------------------------
  136:         
  137:         return str(self.__stack.toArray()[::-1])
  138: 
  139: 
- 140: if __name__ == '__main__':
+ 140: if not (__name__ == '__main__'):
  141:     pass
--------------------------------------------------------------------------------
[0.52829 s] survived
   - [#  30] CRP stack3: 
--------------------------------------------------------------------------------
    1: '''Stack is an abstract data type that serves as a collection of elements, with two main principal operations: Push, which adds an element to the collection, and Pop, which removes the most recently added element that was not yet removed.'''
    2: 
    3: from typing import TypeVar
    4: 
-   5: T = TypeVar('T')
+   5: T = TypeVar('mutpy')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[0.50711 s] survived
   - [#  31] CRP stack3: 
--------------------------------------------------------------------------------
    1: '''Stack is an abstract data type that serves as a collection of elements, with two main principal operations: Push, which adds an element to the collection, and Pop, which removes the most recently added element that was not yet removed.'''
    2: 
    3: from typing import TypeVar
    4: 
-   5: T = TypeVar('T')
+   5: T = TypeVar('')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[0.50644 s] survived
   - [#  32] CRP stack3: 
--------------------------------------------------------------------------------
   13: class SinglyLinkedList:
   14:     def __init__(self):
   15:         self.__sentinel = Node(None)
   16:         self.__head = self.__sentinel
-  17:         self.__size = 0
+  17:         self.__size = 1
   18:     
   19:     def add(self, value: T) -> None:
   20:         
   21:         '''Add element to linked list.'''
--------------------------------------------------------------------------------
[0.50074 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
        assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'stack3.SinglyLinkedList'
>       assert var_0.next is None
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:14: AssertionError
   - [#  33] CRP stack3: 
--------------------------------------------------------------------------------
   20:         
   21:         '''Add element to linked list.'''
   22:         
   23:         newNode = Node(value)
-  24:         if self.__size == 0:
+  24:         if self.__size == 1:
   25:             self.__head.next = newNode
   26:             self.__head = newNode
   27:             self.__size += 1
   28:         else:
--------------------------------------------------------------------------------
[0.59082 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
        assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'stack3.SinglyLinkedList'
>       assert var_0.next is None
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:14: AssertionError
   - [#  34] CRP stack3: 
--------------------------------------------------------------------------------
   23:         newNode = Node(value)
   24:         if self.__size == 0:
   25:             self.__head.next = newNode
   26:             self.__head = newNode
-  27:             self.__size += 1
+  27:             self.__size += 2
   28:         else:
   29:             self.__sentinel.next = newNode
   30:             newNode.next = self.__head
   31:             self.__head = newNode
--------------------------------------------------------------------------------
[0.62365 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_16

def test_case_16():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        list_0 = singly_linked_list_0.toArray()
        str_0 = singly_linked_list_0.__str__()
        assert str_0 == '[None]'
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        none_type_1 = singly_linked_list_0.add(str_0)
        str_1 = singly_linked_list_0.__str__()
        bool_0 = singly_linked_list_0.isEmpty()
        assert bool_0 is False
        int_0 = singly_linked_list_0.getSize()
>       assert int_0 == 2
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:154: AssertionError
   - [#  35] CRP stack3: 
--------------------------------------------------------------------------------
   28:         else:
   29:             self.__sentinel.next = newNode
   30:             newNode.next = self.__head
   31:             self.__head = newNode
-  32:             self.__size += 1
+  32:             self.__size += 2
   33:     
   34:     def remove(self):
   35:         
   36:         '''Remove node from linkedlist.'''
--------------------------------------------------------------------------------
[0.55009 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_16

def test_case_16():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        list_0 = singly_linked_list_0.toArray()
        str_0 = singly_linked_list_0.__str__()
        assert str_0 == '[None]'
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        none_type_1 = singly_linked_list_0.add(str_0)
        str_1 = singly_linked_list_0.__str__()
        bool_0 = singly_linked_list_0.isEmpty()
        assert bool_0 is False
        int_0 = singly_linked_list_0.getSize()
>       assert int_0 == 2
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:154: AssertionError
   - [#  36] CRP stack3: 
--------------------------------------------------------------------------------
   34:     def remove(self):
   35:         
   36:         '''Remove node from linkedlist.'''
   37:         
-  38:         if self.__size == 0:
+  38:         if self.__size == 1:
   39:             return None
   40:         if self.__size >= 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
--------------------------------------------------------------------------------
[0.51140 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        var_0 = singly_linked_list_0.remove()
>       assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:12: AssertionError
   - [#  37] CRP stack3: 
--------------------------------------------------------------------------------
   36:         '''Remove node from linkedlist.'''
   37:         
   38:         if self.__size == 0:
   39:             return None
-  40:         if self.__size >= 1:
+  40:         if self.__size >= 2:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
   43:             self.__head = self.__sentinel
   44:             self.__size -= 1
--------------------------------------------------------------------------------
[0.58192 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_9

def test_case_9():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        str_0 = singly_linked_list_0.__str__()
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
        assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'stack3.SinglyLinkedList'
        assert var_0.next is None
        node_0 = singly_linked_list_0.getHeadNode()
>       assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'stack3.Node'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:77: AssertionError
   - [#  38] CRP stack3: 
--------------------------------------------------------------------------------
   40:         if self.__size >= 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
   43:             self.__head = self.__sentinel
-  44:             self.__size -= 1
+  44:             self.__size -= 2
   45:             return nodeToRemove
   46:         else:
   47:             nodeToRemove = self.__head
   48:             self.__sentinel.next = self.__head.next
--------------------------------------------------------------------------------
[0.44753 s] survived
   - [#  39] CRP stack3: 
--------------------------------------------------------------------------------
   46:         else:
   47:             nodeToRemove = self.__head
   48:             self.__sentinel.next = self.__head.next
   49:             self.__head = self.__sentinel.next
-  50:             self.__size -= 1
+  50:             self.__size -= 2
   51:             return nodeToRemove
   52:     
   53:     def getHead(self) -> T:
   54:         
--------------------------------------------------------------------------------
[0.57192 s] survived
   - [#  40] CRP stack3: 
--------------------------------------------------------------------------------
   71:     def isEmpty(self) -> bool:
   72:         
   73:         '''Checks if linkedlist is empty.'''
   74:         
-  75:         return True if self.__size == 0 else False
+  75:         return True if self.__size == 1 else False
   76:     
   77:     def toArray(self) -> list:
   78:         
   79:         '''Converts linkedlist to list.'''
--------------------------------------------------------------------------------
[0.54480 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_3

def test_case_3():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        bool_0 = singly_linked_list_0.isEmpty()
>       assert bool_0 is True
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:25: AssertionError
   - [#  41] CRP stack3: 
--------------------------------------------------------------------------------
  121:     def isEmpty(self) -> bool:
  122:         
  123:         '''Check if stack is empty.'''
  124:         
- 125:         return True if self.__stack.getSize() == 0 else False
+ 125:         return True if self.__stack.getSize() == 1 else False
  126:     
  127:     def getSize(self) -> int:
  128:         
  129:         '''Get size of the stack.'''
--------------------------------------------------------------------------------
[0.58976 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_7

def test_case_7():
        stack_0 = module_0.Stack()
        bool_0 = stack_0.isEmpty()
>       assert bool_0 is True
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:59: AssertionError
   - [#  42] CRP stack3: 
--------------------------------------------------------------------------------
  133:     def __str__(self) -> str:
  134:         
  135:         '''Get string representation of the stack.'''
  136:         
- 137:         return str(self.__stack.toArray()[::-1])
+ 137:         return str(self.__stack.toArray()[::-2])
  138: 
  139: 
  140: if __name__ == '__main__':
  141:     pass
--------------------------------------------------------------------------------
[0.46430 s] survived
   - [#  43] CRP stack3: 
--------------------------------------------------------------------------------
  136:         
  137:         return str(self.__stack.toArray()[::-1])
  138: 
  139: 
- 140: if __name__ == '__main__':
+ 140: if __name__ == 'mutpy':
  141:     pass
--------------------------------------------------------------------------------
[0.47717 s] survived
   - [#  44] CRP stack3: 
--------------------------------------------------------------------------------
  136:         
  137:         return str(self.__stack.toArray()[::-1])
  138: 
  139: 
- 140: if __name__ == '__main__':
+ 140: if __name__ == '':
  141:     pass
--------------------------------------------------------------------------------
[0.54342 s] survived
   - [#  45] OIL stack3: 
--------------------------------------------------------------------------------
   82:         current = self.__head
   83:         while current:
   84:             arr.append(current.value)
   85:             current = current.next
-  86:         return arr
-  87:     
+  86:             break
+  87:         return arr
   88:     def __str__(self) -> str:
   89:         
   90:         '''Return String representation of linkedlist values.'''
   91:         
--------------------------------------------------------------------------------
[0.43135 s] survived
   - [#  46] OIL stack3: 
--------------------------------------------------------------------------------
   93:         current = self.__head
   94:         while current:
   95:             arr.append(current.value)
   96:             current = current.next
-  97:         return str(arr)
-  98: 
+  97:             break
+  98:         return str(arr)
   99: class Stack:
  100:     def __init__(self):
  101:         self.__stack = SinglyLinkedList()
  102:     
--------------------------------------------------------------------------------
[0.41566 s] survived
   - [#  47] ROR stack3: 
--------------------------------------------------------------------------------
   20:         
   21:         '''Add element to linked list.'''
   22:         
   23:         newNode = Node(value)
-  24:         if self.__size == 0:
+  24:         if self.__size != 0:
   25:             self.__head.next = newNode
   26:             self.__head = newNode
   27:             self.__size += 1
   28:         else:
--------------------------------------------------------------------------------
[0.47071 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
        assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'stack3.SinglyLinkedList'
>       assert var_0.next is None
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:14: AssertionError
   - [#  48] ROR stack3: 
--------------------------------------------------------------------------------
   34:     def remove(self):
   35:         
   36:         '''Remove node from linkedlist.'''
   37:         
-  38:         if self.__size == 0:
+  38:         if self.__size != 0:
   39:             return None
   40:         if self.__size >= 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
--------------------------------------------------------------------------------
[0.60199 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        var_0 = singly_linked_list_0.remove()
>       assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:12: AssertionError
   - [#  49] ROR stack3: 
--------------------------------------------------------------------------------
   36:         '''Remove node from linkedlist.'''
   37:         
   38:         if self.__size == 0:
   39:             return None
-  40:         if self.__size >= 1:
+  40:         if self.__size <= 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
   43:             self.__head = self.__sentinel
   44:             self.__size -= 1
--------------------------------------------------------------------------------
[0.46057 s] survived
   - [#  50] ROR stack3: 
--------------------------------------------------------------------------------
   36:         '''Remove node from linkedlist.'''
   37:         
   38:         if self.__size == 0:
   39:             return None
-  40:         if self.__size >= 1:
+  40:         if self.__size > 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
   43:             self.__head = self.__sentinel
   44:             self.__size -= 1
--------------------------------------------------------------------------------
[0.57449 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_9

def test_case_9():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        str_0 = singly_linked_list_0.__str__()
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
        assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'stack3.SinglyLinkedList'
        assert var_0.next is None
        node_0 = singly_linked_list_0.getHeadNode()
>       assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'stack3.Node'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:77: AssertionError
   - [#  51] ROR stack3: 
--------------------------------------------------------------------------------
   71:     def isEmpty(self) -> bool:
   72:         
   73:         '''Checks if linkedlist is empty.'''
   74:         
-  75:         return True if self.__size == 0 else False
+  75:         return True if self.__size != 0 else False
   76:     
   77:     def toArray(self) -> list:
   78:         
   79:         '''Converts linkedlist to list.'''
--------------------------------------------------------------------------------
[0.48872 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_3

def test_case_3():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        bool_0 = singly_linked_list_0.isEmpty()
>       assert bool_0 is True
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:25: AssertionError
   - [#  52] ROR stack3: 
--------------------------------------------------------------------------------
  121:     def isEmpty(self) -> bool:
  122:         
  123:         '''Check if stack is empty.'''
  124:         
- 125:         return True if self.__stack.getSize() == 0 else False
+ 125:         return True if self.__stack.getSize() != 0 else False
  126:     
  127:     def getSize(self) -> int:
  128:         
  129:         '''Get size of the stack.'''
--------------------------------------------------------------------------------
[0.57780 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_7

def test_case_7():
        stack_0 = module_0.Stack()
        bool_0 = stack_0.isEmpty()
>       assert bool_0 is True
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:59: AssertionError
   - [#  53] ROR stack3: 
--------------------------------------------------------------------------------
  136:         
  137:         return str(self.__stack.toArray()[::-1])
  138: 
  139: 
- 140: if __name__ == '__main__':
+ 140: if __name__ != '__main__':
  141:     pass
--------------------------------------------------------------------------------
[0.51524 s] survived
   - [#  54] SDI stack3: 
--------------------------------------------------------------------------------
    4: 
    5: T = TypeVar('T')
    6: 
    7: class Node:
-   8:     def __init__(self, value: T):
-   9:         self.value = value
-  10:         self.next = None
-  11: 
+   8:     @staticmethod
+   9:     def __init__(self, value: T):
+  10:         self.value = value
+  11:         self.next = None
   12: 
   13: class SinglyLinkedList:
   14:     def __init__(self):
   15:         self.__sentinel = Node(None)
--------------------------------------------------------------------------------
[0.61351 s] incompetent

TypeError: stack3:15: TypeError: Node.__init__() missing 1 required positional argument: 'value'

   - [#  55] SDI stack3: 
--------------------------------------------------------------------------------
   10:         self.next = None
   11: 
   12: 
   13: class SinglyLinkedList:
-  14:     def __init__(self):
-  15:         self.__sentinel = Node(None)
-  16:         self.__head = self.__sentinel
-  17:         self.__size = 0
-  18:     
+  14:     @staticmethod
+  15:     def __init__(self):
+  16:         self.__sentinel = Node(None)
+  17:         self.__head = self.__sentinel
+  18:         self.__size = 0
   19:     def add(self, value: T) -> None:
   20:         
   21:         '''Add element to linked list.'''
   22:         
--------------------------------------------------------------------------------
[0.55728 s] incompetent

TypeError: stack3:101: TypeError: SinglyLinkedList.__init__() missing 1 required positional argument: 'self'

   - [#  56] SDI stack3: 
--------------------------------------------------------------------------------
   15:         self.__sentinel = Node(None)
   16:         self.__head = self.__sentinel
   17:         self.__size = 0
   18:     
-  19:     def add(self, value: T) -> None:
-  20:         
-  21:         '''Add element to linked list.'''
-  22:         
-  23:         newNode = Node(value)
-  24:         if self.__size == 0:
-  25:             self.__head.next = newNode
-  26:             self.__head = newNode
-  27:             self.__size += 1
-  28:         else:
-  29:             self.__sentinel.next = newNode
-  30:             newNode.next = self.__head
-  31:             self.__head = newNode
-  32:             self.__size += 1
-  33:     
+  19:     @staticmethod
+  20:     def add(self, value: T) -> None:
+  21:         
+  22:         '''Add element to linked list.'''
+  23:         
+  24:         newNode = Node(value)
+  25:         if self.__size == 0:
+  26:             self.__head.next = newNode
+  27:             self.__head = newNode
+  28:             self.__size += 1
+  29:         else:
+  30:             self.__sentinel.next = newNode
+  31:             newNode.next = self.__head
+  32:             self.__head = newNode
+  33:             self.__size += 1
   34:     def remove(self):
   35:         
   36:         '''Remove node from linkedlist.'''
   37:         
--------------------------------------------------------------------------------
[0.52785 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:10: TypeError: SinglyLinkedList.add() missing 1 required positional argument: 'value'

   - [#  57] SDI stack3: 
--------------------------------------------------------------------------------
   30:             newNode.next = self.__head
   31:             self.__head = newNode
   32:             self.__size += 1
   33:     
-  34:     def remove(self):
-  35:         
-  36:         '''Remove node from linkedlist.'''
-  37:         
-  38:         if self.__size == 0:
-  39:             return None
-  40:         if self.__size >= 1:
-  41:             nodeToRemove = self.__head
-  42:             self.__sentinel.next = None
-  43:             self.__head = self.__sentinel
-  44:             self.__size -= 1
-  45:             return nodeToRemove
-  46:         else:
-  47:             nodeToRemove = self.__head
-  48:             self.__sentinel.next = self.__head.next
-  49:             self.__head = self.__sentinel.next
-  50:             self.__size -= 1
-  51:             return nodeToRemove
-  52:     
+  34:     @staticmethod
+  35:     def remove(self):
+  36:         
+  37:         '''Remove node from linkedlist.'''
+  38:         
+  39:         if self.__size == 0:
+  40:             return None
+  41:         if self.__size >= 1:
+  42:             nodeToRemove = self.__head
+  43:             self.__sentinel.next = None
+  44:             self.__head = self.__sentinel
+  45:             self.__size -= 1
+  46:             return nodeToRemove
+  47:         else:
+  48:             nodeToRemove = self.__head
+  49:             self.__sentinel.next = self.__head.next
+  50:             self.__head = self.__sentinel.next
+  51:             self.__size -= 1
+  52:             return nodeToRemove
   53:     def getHead(self) -> T:
   54:         
   55:         '''Get value of the linkedlist head node.'''
   56:         
--------------------------------------------------------------------------------
[0.66045 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:11: TypeError: SinglyLinkedList.remove() missing 1 required positional argument: 'self'

   - [#  58] SDI stack3: 
--------------------------------------------------------------------------------
   49:             self.__head = self.__sentinel.next
   50:             self.__size -= 1
   51:             return nodeToRemove
   52:     
-  53:     def getHead(self) -> T:
-  54:         
-  55:         '''Get value of the linkedlist head node.'''
-  56:         
-  57:         return self.__head.value
-  58:     
+  53:     @staticmethod
+  54:     def getHead(self) -> T:
+  55:         
+  56:         '''Get value of the linkedlist head node.'''
+  57:         
+  58:         return self.__head.value
   59:     def getHeadNode(self) -> Node:
   60:         
   61:         '''Get head node referance.'''
   62:         
--------------------------------------------------------------------------------
[0.53790 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:66: TypeError: SinglyLinkedList.getHead() missing 1 required positional argument: 'self'

   - [#  59] SDI stack3: 
--------------------------------------------------------------------------------
   55:         '''Get value of the linkedlist head node.'''
   56:         
   57:         return self.__head.value
   58:     
-  59:     def getHeadNode(self) -> Node:
-  60:         
-  61:         '''Get head node referance.'''
-  62:         
-  63:         return self.__head
-  64:     
+  59:     @staticmethod
+  60:     def getHeadNode(self) -> Node:
+  61:         
+  62:         '''Get head node referance.'''
+  63:         
+  64:         return self.__head
   65:     def getSize(self) -> int:
   66:         
   67:         '''Return size of the linkedlist.'''
   68:         
--------------------------------------------------------------------------------
[0.55579 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:30: TypeError: SinglyLinkedList.getHeadNode() missing 1 required positional argument: 'self'

   - [#  60] SDI stack3: 
--------------------------------------------------------------------------------
   61:         '''Get head node referance.'''
   62:         
   63:         return self.__head
   64:     
-  65:     def getSize(self) -> int:
-  66:         
-  67:         '''Return size of the linkedlist.'''
-  68:         
-  69:         return self.__size
-  70:     
+  65:     @staticmethod
+  66:     def getSize(self) -> int:
+  67:         
+  68:         '''Return size of the linkedlist.'''
+  69:         
+  70:         return self.__size
   71:     def isEmpty(self) -> bool:
   72:         
   73:         '''Checks if linkedlist is empty.'''
   74:         
--------------------------------------------------------------------------------
[0.50204 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:18: TypeError: SinglyLinkedList.getSize() missing 1 required positional argument: 'self'

   - [#  61] SDI stack3: 
--------------------------------------------------------------------------------
   67:         '''Return size of the linkedlist.'''
   68:         
   69:         return self.__size
   70:     
-  71:     def isEmpty(self) -> bool:
-  72:         
-  73:         '''Checks if linkedlist is empty.'''
-  74:         
-  75:         return True if self.__size == 0 else False
-  76:     
+  71:     @staticmethod
+  72:     def isEmpty(self) -> bool:
+  73:         
+  74:         '''Checks if linkedlist is empty.'''
+  75:         
+  76:         return True if self.__size == 0 else False
   77:     def toArray(self) -> list:
   78:         
   79:         '''Converts linkedlist to list.'''
   80:         
--------------------------------------------------------------------------------
[0.56985 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:24: TypeError: SinglyLinkedList.isEmpty() missing 1 required positional argument: 'self'

   - [#  62] SDI stack3: 
--------------------------------------------------------------------------------
   73:         '''Checks if linkedlist is empty.'''
   74:         
   75:         return True if self.__size == 0 else False
   76:     
-  77:     def toArray(self) -> list:
-  78:         
-  79:         '''Converts linkedlist to list.'''
-  80:         
-  81:         arr = []
-  82:         current = self.__head
-  83:         while current:
-  84:             arr.append(current.value)
-  85:             current = current.next
-  86:         return arr
-  87:     
+  77:     @staticmethod
+  78:     def toArray(self) -> list:
+  79:         
+  80:         '''Converts linkedlist to list.'''
+  81:         
+  82:         arr = []
+  83:         current = self.__head
+  84:         while current:
+  85:             arr.append(current.value)
+  86:             current = current.next
+  87:         return arr
   88:     def __str__(self) -> str:
   89:         
   90:         '''Return String representation of linkedlist values.'''
   91:         
--------------------------------------------------------------------------------
[0.56498 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:32: TypeError: SinglyLinkedList.toArray() missing 1 required positional argument: 'self'

   - [#  63] SDI stack3: 
--------------------------------------------------------------------------------
   84:             arr.append(current.value)
   85:             current = current.next
   86:         return arr
   87:     
-  88:     def __str__(self) -> str:
-  89:         
-  90:         '''Return String representation of linkedlist values.'''
-  91:         
-  92:         arr = []
-  93:         current = self.__head
-  94:         while current:
-  95:             arr.append(current.value)
-  96:             current = current.next
-  97:         return str(arr)
-  98: 
+  88:     @staticmethod
+  89:     def __str__(self) -> str:
+  90:         
+  91:         '''Return String representation of linkedlist values.'''
+  92:         
+  93:         arr = []
+  94:         current = self.__head
+  95:         while current:
+  96:             arr.append(current.value)
+  97:             current = current.next
+  98:         return str(arr)
   99: class Stack:
  100:     def __init__(self):
  101:         self.__stack = SinglyLinkedList()
  102:     
--------------------------------------------------------------------------------
[0.56497 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:53: TypeError: SinglyLinkedList.__str__() missing 1 required positional argument: 'self'

   - [#  64] SDI stack3: 
--------------------------------------------------------------------------------
   96:             current = current.next
   97:         return str(arr)
   98: 
   99: class Stack:
- 100:     def __init__(self):
- 101:         self.__stack = SinglyLinkedList()
- 102:     
+ 100:     @staticmethod
+ 101:     def __init__(self):
+ 102:         self.__stack = SinglyLinkedList()
  103:     def push(self, value: T) -> None:
  104:         
  105:         '''Add element to the top of the stack.'''
  106:         
--------------------------------------------------------------------------------
[0.56328 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:6: TypeError: Stack.__init__() missing 1 required positional argument: 'self'

   - [#  65] SDI stack3: 
--------------------------------------------------------------------------------
   99: class Stack:
  100:     def __init__(self):
  101:         self.__stack = SinglyLinkedList()
  102:     
- 103:     def push(self, value: T) -> None:
- 104:         
- 105:         '''Add element to the top of the stack.'''
- 106:         
- 107:         self.__stack.add(value)
- 108:     
+ 103:     @staticmethod
+ 104:     def push(self, value: T) -> None:
+ 105:         
+ 106:         '''Add element to the top of the stack.'''
+ 107:         
+ 108:         self.__stack.add(value)
  109:     def pop(self) -> T:
  110:         
  111:         '''Remove element from the top of the stack.'''
  112:         
--------------------------------------------------------------------------------
[0.60088 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:86: TypeError: Stack.push() missing 1 required positional argument: 'value'

   - [#  66] SDI stack3: 
--------------------------------------------------------------------------------
  105:         '''Add element to the top of the stack.'''
  106:         
  107:         self.__stack.add(value)
  108:     
- 109:     def pop(self) -> T:
- 110:         
- 111:         '''Remove element from the top of the stack.'''
- 112:         
- 113:         return self.__stack.remove()
- 114:     
+ 109:     @staticmethod
+ 110:     def pop(self) -> T:
+ 111:         
+ 112:         '''Remove element from the top of the stack.'''
+ 113:         
+ 114:         return self.__stack.remove()
  115:     def peek(self) -> T:
  116:         
  117:         '''View top element in the stack.'''
  118:         
--------------------------------------------------------------------------------
[0.59224 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:60: TypeError: Stack.pop() missing 1 required positional argument: 'self'

   - [#  67] SDI stack3: 
--------------------------------------------------------------------------------
  111:         '''Remove element from the top of the stack.'''
  112:         
  113:         return self.__stack.remove()
  114:     
- 115:     def peek(self) -> T:
- 116:         
- 117:         '''View top element in the stack.'''
- 118:         
- 119:         return self.__stack.getHead()
- 120:     
+ 115:     @staticmethod
+ 116:     def peek(self) -> T:
+ 117:         
+ 118:         '''View top element in the stack.'''
+ 119:         
+ 120:         return self.__stack.getHead()
  121:     def isEmpty(self) -> bool:
  122:         
  123:         '''Check if stack is empty.'''
  124:         
--------------------------------------------------------------------------------
[0.71060 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:94: TypeError: Stack.peek() missing 1 required positional argument: 'self'

   - [#  68] SDI stack3: 
--------------------------------------------------------------------------------
  117:         '''View top element in the stack.'''
  118:         
  119:         return self.__stack.getHead()
  120:     
- 121:     def isEmpty(self) -> bool:
- 122:         
- 123:         '''Check if stack is empty.'''
- 124:         
- 125:         return True if self.__stack.getSize() == 0 else False
- 126:     
+ 121:     @staticmethod
+ 122:     def isEmpty(self) -> bool:
+ 123:         
+ 124:         '''Check if stack is empty.'''
+ 125:         
+ 126:         return True if self.__stack.getSize() == 0 else False
  127:     def getSize(self) -> int:
  128:         
  129:         '''Get size of the stack.'''
  130:         
--------------------------------------------------------------------------------
[0.56788 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:58: TypeError: Stack.isEmpty() missing 1 required positional argument: 'self'

   - [#  69] SDI stack3: 
--------------------------------------------------------------------------------
  123:         '''Check if stack is empty.'''
  124:         
  125:         return True if self.__stack.getSize() == 0 else False
  126:     
- 127:     def getSize(self) -> int:
- 128:         
- 129:         '''Get size of the stack.'''
- 130:         
- 131:         return self.__stack.getSize()
- 132:     
+ 127:     @staticmethod
+ 128:     def getSize(self) -> int:
+ 129:         
+ 130:         '''Get size of the stack.'''
+ 131:         
+ 132:         return self.__stack.getSize()
  133:     def __str__(self) -> str:
  134:         
  135:         '''Get string representation of the stack.'''
  136:         
--------------------------------------------------------------------------------
[0.61614 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:101: TypeError: Stack.getSize() missing 1 required positional argument: 'self'

   - [#  70] SDI stack3: 
--------------------------------------------------------------------------------
  129:         '''Get size of the stack.'''
  130:         
  131:         return self.__stack.getSize()
  132:     
- 133:     def __str__(self) -> str:
- 134:         
- 135:         '''Get string representation of the stack.'''
- 136:         
- 137:         return str(self.__stack.toArray()[::-1])
- 138: 
+ 133:     @staticmethod
+ 134:     def __str__(self) -> str:
+ 135:         
+ 136:         '''Get string representation of the stack.'''
+ 137:         
+ 138:         return str(self.__stack.toArray()[::-1])
  139: 
  140: if __name__ == '__main__':
  141:     pass
--------------------------------------------------------------------------------
[0.55134 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack3/DYNAMOSA-MOSA/test_stack3_MOSA.py:48: TypeError: Stack.__str__() missing 1 required positional argument: 'self'

   - [#  71] SDL stack3: 
--------------------------------------------------------------------------------
    1: '''Stack is an abstract data type that serves as a collection of elements, with two main principal operations: Push, which adds an element to the collection, and Pop, which removes the most recently added element that was not yet removed.'''
    2: 
    3: from typing import TypeVar
    4: 
-   5: T = TypeVar('T')
+   5: pass
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[0.00000 s] incompetent

NameError: name 'T' is not defined

   - [#  72] SDL stack3: 
--------------------------------------------------------------------------------
    5: T = TypeVar('T')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
-   9:         self.value = value
+   9:         pass
   10:         self.next = None
   11: 
   12: 
   13: class SinglyLinkedList:
--------------------------------------------------------------------------------
[0.56179 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
>       assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'stack3.SinglyLinkedList'
E       AttributeError: 'Node' object has no attribute 'value'

DYNAMOSA-MOSA/test_stack3_MOSA.py:13: AttributeError
   - [#  73] SDL stack3: 
--------------------------------------------------------------------------------
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
-  10:         self.next = None
+  10:         pass
   11: 
   12: 
   13: class SinglyLinkedList:
   14:     def __init__(self):
--------------------------------------------------------------------------------
[0.57905 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
        assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'stack3.SinglyLinkedList'
>       assert var_0.next is None
E       AttributeError: 'Node' object has no attribute 'next'

DYNAMOSA-MOSA/test_stack3_MOSA.py:14: AttributeError
   - [#  74] SDL stack3: 
--------------------------------------------------------------------------------
   11: 
   12: 
   13: class SinglyLinkedList:
   14:     def __init__(self):
-  15:         self.__sentinel = Node(None)
+  15:         pass
   16:         self.__head = self.__sentinel
   17:         self.__size = 0
   18:     
   19:     def add(self, value: T) -> None:
--------------------------------------------------------------------------------
[0.54392 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_0

def test_case_0():
>       stack_0 = module_0.Stack()

DYNAMOSA-MOSA/test_stack3_MOSA.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
stack3:101: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7ab1540>

>   ???
E   AttributeError: 'SinglyLinkedList' object has no attribute '_SinglyLinkedList__sentinel'

stack3:16: AttributeError
   - [#  75] SDL stack3: 
--------------------------------------------------------------------------------
   12: 
   13: class SinglyLinkedList:
   14:     def __init__(self):
   15:         self.__sentinel = Node(None)
-  16:         self.__head = self.__sentinel
+  16:         pass
   17:         self.__size = 0
   18:     
   19:     def add(self, value: T) -> None:
   20:         
--------------------------------------------------------------------------------
[0.55048 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       none_type_0 = singly_linked_list_0.add(singly_linked_list_0)

DYNAMOSA-MOSA/test_stack3_MOSA.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7be4880>
value = <stack3.SinglyLinkedList object at 0x7febb7be4880>

>   ???
E   AttributeError: 'SinglyLinkedList' object has no attribute '_SinglyLinkedList__head'. Did you mean: '_SinglyLinkedList__size'?

stack3:25: AttributeError
   - [#  76] SDL stack3: 
--------------------------------------------------------------------------------
   13: class SinglyLinkedList:
   14:     def __init__(self):
   15:         self.__sentinel = Node(None)
   16:         self.__head = self.__sentinel
-  17:         self.__size = 0
+  17:         pass
   18:     
   19:     def add(self, value: T) -> None:
   20:         
   21:         '''Add element to linked list.'''
--------------------------------------------------------------------------------
[0.57032 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       none_type_0 = singly_linked_list_0.add(singly_linked_list_0)

DYNAMOSA-MOSA/test_stack3_MOSA.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7bdfb50>
value = <stack3.SinglyLinkedList object at 0x7febb7bdfb50>

>   ???
E   AttributeError: 'SinglyLinkedList' object has no attribute '_SinglyLinkedList__size'. Did you mean: '_SinglyLinkedList__head'?

stack3:24: AttributeError
   - [#  77] SDL stack3: 
--------------------------------------------------------------------------------
   19:     def add(self, value: T) -> None:
   20:         
   21:         '''Add element to linked list.'''
   22:         
-  23:         newNode = Node(value)
+  23:         pass
   24:         if self.__size == 0:
   25:             self.__head.next = newNode
   26:             self.__head = newNode
   27:             self.__size += 1
--------------------------------------------------------------------------------
[0.61003 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       none_type_0 = singly_linked_list_0.add(singly_linked_list_0)

DYNAMOSA-MOSA/test_stack3_MOSA.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7ccac20>
value = <stack3.SinglyLinkedList object at 0x7febb7ccac20>

>   ???
E   NameError: name 'newNode' is not defined

stack3:25: NameError
   - [#  78] SDL stack3: 
--------------------------------------------------------------------------------
   21:         '''Add element to linked list.'''
   22:         
   23:         newNode = Node(value)
   24:         if self.__size == 0:
-  25:             self.__head.next = newNode
+  25:             pass
   26:             self.__head = newNode
   27:             self.__size += 1
   28:         else:
   29:             self.__sentinel.next = newNode
--------------------------------------------------------------------------------
[0.50207 s] survived
   - [#  79] SDL stack3: 
--------------------------------------------------------------------------------
   22:         
   23:         newNode = Node(value)
   24:         if self.__size == 0:
   25:             self.__head.next = newNode
-  26:             self.__head = newNode
+  26:             pass
   27:             self.__size += 1
   28:         else:
   29:             self.__sentinel.next = newNode
   30:             newNode.next = self.__head
--------------------------------------------------------------------------------
[0.55229 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
>       assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'stack3.SinglyLinkedList'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:13: AssertionError
   - [#  80] SDL stack3: 
--------------------------------------------------------------------------------
   25:             self.__head.next = newNode
   26:             self.__head = newNode
   27:             self.__size += 1
   28:         else:
-  29:             self.__sentinel.next = newNode
+  29:             pass
   30:             newNode.next = self.__head
   31:             self.__head = newNode
   32:             self.__size += 1
   33:     
--------------------------------------------------------------------------------
[0.48789 s] survived
   - [#  81] SDL stack3: 
--------------------------------------------------------------------------------
   26:             self.__head = newNode
   27:             self.__size += 1
   28:         else:
   29:             self.__sentinel.next = newNode
-  30:             newNode.next = self.__head
+  30:             pass
   31:             self.__head = newNode
   32:             self.__size += 1
   33:     
   34:     def remove(self):
--------------------------------------------------------------------------------
[0.60796 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_15

def test_case_15():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        list_0 = singly_linked_list_0.toArray()
        str_0 = singly_linked_list_0.__str__()
        assert str_0 == '[None]'
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        bool_0 = singly_linked_list_0.isEmpty()
        assert bool_0 is False
        none_type_1 = singly_linked_list_0.add(list_0)
        bool_1 = singly_linked_list_0.isEmpty()
        assert bool_1 is False
        list_1 = singly_linked_list_0.toArray()
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
        assert var_0.value == [None]
>       assert f'{type(var_0.next).__module__}.{type(var_0.next).__qualname__}' == 'stack3.Node'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:141: AssertionError
   - [#  82] SDL stack3: 
--------------------------------------------------------------------------------
   27:             self.__size += 1
   28:         else:
   29:             self.__sentinel.next = newNode
   30:             newNode.next = self.__head
-  31:             self.__head = newNode
+  31:             pass
   32:             self.__size += 1
   33:     
   34:     def remove(self):
   35:         
--------------------------------------------------------------------------------
[0.69115 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_15

def test_case_15():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        list_0 = singly_linked_list_0.toArray()
        str_0 = singly_linked_list_0.__str__()
        assert str_0 == '[None]'
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        bool_0 = singly_linked_list_0.isEmpty()
        assert bool_0 is False
        none_type_1 = singly_linked_list_0.add(list_0)
        bool_1 = singly_linked_list_0.isEmpty()
        assert bool_1 is False
        list_1 = singly_linked_list_0.toArray()
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
>       assert var_0.value == [None]
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:140: AssertionError
   - [#  83] SDL stack3: 
--------------------------------------------------------------------------------
   35:         
   36:         '''Remove node from linkedlist.'''
   37:         
   38:         if self.__size == 0:
-  39:             return None
+  39:             pass
   40:         if self.__size >= 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
   43:             self.__head = self.__sentinel
--------------------------------------------------------------------------------
[0.44666 s] survived
   - [#  84] SDL stack3: 
--------------------------------------------------------------------------------
   37:         
   38:         if self.__size == 0:
   39:             return None
   40:         if self.__size >= 1:
-  41:             nodeToRemove = self.__head
+  41:             pass
   42:             self.__sentinel.next = None
   43:             self.__head = self.__sentinel
   44:             self.__size -= 1
   45:             return nodeToRemove
--------------------------------------------------------------------------------
[0.56318 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
>       var_0 = singly_linked_list_0.remove()

DYNAMOSA-MOSA/test_stack3_MOSA.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7e19ea0>

>   ???
E   UnboundLocalError: local variable 'nodeToRemove' referenced before assignment

stack3:45: UnboundLocalError
   - [#  85] SDL stack3: 
--------------------------------------------------------------------------------
   38:         if self.__size == 0:
   39:             return None
   40:         if self.__size >= 1:
   41:             nodeToRemove = self.__head
-  42:             self.__sentinel.next = None
+  42:             pass
   43:             self.__head = self.__sentinel
   44:             self.__size -= 1
   45:             return nodeToRemove
   46:         else:
--------------------------------------------------------------------------------
[0.57553 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_4

def test_case_4():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        node_0 = singly_linked_list_0.getHeadNode()
        int_0 = singly_linked_list_0.getSize()
        list_0 = singly_linked_list_0.toArray()
        none_type_0 = singly_linked_list_0.add(list_0)
        bool_0 = singly_linked_list_0.isEmpty()
        assert bool_0 is False
        var_0 = singly_linked_list_0.remove()
>       assert node_0.next is None
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:37: AssertionError
   - [#  86] SDL stack3: 
--------------------------------------------------------------------------------
   39:             return None
   40:         if self.__size >= 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
-  43:             self.__head = self.__sentinel
+  43:             pass
   44:             self.__size -= 1
   45:             return nodeToRemove
   46:         else:
   47:             nodeToRemove = self.__head
--------------------------------------------------------------------------------
[0.61475 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_9

def test_case_9():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        str_0 = singly_linked_list_0.__str__()
        var_0 = singly_linked_list_0.remove()
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
        assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'stack3.SinglyLinkedList'
        assert var_0.next is None
        node_0 = singly_linked_list_0.getHeadNode()
        assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'stack3.Node'
>       assert node_0.value is None
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:78: AssertionError
   - [#  87] SDL stack3: 
--------------------------------------------------------------------------------
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
   43:             self.__head = self.__sentinel
   44:             self.__size -= 1
-  45:             return nodeToRemove
+  45:             pass
   46:         else:
   47:             nodeToRemove = self.__head
   48:             self.__sentinel.next = self.__head.next
   49:             self.__head = self.__sentinel.next
--------------------------------------------------------------------------------
[0.56212 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
        var_0 = singly_linked_list_0.remove()
>       assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:12: AssertionError
   - [#  88] SDL stack3: 
--------------------------------------------------------------------------------
   43:             self.__head = self.__sentinel
   44:             self.__size -= 1
   45:             return nodeToRemove
   46:         else:
-  47:             nodeToRemove = self.__head
+  47:             pass
   48:             self.__sentinel.next = self.__head.next
   49:             self.__head = self.__sentinel.next
   50:             self.__size -= 1
   51:             return nodeToRemove
--------------------------------------------------------------------------------
[0.49414 s] survived
   - [#  89] SDL stack3: 
--------------------------------------------------------------------------------
   44:             self.__size -= 1
   45:             return nodeToRemove
   46:         else:
   47:             nodeToRemove = self.__head
-  48:             self.__sentinel.next = self.__head.next
+  48:             pass
   49:             self.__head = self.__sentinel.next
   50:             self.__size -= 1
   51:             return nodeToRemove
   52:     
--------------------------------------------------------------------------------
[0.50138 s] survived
   - [#  90] SDL stack3: 
--------------------------------------------------------------------------------
   45:             return nodeToRemove
   46:         else:
   47:             nodeToRemove = self.__head
   48:             self.__sentinel.next = self.__head.next
-  49:             self.__head = self.__sentinel.next
+  49:             pass
   50:             self.__size -= 1
   51:             return nodeToRemove
   52:     
   53:     def getHead(self) -> T:
--------------------------------------------------------------------------------
[0.50545 s] survived
   - [#  91] SDL stack3: 
--------------------------------------------------------------------------------
   47:             nodeToRemove = self.__head
   48:             self.__sentinel.next = self.__head.next
   49:             self.__head = self.__sentinel.next
   50:             self.__size -= 1
-  51:             return nodeToRemove
+  51:             pass
   52:     
   53:     def getHead(self) -> T:
   54:         
   55:         '''Get value of the linkedlist head node.'''
--------------------------------------------------------------------------------
[0.49331 s] survived
   - [#  92] SDL stack3: 
--------------------------------------------------------------------------------
   53:     def getHead(self) -> T:
   54:         
   55:         '''Get value of the linkedlist head node.'''
   56:         
-  57:         return self.__head.value
+  57:         pass
   58:     
   59:     def getHeadNode(self) -> Node:
   60:         
   61:         '''Get head node referance.'''
--------------------------------------------------------------------------------
[0.60408 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_13

def test_case_13():
        stack_0 = module_0.Stack()
        none_type_0 = stack_0.push(stack_0)
        var_0 = stack_0.peek()
>       bool_0 = var_0.isEmpty()
E       AttributeError: 'NoneType' object has no attribute 'isEmpty'

DYNAMOSA-MOSA/test_stack3_MOSA.py:107: AttributeError
   - [#  93] SDL stack3: 
--------------------------------------------------------------------------------
   59:     def getHeadNode(self) -> Node:
   60:         
   61:         '''Get head node referance.'''
   62:         
-  63:         return self.__head
+  63:         pass
   64:     
   65:     def getSize(self) -> int:
   66:         
   67:         '''Return size of the linkedlist.'''
--------------------------------------------------------------------------------
[0.56172 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_4

def test_case_4():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        node_0 = singly_linked_list_0.getHeadNode()
        int_0 = singly_linked_list_0.getSize()
        list_0 = singly_linked_list_0.toArray()
        none_type_0 = singly_linked_list_0.add(list_0)
        bool_0 = singly_linked_list_0.isEmpty()
        assert bool_0 is False
        var_0 = singly_linked_list_0.remove()
>       assert node_0.next is None
E       AttributeError: 'NoneType' object has no attribute 'next'

DYNAMOSA-MOSA/test_stack3_MOSA.py:37: AttributeError
   - [#  94] SDL stack3: 
--------------------------------------------------------------------------------
   65:     def getSize(self) -> int:
   66:         
   67:         '''Return size of the linkedlist.'''
   68:         
-  69:         return self.__size
+  69:         pass
   70:     
   71:     def isEmpty(self) -> bool:
   72:         
   73:         '''Checks if linkedlist is empty.'''
--------------------------------------------------------------------------------
[0.56554 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_7

def test_case_7():
        stack_0 = module_0.Stack()
        bool_0 = stack_0.isEmpty()
>       assert bool_0 is True
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:59: AssertionError
   - [#  95] SDL stack3: 
--------------------------------------------------------------------------------
   71:     def isEmpty(self) -> bool:
   72:         
   73:         '''Checks if linkedlist is empty.'''
   74:         
-  75:         return True if self.__size == 0 else False
+  75:         pass
   76:     
   77:     def toArray(self) -> list:
   78:         
   79:         '''Converts linkedlist to list.'''
--------------------------------------------------------------------------------
[0.56301 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_3

def test_case_3():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        bool_0 = singly_linked_list_0.isEmpty()
>       assert bool_0 is True
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:25: AssertionError
   - [#  96] SDL stack3: 
--------------------------------------------------------------------------------
   77:     def toArray(self) -> list:
   78:         
   79:         '''Converts linkedlist to list.'''
   80:         
-  81:         arr = []
+  81:         pass
   82:         current = self.__head
   83:         while current:
   84:             arr.append(current.value)
   85:             current = current.next
--------------------------------------------------------------------------------
[0.57650 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_4

def test_case_4():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        node_0 = singly_linked_list_0.getHeadNode()
        int_0 = singly_linked_list_0.getSize()
>       list_0 = singly_linked_list_0.toArray()

DYNAMOSA-MOSA/test_stack3_MOSA.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7af9bd0>

>   ???
E   NameError: name 'arr' is not defined

stack3:84: NameError
   - [#  97] SDL stack3: 
--------------------------------------------------------------------------------
   78:         
   79:         '''Converts linkedlist to list.'''
   80:         
   81:         arr = []
-  82:         current = self.__head
+  82:         pass
   83:         while current:
   84:             arr.append(current.value)
   85:             current = current.next
   86:         return arr
--------------------------------------------------------------------------------
[0.58392 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_4

def test_case_4():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        node_0 = singly_linked_list_0.getHeadNode()
        int_0 = singly_linked_list_0.getSize()
>       list_0 = singly_linked_list_0.toArray()

DYNAMOSA-MOSA/test_stack3_MOSA.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7d93130>

>   ???
E   UnboundLocalError: local variable 'current' referenced before assignment

stack3:83: UnboundLocalError
   - [#  98] SDL stack3: 
--------------------------------------------------------------------------------
   80:         
   81:         arr = []
   82:         current = self.__head
   83:         while current:
-  84:             arr.append(current.value)
+  84:             pass
   85:             current = current.next
   86:         return arr
   87:     
   88:     def __str__(self) -> str:
--------------------------------------------------------------------------------
[0.62108 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_4

def test_case_4():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        node_0 = singly_linked_list_0.getHeadNode()
        int_0 = singly_linked_list_0.getSize()
        list_0 = singly_linked_list_0.toArray()
        none_type_0 = singly_linked_list_0.add(list_0)
        bool_0 = singly_linked_list_0.isEmpty()
        assert bool_0 is False
        var_0 = singly_linked_list_0.remove()
        assert node_0.next is None
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
>       assert var_0.value == [None]
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:39: AssertionError
   - [#  99] SDL stack3: 
--------------------------------------------------------------------------------
   81:         arr = []
   82:         current = self.__head
   83:         while current:
   84:             arr.append(current.value)
-  85:             current = current.next
+  85:             pass
   86:         return arr
   87:     
   88:     def __str__(self) -> str:
   89:         
--------------------------------------------------------------------------------
[5.00627 s] timeout
   - [# 100] SDL stack3: 
--------------------------------------------------------------------------------
   82:         current = self.__head
   83:         while current:
   84:             arr.append(current.value)
   85:             current = current.next
-  86:         return arr
+  86:         pass
   87:     
   88:     def __str__(self) -> str:
   89:         
   90:         '''Return String representation of linkedlist values.'''
--------------------------------------------------------------------------------
[0.54378 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_4

def test_case_4():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        node_0 = singly_linked_list_0.getHeadNode()
        int_0 = singly_linked_list_0.getSize()
        list_0 = singly_linked_list_0.toArray()
        none_type_0 = singly_linked_list_0.add(list_0)
        bool_0 = singly_linked_list_0.isEmpty()
        assert bool_0 is False
        var_0 = singly_linked_list_0.remove()
        assert node_0.next is None
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
>       assert var_0.value == [None]
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:39: AssertionError
   - [# 101] SDL stack3: 
--------------------------------------------------------------------------------
   88:     def __str__(self) -> str:
   89:         
   90:         '''Return String representation of linkedlist values.'''
   91:         
-  92:         arr = []
+  92:         pass
   93:         current = self.__head
   94:         while current:
   95:             arr.append(current.value)
   96:             current = current.next
--------------------------------------------------------------------------------
[0.56277 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_6

def test_case_6():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       str_0 = singly_linked_list_0.__str__()

DYNAMOSA-MOSA/test_stack3_MOSA.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7ab2980>

>   ???
E   NameError: name 'arr' is not defined

stack3:95: NameError
   - [# 102] SDL stack3: 
--------------------------------------------------------------------------------
   89:         
   90:         '''Return String representation of linkedlist values.'''
   91:         
   92:         arr = []
-  93:         current = self.__head
+  93:         pass
   94:         while current:
   95:             arr.append(current.value)
   96:             current = current.next
   97:         return str(arr)
--------------------------------------------------------------------------------
[0.58431 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_6

def test_case_6():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       str_0 = singly_linked_list_0.__str__()

DYNAMOSA-MOSA/test_stack3_MOSA.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7c3e350>

>   ???
E   UnboundLocalError: local variable 'current' referenced before assignment

stack3:94: UnboundLocalError
   - [# 103] SDL stack3: 
--------------------------------------------------------------------------------
   91:         
   92:         arr = []
   93:         current = self.__head
   94:         while current:
-  95:             arr.append(current.value)
+  95:             pass
   96:             current = current.next
   97:         return str(arr)
   98: 
   99: class Stack:
--------------------------------------------------------------------------------
[0.57312 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_6

def test_case_6():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        str_0 = singly_linked_list_0.__str__()
>       assert str_0 == '[None]'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:54: AssertionError
   - [# 104] SDL stack3: 
--------------------------------------------------------------------------------
   92:         arr = []
   93:         current = self.__head
   94:         while current:
   95:             arr.append(current.value)
-  96:             current = current.next
+  96:             pass
   97:         return str(arr)
   98: 
   99: class Stack:
  100:     def __init__(self):
--------------------------------------------------------------------------------
[5.02104 s] timeout
   - [# 105] SDL stack3: 
--------------------------------------------------------------------------------
   93:         current = self.__head
   94:         while current:
   95:             arr.append(current.value)
   96:             current = current.next
-  97:         return str(arr)
+  97:         pass
   98: 
   99: class Stack:
  100:     def __init__(self):
  101:         self.__stack = SinglyLinkedList()
--------------------------------------------------------------------------------
[0.49881 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_6

def test_case_6():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        str_0 = singly_linked_list_0.__str__()
>       assert str_0 == '[None]'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:54: AssertionError
   - [# 106] SDL stack3: 
--------------------------------------------------------------------------------
   97:         return str(arr)
   98: 
   99: class Stack:
  100:     def __init__(self):
- 101:         self.__stack = SinglyLinkedList()
+ 101:         pass
  102:     
  103:     def push(self, value: T) -> None:
  104:         
  105:         '''Add element to the top of the stack.'''
--------------------------------------------------------------------------------
[0.57496 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_5

def test_case_5():
        stack_0 = module_0.Stack()
>       str_0 = stack_0.__str__()

DYNAMOSA-MOSA/test_stack3_MOSA.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.Stack object at 0x7febb79da2c0>

>   ???
E   AttributeError: 'Stack' object has no attribute '_Stack__stack'

stack3:137: AttributeError
   - [# 107] SDL stack3: 
--------------------------------------------------------------------------------
  103:     def push(self, value: T) -> None:
  104:         
  105:         '''Add element to the top of the stack.'''
  106:         
- 107:         self.__stack.add(value)
+ 107:         pass
  108:     
  109:     def pop(self) -> T:
  110:         
  111:         '''Remove element from the top of the stack.'''
--------------------------------------------------------------------------------
[0.60664 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_13

def test_case_13():
        stack_0 = module_0.Stack()
        none_type_0 = stack_0.push(stack_0)
        var_0 = stack_0.peek()
>       bool_0 = var_0.isEmpty()
E       AttributeError: 'NoneType' object has no attribute 'isEmpty'

DYNAMOSA-MOSA/test_stack3_MOSA.py:107: AttributeError
   - [# 108] SDL stack3: 
--------------------------------------------------------------------------------
  109:     def pop(self) -> T:
  110:         
  111:         '''Remove element from the top of the stack.'''
  112:         
- 113:         return self.__stack.remove()
+ 113:         pass
  114:     
  115:     def peek(self) -> T:
  116:         
  117:         '''View top element in the stack.'''
--------------------------------------------------------------------------------
[0.61294 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_13

def test_case_13():
        stack_0 = module_0.Stack()
        none_type_0 = stack_0.push(stack_0)
        var_0 = stack_0.peek()
        bool_0 = var_0.isEmpty()
        assert bool_0 is False
        stack_1 = module_0.Stack()
        var_1 = stack_0.pop()
>       assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'stack3.Node'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:111: AssertionError
   - [# 109] SDL stack3: 
--------------------------------------------------------------------------------
  115:     def peek(self) -> T:
  116:         
  117:         '''View top element in the stack.'''
  118:         
- 119:         return self.__stack.getHead()
+ 119:         pass
  120:     
  121:     def isEmpty(self) -> bool:
  122:         
  123:         '''Check if stack is empty.'''
--------------------------------------------------------------------------------
[0.61791 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_13

def test_case_13():
        stack_0 = module_0.Stack()
        none_type_0 = stack_0.push(stack_0)
        var_0 = stack_0.peek()
>       bool_0 = var_0.isEmpty()
E       AttributeError: 'NoneType' object has no attribute 'isEmpty'

DYNAMOSA-MOSA/test_stack3_MOSA.py:107: AttributeError
   - [# 110] SDL stack3: 
--------------------------------------------------------------------------------
  121:     def isEmpty(self) -> bool:
  122:         
  123:         '''Check if stack is empty.'''
  124:         
- 125:         return True if self.__stack.getSize() == 0 else False
+ 125:         pass
  126:     
  127:     def getSize(self) -> int:
  128:         
  129:         '''Get size of the stack.'''
--------------------------------------------------------------------------------
[0.57926 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_7

def test_case_7():
        stack_0 = module_0.Stack()
        bool_0 = stack_0.isEmpty()
>       assert bool_0 is True
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:59: AssertionError
   - [# 111] SDL stack3: 
--------------------------------------------------------------------------------
  127:     def getSize(self) -> int:
  128:         
  129:         '''Get size of the stack.'''
  130:         
- 131:         return self.__stack.getSize()
+ 131:         pass
  132:     
  133:     def __str__(self) -> str:
  134:         
  135:         '''Get string representation of the stack.'''
--------------------------------------------------------------------------------
[0.51419 s] survived
   - [# 112] SDL stack3: 
--------------------------------------------------------------------------------
  133:     def __str__(self) -> str:
  134:         
  135:         '''Get string representation of the stack.'''
  136:         
- 137:         return str(self.__stack.toArray()[::-1])
+ 137:         pass
  138: 
  139: 
  140: if __name__ == '__main__':
  141:     pass
--------------------------------------------------------------------------------
[0.59852 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_5

def test_case_5():
        stack_0 = module_0.Stack()
        str_0 = stack_0.__str__()
>       assert str_0 == '[None]'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:49: AssertionError
   - [# 113] SIR stack3: 
--------------------------------------------------------------------------------
  133:     def __str__(self) -> str:
  134:         
  135:         '''Get string representation of the stack.'''
  136:         
- 137:         return str(self.__stack.toArray()[::-1])
+ 137:         return str(self.__stack.toArray()[:])
  138: 
  139: 
  140: if __name__ == '__main__':
  141:     pass
--------------------------------------------------------------------------------
[0.49630 s] survived
   - [# 114] SVD stack3: 
--------------------------------------------------------------------------------
    5: T = TypeVar('T')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
-   9:         self.value = value
+   9:         value = value
   10:         self.next = None
   11: 
   12: 
   13: class SinglyLinkedList:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 115] SVD stack3: 
--------------------------------------------------------------------------------
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
-  10:         self.next = None
+  10:         next = None
   11: 
   12: 
   13: class SinglyLinkedList:
   14:     def __init__(self):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 116] SVD stack3: 
--------------------------------------------------------------------------------
   11: 
   12: 
   13: class SinglyLinkedList:
   14:     def __init__(self):
-  15:         self.__sentinel = Node(None)
+  15:         __sentinel = Node(None)
   16:         self.__head = self.__sentinel
   17:         self.__size = 0
   18:     
   19:     def add(self, value: T) -> None:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 117] SVD stack3: 
--------------------------------------------------------------------------------
   12: 
   13: class SinglyLinkedList:
   14:     def __init__(self):
   15:         self.__sentinel = Node(None)
-  16:         self.__head = self.__sentinel
+  16:         __head = self.__sentinel
   17:         self.__size = 0
   18:     
   19:     def add(self, value: T) -> None:
   20:         
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 118] SVD stack3: 
--------------------------------------------------------------------------------
   12: 
   13: class SinglyLinkedList:
   14:     def __init__(self):
   15:         self.__sentinel = Node(None)
-  16:         self.__head = self.__sentinel
+  16:         self.__head = __sentinel
   17:         self.__size = 0
   18:     
   19:     def add(self, value: T) -> None:
   20:         
--------------------------------------------------------------------------------
[0.55912 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_0

def test_case_0():
>       stack_0 = module_0.Stack()

DYNAMOSA-MOSA/test_stack3_MOSA.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
stack3:101: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7a820b0>

>   ???
E   NameError: name '_SinglyLinkedList__sentinel' is not defined

stack3:16: NameError
   - [# 119] SVD stack3: 
--------------------------------------------------------------------------------
   13: class SinglyLinkedList:
   14:     def __init__(self):
   15:         self.__sentinel = Node(None)
   16:         self.__head = self.__sentinel
-  17:         self.__size = 0
+  17:         __size = 0
   18:     
   19:     def add(self, value: T) -> None:
   20:         
   21:         '''Add element to linked list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 120] SVD stack3: 
--------------------------------------------------------------------------------
   20:         
   21:         '''Add element to linked list.'''
   22:         
   23:         newNode = Node(value)
-  24:         if self.__size == 0:
+  24:         if __size == 0:
   25:             self.__head.next = newNode
   26:             self.__head = newNode
   27:             self.__size += 1
   28:         else:
--------------------------------------------------------------------------------
[0.55411 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       none_type_0 = singly_linked_list_0.add(singly_linked_list_0)

DYNAMOSA-MOSA/test_stack3_MOSA.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7b5baf0>
value = <stack3.SinglyLinkedList object at 0x7febb7b5baf0>

>   ???
E   NameError: name '_SinglyLinkedList__size' is not defined

stack3:24: NameError
   - [# 121] SVD stack3: 
--------------------------------------------------------------------------------
   21:         '''Add element to linked list.'''
   22:         
   23:         newNode = Node(value)
   24:         if self.__size == 0:
-  25:             self.__head.next = newNode
+  25:             __head.next = newNode
   26:             self.__head = newNode
   27:             self.__size += 1
   28:         else:
   29:             self.__sentinel.next = newNode
--------------------------------------------------------------------------------
[0.69064 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       none_type_0 = singly_linked_list_0.add(singly_linked_list_0)

DYNAMOSA-MOSA/test_stack3_MOSA.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7caf160>
value = <stack3.SinglyLinkedList object at 0x7febb7caf160>

>   ???
E   NameError: name '_SinglyLinkedList__head' is not defined

stack3:25: NameError
   - [# 122] SVD stack3: 
--------------------------------------------------------------------------------
   22:         
   23:         newNode = Node(value)
   24:         if self.__size == 0:
   25:             self.__head.next = newNode
-  26:             self.__head = newNode
+  26:             __head = newNode
   27:             self.__size += 1
   28:         else:
   29:             self.__sentinel.next = newNode
   30:             newNode.next = self.__head
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 123] SVD stack3: 
--------------------------------------------------------------------------------
   23:         newNode = Node(value)
   24:         if self.__size == 0:
   25:             self.__head.next = newNode
   26:             self.__head = newNode
-  27:             self.__size += 1
+  27:             __size += 1
   28:         else:
   29:             self.__sentinel.next = newNode
   30:             newNode.next = self.__head
   31:             self.__head = newNode
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 124] SVD stack3: 
--------------------------------------------------------------------------------
   25:             self.__head.next = newNode
   26:             self.__head = newNode
   27:             self.__size += 1
   28:         else:
-  29:             self.__sentinel.next = newNode
+  29:             __sentinel.next = newNode
   30:             newNode.next = self.__head
   31:             self.__head = newNode
   32:             self.__size += 1
   33:     
--------------------------------------------------------------------------------
[0.64820 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_14

def test_case_14():
        stack_0 = module_0.Stack()
        int_0 = stack_0.peek()
        none_type_0 = stack_0.push(stack_0)
>       none_type_1 = stack_0.push(stack_0)

DYNAMOSA-MOSA/test_stack3_MOSA.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
stack3:107: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7b05cf0>
value = <stack3.Stack object at 0x7febb7b06230>

>   ???
E   NameError: name '_SinglyLinkedList__sentinel' is not defined

stack3:29: NameError
   - [# 125] SVD stack3: 
--------------------------------------------------------------------------------
   26:             self.__head = newNode
   27:             self.__size += 1
   28:         else:
   29:             self.__sentinel.next = newNode
-  30:             newNode.next = self.__head
+  30:             newNode.next = __head
   31:             self.__head = newNode
   32:             self.__size += 1
   33:     
   34:     def remove(self):
--------------------------------------------------------------------------------
[0.62521 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_14

def test_case_14():
        stack_0 = module_0.Stack()
        int_0 = stack_0.peek()
        none_type_0 = stack_0.push(stack_0)
>       none_type_1 = stack_0.push(stack_0)

DYNAMOSA-MOSA/test_stack3_MOSA.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
stack3:107: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7c14ee0>
value = <stack3.Stack object at 0x7febb7c157e0>

>   ???
E   NameError: name '_SinglyLinkedList__head' is not defined

stack3:30: NameError
   - [# 126] SVD stack3: 
--------------------------------------------------------------------------------
   27:             self.__size += 1
   28:         else:
   29:             self.__sentinel.next = newNode
   30:             newNode.next = self.__head
-  31:             self.__head = newNode
+  31:             __head = newNode
   32:             self.__size += 1
   33:     
   34:     def remove(self):
   35:         
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 127] SVD stack3: 
--------------------------------------------------------------------------------
   28:         else:
   29:             self.__sentinel.next = newNode
   30:             newNode.next = self.__head
   31:             self.__head = newNode
-  32:             self.__size += 1
+  32:             __size += 1
   33:     
   34:     def remove(self):
   35:         
   36:         '''Remove node from linkedlist.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 128] SVD stack3: 
--------------------------------------------------------------------------------
   34:     def remove(self):
   35:         
   36:         '''Remove node from linkedlist.'''
   37:         
-  38:         if self.__size == 0:
+  38:         if __size == 0:
   39:             return None
   40:         if self.__size >= 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
--------------------------------------------------------------------------------
[0.57731 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
>       var_0 = singly_linked_list_0.remove()

DYNAMOSA-MOSA/test_stack3_MOSA.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7e19bd0>

>   ???
E   NameError: name '_SinglyLinkedList__size' is not defined

stack3:38: NameError
   - [# 129] SVD stack3: 
--------------------------------------------------------------------------------
   36:         '''Remove node from linkedlist.'''
   37:         
   38:         if self.__size == 0:
   39:             return None
-  40:         if self.__size >= 1:
+  40:         if __size >= 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
   43:             self.__head = self.__sentinel
   44:             self.__size -= 1
--------------------------------------------------------------------------------
[0.57976 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
>       var_0 = singly_linked_list_0.remove()

DYNAMOSA-MOSA/test_stack3_MOSA.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7c84c10>

>   ???
E   NameError: name '_SinglyLinkedList__size' is not defined

stack3:40: NameError
   - [# 130] SVD stack3: 
--------------------------------------------------------------------------------
   37:         
   38:         if self.__size == 0:
   39:             return None
   40:         if self.__size >= 1:
-  41:             nodeToRemove = self.__head
+  41:             nodeToRemove = __head
   42:             self.__sentinel.next = None
   43:             self.__head = self.__sentinel
   44:             self.__size -= 1
   45:             return nodeToRemove
--------------------------------------------------------------------------------
[0.56223 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
>       var_0 = singly_linked_list_0.remove()

DYNAMOSA-MOSA/test_stack3_MOSA.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7ef70d0>

>   ???
E   NameError: name '_SinglyLinkedList__head' is not defined

stack3:41: NameError
   - [# 131] SVD stack3: 
--------------------------------------------------------------------------------
   38:         if self.__size == 0:
   39:             return None
   40:         if self.__size >= 1:
   41:             nodeToRemove = self.__head
-  42:             self.__sentinel.next = None
+  42:             __sentinel.next = None
   43:             self.__head = self.__sentinel
   44:             self.__size -= 1
   45:             return nodeToRemove
   46:         else:
--------------------------------------------------------------------------------
[0.58958 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
>       var_0 = singly_linked_list_0.remove()

DYNAMOSA-MOSA/test_stack3_MOSA.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7c143d0>

>   ???
E   NameError: name '_SinglyLinkedList__sentinel' is not defined

stack3:42: NameError
   - [# 132] SVD stack3: 
--------------------------------------------------------------------------------
   39:             return None
   40:         if self.__size >= 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
-  43:             self.__head = self.__sentinel
+  43:             __head = self.__sentinel
   44:             self.__size -= 1
   45:             return nodeToRemove
   46:         else:
   47:             nodeToRemove = self.__head
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 133] SVD stack3: 
--------------------------------------------------------------------------------
   39:             return None
   40:         if self.__size >= 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
-  43:             self.__head = self.__sentinel
+  43:             self.__head = __sentinel
   44:             self.__size -= 1
   45:             return nodeToRemove
   46:         else:
   47:             nodeToRemove = self.__head
--------------------------------------------------------------------------------
[0.55594 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_1

def test_case_1():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        none_type_0 = singly_linked_list_0.add(singly_linked_list_0)
>       var_0 = singly_linked_list_0.remove()

DYNAMOSA-MOSA/test_stack3_MOSA.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7cc6e30>

>   ???
E   NameError: name '_SinglyLinkedList__sentinel' is not defined

stack3:43: NameError
   - [# 134] SVD stack3: 
--------------------------------------------------------------------------------
   40:         if self.__size >= 1:
   41:             nodeToRemove = self.__head
   42:             self.__sentinel.next = None
   43:             self.__head = self.__sentinel
-  44:             self.__size -= 1
+  44:             __size -= 1
   45:             return nodeToRemove
   46:         else:
   47:             nodeToRemove = self.__head
   48:             self.__sentinel.next = self.__head.next
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 135] SVD stack3: 
--------------------------------------------------------------------------------
   43:             self.__head = self.__sentinel
   44:             self.__size -= 1
   45:             return nodeToRemove
   46:         else:
-  47:             nodeToRemove = self.__head
+  47:             nodeToRemove = __head
   48:             self.__sentinel.next = self.__head.next
   49:             self.__head = self.__sentinel.next
   50:             self.__size -= 1
   51:             return nodeToRemove
--------------------------------------------------------------------------------
[0.64236 s] survived
   - [# 136] SVD stack3: 
--------------------------------------------------------------------------------
   44:             self.__size -= 1
   45:             return nodeToRemove
   46:         else:
   47:             nodeToRemove = self.__head
-  48:             self.__sentinel.next = self.__head.next
+  48:             __sentinel.next = self.__head.next
   49:             self.__head = self.__sentinel.next
   50:             self.__size -= 1
   51:             return nodeToRemove
   52:     
--------------------------------------------------------------------------------
[0.62015 s] survived
   - [# 137] SVD stack3: 
--------------------------------------------------------------------------------
   44:             self.__size -= 1
   45:             return nodeToRemove
   46:         else:
   47:             nodeToRemove = self.__head
-  48:             self.__sentinel.next = self.__head.next
+  48:             self.__sentinel.next = __head.next
   49:             self.__head = self.__sentinel.next
   50:             self.__size -= 1
   51:             return nodeToRemove
   52:     
--------------------------------------------------------------------------------
[0.51757 s] survived
   - [# 138] SVD stack3: 
--------------------------------------------------------------------------------
   45:             return nodeToRemove
   46:         else:
   47:             nodeToRemove = self.__head
   48:             self.__sentinel.next = self.__head.next
-  49:             self.__head = self.__sentinel.next
+  49:             __head = self.__sentinel.next
   50:             self.__size -= 1
   51:             return nodeToRemove
   52:     
   53:     def getHead(self) -> T:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 139] SVD stack3: 
--------------------------------------------------------------------------------
   45:             return nodeToRemove
   46:         else:
   47:             nodeToRemove = self.__head
   48:             self.__sentinel.next = self.__head.next
-  49:             self.__head = self.__sentinel.next
+  49:             self.__head = __sentinel.next
   50:             self.__size -= 1
   51:             return nodeToRemove
   52:     
   53:     def getHead(self) -> T:
--------------------------------------------------------------------------------
[0.49544 s] survived
   - [# 140] SVD stack3: 
--------------------------------------------------------------------------------
   46:         else:
   47:             nodeToRemove = self.__head
   48:             self.__sentinel.next = self.__head.next
   49:             self.__head = self.__sentinel.next
-  50:             self.__size -= 1
+  50:             __size -= 1
   51:             return nodeToRemove
   52:     
   53:     def getHead(self) -> T:
   54:         
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 141] SVD stack3: 
--------------------------------------------------------------------------------
   53:     def getHead(self) -> T:
   54:         
   55:         '''Get value of the linkedlist head node.'''
   56:         
-  57:         return self.__head.value
+  57:         return __head.value
   58:     
   59:     def getHeadNode(self) -> Node:
   60:         
   61:         '''Get head node referance.'''
--------------------------------------------------------------------------------
[0.61731 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_8

def test_case_8():
        int_0 = 4462
        node_0 = module_0.Node(int_0)
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       var_0 = singly_linked_list_0.getHead()

DYNAMOSA-MOSA/test_stack3_MOSA.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7ce4550>

>   ???
E   NameError: name '_SinglyLinkedList__head' is not defined

stack3:57: NameError
   - [# 142] SVD stack3: 
--------------------------------------------------------------------------------
   59:     def getHeadNode(self) -> Node:
   60:         
   61:         '''Get head node referance.'''
   62:         
-  63:         return self.__head
+  63:         return __head
   64:     
   65:     def getSize(self) -> int:
   66:         
   67:         '''Return size of the linkedlist.'''
--------------------------------------------------------------------------------
[0.66223 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_4

def test_case_4():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       node_0 = singly_linked_list_0.getHeadNode()

DYNAMOSA-MOSA/test_stack3_MOSA.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7ada3b0>

>   ???
E   NameError: name '_SinglyLinkedList__head' is not defined

stack3:63: NameError
   - [# 143] SVD stack3: 
--------------------------------------------------------------------------------
   65:     def getSize(self) -> int:
   66:         
   67:         '''Return size of the linkedlist.'''
   68:         
-  69:         return self.__size
+  69:         return __size
   70:     
   71:     def isEmpty(self) -> bool:
   72:         
   73:         '''Checks if linkedlist is empty.'''
--------------------------------------------------------------------------------
[0.56901 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_2

def test_case_2():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       int_0 = singly_linked_list_0.getSize()

DYNAMOSA-MOSA/test_stack3_MOSA.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7cc2890>

>   ???
E   NameError: name '_SinglyLinkedList__size' is not defined

stack3:69: NameError
   - [# 144] SVD stack3: 
--------------------------------------------------------------------------------
   71:     def isEmpty(self) -> bool:
   72:         
   73:         '''Checks if linkedlist is empty.'''
   74:         
-  75:         return True if self.__size == 0 else False
+  75:         return True if __size == 0 else False
   76:     
   77:     def toArray(self) -> list:
   78:         
   79:         '''Converts linkedlist to list.'''
--------------------------------------------------------------------------------
[0.56666 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_3

def test_case_3():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       bool_0 = singly_linked_list_0.isEmpty()

DYNAMOSA-MOSA/test_stack3_MOSA.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb79954e0>

>   ???
E   NameError: name '_SinglyLinkedList__size' is not defined

stack3:75: NameError
   - [# 145] SVD stack3: 
--------------------------------------------------------------------------------
   78:         
   79:         '''Converts linkedlist to list.'''
   80:         
   81:         arr = []
-  82:         current = self.__head
+  82:         current = __head
   83:         while current:
   84:             arr.append(current.value)
   85:             current = current.next
   86:         return arr
--------------------------------------------------------------------------------
[0.67499 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_4

def test_case_4():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        node_0 = singly_linked_list_0.getHeadNode()
        int_0 = singly_linked_list_0.getSize()
>       list_0 = singly_linked_list_0.toArray()

DYNAMOSA-MOSA/test_stack3_MOSA.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb7995e70>

>   ???
E   NameError: name '_SinglyLinkedList__head' is not defined

stack3:82: NameError
   - [# 146] SVD stack3: 
--------------------------------------------------------------------------------
   89:         
   90:         '''Return String representation of linkedlist values.'''
   91:         
   92:         arr = []
-  93:         current = self.__head
+  93:         current = __head
   94:         while current:
   95:             arr.append(current.value)
   96:             current = current.next
   97:         return str(arr)
--------------------------------------------------------------------------------
[0.69255 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_6

def test_case_6():
        singly_linked_list_0 = module_0.SinglyLinkedList()
>       str_0 = singly_linked_list_0.__str__()

DYNAMOSA-MOSA/test_stack3_MOSA.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.SinglyLinkedList object at 0x7febb79e7d30>

>   ???
E   NameError: name '_SinglyLinkedList__head' is not defined

stack3:93: NameError
   - [# 147] SVD stack3: 
--------------------------------------------------------------------------------
   97:         return str(arr)
   98: 
   99: class Stack:
  100:     def __init__(self):
- 101:         self.__stack = SinglyLinkedList()
+ 101:         __stack = SinglyLinkedList()
  102:     
  103:     def push(self, value: T) -> None:
  104:         
  105:         '''Add element to the top of the stack.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 148] SVD stack3: 
--------------------------------------------------------------------------------
  103:     def push(self, value: T) -> None:
  104:         
  105:         '''Add element to the top of the stack.'''
  106:         
- 107:         self.__stack.add(value)
+ 107:         __stack.add(value)
  108:     
  109:     def pop(self) -> T:
  110:         
  111:         '''Remove element from the top of the stack.'''
--------------------------------------------------------------------------------
[0.59434 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_10

def test_case_10():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        stack_0 = module_0.Stack()
        bool_0 = False
        none_type_0 = singly_linked_list_0.add(bool_0)
>       none_type_1 = stack_0.push(singly_linked_list_0)

DYNAMOSA-MOSA/test_stack3_MOSA.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.Stack object at 0x7febb7adb040>
value = <stack3.SinglyLinkedList object at 0x7febb7adbca0>

>   ???
E   NameError: name '_Stack__stack' is not defined

stack3:107: NameError
   - [# 149] SVD stack3: 
--------------------------------------------------------------------------------
  109:     def pop(self) -> T:
  110:         
  111:         '''Remove element from the top of the stack.'''
  112:         
- 113:         return self.__stack.remove()
+ 113:         return __stack.remove()
  114:     
  115:     def peek(self) -> T:
  116:         
  117:         '''View top element in the stack.'''
--------------------------------------------------------------------------------
[0.60138 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_7

def test_case_7():
        stack_0 = module_0.Stack()
        bool_0 = stack_0.isEmpty()
        assert bool_0 is True
>       var_0 = stack_0.pop()

DYNAMOSA-MOSA/test_stack3_MOSA.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.Stack object at 0x7febb7a802b0>

>   ???
E   NameError: name '_Stack__stack' is not defined

stack3:113: NameError
   - [# 150] SVD stack3: 
--------------------------------------------------------------------------------
  115:     def peek(self) -> T:
  116:         
  117:         '''View top element in the stack.'''
  118:         
- 119:         return self.__stack.getHead()
+ 119:         return __stack.getHead()
  120:     
  121:     def isEmpty(self) -> bool:
  122:         
  123:         '''Check if stack is empty.'''
--------------------------------------------------------------------------------
[0.62253 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_11

def test_case_11():
        stack_0 = module_0.Stack()
>       var_0 = stack_0.peek()

DYNAMOSA-MOSA/test_stack3_MOSA.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.Stack object at 0x7febb7c170a0>

>   ???
E   NameError: name '_Stack__stack' is not defined

stack3:119: NameError
   - [# 151] SVD stack3: 
--------------------------------------------------------------------------------
  121:     def isEmpty(self) -> bool:
  122:         
  123:         '''Check if stack is empty.'''
  124:         
- 125:         return True if self.__stack.getSize() == 0 else False
+ 125:         return True if __stack.getSize() == 0 else False
  126:     
  127:     def getSize(self) -> int:
  128:         
  129:         '''Get size of the stack.'''
--------------------------------------------------------------------------------
[0.61018 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_7

def test_case_7():
        stack_0 = module_0.Stack()
>       bool_0 = stack_0.isEmpty()

DYNAMOSA-MOSA/test_stack3_MOSA.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.Stack object at 0x7febb7cfdf30>

>   ???
E   NameError: name '_Stack__stack' is not defined

stack3:125: NameError
   - [# 152] SVD stack3: 
--------------------------------------------------------------------------------
  127:     def getSize(self) -> int:
  128:         
  129:         '''Get size of the stack.'''
  130:         
- 131:         return self.__stack.getSize()
+ 131:         return __stack.getSize()
  132:     
  133:     def __str__(self) -> str:
  134:         
  135:         '''Get string representation of the stack.'''
--------------------------------------------------------------------------------
[0.62949 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_12

def test_case_12():
        stack_0 = module_0.Stack()
        str_0 = stack_0.__str__()
        assert str_0 == '[None]'
        var_0 = stack_0.peek()
>       int_0 = stack_0.getSize()

DYNAMOSA-MOSA/test_stack3_MOSA.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.Stack object at 0x7febb7a81c60>

>   ???
E   NameError: name '_Stack__stack' is not defined

stack3:131: NameError
   - [# 153] SVD stack3: 
--------------------------------------------------------------------------------
  133:     def __str__(self) -> str:
  134:         
  135:         '''Get string representation of the stack.'''
  136:         
- 137:         return str(self.__stack.toArray()[::-1])
+ 137:         return str(__stack.toArray()[::-1])
  138: 
  139: 
  140: if __name__ == '__main__':
  141:     pass
--------------------------------------------------------------------------------
[0.58506 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_5

def test_case_5():
        stack_0 = module_0.Stack()
>       str_0 = stack_0.__str__()

DYNAMOSA-MOSA/test_stack3_MOSA.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack3.Stack object at 0x7febb7cc6590>

>   ???
E   NameError: name '_Stack__stack' is not defined

stack3:137: NameError
   - [# 154] ZIL stack3: 
--------------------------------------------------------------------------------
   80:         
   81:         arr = []
   82:         current = self.__head
   83:         while current:
-  84:             arr.append(current.value)
-  85:             current = current.next
+  84:             break
+  85:         
   86:         return arr
   87:     
   88:     def __str__(self) -> str:
   89:         
--------------------------------------------------------------------------------
[0.58441 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_4

def test_case_4():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        node_0 = singly_linked_list_0.getHeadNode()
        int_0 = singly_linked_list_0.getSize()
        list_0 = singly_linked_list_0.toArray()
        none_type_0 = singly_linked_list_0.add(list_0)
        bool_0 = singly_linked_list_0.isEmpty()
        assert bool_0 is False
        var_0 = singly_linked_list_0.remove()
        assert node_0.next is None
        assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack3.Node'
>       assert var_0.value == [None]
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:39: AssertionError
   - [# 155] ZIL stack3: 
--------------------------------------------------------------------------------
   91:         
   92:         arr = []
   93:         current = self.__head
   94:         while current:
-  95:             arr.append(current.value)
-  96:             current = current.next
+  95:             break
+  96:         
   97:         return str(arr)
   98: 
   99: class Stack:
  100:     def __init__(self):
--------------------------------------------------------------------------------
[0.60237 s] killed by DYNAMOSA-MOSA/test_stack3_MOSA.py::test_case_6

def test_case_6():
        singly_linked_list_0 = module_0.SinglyLinkedList()
        str_0 = singly_linked_list_0.__str__()
>       assert str_0 == '[None]'
E       AssertionError

DYNAMOSA-MOSA/test_stack3_MOSA.py:54: AssertionError
[*] Mutation score [145.23042 s]: 75.6%
   - all: 155
   - killed: 91 (58.7%)
   - survived: 30 (19.4%)
   - incompetent: 32 (20.6%)
   - timeout: 2 (1.3%)
